
package nic.watersoft.masters;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.BatchUpdateException;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;

import javax.imageio.IIOImage;
import javax.imageio.ImageIO;
import javax.imageio.ImageWriteParam;
import javax.imageio.ImageWriter;
import javax.imageio.stream.ImageOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.sql.DataSource;
import org.apache.struts.action.ActionServlet;
import org.apache.struts.upload.FormFile;

import nic.watersoft.commons.CommonLists;
import nic.watersoft.commons.DAOMessage;
import nic.watersoft.commons.Debug;
import nic.watersoft.commons.ImageDocumentSanitizerImpl;
import nic.watersoft.commons.LabelValueBean;
import nic.watersoft.commons.RwsOffices;
import nic.watersoft.works.WorksData1;

public class RwsMasterData {

	public static int connCount = 0;

	Connection conn = null;
	Statement stmt = null;
	Statement stmt1 = null;
	Statement stmt2 = null;
	Statement stmt3 = null;
	Statement stmt4 = null;
	ResultSet rs = null;
	static ResultSetMetaData rsm = null;
	ResultSet rs1 = null;
	ResultSet rs2 = null;
	ResultSet rs3 = null;
	ResultSet rs4 = null;
	PreparedStatement pstmt = null, pstmt1 = null;
	static PreparedStatement ps = null, ps1 = null;
	static SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
	private static LabelValueBean labelValueBean;
	public static String errorMessage;


	public RwsMasterData() {
		connCount++;
	}

	public void closeAll() throws Exception {
		if (rs != null) {
			try {
				rs.close();
			} catch (Exception e) {
				Debug.println("The Exception in rwsMasterData" + e);
			}
			rs = null;
		}
		if (rs1 != null) {
			try {
				rs1.close();
			} catch (Exception e) {
				Debug.println("The Exception in rwsMasterData" + e);
			}
			rs1 = null;
		}
		if (rs2 != null) {
			try {
				rs2.close();
			} catch (Exception e) {
				Debug.println("The Exception in rwsMasterData" + e);
			}
			rs2 = null;
		}
		if (rs3 != null) {
			try {
				rs3.close();
			} catch (Exception e) {
				Debug.println("The Exception in rwsMasterData" + e);
			}
			rs3 = null;
		}
		if (rs4 != null) {
			try {
				rs4.close();
			} catch (Exception e) {
				Debug.println("The Exception in rwsMasterData" + e);
			}
			rs4 = null;
		}
		if (stmt != null) {
			try {
				stmt.close();
			} catch (Exception e) {
				Debug.println("The Exception in closeAll=" + e);
			}
			stmt = null;
		}
		if (stmt1 != null) {
			try {
				stmt1.close();
			} catch (Exception e) {
				Debug.println("The Exception in closeAll=" + e);
			}
			stmt1 = null;
		}
		if (stmt2 != null) {
			try {
				stmt2.close();
			} catch (Exception e) {
				Debug.println("The Exception in closeAll=" + e);
			}
			stmt2 = null;
		}
		if (stmt3 != null) {
			try {
				stmt3.close();
			} catch (Exception e) {
				Debug.println("The Exception in closeAll=" + e);
			}
			stmt3 = null;
		}
		if (stmt4 != null) {
			try {
				stmt4.close();
			} catch (Exception e) {
				Debug.println("The Exception in closeAll=" + e);
			}
			stmt4 = null;
		}
		if (ps != null) {
			try {
				ps.close();
			} catch (Exception e) {
				Debug.println("The Exception in closeAll=" + e);
			}
			ps = null;
		}
		// D
		if (pstmt != null) {
			try {
				pstmt.close();
			} catch (Exception e) {
				Debug.println("The Exception in closeAll=" + e);
			}
			pstmt = null;
		}
		if (conn != null) {
			try {

				// Debug.println("closing connection");
				conn.close();
				if (conn.isClosed())
					connCount--;
				// Debug.println("ConnCount is "+connCount);
			} catch (Exception e) {
				Debug.println("The Exception in closeAll=" + e);
			}
			conn = null;
		}

	}

	
	public int insertMandalSubDivisionName(String sdname, String dcode, String doc, String sdoc) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int SubCount = 0;
		String query = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			query = "update  rws_subdivision_office_tbl  set subdivision_office_name=?"
					+ " where subdivision_office_code=? and division_office_code=?" + " and circle_office_code=?";
			rwsMasterData.pstmt = conn.prepareStatement(query);
			rwsMasterData.pstmt.setString(1, sdname);
			rwsMasterData.pstmt.setString(2, sdoc);
			rwsMasterData.pstmt.setString(3, doc);
			rwsMasterData.pstmt.setString(4, dcode);
			SubCount = rwsMasterData.pstmt.executeUpdate();
			
		} catch (Exception e) {
			System.out.println("Exception at insertMandalSubDivisionName " + e);// e.printStackTrace();
		} finally {
			try {
				if (conn != null)
					conn.close();
				if (stmt != null)
					stmt.close();
			} catch (SQLException e) {
				System.out.println(
						"Exception at finally block of insertMandalSubDivisionName " + e);// e.printStackTrace();
			}
		}
		return SubCount;
	}

	public static int insertMandalSubDivisionCon(RwsMaster rwsMaster) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		PreparedStatement newst = null, st3 = null, st4 = null, st5 = null, st6 = null, st7 = null;
		Statement st1 = null;
		ResultSet rs = null, rs3 = null, rs4 = null, rs5 = null, rs6 = null, rs7 = null;
		Connection conn = null;
		String q = "", q1 = "", q2 = "";
		String oldoffcode = "", newoffcode = "";
		String query = "";
		String query1 = "";
		String query2 = "";
		String query3 = "";
		String query4 = "";
		int p = 0;
		int i = 0;
		int ochange = 0;
		String k = "";
		String serverdate = "";
		String qry7 = "";
		int code = 0;
		String codeexists = "";
		try {
			conn = RwsOffices.getConn();
			conn.setAutoCommit(false);
			WorksData1 worksData1 = new WorksData1();
			st1 = conn.createStatement();
			serverdate = worksData1.getServerDate();
			q = "update rws_mandal_subdivision_tbl "
					+ " set subdivision_office_code='" + rwsMaster.getSdoc()
					+ "' , division_office_code='" + rwsMaster.getDoc()
					+ "'  where dcode='" + rwsMaster.getDcode() + "' "
					+ "and division_office_code='"
					+ rwsMaster.getDivisionCode()
					+ "' and  subdivision_office_code='"
					+ rwsMaster.getSubdivision() + "' and mcode='"
					+ rwsMaster.getMandal() + "'";
			st1.addBatch(q);
			oldoffcode = "1" + rwsMaster.getDcode()
					+ rwsMaster.getDivisionCode() + rwsMaster.getSubdivision();
			newoffcode = "1" + rwsMaster.getDcode() + rwsMaster.getDoc()
					+ rwsMaster.getSdoc();
			
			qry7 = "select count(*) from rws_office_change_tbl where office_code_exist= ? and office_code_new= ? ";
			st7 = conn.prepareStatement(qry7);
			st7.setString(1, oldoffcode);
			st7.setString(2, newoffcode);
			rs7 = st7.executeQuery();
			while (rs7.next()) {
				code = rs7.getInt(1);
			}
			if (code == 1) {
				codeexists = "data";
			} else {
				codeexists = "nodata";
			}
			
			if (codeexists.equals("nodata")) {
				query4 = "insert into rws_office_change_tbl(office_code_exist,office_code_new,update_date) values(?, ?, to_date( ? ,'dd/mm/yyyy'))";
				st6 = conn.prepareStatement(query4);
				st6.setString(1, oldoffcode);
				st6.setString(2, newoffcode);
				st6.setString(3, serverdate);
				ochange = st6.executeUpdate();
			}

			query2 = "select count(*) from rws_work_office_change_tbl where  office_code_exist=? and office_code_new= ? ";
			st5 = conn.prepareStatement(query2);
			st5.setString(1, oldoffcode);
			st5.setString(2, newoffcode);
			rs5 = st5.executeQuery();
			while (rs5.next()) {
				i = rs5.getInt(1);
			}		
			if (i > 1) {
				k = "data";
			} else {
				k = "nodata";
			}
			
			if (k.equals("nodata")) {
				query = "SELECT WORK_ID FROM RWS_WORK_ADMN_TBL WHERE SUBSTR(LEAD_HABITATION,1,2)= ? AND SUBSTR(LEAD_HABITATION,6,2)= ? AND OFFICE_CODE= ? ";
				st3 = conn.prepareStatement(query);
				st3.setString(1, rwsMaster.getDcode());
				st3.setString(2, rwsMaster.getMandal());
				st3.setString(3, oldoffcode);
				rs3 = st3.executeQuery();
				while (rs3.next()) {
					query1 = "insert into rws_work_office_change_tbl(work_id,office_code_exist,office_code_new,update_date) values( ? , ? , ? ,to_date( ? ,'dd/mm/yyyy'))";
					st4 = conn.prepareStatement(query1);
					st4.setString(1, rs3.getString(1));
					st4.setString(2, oldoffcode);
					st4.setString(3, newoffcode);
					st4.setString(4, serverdate);
					p = st4.executeUpdate();
				}
			}
			q1 = "update rws_work_admn_tbl set office_code='" + newoffcode
					+ "' where  " + "substr(lead_habitation,1,2)='"
					+ rwsMaster.getDcode() + "' "
					+ "and substr(lead_habitation,6,2)='"
					+ rwsMaster.getMandal() + "' " + "and office_code='"
					+ oldoffcode + "'";
			st1.addBatch(q1);	
			q2 = "update rws_asset_mast_tbl set  subdivision_office_code='"
					+ rwsMaster.getSdoc() + "' , division_office_code='"
					+ rwsMaster.getDoc() + "'" + "where substr(hab_code,1,2)='"
					+ rwsMaster.getDcode() + "' and substr(hab_code,6,2)='"
					+ rwsMaster.getMandal() + "'"
					+ " and division_office_code='"
					+ rwsMaster.getDivisionCode()
					+ "' and subdivision_office_code='"
					+ rwsMaster.getSubdivision() + "'";
			st1.addBatch(q2);
			
			int[] countt = st1.executeBatch();
			rowCount = countt.length;
			if (rowCount > 0) {
				conn.setAutoCommit(true);
				conn.commit();
			}			
		} catch (Exception e) {
			System.out.println("The Exception is in RwsMasterData insertMandalSubDivisionCon : "+e.getMessage());
			try {
				conn.rollback();				
			} catch (SQLException e1) {
				System.out.println("The Exception is in RwsMasterData insertMandalSubDivisionCon : "+e.getMessage());
			}
		} finally {
			try {

				if (st1 != null)
					st1.close();
				if (rs != null)
					rs.close();
				if (st5 != null)
					st5.close();
				if (rs5 != null)
					rs5.close();
				if (st3 != null)
					st3.close();
				if (rs3 != null)
					rs3.close();
				if (st4 != null)
					st4.close();
				if (st7 != null)
					st7.close();
				if (rs7 != null)
					rs7.close();
				if (st6 != null)
					st6.close();
				if (conn != null)
					conn.close();
			} catch (Exception ee) {
				System.out.println("The Exception is in RwsMasterData insertMandalSubDivisionCon Finally : "+ee.getMessage());
			}
		}
		return rowCount;
	}
	
	public static int insertContam(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;

		try {
			rwsMasterData.conn = RwsOffices.getConn();
			String query = "insert into RWS_CONTAMINATION_TBL values(?,?)";

			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt.setString(1, rwsMaster.getContamCode());
			rwsMasterData.pstmt.setString(2, rwsMaster.getContamName().toUpperCase());

			rowCount = rwsMasterData.pstmt.executeUpdate();

		} catch (Exception e) {

			System.err.println("The Exception in insertContam" + e);
		}

		finally {
			rwsMasterData.closeAll();
		}
		return rowCount;
	}

	

	public static RwsMaster getContam(String contamCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();

			rwsMasterData.pstmt = rwsMasterData.conn
					.prepareStatement("select * from RWS_CONTAMINATION_TBL where CONTAMINATION_CODE=? ");
			rwsMasterData.pstmt.setString(1, contamCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setContamCode(rwsMasterData.rs.getString(1));
				rwsMaster.setContamName(rwsMasterData.rs.getString(2));
			}
		} catch (Exception e) {
			Debug.println("The Exception in getContam" + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return rwsMaster;
	}

	

	public static ArrayList getContams(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList contams = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			String query = "select * from RWS_CONTAMINATION_TBL order by CONTAMINATION_CODE";
			ps = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.rs = ps.executeQuery();

			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setContamCode(rwsMasterData.rs.getString(1));
				rwsMaster.setContamName(rwsMasterData.rs.getString(2));

				rwsMaster.setContamNoName(rwsMasterData.rs.getString(1) + " - " + rwsMasterData.rs.getString(2));

				contams.add(rwsMaster);
			}
		} catch (Exception e) {
			System.out.println("The Exception in getContams " + e);
		} finally {
			rwsMasterData.closeAll();
			if (ps != null) {
				ps.close();
			}
		}
		return contams;
	}

	

	public static int removeContam(String contamCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rcount = 0;

		try {

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn
					.prepareStatement("delete  from RWS_CONTAMINATION_TBL where CONTAMINATION_CODE=? ");
			rwsMasterData.pstmt.setString(1, contamCode);
			rcount = rwsMasterData.pstmt.executeUpdate();
		} catch (Exception e) {
			Debug.println("The Exception in removeContam=" + e);
		} finally {
			rwsMasterData.closeAll();

		}
		return rcount;
	}

	

	public static int updateContam(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int updateCount = 0;

		try {

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(
					"update  RWS_CONTAMINATION_TBL set CONTAMINATION_NAME=? " + "where CONTAMINATION_CODE=? ");
			rwsMasterData.pstmt.setString(1, rwsMaster.getContamName().toUpperCase());
			rwsMasterData.pstmt.setString(2, rwsMaster.getContamCode());
			updateCount = rwsMasterData.pstmt.executeUpdate();
		} catch (Exception e) {
			Debug.println("The Exception in updateContam" + e);
		} finally {
			rwsMasterData.closeAll();

		}
		return updateCount;
	}
	
	public static ArrayList getHeaddetails(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList details = new ArrayList();

		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(
					"select head_office_code,head_office_name,head_of_office_name,dbms_lob.getlength(IMAGE) from RWS_head_office_TBL order by head_office_code");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setHoc(rwsMasterData.rs.getString(1));
				rwsMaster.setHon(rwsMasterData.rs.getString(2));
				rwsMaster.setHoName(rwsMasterData.rs.getString(3));

				int a = rwsMasterData.rs.getInt(4);
				if (a == 0) {
					rwsMaster.setImageStatus("No");
				} else {
					rwsMaster.setImageStatus("Yes");
				}

				details.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The Exception in getContams" + e);
		} finally {
			rwsMasterData.closeAll();

			Debug.println("ConnCount after closing is " + connCount);
		}
		return details;
	}

	public static String getContamCode(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String code = null;

		try {

			rwsMasterData.conn = RwsOffices.getConn();
			String query = "SELECT MAX(to_number(CONTAMINATION_CODE))+1 FROM RWS_CONTAMINATION_TBL";
			ps = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.rs = ps.executeQuery();
			rwsMasterData.rs.next();
			code = rwsMasterData.rs.getString(1);
			if (code == null) {
				code = "01";
			} else if (code.length() == 1) {
				code = "0" + code;
			}

		} catch (Exception e) {
			System.out.println("The Exception in getContamCode=" + e);
		} finally {
			rwsMasterData.closeAll();
			if (ps != null) {
				ps.close();
			}
		}
		return code;
	}

	public static String getContamCode(String name, Connection conn) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		rwsMasterData.conn = conn;
		String acode = null;
		try {

			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(
					"SELECT CONTAMINATION_CODE FROM RWS_CONTAMINATION_TBL where CONTAMINATION_NAME='" + name + "'");
			rwsMasterData.rs.next();
			acode = rwsMasterData.rs.getString(1);
		} catch (Exception e) {
			Debug.println("The Exception in getContamCode=" + e);
		} finally {
			rwsMasterData.stmt.close();
			connCount--;

			Debug.println("ConnCount after closing is " + connCount);
		}
		return acode;
	}

	// ***********************Designation
	// Methods**************************************************
	public static int insertDesgn(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;

		try {
			// Debug.println("in insertDesgn");
			//
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rowCount = rwsMasterData.stmt.executeUpdate("insert into rws_designation_tbl values('"
					+ rwsMaster.getDesgnCode() + "','" + rwsMaster.getDesgnAcr().toUpperCase() + "','"
					+ rwsMaster.getDesgnName().toUpperCase() + "')");
		} catch (SQLException sqle) {
			if (sqle.getErrorCode() == 1)
				errorMessage = "Record with this name exists.";
			Debug.println("The Exception in insertDesgn " + sqle);
		} catch (Exception e) {

			Debug.println("The Exception in insertDesgn=" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static RwsMaster getDesgn(String desgnCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;

		try {
			// Debug.println("in getDesgn");
			//
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("select * from rws_designation_tbl where designation_code=" + desgnCode);
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setDesgnCode(rwsMasterData.rs.getString(1));
				rwsMaster.setDesgnAcr(rwsMasterData.rs.getString(2));
				rwsMaster.setDesgnName(rwsMasterData.rs.getString(3));
			}
		} catch (Exception e) {
			Debug.println("The Exception in getDesgn=" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rwsMaster;
	}

	public static ArrayList getWQLabs1(String circle) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList wqlabs = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			String qry = "select lab_code,lab_name from RWS_WATER_QUALITY_LAB_TBL l,rws_circle_office_tbl c where l.status <> 'UI' AND substr(office_code,2,2) =c.circle_office_code and circle_office_code= ? ";
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement(qry);
			rwsMasterData.ps.setString(1, circle);
			rwsMasterData.rs = rwsMasterData.ps.executeQuery();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setLabCode(rwsMasterData.rs.getString(1));
				rwsMaster.setLabName(rwsMasterData.rs.getString(2));
				rwsMaster.setLocation(rwsMasterData.rs.getString(2));
				wqlabs.add(rwsMaster);
			}

		} catch (Exception e) {
			System.out.println("The exception in RwsMasterData getWQLabs1 = "+e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return wqlabs;
	}

	public static ArrayList getBanks() throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList banks = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement("select * from rws_bank_tbl order by bank_code");
			rwsMasterData.rs = rwsMasterData.ps.executeQuery();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setBankCode(rwsMasterData.rs.getString(1));
				rwsMaster.setBankName(rwsMasterData.rs.getString(2));
				rwsMaster.setBankAbb(rwsMasterData.rs.getString(3));
				banks.add(rwsMaster);
			}
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData getBanks : " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return banks;
	}

	
	public static ArrayList getBranches() throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList branches = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement("select b.bank_name,branch_code,branch_name,micr_code,b.bank_code, nvl(circle_office_name,'-'),nvl(division_office_name,'-') from rws_branch_tbl a,rws_bank_tbl b,rws_circle_office_tbl d, rws_division_office_tbl e where a.bank_code=b.bank_code and d.circle_office_code=a.circle_code and D.CIRCLE_OFFICE_CODE=E.CIRCLE_OFFICE_CODE  AND e.division_office_code=a.div_code union select b.bank_name,branch_code,branch_name,micr_code,b.bank_code, '-','-' from rws_branch_tbl a,rws_bank_tbl b where a.bank_code=b.bank_code  and a.circle_code is null order by branch_code");
			rwsMasterData.rs = rwsMasterData.ps.executeQuery();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setBankName(rwsMasterData.rs.getString(1));
				rwsMaster.setBranchCode(rwsMasterData.rs.getString(2));
				rwsMaster.setBranchName(rwsMasterData.rs.getString(3));
				rwsMaster.setMicrCode(rwsMasterData.rs.getString(4));
				rwsMaster.setBankCode(rwsMasterData.rs.getString(5));
				rwsMaster.setCircleName(rwsMasterData.rs.getString(6));
				rwsMaster.setDivisionName(rwsMasterData.rs.getString(7));
				branches.add(rwsMaster);
			}
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData getBranches : " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return branches;
	}

	 
	public static ArrayList getBankAccountdetails() throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList bankdetails = new ArrayList();
		try {			
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement("select  circle_office_name,division_office_name , b.bank_name,a.branch_name,account_no,office_code from rws_branch_tbl a,rws_bank_tbl b ,rws_office_bank_account_tbl c ,rws_circle_office_tbl d, rws_division_office_tbl e where a.bank_code=b.bank_code and b.bank_code=c.bank_code and substr(c.office_code,2,2)=d.circle_office_code and substr(c.office_code,4,1)=e.division_office_code and a.branch_code=c.branch_code and d.circle_office_code=e.circle_office_code");
			rwsMasterData.rs = rwsMasterData.ps.executeQuery();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setCircleCode(rwsMasterData.rs.getString(1));
				rwsMaster.setDivisionCode(rwsMasterData.rs.getString(2));
				rwsMaster.setBankCode(rwsMasterData.rs.getString(3));
				rwsMaster.setBranchCode(rwsMasterData.rs.getString(4));
				rwsMaster.setAccNo(rwsMasterData.rs.getString(5));
				rwsMaster.setOffCode(rwsMasterData.rs.getString(6));
				bankdetails.add(rwsMaster);
			}
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData getBankAccountdetails : " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return bankdetails;
	}

	 
	public static int insertBank(RwsMaster rwsMaster) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {			
			rwsMasterData.conn = RwsOffices.getConn();
			String qqq = "insert into rws_bank_tbl values( ?, ?, ?)";
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement(qqq);
			rwsMasterData.ps.setString(1, rwsMaster.getBankCode());
			rwsMasterData.ps.setString(2, rwsMaster.getBankName().toUpperCase());
			rwsMasterData.ps.setString(3, rwsMaster.getBankAbb().toUpperCase());
			rowCount = rwsMasterData.ps.executeUpdate();
		} catch (SQLException sqle) {
			int errorCode = sqle.getErrorCode();
			if (errorCode == 2)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData insertBank : " + e.getMessage());
		}
		finally {
			rwsMasterData.closeAll();
		}
		return rowCount;
	}

	
	public static int insertBranch(RwsMaster rwsMaster) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {			
			rwsMasterData.conn = RwsOffices.getConn();			
			String qqq = "insert into rws_branch_tbl values( ?, ?, ?, ?, ?, ?, '')";
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement(qqq);
			rwsMasterData.ps.setString(1, rwsMaster.getBcode());
			rwsMasterData.ps.setString(2, rwsMaster.getBranchCode());
			rwsMasterData.ps.setString(3, rwsMaster.getBranchName().toUpperCase());
			rwsMasterData.ps.setString(4, rwsMaster.getMicrCode());
			rwsMasterData.ps.setString(5, rwsMaster.getCircleCode());
			rwsMasterData.ps.setString(6, rwsMaster.getDivisionCode());
			rowCount = rwsMasterData.ps.executeUpdate();

		} catch (SQLException sqle) {
			int errorCode = sqle.getErrorCode();
			if (errorCode == 2)
				errorMessage = "Branch Already Exists with given Branch Code";
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData insertBranch : " + e.getMessage());
		}
		finally {
			rwsMasterData.closeAll();
		}
		return rowCount;
	}

	 
	public static int insertAccountDetails(RwsMaster rwsMaster) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0, rowCount1 = 0;
		try {
			String OffCode = "1" + rwsMaster.getCircleCode() + rwsMaster.getDivisionCode() + "00";			
			rwsMasterData.conn = RwsOffices.getConn();
			String qq = "select * from  RWS_OFFICE_BANK_ACCOUNT_TBL where office_code= ? ";
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement(qq);
			rwsMasterData.ps.setString(1, OffCode);
			rowCount1 = rwsMasterData.ps.executeUpdate();
			if (rowCount1 > 0) {
					errorMessage = "Account Number Already There For this Criteria";
				} else {
				String qqq = "insert into RWS_OFFICE_BANK_ACCOUNT_TBL  values( ? , ? , ? , ? ,bank_map_seq.NEXTVAL)";
				rwsMasterData.ps1 = rwsMasterData.conn.prepareStatement(qqq);
				rwsMasterData.ps1.setString(1, OffCode);
				rwsMasterData.ps1.setString(2, rwsMaster.getBankCode());
				rwsMasterData.ps1.setString(3, rwsMaster.getBranchCode());
				rwsMasterData.ps1.setString(4, rwsMaster.getAccNo());
				rowCount = rwsMasterData.ps1.executeUpdate();
			}

		} catch (SQLException sqle) {
			int errorCode = sqle.getErrorCode();
			if (errorCode == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData insertAccountDetails : " + e.getMessage());
		}
		finally {
			rwsMasterData.closeAll();
		}
		return rowCount;
	}

	 
	public static RwsMaster getbank(String bankCode) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		try {			
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement("select * from rws_bank_tbl where bank_code= ? ");
			rwsMasterData.ps.setString(1, bankCode);
			rwsMasterData.rs = rwsMasterData.ps.executeQuery();
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setBankCode(rwsMasterData.rs.getString(1));
				rwsMaster.setBankName(rwsMasterData.rs.getString(2));
				rwsMaster.setBankAbb(rwsMasterData.rs.getString(3));
			}
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData getbank : " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return rwsMaster;
	}

	 
	public static RwsMaster getbranch(String branchCode, String bankCode) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		try {			
			rwsMasterData.conn = RwsOffices.getConn();
			String q = "select b.bank_name,branch_code,branch_name,micr_code,a.bank_code,nvl(circle_code,'-'),nvl(div_code,'-') from rws_branch_tbl a,rws_bank_tbl b  where  a.bank_code=b.bank_code and branch_code= ? and a.bank_code= ?";
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement(q);
			rwsMasterData.ps.setString(1, branchCode);
			rwsMasterData.ps.setString(2, bankCode);
			rwsMasterData.rs = rwsMasterData.ps.executeQuery();			
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setBankName(rwsMasterData.rs.getString(1));
				rwsMaster.setBranchCode(rwsMasterData.rs.getString(2));
				rwsMaster.setBranchName(rwsMasterData.rs.getString(3));
				rwsMaster.setMicrCode(rwsMasterData.rs.getString(4));
				rwsMaster.setBankCode(rwsMasterData.rs.getString(5));
				rwsMaster.setCircleCode(rwsMasterData.rs.getString(6));
				rwsMaster.setDivisionCode(rwsMasterData.rs.getString(7));
			}
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData getbranch : " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return rwsMaster;
	}

	 
	public static RwsMaster getBankAcDetails(String accNo, String offcode) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		try {			
			rwsMasterData.conn = RwsOffices.getConn();
			String q = "select circle_office_name,division_office_name,bank_name ,branch_name ,account_no,b.circle_office_code,division_office_code,a.bank_code,a.branch_code,office_code from rws_office_bank_account_tbl a,rws_circle_office_tbl b,rws_division_office_tbl c ,rws_bank_tbl d,rws_branch_tbl e  where substr(office_code,2,2)=b.circle_office_code  and substr(office_code,4,1)=c.division_office_code and  b.circle_office_code=c.circle_office_code and  account_no = ? and a.bank_code=d.bank_code and a.branch_code=e.branch_code";
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement(q);
			rwsMasterData.ps.setString(1, accNo);
			rwsMasterData.rs = rwsMasterData.ps.executeQuery();			
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setCircleName(rwsMasterData.rs.getString(1));
				rwsMaster.setDivisionName(rwsMasterData.rs.getString(2));
				rwsMaster.setBankName(rwsMasterData.rs.getString(3));
				rwsMaster.setBranchName(rwsMasterData.rs.getString(4));
				rwsMaster.setAccNo(rwsMasterData.rs.getString(5));
				rwsMaster.setCircleCode(rwsMasterData.rs.getString(6));
				rwsMaster.setDivisionCode(rwsMasterData.rs.getString(7));
				rwsMaster.setBankCode(rwsMasterData.rs.getString(8));
				rwsMaster.setBranchCode(rwsMasterData.rs.getString(9));
				rwsMaster.setOffCode(rwsMasterData.rs.getString(10));
			}
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData getBankAcDetails : " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return rwsMaster;
	}

	 
	public static int removeBank(String bankCode) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rcount = 0;
		try {			
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement("delete  from rws_bank_tbl where bank_code= ? ");
			rwsMasterData.ps.setString(1, bankCode);
			rcount = rwsMasterData.ps.executeUpdate();
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData removeBank : " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return rcount;
	}

	
	public static int removeBranch(String branchCode, String bankCode) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rcount = 0;
		try {			
			rwsMasterData.conn = RwsOffices.getConn();
			String q = "DELETE  FROM RWS_BRANCH_TBL WHERE BRANCH_CODE= ? AND BANK_CODE= ? ";
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement(q);
			rwsMasterData.ps.setString(1, branchCode);
			rwsMasterData.ps.setString(2, bankCode);
			rcount = rwsMasterData.ps.executeUpdate();			
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData removeBranch : " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return rcount;
	}

	 
	public static int removeAccDetails(String accno) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rcount = 0, rcount1 = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			String q1 = "select * from RWS_BILL_BANK_SETTLEMENT_TBL  where account_no= ? ";
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement(q1);
			rwsMasterData.ps.setString(1, accno);
			rcount1 = rwsMasterData.ps.executeUpdate();
			if (rcount1 > 0) {
				errorMessage = "Transactions  are there for this AccNo so Deletion is Not Possible";
			} else {
				rwsMasterData.ps1 = rwsMasterData.conn.prepareStatement("delete  from rws_office_bank_account_tbl where account_no= ? ");
				rwsMasterData.ps1.setString(1, accno);
				rcount = rwsMasterData.ps1.executeUpdate();
			}
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData removeAccDetails : " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return rcount;
	}

	
	public ArrayList getBankcode() throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		ArrayList bankcode = new ArrayList();
		String query = "";
		try {
			query = "SELECT bank_code ,UPPER(bank_name) FROM rws_bank_tbl";
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.rs = rwsMasterData.ps.executeQuery();
			while (rwsMasterData.rs.next()) {
				labelValueBean = new LabelValueBean();
				labelValueBean.setValue(rwsMasterData.rs.getString(1));
				labelValueBean.setLabel(rwsMasterData.rs.getString(2));
				bankcode.add(labelValueBean);
			}
		} catch (Exception ee) {
			System.out.println("The Exception in RwsMasterData getBankcode : " + ee.getMessage());
		} finally {
			try {
				closeAll();
			} catch (Exception e) {
				System.out.println("The Exception in RwsMasterData getBankcode : " + e.getMessage());
			}
		}
		return bankcode;
	}

	public ArrayList getCircleCode() throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		ArrayList circlecode = new ArrayList();
		String query = "";
		try {
			query = "SELECT circle_office_code, circle_office_name  FROM RWS_circle_office_tbl order by circle_office_code";
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.rs = rwsMasterData.ps.executeQuery();
			while (rwsMasterData.rs.next()) {
				labelValueBean = new LabelValueBean();
				labelValueBean.setValue(rwsMasterData.rs.getString(1));
				labelValueBean.setLabel(rwsMasterData.rs.getString(2));
				circlecode.add(labelValueBean);
			}
		} catch (Exception ee) {
			System.out.println("The Exception in RwsMasterData getCircleCode : " + ee.getMessage());
		} finally {
			try {
				closeAll();
			} catch (Exception e) {
				System.out.println("The Exception in RwsMasterData getCircleCode : " + e.getMessage());
			}
		}
		return circlecode;
	}

	
	public ArrayList getDivisionCode(String ccode) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		ArrayList divisioncode = new ArrayList();
		String query = "";
		try {
			query = "select division_office_code,division_office_name from  RWS_division_office_tbl where circle_office_code= ? ";
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.ps.setString(1, ccode);
			rwsMasterData.rs = rwsMasterData.ps.executeQuery();
			while (rwsMasterData.rs.next()) {
				labelValueBean = new LabelValueBean();
				labelValueBean.setValue(rwsMasterData.rs.getString(1));
				labelValueBean.setLabel(rwsMasterData.rs.getString(2));
				divisioncode.add(labelValueBean);
			}
		} catch (Exception ee) {
			System.out.println("The Exception in RwsMasterData getDivisionCode : " + ee.getMessage());
		} finally {
			try {
				closeAll();
			} catch (Exception e) {
				System.out.println("The Exception in RwsMasterData getDivisionCode : " + e.getMessage());
			}
		}
		return divisioncode;
	}
	
	 
	public ArrayList getBranchcode(String bankcode, String ccode, String dcode)	throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		ArrayList branchcode = new ArrayList();
		String query = "";
		try {
			query = "SELECT branch_code ,UPPER(branch_name) FROM rws_branch_tbl where bank_code= ? and circle_code= ? and div_code= ? ";
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.ps.setString(1, bankcode);
			rwsMasterData.ps.setString(2, ccode);
			rwsMasterData.ps.setString(3, dcode);
			rwsMasterData.rs = rwsMasterData.ps.executeQuery();
			while (rwsMasterData.rs.next()) {
				labelValueBean = new LabelValueBean();
				labelValueBean.setValue(rwsMasterData.rs.getString(1));
				labelValueBean.setLabel(rwsMasterData.rs.getString(2));
				branchcode.add(labelValueBean);
			}
		} catch (Exception ee) {
			System.out.println("The Exception in RwsMasterData getBranchcode : " + ee.getMessage());
		} finally {
			try {
				closeAll();
			} catch (Exception e) {
				System.out.println("The Exception in RwsMasterData getBranchcode : " + e.getMessage());
			}
		}
		return branchcode;
	}

	 
	public static int updateBank(RwsMaster rwsMaster) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int updateCount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			String qq = "update  rws_bank_tbl set bank_name= ? ,bank_abbr= ? where bank_code= ? ";
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement(qq);
			rwsMasterData.ps.setString(1, rwsMaster.getBankName().toUpperCase());
			rwsMasterData.ps.setString(2, rwsMaster.getBankAbb().toUpperCase());
			rwsMasterData.ps.setString(3, rwsMaster.getBankCode());
			updateCount = rwsMasterData.ps.executeUpdate();
		} catch (SQLException sqle) {
			if (sqle.getErrorCode() == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData updateBank : " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();			
		}
		return updateCount;
	}

	
	public static int updateBranch(RwsMaster rwsMaster) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int updateCount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			String qq = "update  rws_branch_tbl set branch_code= ? ,branch_name= ? ,micr_code= ? ,circle_code= ? ,div_code= ? where branch_code= ? ";
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement(qq);
			rwsMasterData.ps.setString(1, rwsMaster.getBranchCode());
			rwsMasterData.ps.setString(2, rwsMaster.getBranchName().toUpperCase());
			rwsMasterData.ps.setString(3, rwsMaster.getMicrCode());
			rwsMasterData.ps.setString(4, rwsMaster.getCircleCode());
			rwsMasterData.ps.setString(5, rwsMaster.getDivisionCode());
			rwsMasterData.ps.setString(6, rwsMaster.getBranchCode());
			updateCount = rwsMasterData.ps.executeUpdate();
		} catch (SQLException sqle) {
			if (sqle.getErrorCode() == 1)
				errorMessage = "Record with this name exists.";			
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData updateBranch : " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();			
		}
		return updateCount;
	}

	 
	public static int updateAccDetails(RwsMaster rwsMaster) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int updateCount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			String qq = "update  rws_office_bank_account_tbl set account_no= ? where branch_code= ? and bank_code= ? and office_code= ? ";
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement(qq);
			rwsMasterData.ps.setString(1, rwsMaster.getAccNo());
			rwsMasterData.ps.setString(2, rwsMaster.getBranchCode());
			rwsMasterData.ps.setString(3, rwsMaster.getBankCode());
			rwsMasterData.ps.setString(4, rwsMaster.getOffCode());
			updateCount = rwsMasterData.ps.executeUpdate();
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData updateAccDetails : " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return updateCount;
	}

	public static String getBankCode() throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String code = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement("SELECT MAX(to_number(bank_code))+1 FROM rws_bank_tbl");
			rwsMasterData.rs = rwsMasterData.ps.executeQuery();
			rwsMasterData.rs.next();
			code = rwsMasterData.rs.getString(1);
			if (code == null) {
				code = "01";
			} else if (code.length() == 1) {
				code = "0" + code;
			}
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData getBankCode : " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return code;
	}

	
	public static String getBranchCode() throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String code = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement("SELECT MAX(to_number(branch_code))+1 FROM rws_branch_tbl");
			rwsMasterData.rs = rwsMasterData.ps.executeQuery();
			rwsMasterData.rs.next();
			code = rwsMasterData.rs.getString(1);
			if (code == null) {
				code = "01";
			} else if (code.length() == 1) {
				code = "0" + code;
			}
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData getBranchCode : " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return code;
	}
	
	public static ArrayList getDesgns(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList desgns = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(
					"select * from rws_designation_tbl WHERE designation_code=? or designation_code =? or designation_code=?");
			rwsMasterData.pstmt.setInt(1, 13);
			rwsMasterData.pstmt.setInt(2, 14);
			rwsMasterData.pstmt.setInt(3, 15);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setDesgnCode(rwsMasterData.rs.getString(1));
				rwsMaster.setDesgnAcr(rwsMasterData.rs.getString(2));
				rwsMaster.setDesgnName(rwsMasterData.rs.getString(3));
				desgns.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The Exception in getDesgns in RwsMasterData " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return desgns;
	}

	public static int removeDesgn(String desgnCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rcount = 0;

		try {
			// Debug.println("in removeDesgn");
			//
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rcount = rwsMasterData.stmt
					.executeUpdate("delete  from rws_designation_tbl where designation_code=" + desgnCode);
		} catch (Exception e) {
			Debug.println("The Exception in removeDesgn=" + e);
		} finally {

			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rcount;
	}

	public static int updateDesgn(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int updateCount = 0;

		try {
			// Debug.println("in updateDesgn");
			//
			rwsMasterData.conn = RwsOffices.getConn();
			ps = rwsMasterData.conn.prepareStatement(
					"update rws_designation_tbl set designation_name=?,designation_acr=?  where designation_code=?");
			ps.setString(1, rwsMaster.getDesgnName().toUpperCase());
			ps.setString(2, rwsMaster.getDesgnAcr().toUpperCase());
			ps.setString(3, rwsMaster.getDesgnCode());
			updateCount = ps.executeUpdate();
		} catch (SQLException sqle) {
			if (sqle.getErrorCode() == 1)
				errorMessage = "Record with this name exists.";
			Debug.println("The Exception in insertDesgn " + sqle);
		} catch (Exception e) {
			Debug.println("The Exception in updateDesgn=" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return updateCount;
	}

	public static String getDesgnCode(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String code = null;

		try {
			// Debug.println("in getDesgnCode");
			//
			rwsMasterData.conn = RwsOffices.getConn();

			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("SELECT MAX(to_number(DESIGNATION_CODE))+1 FROM rws_designation_tbl");
			rwsMasterData.rs.next();
			code = rwsMasterData.rs.getString(1);
			if (code == null)
				code = "1";
		} catch (Exception e) {
			Debug.println("The Exception in getDesgnCode" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return code;
	}

	// -----------------------------qualification
	// methods---------------------------------

	public static int insertQual(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;

		try {
			// Debug.println("in insertQual");
			//
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rowCount = rwsMasterData.stmt.executeUpdate("insert into RWS_QUALIFICATION_TBL values("
					+ rwsMaster.getQualCode() + ",'" + rwsMaster.getQualName().toUpperCase() + "')");

		} catch (SQLException sqle) {
			if (sqle.getErrorCode() == 1)
				errorMessage = "Record with this name exists.";
			Debug.println("The Exception in updateQual " + sqle);
		} catch (Exception e) {
			Debug.println("The Exception in insertQual=" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static RwsMaster getQual(String qualCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;

		try {
			// Debug.println("in getQual");
			//
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("select * from RWS_QUALIFICATION_TBL where qual_code=" + qualCode);
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setQualCode(rwsMasterData.rs.getString(1));
				rwsMaster.setQualName(rwsMasterData.rs.getString(2));
			}
		} catch (Exception e) {
			Debug.println("The Exception in getQual=" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rwsMaster;
	}

	public static ArrayList getQuals(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList quals = new ArrayList();

		try {
		//	Debug.println("in getQuals");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("select * from RWS_QUALIFICATION_TBL order by qual_code");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setQualCode(rwsMasterData.rs.getString(1));
				rwsMaster.setQualName(rwsMasterData.rs.getString(2));

				quals.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The Exception in getQuals" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return quals;
	}

	public static int removeQual(String qualCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rcount = 0;

		try {
			//Debug.println("in removeQual");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rcount = rwsMasterData.stmt.executeUpdate("delete  from RWS_QUALIFICATION_TBL where qual_code=" + qualCode);
		} catch (Exception e) {
			Debug.println("The Exception in removeQual=" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rcount;
	}

	public static int updateQual(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int ans = 0;

		try {
			//Debug.println("in updateQual");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			ans = rwsMasterData.stmt.executeUpdate("update  RWS_QUALIFICATION_TBL set qual_name='"
					+ rwsMaster.getQualName().toUpperCase() + "'  where qual_code=" + rwsMaster.getQualCode());
		} catch (SQLException sqle) {
			if (sqle.getErrorCode() == 1)
				errorMessage = "Record with this name exists.";
			Debug.println("The Exception in updateQual " + sqle);
		} catch (Exception e) {
			Debug.println("The Exception in updateQual" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return ans;
	}

	public static String getQualCode(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String qcode = null;

		try {
		//	Debug.println("in getQualCode");

			rwsMasterData.conn = RwsOffices.getConn();

			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("SELECT MAX(to_number(QUAL_CODE))+1 FROM RWS_QUALIFICATION_TBL");
			rwsMasterData.rs.next();
			qcode = rwsMasterData.rs.getString(1);
			if (qcode == null) {
				qcode = "1";
			}
		} catch (Exception e) {
			Debug.println("The Exception in getQualCode=" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return qcode;
	}

	public static String getEmployee(String hoc, String coc, String doc, String sdoc, DataSource dataSource)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;

		try {
			//Debug.println("in getEmployee");
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("select count(*) from  rws_employee_tbl where substr(OFFICE_CODE,1,1)='" + hoc
							+ "' and substr(OFFICE_CODE,2,2)='" + coc + "' and substr(OFFICE_CODE,4,1)='" + doc
							+ "' and substr(OFFICE_CODE,5,2)='" + sdoc + "'");
			if (rwsMasterData.rs.next()) {
				rowCount = rwsMasterData.rs.getInt(1);
			}
		} catch (Exception e) {
			Debug.println("error in getEmp=" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		if (rowCount >= 1)
			return "1";
		else
			return "0";
	}

	public static ArrayList getEmps(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList emps = new ArrayList();

		try {
			//Debug.println("in getEmps");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();

			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("select * from rws_employee_tbl order by to_number(employee_code)");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setEmpcode(rwsMasterData.rs.getString("EMPLOYEE_CODE"));
				rwsMaster.setEmpname(rwsMasterData.rs.getString("EMPLOYEE_NAME"));
				rwsMaster.setRoc(rwsMasterData.rs.getString("OFFICE_CODE"));
				rwsMaster.setHoc(rwsMasterData.rs.getString("SECTOR"));
				if (rwsMasterData.rs.getDate("DATE_OF_BIRTH") != null) {
					rwsMaster.setDob(df.format(rwsMasterData.rs.getDate("DATE_OF_BIRTH")));
				}
				if (rwsMasterData.rs.getDate("APPOINTMENT_DATE") != null) {
					rwsMaster.setAppointdate(df.format(rwsMasterData.rs.getDate("APPOINTMENT_DATE")));
				}
				if (rwsMasterData.rs.getDate("DATE_OF_JOINING") != null) {
					rwsMaster.setDoj(df.format(rwsMasterData.rs.getDate("DATE_OF_JOINING")));
				}
				if (rwsMasterData.rs.getDate("CURRENT_POST_HELD_FROM") != null) {
					rwsMaster.setCurrentpostdate(df.format(rwsMasterData.rs.getDate("CURRENT_POST_HELD_FROM")));
				}
				rwsMaster.setPhone(rwsMasterData.rs.getString("PHONE"));
				rwsMaster.setMobile(rwsMasterData.rs.getString("MOBILE"));
				rwsMaster.setTotalworkscomp(rwsMasterData.rs.getString("TOTAL_NO_WORKS_COMPLETED"));
				rwsMaster.setQual(rwsMasterData.rs.getString("QUAL_CODE"));
				try {
					rwsMaster.setQualName(getQualName(rwsMasterData.rs.getString("QUAL_CODE"), rwsMasterData.conn));
				} catch (Exception e) {
					Debug.println("the error in getEmps()= " + e);
				}
				try {
					rwsMaster.setAddqual1(getQualName(rwsMasterData.rs.getString("ADD_QUAL_1"), rwsMasterData.conn));
				} catch (Exception e) {
					Debug.println("the error in getEmps()= " + e);
				}
				try {
					rwsMaster.setAddqual2(getQualName(rwsMasterData.rs.getString("ADD_QUAL_2"), rwsMasterData.conn));
				} catch (Exception e) {
					Debug.println("the error in getEmps()= " + e);
				}
				rwsMaster.setHof(rwsMasterData.rs.getString("HEAD_OF_OFFICE"));
				rwsMaster.setPresentation(rwsMasterData.rs.getString("PRESENT_STATION_MANDAL"));
				rwsMaster.setOtherDet(rwsMasterData.rs.getString("OTHER_DETAILS"));
				rwsMaster.setDesgnCode(rwsMasterData.rs.getString("DESIGNATION_CODE"));
				rwsMaster.setCheckType(rwsMasterData.rs.getString("TYPE_OF_CHECK"));
				rwsMaster.setNoOfChecks(rwsMasterData.rs.getInt("NO_OF_CHECKS"));
				rwsMaster.setCheckPeriod(rwsMasterData.rs.getString("CHECK_PERIOD"));
				rwsMaster.setAppOrderRef(rwsMasterData.rs.getString("APPOINTMENT_ORDER_REF"));
				rwsMaster.setWorkSpecial(rwsMasterData.rs.getString("WORK_SPECIALIZATION"));
				rwsMaster.setPostCode(rwsMasterData.rs.getString("POST"));

				emps.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The error in getEmps" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return emps;
	}

	public static int removeEmp(String empcode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rcount = 0;
		try {
			// Debug.println("in removeEmp");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rcount = rwsMasterData.stmt
					.executeUpdate("delete  from rws_employee_tbl where employee_code='" + empcode + "'");
		} catch (Exception e) {
			Debug.println("The error in removeEmp" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rcount;
	}

	/*
	 * public static void updateEmp(RwsMaster rwsMaster, DataSource dataSource)
	 * throws Exception { RwsMasterData rwsMasterData=new RwsMasterData(); try {
	 * Debug.println("in updateEmp"); Debug.println("ConnCount is "+connCount);
	 * rwsMasterData.conn = RwsOffices.getConn();
	 * 
	 * ps = rwsMasterData.conn .prepareStatement("update rws_employee_tbl set
	 * employee_name=?,office_code=?,sector=?,date_of_birth=TO_DATE('" +
	 * rwsMaster.getDob() + "','dd/mm/yyyy'),appointment_date=TO_DATE('" +
	 * rwsMaster.getAppointdate() + "','dd/mm/yyyy'),date_of_joining=TO_DATE('" +
	 * rwsMaster.getDoj() + "','dd/mm/yyyy'),current_post_held_from=TO_DATE('" +
	 * rwsMaster.getCurrentpostdate() +
	 * "','dd/mm/yyyy'),phone=?,mobile=?,total_no_works_completed=?,QUAL_CODE=?,
	 * add_qual_1=?,add_qual_2=?,head_of_office=?,present_station_mandal=?,
	 * OTHER_DETAILS=?,DESIGNATION_CODE=?,TYPE_OF_CHECK=?,NO_OF_CHECKS=?,
	 * CHECK_PERIOD=?,APPOINTMENT_ORDER_REF=?,WORK_SPECIALIZATION=?,POST=? where
	 * employee_code=?");
	 * 
	 * ps.setString(1, rwsMaster.getEmpname().toUpperCase()); ps.setString(2,
	 * rwsMaster.getRoc()); ps.setString(3, rwsMaster.getHoc());
	 * //ps.setString(4,rwsMaster.getDob());
	 * //ps.setString(5,rwsMaster.getAppointdate());
	 * //ps.setString(6,rwsMaster.getDoj());
	 * //ps.setString(7,rwsMaster.getCurrentpostdate()); ps.setString(4,
	 * rwsMaster.getPhone()); ps.setString(5, rwsMaster.getMobile());
	 * ps.setString(6, rwsMaster.getTotalworkscomp()); ps.setString(7,
	 * rwsMaster.getQual()); ps.setString(8, rwsMaster.getAddqual1());
	 * ps.setString(9, rwsMaster.getAddqual2()); ps.setString(10,
	 * rwsMaster.getHof()); ps.setString(11, rwsMaster.getPresentation());
	 * ps.setString(12, rwsMaster.getOtherDet()); ps.setString(13,
	 * rwsMaster.getDesgnCode()); ps.setString(14, rwsMaster.getCheckType());
	 * ps.setInt(15, rwsMaster.getNoOfChecks()); ps.setString(16,
	 * rwsMaster.getCheckPeriod()); ps.setString(17, rwsMaster.getAppOrderRef());
	 * ps.setString(18, rwsMaster.getWorkSpecial()); ps.setString(19,
	 * rwsMaster.getPostCode()); ps.setString(20, rwsMaster.getEmpcode());
	 * 
	 * ps.executeUpdate(); } catch (Exception e) { Debug.println("The error in
	 * updateEmp" + e); } finally { rwsMasterData.closeAll();
	 * Debug.println("ConnCount after closing is "+connCount); } }
	 */
	// ******************************************EmpWork
	// Methods*********************************s
	public static ArrayList getEmpCodes(String hoc, String coc, String doc, String sdoc, DataSource dataSource)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList empcodes = new ArrayList();

		try {

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("SELECT * FROM RWS_EMPLOYEE_TBL WHERE (SUBSTR(OFFICE_CODE, 1, 1) = " + hoc
							+ ") AND (SUBSTR(OFFICE_CODE, 2, 2) = '" + coc + "') AND (SUBSTR(OFFICE_CODE, 4, 1) = "
							+ doc + ") AND (SUBSTR(OFFICE_CODE, 5, 2) = '" + sdoc + "')");

			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setEmpcode(rwsMasterData.rs.getString("employee_code"));
				rwsMaster.setEmpname(rwsMasterData.rs.getString("employee_name"));
				rwsMaster.setRoc(rwsMasterData.rs.getString("office_code"));
				String code = rwsMasterData.rs.getString("employee_code");
				String name = rwsMasterData.rs.getString("employee_name");
				rwsMaster.setDistNoName(code + " - " + name);
				empcodes.add(rwsMaster);

			}
		}

		catch (Exception e) {
			Debug.println("The error in getEmpCodes=" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return empcodes;
	}

	// *********************************Head Office
	// Methods*****************************
	public static String insertHead(RwsMaster rwsMaster, DataSource dataSource, String targetPath,
			ActionServlet servlet) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		String message = "";
		String qry = "";
		rowCount = 0;
		try {
			ImageDocumentSanitizerImpl documentSanitizerImpl = new ImageDocumentSanitizerImpl();
			FileOutputStream outputStream = null;
			FormFile formFile = null;
			FileInputStream fis = null;
			File scannedFile = null;
			File targetFile = null;
			rwsMasterData.conn = RwsOffices.getConn();
			String check = "select HEAD_OFFICE_CODE from rws_head_office_tbl where HEAD_OFFICE_CODE=?";
			rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement(check);
			rwsMasterData.pstmt1.setString(1, rwsMaster.getHoc());
			rwsMasterData.rs = rwsMasterData.pstmt1.executeQuery();
			if (rwsMasterData.rs.next()) {

				formFile = rwsMaster.getHoImage();
				// System.out.println("In Insert");
				if (formFile.getFileName() != null && !formFile.getFileName().equals("")) {
					if (formFile != null) {
						qry = "update rws_head_office_tbl set HEAD_OFFICE_NAME=?,HEAD_OF_OFFICE_NAME=?,image=?  where HEAD_OFFICE_CODE=?";
						rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(qry);
						rwsMasterData.pstmt.setString(1, rwsMaster.getHon().toUpperCase());
						rwsMasterData.pstmt.setString(2, rwsMaster.getHoName().toUpperCase());
						try {
							String path = servlet.getServletContext().getRealPath("") + formFile.getFileName();
							scannedFile = new File(path);
							outputStream = new FileOutputStream(scannedFile);
							if (outputStream != null) {
								outputStream.write(formFile.getFileData());
							}
							targetFile = new File(targetPath);
							if (!documentSanitizerImpl.madeSafe(scannedFile)) {
								message = "Scanned Copy File is Corrupted";
								rwsMasterData.conn.setAutoCommit(true);
								scannedFile.delete();
								outputStream.close();
								targetFile.delete();
								return message;
							}
							compressImage(scannedFile, targetFile);
							fis = new FileInputStream(targetFile);
							if (fis != null) {
							}

							double fileSizeMB = ((rwsMaster.getHoImage().getFileSize() / 1024.0) / 1024.0);

							if (fileSizeMB > 0.2) {
								message = "Scanned Copy File Size Shoud Not Be Allowed More Than 200 KB";
								rwsMasterData.conn.setAutoCommit(true);
								scannedFile.delete();
								outputStream.close();
								targetFile.delete();
								return message;
							}
							// System.out.println("file Uploadinggggg");
							rwsMasterData.pstmt.setBinaryStream(3, fis, (int) targetFile.length());
							rwsMasterData.pstmt.setString(4, rwsMaster.getHoc());
							rowCount = rwsMasterData.pstmt.executeUpdate();
						} catch (Exception e) {
							System.out.println("exception in insertHeadDetails in RwsMasterData " + e);
							// e.printStackTrace();
						} finally {
							if (scannedFile != null) {
								scannedFile.delete();
							}
							if (targetFile != null) {
								targetFile.delete();
							}
							if (outputStream != null) {
								outputStream.close();
							}
							if (fis != null) {
								fis.close();
							}
						}
					}
				}
			} else {
				formFile = rwsMaster.getHoImage();
				// System.out.println("In Insert");
				if (formFile.getFileName() != null && !formFile.getFileName().equals("")) {
					if (formFile != null) {
						String query = "insert into rws_head_office_tbl(HEAD_OFFICE_CODE,HEAD_OFFICE_NAME,HEAD_OF_OFFICE_NAME,IMAGE) values (?,?,?,?)";
						rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
						rwsMasterData.pstmt.setString(1, rwsMaster.getHoc());
						rwsMasterData.pstmt.setString(2, rwsMaster.getHon().toUpperCase());
						rwsMasterData.pstmt.setString(3, rwsMaster.getHoName().toUpperCase());
						try {
							String path = servlet.getServletContext().getRealPath("") + formFile.getFileName();
							scannedFile = new File(path);
							outputStream = new FileOutputStream(scannedFile);
							if (outputStream != null) {
								outputStream.write(formFile.getFileData());
							}
							targetFile = new File(targetPath);
							if (!documentSanitizerImpl.madeSafe(scannedFile)) {
								message = "Scanned Copy File is Corrupted";
								rwsMasterData.conn.setAutoCommit(true);
								scannedFile.delete();
								outputStream.close();
								targetFile.delete();
								return message;
							}
							compressImage(scannedFile, targetFile);
							fis = new FileInputStream(targetFile);
							if (fis != null) {
							}

							double fileSizeMB = ((rwsMaster.getHoImage().getFileSize() / 1024.0) / 1024.0);

							if (fileSizeMB > 0.2) {
								message = "Scanned Copy File Size Shoud Not Be Allowed More Than 200 KB";
								rwsMasterData.conn.setAutoCommit(true);
								scannedFile.delete();
								outputStream.close();
								targetFile.delete();
								return message;
							}
							//System.out.println("file Uploadinggggg");
							rwsMasterData.pstmt.setBinaryStream(4, fis, (int) targetFile.length());
							rowCount = rwsMasterData.pstmt.executeUpdate();
						} catch (Exception e) {
							System.out.println("exception in insertHeadDetails in RwsMasterData " + e);
							// e.printStackTrace();
						} finally {
							if (scannedFile != null) {
								scannedFile.delete();
							}
							if (targetFile != null) {
								targetFile.delete();
							}
							if (outputStream != null) {
								outputStream.close();
							}
							if (fis != null) {
								fis.close();
							}
						}
					}
				}
			}
			if (rowCount < 1) {
				message = "Officer Details Can't be inserted";
			} else {
				message = "Officer Details Inserted Successfully";
				// Debug.println("message" + message);
			}
		} catch (Exception e) {
			// e.printStackTrace();
			System.out.println("The Exception at insertHead method of RwsMasterData " + e);
		} finally {
			try {
				if (rwsMasterData.conn != null) {
					rwsMasterData.conn.close();
				}
			} catch (Exception w) {
				w.printStackTrace();
			}
		}
		return message;
	}

	private static void compressImage(File scannedFile, File targetFile) throws IOException {
		InputStream is = new FileInputStream(scannedFile);
		OutputStream os = new FileOutputStream(targetFile);
		float quality = 0.5f;
		// create a BufferedImage as the result of decoding the supplied
		// InputStream
		BufferedImage image = ImageIO.read(is);
		// get all image writers for JPG format
		Iterator<ImageWriter> writers = ImageIO.getImageWritersByFormatName("jpg");
		if (!writers.hasNext())
			throw new IllegalStateException("No writers found");

		ImageWriter writer = (ImageWriter) writers.next();
		ImageOutputStream ios = ImageIO.createImageOutputStream(os);
		writer.setOutput(ios);
		ImageWriteParam param = writer.getDefaultWriteParam();
		param.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
		param.setCompressionQuality(quality);
		writer.write(null, new IIOImage(image, null, null), param);
		is.close();
		os.close();
		ios.close();
		writer.dispose();
	}

	public static RwsMaster getHead(String hoc, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(
					"select HEAD_OFFICE_CODE,HEAD_OFFICE_NAME,HEAD_OF_OFFICE_NAME from rws_head_office_tbl where Head_office_code=?");
			rwsMasterData.pstmt.setString(1, hoc);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setHoc(rwsMasterData.rs.getString(1));
				rwsMaster.setHon(rwsMasterData.rs.getString(2));
				rwsMaster.setHoName(rwsMasterData.rs.getString(3));
			}
		} catch (Exception e) {
			Debug.println("The error in getHead in RwsMasterData " + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return rwsMaster;
	}

	public static int removeHead(String hoc, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			// Debug.println("in removeHead");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rowCount = rwsMasterData.stmt
					.executeUpdate("delete  from rws_head_office_tbl where Head_office_code=" + hoc);
		} catch (Exception e) {
			Debug.println("The error in removeHead=" + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static String updateHead(RwsMaster rwsMaster, DataSource dataSource, String targetPath,
			ActionServlet servlet) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		String qry = "", message = "";
		try {
			ImageDocumentSanitizerImpl documentSanitizerImpl = new ImageDocumentSanitizerImpl();
			FileOutputStream outputStream = null;
			FormFile formFile = null;
			FileInputStream fis = null;
			File scannedFile = null;
			File targetFile = null;
			formFile = rwsMaster.getHoImage();
			if (formFile.getFileName() != null && !formFile.getFileName().equals("")) {
				if (formFile != null) {
					qry = "update rws_head_office_tbl set HEAD_OFFICE_NAME=?,HEAD_OF_OFFICE_NAME=?,image=?  where HEAD_OFFICE_CODE=?";
					rwsMasterData.conn = RwsOffices.getConn();
					rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(qry);
					rwsMasterData.pstmt.setString(1, rwsMaster.getHon().toUpperCase());
					rwsMasterData.pstmt.setString(2, rwsMaster.getHoName().toUpperCase());
					try {
						String path = servlet.getServletContext().getRealPath("") + formFile.getFileName();
						scannedFile = new File(path);
						outputStream = new FileOutputStream(scannedFile);
						if (outputStream != null) {
							outputStream.write(formFile.getFileData());
						}
						targetFile = new File(targetPath);
						if (!documentSanitizerImpl.madeSafe(scannedFile)) {
							message = "Scanned Copy File is Corrupted";
							rwsMasterData.conn.setAutoCommit(true);
							scannedFile.delete();
							outputStream.close();
							targetFile.delete();
							return message;
						}
						compressImage(scannedFile, targetFile);
						fis = new FileInputStream(targetFile);
						if (fis != null) {
						}

						double fileSizeMB = ((rwsMaster.getHoImage().getFileSize() / 1024.0) / 1024.0);
						if (fileSizeMB > 0.2) {
							message = "Scanned Copy File Size Shoud Not Be Allowed More Than 200 KB";
							rwsMasterData.conn.setAutoCommit(true);
							scannedFile.delete();
							outputStream.close();
							targetFile.delete();
							return message;
						}
						rwsMasterData.pstmt.setBinaryStream(3, fis, (int) targetFile.length());
						rwsMasterData.pstmt.setString(4, rwsMaster.getHoc());
						rowCount = rwsMasterData.pstmt.executeUpdate();
					} catch (Exception e) {
						System.out.println("exception in updateHead in RwsMasterData " + e);
						// e.printStackTrace();

					} finally {
						if (scannedFile != null) {
							scannedFile.delete();
						}
						if (targetFile != null) {
							targetFile.delete();
						}
						if (outputStream != null) {
							// outputStream.close();
						}
						if (fis != null) {
							// fis.close();
						}
					}
				}
			}
			if (rowCount < 1) {
				message = "Officer Details Can't be updated";
			} else {
				message = "Officer Details Updated Successfully";
				// Debug.println("message" + message);
			}
		} catch (SQLException sqle) {
			if (sqle.getErrorCode() == 1)
				errorMessage = "Record with this name exists.";
			Debug.println("The error in updateHead  In RwsMasterData  " + sqle);
			// sqle.printStackTrace();
		} catch (Exception e) {
			Debug.println("The error in updateHead In RwsMasterData  " + e);
			// e.printStackTrace();
		} finally {
			rwsMasterData.closeAll();
		}
		return message;
	}

	public static String getHeadCode(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String code = "";
		try {
			// Debug.println("in getHeadCode");
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn
					.prepareStatement("SELECT MAX(to_number(HEAD_OFFICE_CODE))+1 FROM RWS_HEAD_OFFICE_TBL");
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			rwsMasterData.rs.next();
			code = rwsMasterData.rs.getString(1);
			if (code == null)
				code = "1";
		} catch (Exception e) {
			Debug.println("The error at getHeadCode In RwsMasterData " + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return code;
	}

	// ********************************Circle Office
	// Methods***********************************
	public static int insertCircle(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn
					.prepareStatement("insert into rws_circle_office_tbl values(?,?,?)");
			rwsMasterData.pstmt.setString(1, rwsMaster.getHoc());
			rwsMasterData.pstmt.setString(2, rwsMaster.getCoc());
			rwsMasterData.pstmt.setString(3, rwsMaster.getCon().toUpperCase());
			rowCount = rwsMasterData.pstmt.executeUpdate();
		} catch (SQLException sqle) {
			int errorCode = sqle.getErrorCode();
			if (errorCode == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			Debug.println("The error in insertCircle in RwsMasterData " + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static float getTotalPopulation(DataSource dataSource, ArrayList checkHabs) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		float totalPopulation = 0;
		try {
			String query = "select sum(CENSUS_PLAIN_POPU + CENSUS_SC_POPU + "
					+ "CENSUS_ST_POPU ) from rws_habitation_directory_tbl " + "where hab_code in('";

			for (int i = 0; i < checkHabs.size(); i++) {
				HabSourceBean habSourceBean = (HabSourceBean) checkHabs.get(i);
				query = query + habSourceBean.getPanchRajCode() + "'";
				if (i != (checkHabs.size() - 1))
					query = query + ",'";

			}
			query = query + ")";
			//Debug.println("in getTotalPopulation");
			//Debug.println("query is " + query);
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(query);
			if (rwsMasterData.rs.next()) {
				totalPopulation = rwsMasterData.rs.getFloat(1);
			}
		} catch (Exception e) {
			Debug.println("The error in getCircle" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return totalPopulation;
	}

	public static RwsMaster getCircle(String hoc, String coc, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(
					"select * from rws_circle_office_tbl where circle_office_code=? and head_office_code=?");
			rwsMasterData.pstmt.setString(1, coc);
			rwsMasterData.pstmt.setString(2, hoc);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setHoc(rwsMasterData.rs.getString(1));
				rwsMaster.setHon(getHeadOfficeName(rwsMasterData.rs.getString(1), rwsMasterData.conn));
				rwsMaster.setCoc(rwsMasterData.rs.getString(2));
				rwsMaster.setCon(rwsMasterData.rs.getString(3));
			}
		} catch (Exception e) {
			Debug.println("The error in getCircle in RwsMasterData " + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return rwsMaster;
	}

	public static ArrayList getCircleCodes(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList circles = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(
					"SELECT C.HEAD_OFFICE_CODE,H.HEAD_OFFICE_NAME,CIRCLE_OFFICE_CODE,CIRCLE_OFFICE_NAME FROM RWS_CIRCLE_OFFICE_TBL C,RWS_HEAD_OFFICE_TBL H WHERE C.HEAD_OFFICE_CODE=H.HEAD_OFFICE_CODE ORDER BY HEAD_OFFICE_CODE,CIRCLE_OFFICE_CODE");
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setHoc(rwsMasterData.rs.getString(1));
				rwsMaster.setHon(rwsMasterData.rs.getString(2));
				rwsMaster.setCoc(rwsMasterData.rs.getString(3));
				rwsMaster.setCon(rwsMasterData.rs.getString(4));
				circles.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The error in getCircleCodes in RwsMasterData " + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return circles;
	}

	public static int removeCircle(String hoc, String coc, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rowCount = rwsMasterData.stmt.executeUpdate("delete  from rws_circle_office_tbl where circle_office_code='"
					+ coc + "' and head_office_code=" + hoc);
		} catch (Exception e) {
			Debug.println("The error in removeCircle" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static int updateCircle(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int ans = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			ps = rwsMasterData.conn.prepareStatement(
					"UPDATE  RWS_CIRCLE_OFFICE_TBL SET CIRCLE_OFFICE_NAME=? WHERE CIRCLE_OFFICE_CODE=? AND HEAD_OFFICE_CODE=?");
			ps.setString(1, rwsMaster.getCon().toUpperCase());
			ps.setString(2, rwsMaster.getCoc());
			ps.setString(3, rwsMaster.getHoc());
			ans = ps.executeUpdate();
		} catch (SQLException sqle) {
			if (sqle.getErrorCode() == 1)
				errorMessage = "Record with this name exists.";
			Debug.println("The error in updateCircle in RwsMasterData " + sqle);
		} catch (Exception e) {
			Debug.println("The error in updateCircle in RwsMasterData  " + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return ans;
	}

	public static String getCircleCode(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String code = "";
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn
					.prepareStatement("SELECT MAX(to_number(CIRCLE_OFFICE_CODE))+1 FROM RWS_CIRCLE_OFFICE_TBL");
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			rwsMasterData.rs.next();
			code = rwsMasterData.rs.getString(1);
			if (code == null) {
				code = "01";
			} else if (code.length() == 1) {
				code = "0" + code;
			}
		} catch (Exception e) {
			Debug.println("The error in getCircleCode in RwsMasterData " + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return code;
	}

	// ****************************************Division Office
	// Methods*********************************
	public static int insertDivision(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn
					.prepareStatement("insert into rws_division_office_tbl values(?,?,?,?,?)");
			rwsMasterData.pstmt.setString(1, rwsMaster.getHoc());
			rwsMasterData.pstmt.setString(2, rwsMaster.getCoc());
			rwsMasterData.pstmt.setString(3, rwsMaster.getDoc());
			rwsMasterData.pstmt.setString(4, rwsMaster.getDon().toUpperCase());
			rwsMasterData.pstmt.setString(5, rwsMaster.getDivStatus());
			rowCount = rwsMasterData.pstmt.executeUpdate();
		} catch (SQLException sqle) {
			int errorCode = sqle.getErrorCode();
			if (errorCode == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			Debug.println("The error in insertDivision in RwsMasterData " + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static int insertUrbanDivision(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
		//	Debug.println("in insertDivision");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rowCount = rwsMasterData.stmt.executeUpdate("insert into ur_division_office_tbl values('"
					+ rwsMaster.getHoc() + "','" + rwsMaster.getCoc() + "','" + rwsMaster.getDoc() + "','"
					+ rwsMaster.getDon().toUpperCase() + "','" + rwsMaster.getDivStatus() + "')");
		} catch (SQLException sqle) {
			int errorCode = sqle.getErrorCode();
			if (errorCode == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			Debug.println("The error in insertDivision" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static RwsMaster getDivision(String hoc, String coc, String doc, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(
					"select * from rws_division_office_tbl where division_office_code=? and circle_office_code=? and head_office_code=?");
			rwsMasterData.pstmt.setString(1, doc);
			rwsMasterData.pstmt.setString(2, coc);
			rwsMasterData.pstmt.setString(3, hoc);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setHoc(rwsMasterData.rs.getString(1));
				rwsMaster.setHon(getHeadOfficeName(rwsMasterData.rs.getString(1), rwsMasterData.conn));
				rwsMaster.setCoc(rwsMasterData.rs.getString(2));
				rwsMaster.setCon(getCircleOfficeName(rwsMasterData.rs.getString(1), rwsMasterData.rs.getString(2),
						rwsMasterData.conn));
				rwsMaster.setDoc(rwsMasterData.rs.getString(3));
				rwsMaster.setDon(rwsMasterData.rs.getString(4));
				rwsMaster.setDivStatus(rwsMasterData.rs.getString(5));
			}
		} catch (Exception e) {
			Debug.println("The error in getDivision in RwsMasterData  " + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return rwsMaster;
	}

	public static RwsMaster getUrbanDivision(String hoc, String coc, String doc, DataSource dataSource)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		try {
		//	Debug.println("in getDivision");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("select * from ur_division_office_tbl where division_office_code=" + doc
							+ "and circle_office_code='" + coc + "' and head_office_code=" + hoc);
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setHoc(rwsMasterData.rs.getString(1));
				rwsMaster.setHon(getUrbanHeadOfficeName(rwsMasterData.rs.getString(1), rwsMasterData.conn));
				rwsMaster.setCoc(rwsMasterData.rs.getString(2));
				rwsMaster.setCon(getUrbanCircleOfficeName(rwsMasterData.rs.getString(1), rwsMasterData.rs.getString(2),
						rwsMasterData.conn));
				rwsMaster.setDoc(rwsMasterData.rs.getString(3));
				rwsMaster.setDon(rwsMasterData.rs.getString(4));
				rwsMaster.setDivStatus(rwsMasterData.rs.getString(5));
			}
		} catch (Exception e) {
			Debug.println("The error in getDivision" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rwsMaster;
	}

	public static ArrayList getDivisions(DataSource dataSource, String coc) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList divisions = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			if (coc.equals("00"))
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(
						"SELECT D.HEAD_OFFICE_CODE,H.HEAD_OFFICE_NAME,D.CIRCLE_OFFICE_CODE,C.CIRCLE_OFFICE_NAME,D.DIVISION_OFFICE_CODE,D.DIVISION_OFFICE_NAME FROM RWS_DIVISION_OFFICE_TBL D,RWS_CIRCLE_OFFICE_TBL C,RWS_HEAD_OFFICE_TBL H WHERE D.HEAD_OFFICE_CODE=H.HEAD_OFFICE_CODE AND D.CIRCLE_OFFICE_CODE=C.CIRCLE_OFFICE_CODE ORDER BY HEAD_OFFICE_CODE,CIRCLE_OFFICE_CODE,DIVISION_OFFICE_CODE");
			else {
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(
						"SELECT D.HEAD_OFFICE_CODE,H.HEAD_OFFICE_NAME,D.CIRCLE_OFFICE_CODE,C.CIRCLE_OFFICE_NAME,D.DIVISION_OFFICE_CODE,D.DIVISION_OFFICE_NAME FROM RWS_DIVISION_OFFICE_TBL D,RWS_CIRCLE_OFFICE_TBL C,RWS_HEAD_OFFICE_TBL H WHERE D.HEAD_OFFICE_CODE=H.HEAD_OFFICE_CODE AND D.CIRCLE_OFFICE_CODE=? and D.CIRCLE_OFFICE_CODE=C.CIRCLE_OFFICE_CODE ORDER BY HEAD_OFFICE_CODE,CIRCLE_OFFICE_CODE,DIVISION_OFFICE_CODE");
				rwsMasterData.pstmt.setString(1, coc);
			}
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setHoc(rwsMasterData.rs.getString(1));
				rwsMaster.setHon(rwsMasterData.rs.getString(2));
				rwsMaster.setCoc(rwsMasterData.rs.getString(3));
				rwsMaster.setCon(rwsMasterData.rs.getString(4));
				rwsMaster.setDoc(rwsMasterData.rs.getString(5));
				rwsMaster.setDon(rwsMasterData.rs.getString(6));
				rwsMaster.setDivStatus("I");
				divisions.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The error in getDivisions in RwsMasterData " + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return divisions;
	}

	public static ArrayList getUrbanDivisions(DataSource dataSource, String coc) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList divisions = new ArrayList();
		try {
			//Debug.println("in getDivisions");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			// Statement stmt1 = rwsMasterData.conn.createStatement();
			// Statement stmt2 = rwsMasterData.conn.createStatement();
			if (coc.equals("00"))
				rwsMasterData.rs = rwsMasterData.stmt.executeQuery(
						"SELECT D.HEAD_OFFICE_CODE,H.HEAD_OFFICE_NAME,D.CIRCLE_OFFICE_CODE,C.CIRCLE_OFFICE_NAME,D.DIVISION_OFFICE_CODE,D.DIVISION_OFFICE_NAME FROM UR_DIVISION_OFFICE_TBL D,UR_CIRCLE_OFFICE_TBL C,UR_HEAD_OFFICE_TBL H WHERE D.HEAD_OFFICE_CODE=H.HEAD_OFFICE_CODE AND D.CIRCLE_OFFICE_CODE=C.CIRCLE_OFFICE_CODE ORDER BY HEAD_OFFICE_CODE,CIRCLE_OFFICE_CODE,DIVISION_OFFICE_CODE");
			else
				rwsMasterData.rs = rwsMasterData.stmt.executeQuery(
						"SELECT D.HEAD_OFFICE_CODE,H.HEAD_OFFICE_NAME,D.CIRCLE_OFFICE_CODE,C.CIRCLE_OFFICE_NAME,D.DIVISION_OFFICE_CODE,D.DIVISION_OFFICE_NAME FROM UR_DIVISION_OFFICE_TBL D,UR_CIRCLE_OFFICE_TBL C,UR_HEAD_OFFICE_TBL H WHERE D.HEAD_OFFICE_CODE=H.HEAD_OFFICE_CODE AND D.CIRCLE_OFFICE_CODE='"
								+ coc
								+ "' and D.CIRCLE_OFFICE_CODE=C.CIRCLE_OFFICE_CODE ORDER BY HEAD_OFFICE_CODE,CIRCLE_OFFICE_CODE,DIVISION_OFFICE_CODE");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setHoc(rwsMasterData.rs.getString(1));
				rwsMaster.setHon(rwsMasterData.rs.getString(2));
				rwsMaster.setCoc(rwsMasterData.rs.getString(3));
				rwsMaster.setCon(rwsMasterData.rs.getString(4));
				rwsMaster.setDoc(rwsMasterData.rs.getString(5));
				rwsMaster.setDon(rwsMasterData.rs.getString(6));
				rwsMaster.setDivStatus("I");
				divisions.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The error in getDivisions" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return divisions;
	}

	public static int removeDivision(String hoc, String coc, String doc, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			//Debug.println("in removeDivision");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rowCount = rwsMasterData.stmt
					.executeUpdate("delete  from rws_division_office_tbl where division_office_code=" + doc
							+ " and circle_office_code='" + coc + "' and head_office_code=" + hoc);
		} catch (Exception e) {
			Debug.println("The error in removeDivision" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static int removeUrbanDivision(String hoc, String coc, String doc, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			//Debug.println("in removeDivision");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rowCount = rwsMasterData.stmt
					.executeUpdate("delete  from ur_division_office_tbl where division_office_code=" + doc
							+ " and circle_office_code='" + coc + "' and head_office_code=" + hoc);
		} catch (Exception e) {
			Debug.println("The error in removeDivision" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static int updateDivision(RwsMaster rwsMaster, DataSource dataSource, String status) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int ans = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			ps = rwsMasterData.conn.prepareStatement(
					"update  rws_division_office_tbl set division_office_name=?,status=? where division_office_code=? and circle_office_code=? and head_office_code=?");
			ps.setString(1, (rwsMaster.getDon()).toUpperCase());
			ps.setString(2, status);
			ps.setString(3, rwsMaster.getDoc());
			ps.setString(4, rwsMaster.getCoc());
			ps.setString(5, rwsMaster.getHoc());

			ans = ps.executeUpdate();
		} catch (SQLException sqle) {
			if (sqle.getErrorCode() == 1)
				errorMessage = "Record with this name exists.";
			Debug.println("The error in updateDivision " + sqle);
		} catch (Exception e) {
			Debug.println("The error in updateDivision in RwsMasterData " + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return ans;
	}

	public static int updateUrbanDivision(RwsMaster rwsMaster, DataSource dataSource, String status) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int ans = 0;
		try {
			//Debug.println("in updateDivision");

			rwsMasterData.conn = RwsOffices.getConn();

			ps = rwsMasterData.conn.prepareStatement(
					"update  ur_division_office_tbl set division_office_name=?,status=? where division_office_code=? and circle_office_code=? and head_office_code=?");

			ps.setString(1, (rwsMaster.getDon()).toUpperCase());
			ps.setString(2, status);
			ps.setString(3, rwsMaster.getDoc());
			ps.setString(4, rwsMaster.getCoc());
			ps.setString(5, rwsMaster.getHoc());

			ans = ps.executeUpdate();
		} catch (SQLException sqle) {
			if (sqle.getErrorCode() == 1)
				errorMessage = "Record with this name exists.";
			Debug.println("The error in updateDivision " + sqle);
		} catch (Exception e) {
			Debug.println("The error in updateDivision" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return ans;
	}

	public static String getDivisionCode(String hoc, String coc, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String code = "";
		if (coc != null) {
			try {
				rwsMasterData.conn = RwsOffices.getConn();
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(
						"SELECT MAX(to_number(DIVISION_OFFICE_CODE))+1 FROM RWS_DIVISION_OFFICE_TBL WHERE CIRCLE_OFFICE_CODE=? and HEAD_OFFICE_CODE=?");
				rwsMasterData.pstmt.setString(1, coc);
				rwsMasterData.pstmt.setString(2, hoc);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				rwsMasterData.rs.next();
				code = rwsMasterData.rs.getString(1);
				if (code == null)
					code = "1";
			} catch (Exception e) {
				Debug.println("The error in getDivisionCode in RwsMasterData " + e);
			} finally {
				rwsMasterData.closeAll();
				// Debug.println("ConnCount after closing is " + connCount);
			}
		}
		return code;
	}

	public static String getUrbanDivisionCode(String hoc, String coc, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String code = "";
		if (coc != null) {
			try {
				//Debug.println("in getDivisionCode");

				rwsMasterData.conn = RwsOffices.getConn();
				rwsMasterData.stmt = rwsMasterData.conn.createStatement();
				rwsMasterData.rs = rwsMasterData.stmt.executeQuery(
						"SELECT MAX(to_number(DIVISION_OFFICE_CODE))+1 FROM UR_DIVISION_OFFICE_TBL WHERE CIRCLE_OFFICE_CODE='"
								+ coc + "' and HEAD_OFFICE_CODE=" + hoc);
				rwsMasterData.rs.next();
				code = rwsMasterData.rs.getString(1);
				if (code == null)
					code = "1";
			} catch (Exception e) {
				Debug.println("The error in getDivisionCode" + e);
			} finally {
				rwsMasterData.closeAll();
				Debug.println("ConnCount after closing is " + connCount);
			}
		}
		return code;
	}

	// *********************************SubDivision
	// OfficeMethods*************************************
	public static int insertSubDivision(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn
					.prepareStatement("insert into rws_subdivision_office_tbl values(?,?,?,?,?)");
			rwsMasterData.pstmt.setString(1, rwsMaster.getHoc());
			rwsMasterData.pstmt.setString(2, rwsMaster.getCoc());
			rwsMasterData.pstmt.setString(3, rwsMaster.getDoc());
			rwsMasterData.pstmt.setString(4, rwsMaster.getSdoc());
			rwsMasterData.pstmt.setString(5, rwsMaster.getSdon().toUpperCase());
			rowCount = rwsMasterData.pstmt.executeUpdate();
		} catch (SQLException sqle) {
			int errorCode = sqle.getErrorCode();
			if (errorCode == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			Debug.println("The error in insertSubDivision in RwsMasterData " + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static int insertUrbanSubDivision(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			//Debug.println("in insertSubDivision");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rowCount = rwsMasterData.stmt.executeUpdate("insert into ur_subdivision_office_tbl values('"
					+ rwsMaster.getHoc() + "','" + rwsMaster.getCoc() + "','" + rwsMaster.getDoc() + "','"
					+ rwsMaster.getSdoc() + "','" + rwsMaster.getSdon().toUpperCase() + "')");
		} catch (SQLException sqle) {
			int errorCode = sqle.getErrorCode();
			if (errorCode == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			Debug.println("The error in insertSubDivision" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static RwsMaster getSubDivision(String hoc, String coc, String doc, String sdoc, DataSource dataSource)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn
					.prepareStatement("select * from rws_subdivision_office_tbl where subdivision_office_code=?"
							+ " and division_office_code=? and circle_office_code=? and head_office_code=?");
			rwsMasterData.pstmt.setString(1, sdoc);
			rwsMasterData.pstmt.setString(2, doc);
			rwsMasterData.pstmt.setString(3, coc);
			rwsMasterData.pstmt.setString(4, hoc);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setHoc(rwsMasterData.rs.getString(1));
				rwsMaster.setHon(getHeadOfficeName(rwsMasterData.rs.getString(1), rwsMasterData.conn));
				rwsMaster.setCoc(rwsMasterData.rs.getString(2));
				rwsMaster.setCon(getCircleOfficeName(rwsMasterData.rs.getString(1), rwsMasterData.rs.getString(2),
						rwsMasterData.conn));
				rwsMaster.setDoc(rwsMasterData.rs.getString(3));
				rwsMaster.setDon(getDivisionOfficeName(rwsMasterData.rs.getString(1), rwsMasterData.rs.getString(2),
						rwsMasterData.rs.getString(3), rwsMasterData.conn));
				rwsMaster.setSdoc(rwsMasterData.rs.getString(4));
				rwsMaster.setSdon(rwsMasterData.rs.getString(5));
			}
		} catch (Exception e) {
			Debug.println("The error in getSubDivision in RwsMasterdata " + e);
			e.printStackTrace();
		} finally {
			rwsMasterData.closeAll();
		}
		return rwsMaster;
	}

	public static RwsMaster getUrbanSubDivision(String hoc, String coc, String doc, String sdoc, DataSource dataSource)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		try {
			//Debug.println("in getSubDivision");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("select * from ur_subdivision_office_tbl where subdivision_office_code='" + sdoc
							+ "' and division_office_code=" + doc + " and circle_office_code='" + coc
							+ "' and head_office_code=" + hoc);
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setHoc(rwsMasterData.rs.getString(1));
				rwsMaster.setHon(getUrbanHeadOfficeName(rwsMasterData.rs.getString(1), rwsMasterData.conn));
				rwsMaster.setCoc(rwsMasterData.rs.getString(2));
				rwsMaster.setCon(getUrbanCircleOfficeName(rwsMasterData.rs.getString(1), rwsMasterData.rs.getString(2),
						rwsMasterData.conn));
				rwsMaster.setDoc(rwsMasterData.rs.getString(3));
				rwsMaster.setDon(getUrbanDivisionOfficeName(rwsMasterData.rs.getString(1),
						rwsMasterData.rs.getString(2), rwsMasterData.rs.getString(3), rwsMasterData.conn));
				rwsMaster.setSdoc(rwsMasterData.rs.getString(4));
				rwsMaster.setSdon(rwsMasterData.rs.getString(5));
			}
		} catch (Exception e) {
			Debug.println("The error in getSubDivision" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rwsMaster;
	}

	public static ArrayList getSubDivisions(DataSource dataSource, String coc, String doc) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList subdivisions = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			if (coc.equals("00") && doc.equals("0"))
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(
						"SELECT S.HEAD_OFFICE_CODE,H.HEAD_OFFICE_NAME,S.CIRCLE_OFFICE_CODE,C.CIRCLE_OFFICE_NAME,S.DIVISION_OFFICE_CODE,D.DIVISION_OFFICE_NAME,S.SUBDIVISION_OFFICE_CODE,S.SUBDIVISION_OFFICE_NAME FROM RWS_SUBDIVISION_OFFICE_TBL S,RWS_DIVISION_OFFICE_TBL D,RWS_CIRCLE_OFFICE_TBL C,RWS_HEAD_OFFICE_TBL H WHERE  S.HEAD_OFFICE_CODE=H.HEAD_OFFICE_CODE "
								+ " AND D.CIRCLE_OFFICE_CODE=C.CIRCLE_OFFICE_CODE AND S.CIRCLE_OFFICE_CODE=C.CIRCLE_OFFICE_CODE AND S.DIVISION_OFFICE_CODE=D.DIVISION_OFFICE_CODE ORDER BY HEAD_OFFICE_CODE,CIRCLE_OFFICE_CODE,DIVISION_OFFICE_CODE,SUBDIVISION_OFFICE_CODE ");
			else if (!coc.equals("00") && doc.equals("0")) {
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(
						"SELECT S.HEAD_OFFICE_CODE,H.HEAD_OFFICE_NAME,S.CIRCLE_OFFICE_CODE,C.CIRCLE_OFFICE_NAME,S.DIVISION_OFFICE_CODE,D.DIVISION_OFFICE_NAME,S.SUBDIVISION_OFFICE_CODE,S.SUBDIVISION_OFFICE_NAME FROM RWS_SUBDIVISION_OFFICE_TBL S,RWS_DIVISION_OFFICE_TBL D,RWS_CIRCLE_OFFICE_TBL C,RWS_HEAD_OFFICE_TBL H WHERE S.CIRCLE_OFFICE_CODE=?"
								+ " and S.HEAD_OFFICE_CODE=H.HEAD_OFFICE_CODE AND D.CIRCLE_OFFICE_CODE=? and D.CIRCLE_OFFICE_CODE=C.CIRCLE_OFFICE_CODE AND S.CIRCLE_OFFICE_CODE=C.CIRCLE_OFFICE_CODE AND S.DIVISION_OFFICE_CODE=D.DIVISION_OFFICE_CODE ORDER BY HEAD_OFFICE_CODE,CIRCLE_OFFICE_CODE,DIVISION_OFFICE_CODE,SUBDIVISION_OFFICE_CODE ");
				rwsMasterData.pstmt.setString(1, coc);
				rwsMasterData.pstmt.setString(2, coc);
			} else if (!coc.equals("00") && !doc.equals("0")) {
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(
						"SELECT S.HEAD_OFFICE_CODE,H.HEAD_OFFICE_NAME,S.CIRCLE_OFFICE_CODE,C.CIRCLE_OFFICE_NAME,S.DIVISION_OFFICE_CODE,D.DIVISION_OFFICE_NAME,S.SUBDIVISION_OFFICE_CODE,S.SUBDIVISION_OFFICE_NAME FROM RWS_SUBDIVISION_OFFICE_TBL S,RWS_DIVISION_OFFICE_TBL D,RWS_CIRCLE_OFFICE_TBL C,RWS_HEAD_OFFICE_TBL H WHERE S.CIRCLE_OFFICE_CODE=?"
								+ " and S.DIVISION_OFFICE_CODE=? and S.HEAD_OFFICE_CODE=H.HEAD_OFFICE_CODE AND D.CIRCLE_OFFICE_CODE=C.CIRCLE_OFFICE_CODE AND S.CIRCLE_OFFICE_CODE=C.CIRCLE_OFFICE_CODE AND S.DIVISION_OFFICE_CODE=D.DIVISION_OFFICE_CODE ORDER BY HEAD_OFFICE_CODE,CIRCLE_OFFICE_CODE,DIVISION_OFFICE_CODE,SUBDIVISION_OFFICE_CODE ");
				rwsMasterData.pstmt.setString(1, coc);
				rwsMasterData.pstmt.setString(2, doc);
			}
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setHoc(rwsMasterData.rs.getString(1));
				rwsMaster.setHon(rwsMasterData.rs.getString(2));
				rwsMaster.setCoc(rwsMasterData.rs.getString(3));
				rwsMaster.setCon(rwsMasterData.rs.getString(4));
				rwsMaster.setDoc(rwsMasterData.rs.getString(5));
				rwsMaster.setDon(rwsMasterData.rs.getString(6));
				rwsMaster.setSdoc(rwsMasterData.rs.getString(7));
				rwsMaster.setSdon(rwsMasterData.rs.getString(8));
				rwsMaster.setNoOfMandals(getNoOfMandals(rwsMasterData.rs.getString(3), rwsMasterData.rs.getString(5),
						rwsMasterData.rs.getString(7), rwsMasterData.conn));
				subdivisions.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The error in getSubDivisions in RwsMasterData " + e);
			// e.printStackTrace();
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return subdivisions;
	}

	public static ArrayList getUrbanSubDivisions(DataSource dataSource, String coc, String doc) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList subdivisions = new ArrayList();
		try {
			//Debug.println("in getSubDivisions");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			if (coc.equals("00") && doc.equals("0"))
				rwsMasterData.rs = rwsMasterData.stmt.executeQuery(
						"SELECT S.HEAD_OFFICE_CODE,H.HEAD_OFFICE_NAME,S.CIRCLE_OFFICE_CODE,C.CIRCLE_OFFICE_NAME,S.DIVISION_OFFICE_CODE,D.DIVISION_OFFICE_NAME,S.SUBDIVISION_OFFICE_CODE,S.SUBDIVISION_OFFICE_NAME FROM UR_SUBDIVISION_OFFICE_TBL S,UR_DIVISION_OFFICE_TBL D,UR_CIRCLE_OFFICE_TBL C,UR_HEAD_OFFICE_TBL H WHERE  S.HEAD_OFFICE_CODE=H.HEAD_OFFICE_CODE AND D.CIRCLE_OFFICE_CODE=C.CIRCLE_OFFICE_CODE AND S.CIRCLE_OFFICE_CODE=C.CIRCLE_OFFICE_CODE AND S.DIVISION_OFFICE_CODE=D.DIVISION_OFFICE_CODE ORDER BY HEAD_OFFICE_CODE,CIRCLE_OFFICE_CODE,DIVISION_OFFICE_CODE,SUBDIVISION_OFFICE_CODE ");
			else if (!coc.equals("00") && doc.equals("0"))
				rwsMasterData.rs = rwsMasterData.stmt.executeQuery(
						"SELECT S.HEAD_OFFICE_CODE,H.HEAD_OFFICE_NAME,S.CIRCLE_OFFICE_CODE,C.CIRCLE_OFFICE_NAME,S.DIVISION_OFFICE_CODE,D.DIVISION_OFFICE_NAME,S.SUBDIVISION_OFFICE_CODE,S.SUBDIVISION_OFFICE_NAME FROM UR_SUBDIVISION_OFFICE_TBL S,UR_DIVISION_OFFICE_TBL D,UR_CIRCLE_OFFICE_TBL C,UR_HEAD_OFFICE_TBL H WHERE S.CIRCLE_OFFICE_CODE='"
								+ coc + "' and S.HEAD_OFFICE_CODE=H.HEAD_OFFICE_CODE AND D.CIRCLE_OFFICE_CODE='" + coc
								+ "' and D.CIRCLE_OFFICE_CODE=C.CIRCLE_OFFICE_CODE AND S.CIRCLE_OFFICE_CODE=C.CIRCLE_OFFICE_CODE AND S.DIVISION_OFFICE_CODE=D.DIVISION_OFFICE_CODE ORDER BY HEAD_OFFICE_CODE,CIRCLE_OFFICE_CODE,DIVISION_OFFICE_CODE,SUBDIVISION_OFFICE_CODE ");
			else if (!coc.equals("00") && !doc.equals("0"))
				rwsMasterData.rs = rwsMasterData.stmt.executeQuery(
						"SELECT S.HEAD_OFFICE_CODE,H.HEAD_OFFICE_NAME,S.CIRCLE_OFFICE_CODE,C.CIRCLE_OFFICE_NAME,S.DIVISION_OFFICE_CODE,D.DIVISION_OFFICE_NAME,S.SUBDIVISION_OFFICE_CODE,S.SUBDIVISION_OFFICE_NAME FROM UR_SUBDIVISION_OFFICE_TBL S,UR_DIVISION_OFFICE_TBL D,UR_CIRCLE_OFFICE_TBL C,UR_HEAD_OFFICE_TBL H WHERE S.CIRCLE_OFFICE_CODE='"
								+ coc + "' and S.DIVISION_OFFICE_CODE='" + doc
								+ "' and S.HEAD_OFFICE_CODE=H.HEAD_OFFICE_CODE AND D.CIRCLE_OFFICE_CODE=C.CIRCLE_OFFICE_CODE AND S.CIRCLE_OFFICE_CODE=C.CIRCLE_OFFICE_CODE AND S.DIVISION_OFFICE_CODE=D.DIVISION_OFFICE_CODE ORDER BY HEAD_OFFICE_CODE,CIRCLE_OFFICE_CODE,DIVISION_OFFICE_CODE,SUBDIVISION_OFFICE_CODE ");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setHoc(rwsMasterData.rs.getString(1));
				rwsMaster.setHon(rwsMasterData.rs.getString(2));
				rwsMaster.setCoc(rwsMasterData.rs.getString(3));
				rwsMaster.setCon(rwsMasterData.rs.getString(4));
				rwsMaster.setDoc(rwsMasterData.rs.getString(5));
				rwsMaster.setDon(rwsMasterData.rs.getString(6));
				rwsMaster.setSdoc(rwsMasterData.rs.getString(7));
				rwsMaster.setSdon(rwsMasterData.rs.getString(8));
				/*
				 * rwsMaster.setNoOfMandals(getNoOfMandals(rwsMasterData.rs .getString(3),
				 * rwsMasterData.rs.getString(5), rwsMasterData.rs.getString(7),
				 * rwsMasterData.conn));
				 */
				subdivisions.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The error in getSubDivisions" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return subdivisions;
	}

	public static String getNoOfMandals(String coc, String doc, String sdoc, Connection conn) {

		String mcount = "0";
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;
		try {
			rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement(
					"SELECT count(MCODE) from RWS_MANDAL_SUBDIVISION_TBL  WHERE CIRCLE_OFFICE_CODE=? and DIVISION_OFFICE_CODE=? and SUBDIVISION_OFFICE_CODE=?");
			rwsMasterData.pstmt1.setString(1, coc);
			rwsMasterData.pstmt1.setString(2, doc);
			rwsMasterData.pstmt1.setString(3, sdoc);
			rwsMasterData.rs1 = rwsMasterData.pstmt1.executeQuery();
			rwsMasterData.rs1.next();
			mcount = "" + rwsMasterData.rs1.getInt(1);
		} catch (Exception e) {
			Debug.println("The error in getNoOfMandals in RwsMasterData" + e);
		} finally {
			try {
				rwsMasterData.pstmt1.close();
				rwsMasterData.rs1.close();
			} catch (Exception e) {
				Debug.println("Exception  in getNoOfMandals in RwsMasterData " + e);
			}
		}
		return mcount;
	}

	public static ArrayList getMandalSubDivisions(DataSource dataSource, String coc, String doc, String sdoc)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList mandalsubdivisions = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(
					"SELECT M.MCODE,M.MNAME FROM RWS_SUBDIVISION_OFFICE_TBL SDO,RWS_MANDAL_TBL M,RWS_MANDAL_SUBDIVISION_TBL MS WHERE MS.CIRCLE_OFFICE_CODE=?"
							+ " AND MS.DIVISION_OFFICE_CODE=? AND SDO.SUBDIVISION_OFFICE_CODE=? AND MS.SUBDIVISION_OFFICE_CODE=? AND SDO.CIRCLE_OFFICE_CODE=? AND SDO.DIVISION_OFFICE_CODE=? and M.DCODE=MS.DCODE and M.MCODE=MS.MCODE");
			rwsMasterData.pstmt.setString(1, coc);
			rwsMasterData.pstmt.setString(2, doc);
			rwsMasterData.pstmt.setString(3, sdoc);
			rwsMasterData.pstmt.setString(4, sdoc);
			rwsMasterData.pstmt.setString(5, coc);
			rwsMasterData.pstmt.setString(6, doc);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setMandalCode(rwsMasterData.rs.getString(1));
				rwsMaster.setMandalName(rwsMasterData.rs.getString(2));
				mandalsubdivisions.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The error in getMandalSubDivisions in RwsMasterData " + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return mandalsubdivisions;
	}

	public static ArrayList getUrbanMandalSubDivisions(DataSource dataSource, String coc, String doc, String sdoc)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList mandalsubdivisions = new ArrayList();
		try {
			//Debug.println("in getMandalSubDivisions");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();

			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(
					"SELECT M.MCODE,M.MNAME FROM UR_SUBDIVISION_OFFICE_TBL SDO,URBAN_MANDAL_TBL M,URBAN_MANDAL_SUBDIVISION_TBL MS WHERE MS.CIRCLE_OFFICE_CODE='"
							+ coc + "'AND MS.DIVISION_OFFICE_CODE='" + doc + "' AND SDO.SUBDIVISION_OFFICE_CODE='"
							+ sdoc + "'" + " AND MS.SUBDIVISION_OFFICE_CODE='" + sdoc + "' AND SDO.CIRCLE_OFFICE_CODE='"
							+ coc + "' AND SDO.DIVISION_OFFICE_CODE='" + doc
							+ "' and M.DCODE=MS.DCODE and M.MCODE=MS.MCODE");

			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setMandalCode(rwsMasterData.rs.getString(1));
				rwsMaster.setMandalName(rwsMasterData.rs.getString(2));
				mandalsubdivisions.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The error in getMandalSubDivisions" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return mandalsubdivisions;
	}

	public static int removeSubDivision(String hoc, String coc, String doc, String sdoc, DataSource dataSource)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			//Debug.println("in removeSubDivision");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rowCount = rwsMasterData.stmt
					.executeUpdate("delete  from rws_subdivision_office_tbl where subdivision_office_code='" + sdoc
							+ "' and division_office_code=" + doc + " and circle_office_code='" + coc
							+ "' and head_office_code=" + hoc);
		} catch (Exception e) {
			Debug.println("The error in removeSubDivision" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static int removeUrbanSubDivision(String hoc, String coc, String doc, String sdoc, DataSource dataSource)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			//Debug.println("in removeSubDivision");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rowCount = rwsMasterData.stmt
					.executeUpdate("delete  from ur_subdivision_office_tbl where subdivision_office_code='" + sdoc
							+ "' and division_office_code=" + doc + " and circle_office_code='" + coc
							+ "' and head_office_code=" + hoc);
		} catch (Exception e) {
			Debug.println("The error in removeSubDivision" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static int updateSubDivision(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int ans = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			ps = rwsMasterData.conn.prepareStatement(
					"UPDATE  RWS_SUBDIVISION_OFFICE_TBL SET SUBDIVISION_OFFICE_NAME=? WHERE SUBDIVISION_OFFICE_CODE=? AND DIVISION_OFFICE_CODE=? AND CIRCLE_OFFICE_CODE=? AND HEAD_OFFICE_CODE=?");
			ps.setString(1, (rwsMaster.getSdon()).toUpperCase());
			ps.setString(2, rwsMaster.getSdoc());
			ps.setString(3, rwsMaster.getDoc());
			ps.setString(4, rwsMaster.getCoc());
			ps.setString(5, rwsMaster.getHoc());
			ans = ps.executeUpdate();
		} catch (SQLException sqle) {
			if (sqle.getErrorCode() == 1)
				errorMessage = "Record with this name exists.";
			Debug.println("The error in updateDivision " + sqle);
		} catch (Exception e) {
			Debug.println("The error in updateSubDivision in RwsMasterData  " + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return ans;
	}

	public static int updateUrbanSubDivision(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int ans = 0;
		try {
			//Debug.println("in updateSubDivision");

			rwsMasterData.conn = RwsOffices.getConn();

			ps = rwsMasterData.conn.prepareStatement(
					"UPDATE  UR_SUBDIVISION_OFFICE_TBL SET SUBDIVISION_OFFICE_NAME=? WHERE SUBDIVISION_OFFICE_CODE=? AND DIVISION_OFFICE_CODE=? AND CIRCLE_OFFICE_CODE=? AND HEAD_OFFICE_CODE=?");

			ps.setString(1, (rwsMaster.getSdon()).toUpperCase());
			ps.setString(2, rwsMaster.getSdoc());
			ps.setString(3, rwsMaster.getDoc());
			ps.setString(4, rwsMaster.getCoc());
			ps.setString(5, rwsMaster.getHoc());

			ans = ps.executeUpdate();
		} catch (SQLException sqle) {
			if (sqle.getErrorCode() == 1)
				errorMessage = "Record with this name exists.";
			Debug.println("The error in updateDivision " + sqle);
		} catch (Exception e) {
			Debug.println("The error in updateSubDivision" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}

		return ans;
	}

	public static String getSubDivisionCode(String hoc, String coc, String doc, DataSource dataSource)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String code = "";
		if (coc != null) {
			try {
				rwsMasterData.conn = RwsOffices.getConn();
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(
						"SELECT MAX(to_number(SUBDIVISION_OFFICE_CODE))+1 FROM RWS_SUBDIVISION_OFFICE_TBL WHERE DIVISION_OFFICE_CODE=?"
								+ " and CIRCLE_OFFICE_CODE=? and HEAD_OFFICE_CODE=?");
				rwsMasterData.pstmt.setString(1, doc);
				rwsMasterData.pstmt.setString(2, coc);
				rwsMasterData.pstmt.setString(3, hoc);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				rwsMasterData.rs.next();
				code = rwsMasterData.rs.getString(1);
				if (code == null) {
					code = "01";
				} else if (code.length() == 1) {
					code = "0" + code;
				}
			} catch (Exception e) {
				Debug.println("The error in getSubDivisionCode in RwsMasterData " + e);
			} finally {
				rwsMasterData.closeAll();
				// Debug.println("ConnCount after closing is " + connCount);
			}
		}
		// Debug.println("code= " + code);
		return code;
	}

	public static String getUrbanSubDivisionCode(String hoc, String coc, String doc, DataSource dataSource)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String code = "";
		if (coc != null) {
			try {
				//Debug.println("in getSubDivisionCode");

				//Debug.println("hoc= " + hoc + "coc= " + coc + "  doc= " + doc);
				rwsMasterData.conn = RwsOffices.getConn();
				rwsMasterData.stmt = rwsMasterData.conn.createStatement();
				rwsMasterData.rs = rwsMasterData.stmt.executeQuery(
						"SELECT MAX(to_number(SUBDIVISION_OFFICE_CODE))+1 FROM UR_SUBDIVISION_OFFICE_TBL WHERE DIVISION_OFFICE_CODE="
								+ doc + " and CIRCLE_OFFICE_CODE='" + coc + "' and HEAD_OFFICE_CODE=" + hoc);
				rwsMasterData.rs.next();
				code = rwsMasterData.rs.getString(1);
				if (code == null) {
					code = "01";
				} else if (code.length() == 1) {
					code = "0" + code;
				}
			} catch (Exception e) {
				Debug.println("The error in getSubDivisionCode" + e);
			} finally {
				rwsMasterData.closeAll();
				Debug.println("ConnCount after closing is " + connCount);
			}
		}
	//Debug.println("code= " + code);
		return code;
	}

	// *********************************Section Office
	// Methods*************************************
	public static int insertSection(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			//Debug.println("in insertSection");

			rwsMasterData.conn = RwsOffices.getConn();
			ps = rwsMasterData.conn.prepareStatement("insert into RWS_SECTION_OFFICE_TBL values(?,?,?,?,?,?)");
			ps.setString(1, rwsMaster.getHoc());
			ps.setString(2, rwsMaster.getCoc());
			ps.setString(3, rwsMaster.getDoc());
			ps.setString(4, rwsMaster.getSdoc());
			ps.setString(5, rwsMaster.getSoc());
			ps.setString(6, rwsMaster.getSon().toUpperCase());

			rowCount = ps.executeUpdate();

		} catch (SQLException sqle) {
			int errorCode = sqle.getErrorCode();
			if (errorCode == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			Debug.println("The error in insertSection=" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static RwsMaster getSection(String hoc, String coc, String doc, String sdoc, String soc,
			DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		try {
		//	Debug.println("in getSection");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("select * from RWS_SECTION_OFFICE_TBL where SECTION_OFFICE_CODE='" + soc
							+ "' and subdivision_office_code='" + sdoc + "' and division_office_code=" + doc
							+ " and circle_office_code='" + coc + "' and head_office_code='" + hoc + "'");
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setHoc(rwsMasterData.rs.getString("head_office_code"));
				rwsMaster.setCoc(rwsMasterData.rs.getString("circle_office_code"));
				rwsMaster.setDoc(rwsMasterData.rs.getString("division_office_code"));
				rwsMaster.setSdoc(rwsMasterData.rs.getString("subdivision_office_code"));
				rwsMaster.setSoc(rwsMasterData.rs.getString("section_office_code"));
				rwsMaster.setSon(rwsMasterData.rs.getString("section_office_name"));
			}
		} catch (Exception e) {
			Debug.println("The error in getSection=" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rwsMaster;
	}

	public static ArrayList getSections(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList subdivisions = new ArrayList();

		try {
		//	Debug.println("in getSections");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.stmt1 = rwsMasterData.conn.createStatement();
			rwsMasterData.stmt2 = rwsMasterData.conn.createStatement();
			rwsMasterData.stmt3 = rwsMasterData.conn.createStatement();
			Statement stmt4 = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(
					"SELECT DISTINCT ST.HEAD_OFFICE_CODE,H.HEAD_OFFICE_NAME,ST.CIRCLE_OFFICE_CODE,C.CIRCLE_OFFICE_NAME,ST.DIVISION_OFFICE_CODE,D.DIVISION_OFFICE_NAME,ST.SUBDIVISION_OFFICE_CODE,S.SUBDIVISION_OFFICE_NAME,ST.SECTION_OFFICE_CODE,ST.SECTION_OFFICE_NAME FROM RWS_SECTION_OFFICE_TBL ST,RWS_SUBDIVISION_OFFICE_TBL S,RWS_DIVISION_OFFICE_TBL D,RWS_CIRCLE_OFFICE_TBL C,RWS_HEAD_OFFICE_TBL H WHERE ST.HEAD_OFFICE_CODE=H.HEAD_OFFICE_CODE AND ST.CIRCLE_OFFICE_CODE=C.CIRCLE_OFFICE_CODE AND S.CIRCLE_OFFICE_CODE=C.CIRCLE_OFFICE_CODE AND D.CIRCLE_OFFICE_CODE=C.CIRCLE_OFFICE_CODE AND ST.DIVISION_OFFICE_CODE=D.DIVISION_OFFICE_CODE AND S.DIVISION_OFFICE_CODE=D.DIVISION_OFFICE_CODE AND ST.SUBDIVISION_OFFICE_CODE=S.SUBDIVISION_OFFICE_CODE ORDER BY HEAD_OFFICE_CODE,CIRCLE_OFFICE_CODE,DIVISION_OFFICE_CODE,SUBDIVISION_OFFICE_CODE,SECTION_OFFICE_CODE");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setHoc(rwsMasterData.rs.getString(1));
				rwsMaster.setHon(rwsMasterData.rs.getString(2));
				rwsMaster.setCoc(rwsMasterData.rs.getString(3));
				rwsMaster.setCon(rwsMasterData.rs.getString(4));
				rwsMaster.setDoc(rwsMasterData.rs.getString(5));
				rwsMaster.setDon(rwsMasterData.rs.getString(6));
				rwsMaster.setSdoc(rwsMasterData.rs.getString(7));
				rwsMaster.setSdon(rwsMasterData.rs.getString(8));
				rwsMaster.setSoc(rwsMasterData.rs.getString(9));
				rwsMaster.setSon(rwsMasterData.rs.getString(10));

				subdivisions.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The error in getSections" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return subdivisions;
	}

	public static int removeSection(String hoc, String coc, String doc, String sdoc, String soc, DataSource dataSource)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			//Debug.println("in removeSection");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rowCount = rwsMasterData.stmt
					.executeUpdate("delete  from RWS_SECTION_OFFICE_TBL where section_office_code='" + soc
							+ "' and subdivision_office_code='" + sdoc + "' and division_office_code=" + doc
							+ " and circle_office_code='" + coc + "' and head_office_code=" + hoc);
		}

		catch (Exception e) {
			Debug.println("The error in removeSection" + e);
		} finally {

			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static void updateSection(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		try {
			//Debug.println("in updateSection");

			rwsMasterData.conn = RwsOffices.getConn();

			ps = rwsMasterData.conn.prepareStatement(
					"UPDATE  RWS_SECTION_OFFICE_TBL SET SECTION_OFFICE_NAME=? WHERE SECTION_OFFICE_CODE=? AND SUBDIVISION_OFFICE_CODE=? AND DIVISION_OFFICE_CODE=? AND CIRCLE_OFFICE_CODE=? AND HEAD_OFFICE_CODE=?");

			ps.setString(1, (rwsMaster.getSon()).toUpperCase());
			ps.setString(2, rwsMaster.getSoc());
			ps.setString(3, rwsMaster.getSdoc());
			ps.setString(4, rwsMaster.getDoc());
			ps.setString(5, rwsMaster.getCoc());
			ps.setString(6, rwsMaster.getHoc());

			ps.executeUpdate();
		} catch (Exception e) {
			Debug.println("The error in updateSection=" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
	}

	public static String getSectionCode(String hoc, String coc, String doc, String sdoc, DataSource dataSource)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String code = "";
		if (sdoc != null) {
			try {
				//Debug.println("in getSectionCode");

				rwsMasterData.conn = RwsOffices.getConn();
				rwsMasterData.stmt = rwsMasterData.conn.createStatement();
				rwsMasterData.rs = rwsMasterData.stmt.executeQuery(
						"SELECT MAX(to_number(SECTION_OFFICE_CODE))+1 FROM RWS_SECTION_OFFICE_TBL WHERE SUBDIVISION_OFFICE_CODE="
								+ sdoc + "AND DIVISION_OFFICE_CODE=" + doc + " and CIRCLE_OFFICE_CODE='" + coc
								+ "' and HEAD_OFFICE_CODE=" + hoc);
				rwsMasterData.rs.next();
				code = rwsMasterData.rs.getString(1);
				if (code == null)
					code = "1";
			} catch (Exception e) {
				Debug.println("The error in getSectionCode" + e);
			} finally {
				rwsMasterData.closeAll();
				Debug.println("ConnCount after closing is " + connCount);
			}
		}
		return code;
	}

	// **************************************RWS Office
	// Methods****************************
	public static int insertOffice(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			ps = rwsMasterData.conn.prepareStatement("insert into RWS_OFFICE_TBL values(?,?,?,?,?,?,?,?,?,?,?,?)");
			ps.setString(1, rwsMaster.getRoc());
			ps.setString(2, rwsMaster.getAddress().toUpperCase());
			ps.setString(3, rwsMaster.getLocation().toUpperCase());
			ps.setString(4, rwsMaster.getArea().toUpperCase());
			ps.setString(5, rwsMaster.getCity().toUpperCase());
			ps.setString(6, rwsMaster.getPin());
			ps.setString(7, rwsMaster.getPhone());
			ps.setString(8, rwsMaster.getFax());
			ps.setString(9, rwsMaster.getEmail());
			ps.setString(10, rwsMaster.getBuilding());
			ps.setString(11, rwsMaster.getHof());
			ps.setString(12, rwsMaster.getProject());
			rowCount = ps.executeUpdate();
		} catch (SQLException sqle) {
			int errorCode = sqle.getErrorCode();
			if (errorCode == 1)
				errorMessage = "Details for the selected office exists.";
		} catch (Exception e) {
			Debug.println("The error in insertOffice in RwsMasterData " + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static RwsMaster getOffice(String roc, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;

		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn
					.prepareStatement("select * from RWS_OFFICE_TBL where office_code=?");
			rwsMasterData.pstmt.setString(1, roc);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				String oc = rwsMasterData.rs.getString("office_code");
				rwsMaster.setHoc(getHeadOfficeName(oc.substring(0, 1), rwsMasterData.conn));
				if (!oc.substring(1, 3).equals("00"))
					rwsMaster.setCoc(getCircleOfficeName(oc.substring(0, 1), oc.substring(1, 3), rwsMasterData.conn));
				if (!oc.substring(3, 4).equals("0"))
					rwsMaster.setDoc(getDivisionOfficeName(oc.substring(0, 1), oc.substring(1, 3), oc.substring(3, 4),
							rwsMasterData.conn));
				if (!oc.substring(4, 6).equals("00"))
					rwsMaster.setSdoc(getSubDivisionOfficeName(oc.substring(0, 1), oc.substring(1, 3),
							oc.substring(3, 4), oc.substring(4, 6), rwsMasterData.conn));

				rwsMaster.setHoc(getHeadOfficeName(oc.substring(0, 1), rwsMasterData.conn));
				rwsMaster.setRoc(rwsMasterData.rs.getString("office_code"));
				rwsMaster.setAddress(rwsMasterData.rs.getString("address1"));
				rwsMaster.setArea(rwsMasterData.rs.getString("address2"));
				rwsMaster.setLocation(rwsMasterData.rs.getString("address3"));
				rwsMaster.setCity(rwsMasterData.rs.getString("city"));
				rwsMaster.setPin(rwsMasterData.rs.getString("pincode"));
				rwsMaster.setPhone(rwsMasterData.rs.getString("phone"));
				rwsMaster.setFax(rwsMasterData.rs.getString("fax"));
				rwsMaster.setEmail(rwsMasterData.rs.getString("email"));
				rwsMaster.setBuilding(rwsMasterData.rs.getString("building"));
				rwsMaster.setHof(rwsMasterData.rs.getString("head_of_office"));
				rwsMaster.setProject(rwsMasterData.rs.getString("project"));
			}
		} catch (Exception e) {
			Debug.println("The error in getOffice=" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rwsMaster;
	}

	public static ArrayList getOffices(String hoc, String coc) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList offices = new ArrayList();

		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(
					"select * from RWS_OFFICE_TBL where substr(office_code,1,1)=? and substr(office_code,2,2)=?");
			rwsMasterData.pstmt.setString(1, hoc);
			rwsMasterData.pstmt.setString(2, coc);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setRoc(rwsMasterData.rs.getString("office_code"));
				rwsMaster.setAddress(rwsMasterData.rs.getString("address1"));
				rwsMaster.setArea(rwsMasterData.rs.getString("address2"));
				rwsMaster.setLocation(rwsMasterData.rs.getString("address3"));
				rwsMaster.setCity(rwsMasterData.rs.getString("city"));
				rwsMaster.setPin(rwsMasterData.rs.getString("pincode"));
				rwsMaster.setPhone(rwsMasterData.rs.getString("phone"));
				rwsMaster.setFax(rwsMasterData.rs.getString("fax"));
				rwsMaster.setEmail(rwsMasterData.rs.getString("email"));
				if (rwsMasterData.rs.getString("building") != null
						&& rwsMasterData.rs.getString("building").equalsIgnoreCase("O"))
					rwsMaster.setBuilding("OWN");
				else if (rwsMasterData.rs.getString("building") != null
						&& rwsMasterData.rs.getString("building").equalsIgnoreCase("R"))
					rwsMaster.setBuilding("RENTED");
				rwsMaster.setHof(getDesgnName(rwsMasterData.rs.getString("head_of_office"), rwsMasterData.conn));
				if (rwsMasterData.rs.getString("project") != null
						&& rwsMasterData.rs.getString("project").equalsIgnoreCase("P"))
					rwsMaster.setProject("PROJECT");
				else if (rwsMasterData.rs.getString("project") != null
						&& rwsMasterData.rs.getString("project").equalsIgnoreCase("R"))
					rwsMaster.setProject("REGULAR");
				offices.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The error in getOffices in RwsMasterData  " + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return offices;
	}

	public static int removeOffice(String roc, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int count = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn
					.prepareStatement("delete  from RWS_OFFICE_TBL where office_code=?");
			rwsMasterData.pstmt.setString(1, roc);
			count = rwsMasterData.pstmt.executeUpdate();
		} catch (Exception e) {
			Debug.println("The error in removeOffice in RwsMasterData  " + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return count;
	}

	// updated by swapna on 14-07-2011 for void to int in method and return
	public static int updateOffice(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int count = 0;
		try {
			//Debug.println("in updateOffice");

			rwsMasterData.conn = RwsOffices.getConn();

			ps = rwsMasterData.conn.prepareStatement(
					"update  RWS_OFFICE_TBL set address1=?,address2=?,address3=?,city=?,pincode=?,phone=?,fax=?,email=?,building=?,head_of_office=?,project=? where office_code=?");
			ps.setString(1, rwsMaster.getAddress().toUpperCase());
			ps.setString(2, rwsMaster.getArea().toUpperCase());
			ps.setString(3, rwsMaster.getLocation().toUpperCase());
			ps.setString(4, rwsMaster.getCity().toUpperCase());
			ps.setString(5, rwsMaster.getPin());
			ps.setString(6, rwsMaster.getPhone());
			ps.setString(7, rwsMaster.getFax());
			ps.setString(8, rwsMaster.getEmail());
			ps.setString(9, rwsMaster.getBuilding());
			ps.setString(10, rwsMaster.getHof());
			ps.setString(11, rwsMaster.getProject());
			ps.setString(12, rwsMaster.getRoc());
			count = ps.executeUpdate();
			//Debug.println("count:" + count);
		} catch (Exception e) {
			Debug.println("The error in updateOffice=" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return count;
	}

	public static boolean insertSource(RwsMaster rwsMaster, ArrayList checkedAssets, ArrayList checkedHabs,
			DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		AssetSourceBean assetSourceBean = new AssetSourceBean();
		HabSourceBean habSourceBean = new HabSourceBean();
		int rowCount[] = null;
		boolean flag = false;
		String query = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.conn.setAutoCommit(false);
			rwsMasterData.stmt=rwsMasterData.conn.createStatement();
			if (rwsMaster.getSourceDepth() == null || ((String) rwsMaster.getSourceDepth()).equals("")) {
				rwsMaster.setSourceDepth("");
			}
			if (rwsMaster.getSourceDiameter() == null || ((String) rwsMaster.getSourceDiameter()).equals("")) {
				rwsMaster.setSourceDiameter("");
			}
			if (rwsMaster.getWaterQuality().equalsIgnoreCase("SS")) {
				rwsMaster.setFlouride(0);
				rwsMaster.setBrakish(0);
				rwsMaster.setIron(0);
				rwsMaster.setOthers("");
				rwsMaster.setOthersType("");
			}
			int noOfHabs = getSourceHabitationsCount(rwsMasterData.conn, rwsMaster.getSourceCode());
			// subsurface source
			if (rwsMaster.getSourceTypeCode() != null && rwsMaster.getSourceTypeCode().equals("1")) {
				query = "insert into RWS_SOURCE_TBL(SOURCE_CODE,SOURCE_NAME,SOURCE_TYPE_CODE,"
						+ "SUBSOURCE_TYPE_CODE,HAB_CODE,NO_OF_HABITAITONS_COVERD,"
						+ "POPULATION_BENIFITED,SEASONAL,SOURCE_CONDITION,WATER_QUALITY,"
						+ "STATIC_WATER_LEVEL,SUMMER_WATER_LEVEL,YIELD,DIST_NEAR_PRIVATE_SOURCE,LOCATION,"
						+ "DEPTH,DIAMETER," + "TYPE,"
						+ "ASSET_CODE,ALT_WATER_SOURCE_DET,latitude,longitude,elevation,way_point) values" + "('"
						+ rwsMaster.getSourceCode() + "','" + rwsMaster.getSourceName().toUpperCase() + "'," + "nvl('"
						+ rwsMaster.getSourceTypeCode() + "',0)," + "nvl('" + rwsMaster.getSubSourceTypeCode()
						+ "',0),'" + rwsMaster.getHabCode() + "'," + "nvl('" + rwsMaster.getNoOfHab() + "',0),"
						+ "nvl('" + rwsMaster.getPopbenefited() + "',0),'" + rwsMaster.getSeasonal() + "','"
						+ rwsMaster.getPresentCondition() + "','" + rwsMaster.getWaterQuality() + "'," + "nvl('"
						+ rwsMaster.getStaticWaterLevel() + "',0)," + "nvl('" + rwsMaster.getSummerWaterLevel()
						+ "',0),'" + rwsMaster.getYield() + "'," + "nvl('" + rwsMaster.getDistFromSource() + "',0),'"
						+ rwsMaster.getLocation() + "'," + "nvl('" + rwsMaster.getSourceDepth() + "',0)," + "nvl('"
						+ rwsMaster.getSourceDiameter() + "',0),'" + rwsMaster.getType() + "','"
						+ rwsMaster.getAssetCode() + "',nvl('" + rwsMaster.getArea() + "','')," + "nvl('"
						+ rwsMaster.getLatitude() + "',0)," + "nvl('" + rwsMaster.getLongitude() + "',0)," + "nvl('"
						+ rwsMaster.getElevation() + "',0)," + "nvl('" + rwsMaster.getWaypoint() + "',0))";
			}
			else if (rwsMaster.getSourceTypeCode() != null && rwsMaster.getSourceTypeCode().equals("2")) {
				query = "insert into RWS_SOURCE_TBL(SOURCE_CODE,SOURCE_NAME,SOURCE_TYPE_CODE,"
						+ "SUBSOURCE_TYPE_CODE,HAB_CODE,NO_OF_HABITAITONS_COVERD,"
						+ "POPULATION_BENIFITED,SEASONAL,SOURCE_CONDITION,WATER_QUALITY,"
						+ "STATIC_WATER_LEVEL,SUMMER_WATER_LEVEL,YIELD,DIST_NEAR_PRIVATE_SOURCE,LOCATION,"
						+ "DEPTH,DIAMETER,"
						// + "TYPE,"
						+ "ASSET_CODE,latitude,longitude,elevation,way_point,TYPE_OF_TREATMENT,PLANT_CAPACITY) values"
						+ "('" + rwsMaster.getSourceCode() + "','" + rwsMaster.getSourceName().toUpperCase() + "',"
						+ "nvl('" + rwsMaster.getSourceTypeCode() + "',0)," + "nvl('" + rwsMaster.getSubSourceTypeCode()
						+ "',0),'" + rwsMaster.getHabCode() + "'," + "nvl('" + rwsMaster.getNoOfHab() + "',0),"
						+ "nvl('" + rwsMaster.getPopbenefited() + "',0),'" + rwsMaster.getSeasonal() + "','"
						+ rwsMaster.getPresentCondition() + "','" + rwsMaster.getWaterQuality() + "'," + "nvl('"
						+ rwsMaster.getStaticWaterLevel() + "',0)," + "nvl('" + rwsMaster.getSummerWaterLevel()
						+ "',0),'" + rwsMaster.getYield() + "'," + "nvl('" + rwsMaster.getDistFromSource() + "',0),'"
						// for surfacesource location field contains tapping
						// point
						+ rwsMaster.getTappingPoint() + "'," + "nvl('" + rwsMaster.getSourceDepth() + "',0)," + "nvl('"
						+ rwsMaster.getSourceDiameter() + "',0),'"
						+ rwsMaster.getAssetCode() + "'," + "nvl('" + rwsMaster.getLatitude() + "',0)," + "nvl('"
						+ rwsMaster.getLongitude() + "',0)," + "nvl('" + rwsMaster.getElevation() + "',0)," + "nvl('"
						+ rwsMaster.getWaypoint() + "',0),'" + rwsMaster.getTypeofTreatment() + "','"
						+ rwsMaster.getPlantCapacity() + "')";
			}
			rwsMasterData.stmt.addBatch(query);
			if (rwsMaster.getWaterQuality().equalsIgnoreCase("NSS")) {
				String contaminationQuery = "insert into RWS_SOURCE_CONTAMINATION_TBL("
						+ "SOURCE_CODE,CONT_TYPE,CONT_PERC) values(" + "'" + rwsMaster.getSourceCode() + "',"
						+ "'FLOURIDE'," + "nvl('" + rwsMaster.getFlouride() + "',0) )";
				rwsMasterData.stmt.addBatch(contaminationQuery);

				contaminationQuery = "insert into RWS_SOURCE_CONTAMINATION_TBL("
						+ "SOURCE_CODE,CONT_TYPE,CONT_PERC) values(" + "'" + rwsMaster.getSourceCode() + "',"
						+ "'BRAKISH'," + "nvl('" + rwsMaster.getBrakish() + "',0) )";

				rwsMasterData.stmt.addBatch(contaminationQuery);

				contaminationQuery = "insert into RWS_SOURCE_CONTAMINATION_TBL("
						+ "SOURCE_CODE,CONT_TYPE,CONT_PERC) values(" + "'" + rwsMaster.getSourceCode() + "',"
						+ "'IRON'," + "nvl('" + rwsMaster.getIron() + "',0) )";

				rwsMasterData.stmt.addBatch(contaminationQuery);

				if (rwsMaster.getOthersType() != null && !rwsMaster.getOthersType().equals("")) {
					contaminationQuery = "insert into RWS_SOURCE_CONTAMINATION_TBL("
							+ "SOURCE_CODE,CONT_TYPE,CONT_PERC) values(" + "'" + rwsMaster.getSourceCode() + "'," + "'"
							+ format(rwsMaster.getOthersType()) + "'," + "'" + format(rwsMaster.getOthers()) + "')";

					rwsMasterData.stmt.addBatch(contaminationQuery);
				}
			}
			if (checkedHabs != null) {
				for (int i = 0; i < checkedHabs.size(); i++) {
					habSourceBean = (HabSourceBean) checkedHabs.get(i);
					if (habSourceBean.getHabCode().equalsIgnoreCase("on")) {
						query = " INSERT INTO RWS_SOURCE_HABITATION_TBL  VALUES(" + "'" + rwsMaster.getSourceCode()
								+ "','" + habSourceBean.getPanchRajCode().substring(0, 16) + "')";
						rwsMasterData.stmt.addBatch(query);
					}
				}
			}
			query = "update RWS_ASSET_MAST_TBL set UPDATE_DATE=SYSDATE where asset_code='" + rwsMaster.getAssetCode()
					+ "'";
			rwsMasterData.stmt.addBatch(query);
			rowCount = rwsMasterData.stmt.executeBatch();
			for (int j = 0; j < rowCount.length; j++) {
				if (rowCount[j] != 0)
					flag = true;
			}
			if (flag)
				rwsMasterData.conn.commit();
			rwsMasterData.conn.setAutoCommit(true);
		} catch (Exception e) {
			Debug.println("The Exception at  insertSource in RwsMasterData :  " + e);
			e.printStackTrace();
		} finally {
			rwsMasterData.closeAll();
		}
		return flag;
	}

	public static RwsMaster getSource(String sourceCode, String mode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			String query = "select * from rws_source_tbl where source_code=?";
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt.setString(1, sourceCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setFlouride(0);
				rwsMaster.setBrakish(0);
				rwsMaster.setIron(0);
				rwsMaster.setSourceCode(rwsMasterData.rs.getString("SOURCE_CODE"));
				rwsMaster.setSourceName(rwsMasterData.rs.getString("SOURCE_NAME"));
				rwsMaster.setSourceTypeCode(rwsMasterData.rs.getString("SOURCE_TYPE_CODE"));
				rwsMaster.setSubSourceTypeCode(rwsMasterData.rs.getString("SUBSOURCE_TYPE_CODE"));
				rwsMaster.setWaterQuality(rwsMasterData.rs.getString("WATER_QUALITY"));
				rwsMaster.setHabCode(rwsMasterData.rs.getString("HAB_CODE"));
				rwsMaster.setNoOfHab(getSourceHabitationsCount(rwsMasterData.conn, sourceCode) + "");
				rwsMaster.setPopbenefited(rwsMasterData.rs.getString("POPULATION_BENIFITED"));
				rwsMaster.setSeasonal(rwsMasterData.rs.getString("SEASONAL"));
				rwsMaster.setPresentCondition(rwsMasterData.rs.getString("SOURCE_CONDITION"));
				rwsMaster.setWaterQuality(rwsMasterData.rs.getString("WATER_QUALITY"));
				rwsMaster.setStaticWaterLevel(rwsMasterData.rs.getString("STATIC_WATER_LEVEL"));
				rwsMaster.setSummerWaterLevel(rwsMasterData.rs.getString("SUMMER_WATER_LEVEL"));
				rwsMaster.setYield(rwsMasterData.rs.getString("YIELD"));
				rwsMaster.setDistFromSource(rwsMasterData.rs.getString("DIST_NEAR_PRIVATE_SOURCE"));
				rwsMaster.setLocation(rwsMasterData.rs.getString("LOCATION"));
				rwsMaster.setSourceDiameter(rwsMasterData.rs.getString("DIAMETER"));
				rwsMaster.setSourceDepth(rwsMasterData.rs.getString("DEPTH"));
				rwsMaster.setType(rwsMasterData.rs.getString("TYPE"));
				rwsMaster.setAssetCode(rwsMasterData.rs.getString("ASSET_CODE"));
				rwsMaster.setLatitude(rwsMasterData.rs.getString("latitude"));
				rwsMaster.setLongitude(rwsMasterData.rs.getString("Longitude"));
				rwsMaster.setElevation(rwsMasterData.rs.getString("Elevation"));
				rwsMaster.setWaypoint(rwsMasterData.rs.getString("way_point"));
				rwsMaster.setTypeofTreatment(rwsMasterData.rs.getString("TYPE_OF_TREATMENT"));
				rwsMaster.setPlantCapacity(rwsMasterData.rs.getString("PLANT_CAPACITY"));
			}
			query = "select * from RWS_SOURCE_CONTAMINATION_TBL where source_code=?";
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt.setString(1, sourceCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				if (rwsMasterData.rs.getString("CONT_TYPE").equalsIgnoreCase("FLOURIDE")) {
					rwsMaster.setFlouride(rwsMasterData.rs.getDouble("CONT_PERC"));
				} else if (rwsMasterData.rs.getString("CONT_TYPE").equalsIgnoreCase("BRAKISH")) {
					rwsMaster.setBrakish(rwsMasterData.rs.getDouble("CONT_PERC"));
				} else if (rwsMasterData.rs.getString("CONT_TYPE").equalsIgnoreCase("IRON")) {
					rwsMaster.setIron(rwsMasterData.rs.getDouble("CONT_PERC"));
				} else {
					rwsMaster.setOthersType(format(rwsMasterData.rs.getString("CONT_TYPE")));
					rwsMaster.setOthers(rwsMasterData.rs.getString("CONT_PERC"));
				}
			}
		} catch (Exception e) {
			Debug.println("The Exception at getSource in RwsMasterData : " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return rwsMaster;
	}

	public static ArrayList getSources(DataSource dataSource, String assetTypeCode, String sourceTypeCode)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList sources = new ArrayList();
		Debug.println("sourceTypeCode is " + sourceTypeCode);
		String shortSchemeCode = "";

		//Debug.println("in getSources in RwsMasterData");
		try {
		//	Debug.println("in getSources");

			if (assetTypeCode.equals("01"))
				shortSchemeCode = "6%";
			else if (assetTypeCode.equals("02"))
				shortSchemeCode = "4%";
			else if (assetTypeCode.equals("03"))
				shortSchemeCode = "8%";
			else if (assetTypeCode.equals("09"))
				shortSchemeCode = "45%";
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.stmt1 = rwsMasterData.conn.createStatement();
			String query = "select * from rws_source_tbl  where SOURCE_TYPE_CODE = '" + sourceTypeCode
					+ "' and substr(source_code,17,3) like '" + shortSchemeCode + "' order by source_code";
			//Debug.println("query in getSources is " + query);
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(query);
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setAssetTypeCode(assetTypeCode);
				rwsMaster.setSourceCode(rwsMasterData.rs.getString("SOURCE_CODE"));
				rwsMaster.setSourceName(rwsMasterData.rs.getString("SOURCE_NAME"));
				rwsMaster.setSourceTypeCode(rwsMasterData.rs.getString("SOURCE_TYPE_CODE"));
				rwsMaster.setSourceTypeName(
						getSourceTypeName(rwsMasterData.rs.getString("SOURCE_TYPE_CODE"), rwsMasterData.conn));
				rwsMaster.setSubSourceTypeCode(rwsMasterData.rs.getString("SUBSOURCE_TYPE_CODE"));
				rwsMaster.setSubSourceTypeName(getSubSourceName(rwsMasterData.rs.getString("SUBSOURCE_TYPE_CODE"),
						rwsMasterData.rs.getString("SOURCE_TYPE_CODE"), rwsMasterData.conn));
				rwsMaster.setHabName(
						rwsMasterData.getHabName(rwsMasterData.rs.getString("HAB_CODE"), rwsMasterData.conn));
				rwsMaster.setHabCode(rwsMasterData.rs.getString("HAB_CODE"));
				// rwsMaster.setNoOfHab(rwsMasterData.rs.getString("NO_OF_HABITAITONS_COVERD"));
				//Debug.println("calling getSourceHabitationsCount");
				rwsMaster.setNoOfHab(
						getSourceHabitationsCount(rwsMasterData.conn, rwsMasterData.rs.getString("SOURCE_CODE")) + "");
				rwsMaster.setPopbenefited(rwsMasterData.rs.getString("POPULATION_BENIFITED"));
				// here
				/*
				 * if (rwsMasterData.rs.getString("SEASONAL").equalsIgnoreCase("Y"))
				 * rwsMaster.setSeasonal("YES"); else rwsMaster.setSeasonal("NO");
				 */
				// if
				// (rwsMasterData.rs.getString("SOURCE_CONDITION").equalsIgnoreCase("W"))
				rwsMaster.setPresentCondition(rwsMasterData.rs.getString("SOURCE_CONDITION"));

				// else if (rwsMasterData.rs.getString("PRESENT_CONDITION")
				// .equalsIgnoreCase("N"))
				// rwsMaster.setPresentCondition("NOT WORKING");
				// else if (rwsMasterData.rs.getString("PRESENT_CONDITION")
				// .equalsIgnoreCase("D"))
				// rwsMaster.setPresentCondition("DRIED");
				String waterQuality = rwsMasterData.rs.getString("WATER_QUALITY");
				if (waterQuality == null)
					waterQuality = "";
				rwsMaster.setWaterQuality(waterQuality);
			//	Debug.println("waterQuality is " + waterQuality);
				rwsMaster.setStaticWaterLevel(rwsMasterData.rs.getString("STATIC_WATER_LEVEL"));
				rwsMaster.setSummerWaterLevel(rwsMasterData.rs.getString("SUMMER_WATER_LEVEL"));
				rwsMaster.setYield(rwsMasterData.rs.getString("YIELD"));
				rwsMaster.setDistFromSource(rwsMasterData.rs.getString("DIST_NEAR_PRIVATE_SOURCE"));
				rwsMaster.setCodeName(
						rwsMasterData.rs.getString("SOURCE_CODE") + " - " + rwsMasterData.rs.getString("SOURCE_NAME"));
				rwsMaster.setLocation(rwsMasterData.rs.getString("location"));
				if (rwsMasterData.rs.getString("SEASONAL") == null)
					rwsMaster.setSeasonal("");
				else if (rwsMasterData.rs.getString("SEASONAL") != null
						&& rwsMasterData.rs.getString("SEASONAL").equalsIgnoreCase("Y"))
					rwsMaster.setSeasonal("YES");
				else
					rwsMaster.setSeasonal("NO");
				// getting contamination details
				if (waterQuality.equalsIgnoreCase("NSS")) {
					//Debug.println("getting waterQuality data");
					query = "select * from RWS_SOURCE_CONTAMINATION_TBL where source_code='"
							+ rwsMasterData.rs.getString("SOURCE_CODE") + "'";
					//Debug.println("query in getSource is " + query);
					rwsMasterData.rs1 = rwsMasterData.stmt1.executeQuery(query);
					if (rwsMasterData.rs1.next()) {
						if (rwsMasterData.rs1.getString("CONT_TYPE").equalsIgnoreCase("FLOURIDE")) {
							//Debug.println("assigning flouride");
							rwsMaster.setFlouride(rwsMasterData.rs1.getDouble("CONT_PERC"));
						} else if (rwsMasterData.rs1.getString("CONT_TYPE").equalsIgnoreCase("BRAKISH")) {
							//Debug.println("assigning brakisn");
							rwsMaster.setBrakish(rwsMasterData.rs1.getDouble("CONT_PERC"));
						} else if (rwsMasterData.rs1.getString("CONT_TYPE").equalsIgnoreCase("IRON")) {
							//Debug.println("assigning iron");
							rwsMaster.setIron(rwsMasterData.rs1.getDouble("CONT_PERC"));
						} else {
							//Debug.println("assigning others");
							rwsMaster.setOthersType(format(rwsMasterData.rs1.getString("CONT_TYPE")));
							rwsMaster.setOthers(rwsMasterData.rs1.getString("CONT_PERC"));
						}

					} else {
						rwsMaster.setFlouride(0);
						rwsMaster.setBrakish(0);
						rwsMaster.setIron(0);
					}
				}
				// end of contamination Detials
				sources.add(rwsMaster);
				//Debug.println("executed all");
			}
		} catch (Exception e) {
			Debug.println("The error in getSources=" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return sources;
	}

	public static ArrayList getSources(DataSource dataSource, String dcode, String mcode, String pcode, String vcode,
			String habCode, String assetTypeCode, String sourceTypeCode, String assetCode, String pumpCode)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList sources = new ArrayList();
		String shortSchemeCode = "";
		try {
			String likeCondition = "",waterQuality="",query2="";
			if (assetTypeCode.equals("01")) {
				shortSchemeCode = "6%";
				likeCondition = " substr(source_code,17,3) like ('6%') ";
			} else if (assetTypeCode.equals("02")) {
				shortSchemeCode = "4%";
				likeCondition = " (substr(source_code,17,3) like ('40%') or substr(source_code,17,3) like ('41%') or substr(source_code,17,3) like ('42%') or substr(source_code,17,3) like ('43%') or substr(source_code,17,3) like ('44%'))";
			} else if (assetTypeCode.equals("03")) {
				shortSchemeCode = "8%";
				likeCondition = " substr(source_code,17,3) like ('8%') ";
			} else if (assetTypeCode.equals("09")) {
				shortSchemeCode = "45%";
				likeCondition = " (substr(source_code,17,3) like ('45%') or substr(source_code,17,3) like ('46%') or substr(source_code,17,3) like ('47%') or substr(source_code,17,3) like ('48%') or substr(source_code,17,3) like ('49%'))";
			}
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			String query = "";
			if (habCode != null && !habCode.equals("")) {
				/*query = query + "select * from rws_source_tbl  where SOURCE_TYPE_CODE = '" + sourceTypeCode + "' and "
				+ likeCondition + " and substr(source_code,1,16)='" + habCode + "'";*/
		
				query = query + "select * from rws_source_tbl  where SOURCE_TYPE_CODE = '" + sourceTypeCode + "' and "
							  + likeCondition ;
			} else {
				query = "select * from rws_source_tbl  where SOURCE_TYPE_CODE = '" + sourceTypeCode + "' and "
						+ likeCondition;
				/*if (dcode != null && !dcode.equals("")) {
					query = query + " and substr(source_code,1,2)='" + dcode + "'";
					if (mcode != null && !mcode.equals("")) {
						query = query + " and substr(source_code,6,2)='" + mcode + "'";
						if (pcode != null && !pcode.equals("")) {
							query = query + " and substr(source_code,13,2)='" + pcode + "'";
							if (vcode != null && !vcode.equals("")) {
								query = query + " and substr(source_code,8,3)='" + vcode + "'";
								if (habCode != null && !habCode.equals("")) {
									query = query + " and substr(source_code,1,16)='" + habCode + "'";
								}
							}
						}
					}
				}*/
			}
			query += " and asset_code='" + assetCode + "'";
			query += " and substr(source_code,17,3)='" + pumpCode + "'";
			query += " order by source_code";
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(query);
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setAssetTypeCode(assetTypeCode);
				rwsMaster.setSourceCode(rwsMasterData.rs.getString("SOURCE_CODE"));
				rwsMaster.setSourceName(rwsMasterData.rs.getString("SOURCE_NAME"));
				rwsMaster.setSourceTypeCode(rwsMasterData.rs.getString("SOURCE_TYPE_CODE"));
				rwsMaster.setSourceTypeName(
						getSourceTypeName(rwsMasterData.rs.getString("SOURCE_TYPE_CODE"), rwsMasterData.conn));
				rwsMaster.setSubSourceTypeCode(rwsMasterData.rs.getString("SUBSOURCE_TYPE_CODE"));
				rwsMaster.setSubSourceTypeName(getSubSourceName(rwsMasterData.rs.getString("SUBSOURCE_TYPE_CODE"),
						rwsMasterData.rs.getString("SOURCE_TYPE_CODE"), rwsMasterData.conn));
				rwsMaster.setHabName(
						RwsMasterData.getHabName(rwsMasterData.rs.getString("HAB_CODE"), rwsMasterData.conn));
				rwsMaster.setHabCode(rwsMasterData.rs.getString("HAB_CODE"));
				rwsMaster.setNoOfHab(
						getSourceHabitationsCount(rwsMasterData.conn, rwsMasterData.rs.getString("SOURCE_CODE")) + "");
				rwsMaster.setPopbenefited(rwsMasterData.rs.getString("POPULATION_BENIFITED"));
				rwsMaster.setPresentCondition(rwsMasterData.rs.getString("SOURCE_CONDITION"));
				 waterQuality = rwsMasterData.rs.getString("WATER_QUALITY");
				if (waterQuality == null)
					waterQuality = "-";
				rwsMaster.setWaterQuality(waterQuality);
				 query2 = "select COMPO_LAT,COMPO_LON,COMPO_IMAGE from RWS_ASSET_COMPONENT_IMAGE_TBL where ASSET_CODE=? "
						+ "and ASSET_COMPONENT=?";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query2);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.pstmt.setString(2, rwsMasterData.rs.getString("SOURCE_CODE"));
				rwsMasterData.rs2 = rwsMasterData.pstmt.executeQuery();
				if (rwsMasterData.rs2.next()) {
					java.sql.Blob a = rwsMasterData.rs2.getBlob("COMPO_IMAGE");
					if (a == null) {
						rwsMaster.setImageStatus("No");
					} else {
						rwsMaster.setImageStatus("Yes");
					}
					rwsMaster.setLatitude(rwsMasterData.rs2.getString("COMPO_LAT"));
					rwsMaster.setLongitude(rwsMasterData.rs2.getString("COMPO_LON"));
				}
				rwsMaster.setElevation(rwsMasterData.rs.getString("elevation"));
				rwsMaster.setWaypoint(rwsMasterData.rs.getString("way_point"));
				rwsMaster.setTypeofTreatment(rwsMasterData.rs.getString("TYPE_OF_TREATMENT"));
				rwsMaster.setPlantCapacity(rwsMasterData.rs.getString("PLANT_CAPACITY"));
				rwsMaster.setStaticWaterLevel(rwsMasterData.rs.getString("STATIC_WATER_LEVEL"));
				rwsMaster.setSummerWaterLevel(rwsMasterData.rs.getString("SUMMER_WATER_LEVEL"));
				rwsMaster.setYield(rwsMasterData.rs.getString("YIELD"));
				rwsMaster.setDistFromSource(rwsMasterData.rs.getString("DIST_NEAR_PRIVATE_SOURCE"));
				rwsMaster.setCodeName(
						rwsMasterData.rs.getString("SOURCE_CODE") + " - " + rwsMasterData.rs.getString("SOURCE_NAME"));
				rwsMaster.setLocation(rwsMasterData.rs.getString("location"));
				if (rwsMasterData.rs.getString("SEASONAL") == null)
					rwsMaster.setSeasonal("");
				else if (rwsMasterData.rs.getString("SEASONAL") != null
						&& rwsMasterData.rs.getString("SEASONAL").equalsIgnoreCase("Y"))
					rwsMaster.setSeasonal("YES");
				else
					rwsMaster.setSeasonal("NO");
				if (waterQuality.equalsIgnoreCase("NSS")) {
					query = "select * from RWS_SOURCE_CONTAMINATION_TBL where source_code=?";
					rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
					rwsMasterData.pstmt.setString(1, rwsMasterData.rs.getString("SOURCE_CODE"));
					rwsMasterData.rs1 = rwsMasterData.pstmt.executeQuery();
					if (rwsMasterData.rs1.next()) {
						if (rwsMasterData.rs1.getString("CONT_TYPE").equalsIgnoreCase("FLOURIDE")) {
							rwsMaster.setFlouride(rwsMasterData.rs1.getDouble("CONT_PERC"));
						} else if (rwsMasterData.rs1.getString("CONT_TYPE").equalsIgnoreCase("BRAKISH")) {
							rwsMaster.setBrakish(rwsMasterData.rs1.getDouble("CONT_PERC"));
						} else if (rwsMasterData.rs1.getString("CONT_TYPE").equalsIgnoreCase("IRON")) {
							rwsMaster.setIron(rwsMasterData.rs1.getDouble("CONT_PERC"));
						} else {
							rwsMaster.setOthersType(format(rwsMasterData.rs1.getString("CONT_TYPE")));
							rwsMaster.setOthers(rwsMasterData.rs1.getString("CONT_PERC"));
						}
					} else {
						rwsMaster.setFlouride(0);
						rwsMaster.setBrakish(0);
						rwsMaster.setIron(0);
					}
				}
				sources.add(rwsMaster);
			}
			
			
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
				query ="select a.* from rws_source_tbl a,RWS_ASSET_SOURCE_LNK_TBL b where a.SOURCE_CODE=b.SOURCE_CODE and SOURCE_TYPE_CODE = '" + sourceTypeCode + "'" ;
			query += " and b.asset_code='" + assetCode + "'";
		/*	query += " and substr(source_code,17,3)='" + pumpCode + "'";*/
			query += " order by a.source_code";
			System.out.println(query);
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(query);
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setAssetTypeCode(assetTypeCode);
				rwsMaster.setSourceCode(rwsMasterData.rs.getString("SOURCE_CODE"));
				rwsMaster.setSourceName(rwsMasterData.rs.getString("SOURCE_NAME"));
				rwsMaster.setSourceTypeCode(rwsMasterData.rs.getString("SOURCE_TYPE_CODE"));
				rwsMaster.setSourceTypeName(
						getSourceTypeName(rwsMasterData.rs.getString("SOURCE_TYPE_CODE"), rwsMasterData.conn));
				rwsMaster.setSubSourceTypeCode(rwsMasterData.rs.getString("SUBSOURCE_TYPE_CODE"));
				rwsMaster.setSubSourceTypeName(getSubSourceName(rwsMasterData.rs.getString("SUBSOURCE_TYPE_CODE"),
						rwsMasterData.rs.getString("SOURCE_TYPE_CODE"), rwsMasterData.conn));
				rwsMaster.setHabName(
						RwsMasterData.getHabName(rwsMasterData.rs.getString("HAB_CODE"), rwsMasterData.conn));
				rwsMaster.setHabCode(rwsMasterData.rs.getString("HAB_CODE"));
				rwsMaster.setNoOfHab(
						getSourceHabitationsCount(rwsMasterData.conn, rwsMasterData.rs.getString("SOURCE_CODE")) + "");
				rwsMaster.setPopbenefited(rwsMasterData.rs.getString("POPULATION_BENIFITED"));
				rwsMaster.setPresentCondition(rwsMasterData.rs.getString("SOURCE_CONDITION"));
				if(sourceTypeCode.equals("1"))
					rwsMaster.setSourceDepth(rwsMasterData.rs.getString("Depth"));
				else
					rwsMaster.setSourceDepth("");
				rwsMaster.setSourceExist("true");
				waterQuality="";
				 waterQuality = rwsMasterData.rs.getString("WATER_QUALITY");
				if (waterQuality == null)
					waterQuality = "-";
				rwsMaster.setWaterQuality(waterQuality);
				query2 = "select COMPO_LAT,COMPO_LON,COMPO_IMAGE from RWS_ASSET_COMPONENT_IMAGE_TBL where ASSET_CODE=? "
						+ "and ASSET_COMPONENT=?";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query2);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.pstmt.setString(2, rwsMasterData.rs.getString("SOURCE_CODE"));
				rwsMasterData.rs2 = rwsMasterData.pstmt.executeQuery();
				if (rwsMasterData.rs2.next()) {
					java.sql.Blob a = rwsMasterData.rs2.getBlob("COMPO_IMAGE");
					if (a == null) {
						rwsMaster.setImageStatus("No");
					} else {
						rwsMaster.setImageStatus("Yes");
					}
					rwsMaster.setLatitude(rwsMasterData.rs2.getString("COMPO_LAT"));
					rwsMaster.setLongitude(rwsMasterData.rs2.getString("COMPO_LON"));
				}
				rwsMaster.setElevation(rwsMasterData.rs.getString("elevation"));
				rwsMaster.setWaypoint(rwsMasterData.rs.getString("way_point"));
				rwsMaster.setTypeofTreatment(rwsMasterData.rs.getString("TYPE_OF_TREATMENT"));
				rwsMaster.setPlantCapacity(rwsMasterData.rs.getString("PLANT_CAPACITY"));
				rwsMaster.setStaticWaterLevel(rwsMasterData.rs.getString("STATIC_WATER_LEVEL"));
				rwsMaster.setSummerWaterLevel(rwsMasterData.rs.getString("SUMMER_WATER_LEVEL"));
				rwsMaster.setYield(rwsMasterData.rs.getString("YIELD"));
				rwsMaster.setDistFromSource(rwsMasterData.rs.getString("DIST_NEAR_PRIVATE_SOURCE"));
				rwsMaster.setCodeName(
						rwsMasterData.rs.getString("SOURCE_CODE") + " - " + rwsMasterData.rs.getString("SOURCE_NAME"));
				rwsMaster.setLocation(rwsMasterData.rs.getString("location"));
				if (rwsMasterData.rs.getString("SEASONAL") == null)
					rwsMaster.setSeasonal("");
				else if (rwsMasterData.rs.getString("SEASONAL") != null
						&& rwsMasterData.rs.getString("SEASONAL").equalsIgnoreCase("Y"))
					rwsMaster.setSeasonal("YES");
				else
					rwsMaster.setSeasonal("NO");
				if (waterQuality.equalsIgnoreCase("NSS")) {
					query = "select * from RWS_SOURCE_CONTAMINATION_TBL where source_code=?";
					rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
					rwsMasterData.pstmt.setString(1, rwsMasterData.rs.getString("SOURCE_CODE"));
					rwsMasterData.rs1 = rwsMasterData.pstmt.executeQuery();
					if (rwsMasterData.rs1.next()) {
						if (rwsMasterData.rs1.getString("CONT_TYPE").equalsIgnoreCase("FLOURIDE")) {
							rwsMaster.setFlouride(rwsMasterData.rs1.getDouble("CONT_PERC"));
						} else if (rwsMasterData.rs1.getString("CONT_TYPE").equalsIgnoreCase("BRAKISH")) {
							rwsMaster.setBrakish(rwsMasterData.rs1.getDouble("CONT_PERC"));
						} else if (rwsMasterData.rs1.getString("CONT_TYPE").equalsIgnoreCase("IRON")) {
							rwsMaster.setIron(rwsMasterData.rs1.getDouble("CONT_PERC"));
						} else {
							rwsMaster.setOthersType(format(rwsMasterData.rs1.getString("CONT_TYPE")));
							rwsMaster.setOthers(rwsMasterData.rs1.getString("CONT_PERC"));
						}
					} else {
						rwsMaster.setFlouride(0);
						rwsMaster.setBrakish(0);
						rwsMaster.setIron(0);
					}
				}
				sources.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The Exception at getSources in RwsMasterData : " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return sources;
	}
	
	public static int[] removeSource(String sourceCode, ArrayList tempSelectedSourceHabs, DataSource dataSource)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int[] rowCount = new int[10];
		try {

			String query;
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.conn.setAutoCommit(false);
			if (tempSelectedSourceHabs != null) {
				query = "delete from RWS_SOURCE_HABITATION_TBL where source_code='" + sourceCode + "'";
				rwsMasterData.stmt.addBatch(query);
			}
			query = "delete  from rws_source_tbl where source_code='" + sourceCode + "'";
			rwsMasterData.stmt.addBatch(query);

			query = "delete  from RWS_SOURCE_CONTAMINATION_TBL where source_code='" + sourceCode + "'";
			rwsMasterData.stmt.addBatch(query);
			rowCount = rwsMasterData.stmt.executeBatch();
			rwsMasterData.conn.setAutoCommit(true);
		}
		catch (Exception e) {
			Debug.println("The Exception at removeSource in RwsMasterData : " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return rowCount;
	}
	
	public static int updateSource(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int updcnt = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.conn.setAutoCommit(false);
			if (rwsMaster.getSourceDepth() == null || ((String) rwsMaster.getSourceDepth()).equals("")) {
				rwsMaster.setSourceDepth("");
			}
			if (rwsMaster.getSourceDiameter() == null || ((String) rwsMaster.getSourceDiameter()).equals("")) {
				rwsMaster.setSourceDiameter("");
			}
			if (rwsMaster.getWaterQuality().equalsIgnoreCase("SS")) {
				rwsMaster.setFlouride(0);
				rwsMaster.setBrakish(0);
				rwsMaster.setIron(0);
				rwsMaster.setOthers("");
				rwsMaster.setOthersType("");
			}
			String query="";
		//	System.out.println(rwsMaster.getHabcode());
			
			if (rwsMaster.getSourceTypeCode() != null && rwsMaster.getSourceTypeCode().equals("1")) {
				query = "update  rws_source_tbl set SOURCE_NAME=nvl(?,''),SOURCE_TYPE_CODE=nvl(?,''),"
					+ "SUBSOURCE_TYPE_CODE=nvl(?,''),NO_OF_HABITAITONS_COVERD=nvl(?,0),seasonal=nvl(?,''),"
					+ "SOURCE_CONDITION=nvl(?,''),yield=nvl(?,''),POPULATION_BENIFITED=nvl(?,0),WATER_QUALITY=nvl(?,''),"
					+ "DIST_NEAR_PRIVATE_SOURCE=nvl(?,0),location=nvl(?,''),latitude=nvl(?,''),longitude=nvl(?,''),elevation=nvl(?,''),"
					+ "way_point=nvl(?,''),STATIC_WATER_LEVEL=nvl(?,0),SUMMER_WATER_LEVEL=nvl(?,0),"
					+ "DEPTH=nvl(?,0),DIAMETER=nvl(?,0),TYPE=?,ASSET_CODE=?,ALT_WATER_SOURCE_DET=nvl(?,'') where source_code=?";				
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, rwsMaster.getSourceName().toUpperCase());
				rwsMasterData.pstmt.setString(2, rwsMaster.getSourceTypeCode());
				rwsMasterData.pstmt.setString(3, rwsMaster.getSubSourceTypeCode());
				rwsMasterData.pstmt.setString(4, rwsMaster.getNoOfHab());
				rwsMasterData.pstmt.setString(5, rwsMaster.getSeasonal());
				rwsMasterData.pstmt.setString(6, rwsMaster.getPresentCondition());
				rwsMasterData.pstmt.setString(7, rwsMaster.getYield());
				rwsMasterData.pstmt.setString(8, rwsMaster.getPopbenefited());
				rwsMasterData.pstmt.setString(9, rwsMaster.getWaterQuality());
				rwsMasterData.pstmt.setString(10, rwsMaster.getDistFromSource());
				rwsMasterData.pstmt.setString(11, rwsMaster.getLocation());
				rwsMasterData.pstmt.setString(12, rwsMaster.getLatitude());
				rwsMasterData.pstmt.setString(13, rwsMaster.getLongitude());
				rwsMasterData.pstmt.setString(14, rwsMaster.getElevation());
				rwsMasterData.pstmt.setString(15, rwsMaster.getWaypoint());
				rwsMasterData.pstmt.setString(16, rwsMaster.getStaticWaterLevel());
				rwsMasterData.pstmt.setString(17, rwsMaster.getSummerWaterLevel());
				rwsMasterData.pstmt.setString(18, rwsMaster.getSourceDepth());
				rwsMasterData.pstmt.setString(19, rwsMaster.getSourceDiameter());
				rwsMasterData.pstmt.setString(20, rwsMaster.getType());
				rwsMasterData.pstmt.setString(21, rwsMaster.getAssetCode());
				rwsMasterData.pstmt.setString(22, rwsMaster.getArea());
				rwsMasterData.pstmt.setString(23, rwsMaster.getSourceCode());
				updcnt = rwsMasterData.pstmt.executeUpdate();
				/*String query = "update  rws_source_tbl set " + "SOURCE_NAME=nvl(?,''),SOURCE_TYPE_CODE=nvl(?,''),"
				+ "SUBSOURCE_TYPE_CODE=nvl(?,''),NO_OF_HABITAITONS_COVERD=nvl(?,0),seasonal=nvl(?,''),"
				+ "SOURCE_CONDITION=nvl(?,''),yield=nvl(?,''),POPULATION_BENIFITED=nvl(?,0),WATER_QUALITY=nvl(?,''),"
				+ "DIST_NEAR_PRIVATE_SOURCE=nvl(?,0),location=nvl(?,''),latitude=nvl(?,''),longitude=nvl(?,''),elevation=nvl(?,'')," 
				+ "way_point=nvl(?,''),TYPE_OF_TREATMENT=nvl(?,''),PLANT_CAPACITY=nvl(?,0) where source_code=?";*/
			}
			else if (rwsMaster.getSourceTypeCode() != null && rwsMaster.getSourceTypeCode().equals("2")) {
				query =  "update  rws_source_tbl set SOURCE_NAME=nvl(?,''),SOURCE_TYPE_CODE=nvl(?,''),"
						+ "SUBSOURCE_TYPE_CODE=nvl(?,''),NO_OF_HABITAITONS_COVERD=nvl(?,0),seasonal=nvl(?,''),"
						+ "SOURCE_CONDITION=nvl(?,''),yield=nvl(?,''),POPULATION_BENIFITED=nvl(?,0),WATER_QUALITY=nvl(?,''),"
						+ "DIST_NEAR_PRIVATE_SOURCE=nvl(?,0),location=nvl(?,''),latitude=nvl(?,''),longitude=nvl(?,''),elevation=nvl(?,''),"
						+ "way_point=nvl(?,''),STATIC_WATER_LEVEL=nvl(?,0),SUMMER_WATER_LEVEL=nvl(?,0),"
						+ "DEPTH=nvl(?,0),DIAMETER=nvl(?,0),ASSET_CODE=?,TYPE_OF_TREATMENT=?,PLANT_CAPACITY=? where source_code=?";
						
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, rwsMaster.getSourceName().toUpperCase());
				rwsMasterData.pstmt.setString(2, rwsMaster.getSourceTypeCode());
				rwsMasterData.pstmt.setString(3, rwsMaster.getSubSourceTypeCode());
				rwsMasterData.pstmt.setString(4, rwsMaster.getNoOfHab());
				rwsMasterData.pstmt.setString(5, rwsMaster.getSeasonal());
				rwsMasterData.pstmt.setString(6, rwsMaster.getPresentCondition());
				rwsMasterData.pstmt.setString(7, rwsMaster.getYield());
				rwsMasterData.pstmt.setString(8, rwsMaster.getPopbenefited());
				rwsMasterData.pstmt.setString(9, rwsMaster.getWaterQuality());
				rwsMasterData.pstmt.setString(10, rwsMaster.getDistFromSource());
				rwsMasterData.pstmt.setString(11, rwsMaster.getTappingPoint());
				rwsMasterData.pstmt.setString(12, rwsMaster.getLatitude());
				rwsMasterData.pstmt.setString(13, rwsMaster.getLongitude());
				rwsMasterData.pstmt.setString(14, rwsMaster.getElevation());
				rwsMasterData.pstmt.setString(15, rwsMaster.getWaypoint());
				rwsMasterData.pstmt.setString(16, rwsMaster.getStaticWaterLevel());
				rwsMasterData.pstmt.setString(17, rwsMaster.getSummerWaterLevel());
				rwsMasterData.pstmt.setString(18, rwsMaster.getSourceDepth());
				rwsMasterData.pstmt.setString(19, rwsMaster.getSourceDiameter());
				rwsMasterData.pstmt.setString(20, rwsMaster.getAssetCode());
				rwsMasterData.pstmt.setString(21, rwsMaster.getTypeofTreatment());
				rwsMasterData.pstmt.setString(22, rwsMaster.getPlantCapacity());
				rwsMasterData.pstmt.setString(23, rwsMaster.getSourceCode());
				updcnt = rwsMasterData.pstmt.executeUpdate();
			
			}
			
			if (updcnt > 0) {
				int rowCount[] = null;

				String contaminationQuery = "";
				String contaminationUpdateQuery = "";
				int recUpdated = 0;
				boolean flag = false;

				String contaminationDeleteQuery = "DELETE FROM RWS_SOURCE_CONTAMINATION_TBL " + "WHERE SOURCE_CODE='"
						+ rwsMaster.getSourceCode() + "' AND " + "CONT_TYPE NOT IN('FLOURIDE','BRAKISH','IRON')";
				recUpdated = rwsMasterData.stmt.executeUpdate(contaminationDeleteQuery);

				if (rwsMaster.getWaterQuality().equalsIgnoreCase("NSS")) {

					/*
					 * contaminationUpdateQuery="update RWS_SOURCE_CONTAMINATION_TBL SET " +
					 * "CONT_PERC=nvl('"+rwsMaster.getFlouride()+"',0) " +
					 * "WHERE SOURCE_CODE='"+rwsMaster.getSourceCode() + "'" + " AND
					 * CONT_TYPE='FLOURIDE'" ; Debug.println("contaminationUpdatequery is
					 * "+contaminationUpdateQuery);
					 * recUpdated=rwsMasterData.stmt2.executeUpdate(contaminationUpdateQuery);
					 */
					// if(recUpdated<1)
					// {
					contaminationQuery = "insert into RWS_SOURCE_CONTAMINATION_TBL("
							+ "SOURCE_CODE,CONT_TYPE,CONT_PERC) values(" + "'" + rwsMaster.getSourceCode() + "',"
							+ "'FLOURIDE'," + "nvl('" + rwsMaster.getFlouride() + "',0) )";

					rwsMasterData.stmt.addBatch(contaminationQuery);
					// }

					/*
					 * contaminationUpdateQuery="update RWS_SOURCE_CONTAMINATION_TBL SET " +
					 * "CONT_PERC=nvl('"+rwsMaster.getBrakish()+"',0) " + "WHERE
					 * SOURCE_CODE='"+rwsMaster.getSourceCode() + "'" + " AND CONT_TYPE='BRAKISH'" ;
					 * Debug.println("contaminationUpdatequery is "+contaminationUpdateQuery);
					 * recUpdated=rwsMasterData.stmt2.executeUpdate(contaminationUpdateQuery);
					 * if(recUpdated <1) {
					 */
					contaminationQuery = "insert into RWS_SOURCE_CONTAMINATION_TBL("
							+ "SOURCE_CODE,CONT_TYPE,CONT_PERC) values(" + "'" + rwsMaster.getSourceCode() + "',"
							+ "'BRAKISH'," + "nvl('" + rwsMaster.getBrakish() + "',0) )";

					rwsMasterData.stmt.addBatch(contaminationQuery);

					/*
					 * }
					 * 
					 * contaminationUpdateQuery="update RWS_SOURCE_CONTAMINATION_TBL SET " +
					 * "CONT_PERC=nvl('"+rwsMaster.getIron()+"',0) " + "WHERE
					 * SOURCE_CODE='"+rwsMaster.getSourceCode() + "'" + " AND CONT_TYPE='IRON'" ;
					 * Debug.println("contaminationUpdatequery is "+contaminationUpdateQuery);
					 * recUpdated=rwsMasterData.stmt2.executeUpdate(contaminationUpdateQuery);
					 * if(recUpdated <1) {
					 */
					contaminationQuery = "insert into RWS_SOURCE_CONTAMINATION_TBL("
							+ "SOURCE_CODE,CONT_TYPE,CONT_PERC) values(" + "'" + rwsMaster.getSourceCode() + "',"
							+ "'IRON'," + "nvl('" + rwsMaster.getIron() + "',0) )";

					rwsMasterData.stmt.addBatch(contaminationQuery);
					/*
					 * }
					 * 
					 * if(rwsMaster.getOthersType()!=null && !rwsMaster.getOthersType().equals(""))
					 * { contaminationUpdateQuery="update RWS_SOURCE_CONTAMINATION_TBL SET " +
					 * "CONT_PERC='"+rwsMaster.getOthers()+"' " + "WHERE
					 * SOURCE_CODE='"+rwsMaster.getSourceCode() + "'" + " AND
					 * CONT_TYPE='"+rwsMaster.getOthersType() + "'" ;
					 * Debug.println("contaminationUpdatequery is "+contaminationUpdateQuery);
					 * recUpdated=rwsMasterData.stmt2.executeUpdate(contaminationUpdateQuery);
					 * if(recUpdated <1) { String contaminationDeleteQuery="DELETE FROM
					 * RWS_SOURCE_CONTAMINATION_TBL " + "WHERE
					 * SOURCE_CODE='"+rwsMaster.getSourceCode()+"' AND " +
					 * "CONT_TYPE NOT IN('FLOURIDE','BRAKISH','IRON')"; Debug.println("delete query
					 * is "+contaminationDeleteQuery);
					 * recUpdated=rwsMasterData.stmt2.executeUpdate(contaminationDeleteQuery);
					 */

					contaminationQuery = "insert into RWS_SOURCE_CONTAMINATION_TBL("
							+ "SOURCE_CODE,CONT_TYPE,CONT_PERC) values(" + "'" + rwsMaster.getSourceCode() + "'," + "'"
							+ format(rwsMaster.getOthersType()) + "'," + "'" + format(rwsMaster.getOthers()) + "' )";

					rwsMasterData.stmt.addBatch(contaminationQuery);
					// }
					// }
				}

				rowCount = rwsMasterData.stmt.executeBatch();

				for (int j = 0; j < rowCount.length; j++) {
					if (rowCount[j] != 0)
						flag = true;

				}

				if (rowCount == null || rowCount.length == 0)
					flag = true;

				if (flag) {
					rwsMasterData.conn.commit();

				} else
					updcnt = 0;
				rwsMasterData.conn.setAutoCommit(true);

			}
		} catch (Exception e) {
			Debug.println("The Exception at updateSource in RwsMasterData : " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return updcnt;
	}

	public static String getSourceCode(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String scode = null;

		try {

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			String query = "SELECT MAX(substr(SOURCE_CODE,22,3)+1) FROM rws_source_tbl";
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(query);
			rwsMasterData.rs.next();
			scode = rwsMasterData.rs.getString(1);
			if (scode == null) {
				scode = "01";
			} else if (scode.length() == 1) {
				scode = "0" + scode;
			}

		} catch (Exception e) {
			Debug.println("The Exception in getSourceCode=" + e);
		} finally {
			rwsMasterData.closeAll();
		}

		return scode;

	}

	public static ArrayList getSourceCode(DataSource dataSource, String habCode, String schemeCode, String sourceType)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String[] scode = null;
		ArrayList sourCode = new ArrayList();
		int i = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			String query = "SELECT SOURCE_CODE FROM rws_source_tbl where SOURCE_TYPE_CODE =? and HAB_CODE=?";
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt.setString(1, sourceType);
			rwsMasterData.pstmt.setString(2, habCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				scode = new String[1];
				scode[i] = rwsMasterData.rs.getString("SOURCE_CODE");
				sourCode.add(rwsMasterData.rs.getString("SOURCE_CODE"));
			}
		} catch (Exception e) {
			Debug.println("The Exception at getSourceCode in RwsMasterData: " + e);
		} finally {
			rwsMasterData.closeAll();
		}

		return sourCode;
	}

	public static ArrayList getHabAsSources(String dcode, String mcode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList habSrcs = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			String query = "select H.HAB_CODE,PR.PANCH_CODE,PR.PANCH_NAME,(H.CENSUS_PLAIN_POPU +H.CENSUS_SC_POPU+H.CENSUS_ST_POPU ) TOTAL_POP,H.COVERAGE_STATUS from RWS_HABITATION_DIRECTORY_TBL  H ,"
					+ "RWS_PANCHAYAT_RAJ_TBL PR where  substr(PR.HAB_CODE,1,2)=? and substr(PR.HAB_CODE,6,2)=? and PR.PANCH_CODE=substr(H.HAB_CODE,1,16) ORDER BY H.HAB_CODE";
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt.setString(1, dcode);
			rwsMasterData.pstmt.setString(2, mcode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setHabCode(rwsMasterData.rs.getString(1));
				rwsMaster.setPanchRajCode(rwsMasterData.rs.getString(2));
				rwsMaster.setPanchRajName(rwsMasterData.rs.getString(3));
				rwsMaster.setTotalPop(rwsMasterData.rs.getInt(4));
				rwsMaster.setCoveredStatus(rwsMasterData.rs.getString(5));
				habSrcs.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The Exception in getAssetsOnSource in RwsMasterData : " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return habSrcs;
	}

	public static ArrayList getHabAsSourcesForReservoirs(DataSource dataSource, String schemeCode, String assetCode)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String dcode = schemeCode.substring(0, 2);
		String mcode = schemeCode.substring(5, 7);
		RwsMaster rwsMaster = null;
		ArrayList habSrcs = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
		/*	 query = "select H.HAB_CODE,PR.PANCH_CODE,PR.PANCH_NAME,"
					+ " (H.CENSUS_PLAIN_POPU +H.CENSUS_SC_POPU+H.CENSUS_ST_POPU ) TOTAL_POP,"
					+ " H.COVERAGE_STATUS  FROM RWS_PANCHAYAT_RAJ_TBL PR, RWS_HABITATION_DIRECTORY_TBL  H"
					+ " where pr.PANCH_CODE=H.HAB_CODE " + " and pr.HAB_CODE in (SELECT hab_code FROM RWS_HABMAST_TBL "
					+ " WHERE DCODE='" + dcode + "' and MCODE='" + mcode
					+ "') and h.coverage_status is not null and h.coverage_status <> 'UI' order by panch_code";
			*/
			 String query = "select H.HAB_CODE,PR.PANCH_CODE,PR.PANCH_NAME,(H.CENSUS_PLAIN_POPU +H.CENSUS_SC_POPU+H.CENSUS_ST_POPU ) TOTAL_POP,"
					+ "H.COVERAGE_STATUS  FROM RWS_PANCHAYAT_RAJ_TBL PR, RWS_HABITATION_DIRECTORY_TBL  H,RWS_ASSET_HAB_TBL res "
					+ "where h.hab_code=pr.panch_code and h.hab_code=res.hab_code and pr.panch_code=res.hab_code and res.ASSET_CODE =?";
			rwsMasterData.pstmt=rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt.setString(1, assetCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setHabCode("off");
				rwsMaster.setPanchRajCode(rwsMasterData.rs.getString(2));
				rwsMaster.setPanchRajName(rwsMasterData.rs.getString(3));
				rwsMaster.setTotalPop(rwsMasterData.rs.getInt(4));
				rwsMaster.setCoveredStatus(rwsMasterData.rs.getString(5));
				habSrcs.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The error in getAssetsOnSource=" + e);
		} finally {
			rwsMasterData.closeAll();
		}

		ArrayList selectedHabCodes = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			String habCode = null;
			String query = "select * from RWS_OHGLCI_HAB_LINK_TBL where SUBCOMP_CODE=?";
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt.setString(1, schemeCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			selectedHabCodes = new ArrayList();
			while (rwsMasterData.rs.next()) {
				selectedHabCodes.add(rwsMasterData.rs.getString("hab_code"));
			}
		} catch (Exception e) {
			Debug.println("The error in getAssetsOnSource=" + e);
		} finally {
			rwsMasterData.closeAll();
		}

		for (int i = 0; i < habSrcs.size(); i++) {
			rwsMaster = (RwsMaster) habSrcs.get(i);
			for (int j = 0; j < selectedHabCodes.size(); j++) {
				if (rwsMaster.getPanchRajCode().substring(0, 16).equals((String) selectedHabCodes.get(j))) {
					rwsMaster.setHabCode("on");
					rwsMaster.setSaved(true);
					habSrcs.set(i, rwsMaster);
				}
			}
		}
		return habSrcs;
	}

	// O AND M

	public static ArrayList getHabAsSourcesForOandM(DataSource dataSource, String assetCode, String schemeCode)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();

		RwsMaster rwsMaster = null;
		ArrayList habSrcs = new ArrayList();

		try {

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.stmt1 = rwsMasterData.conn.createStatement();
			/*
			 * String query="select
			 * H.HAB_CODE,PR.HAB_CODE,PR.PANCH_NAME,(H.CENSUS_PLAIN_POPU
			 * +H.CENSUS_SC_POPU+H.CENSUS_ST_POPU ) TOTAL_POP,H.COVERAGE_STATUS from
			 * RWS_HABITATION_DIRECTORY_TBL H ," + "RWS_PANCHAYAT_RAJ_TBL PR where
			 * substr(PR.HAB_CODE,1,2)='" + dcode + "' and
			 * substr(PR.HAB_CODE,6,2)='" + mcode + "'" + "and
			 * PR.HAB_CODE=substr(H.HAB_CODE,1,14) ORDER BY H.HAB_CODE";
			 */

			/*
			 * String query="select
			 * H.HAB_CODE,PR.PANCH_CODE,PR.PANCH_NAME,(H.CENSUS_PLAIN_POPU
			 * +H.CENSUS_SC_POPU+H.CENSUS_ST_POPU ) TOTAL_POP,H.COVERAGE_STATUS from
			 * RWS_HABITATION_DIRECTORY_TBL H ," + "RWS_PANCHAYAT_RAJ_TBL PR where
			 * substr(PR.HAB_CODE,1,2)='" + dcode + "' and
			 * substr(PR.HAB_CODE,6,2)='" + mcode + "'" + "and
			 * PR.HAB_CODE=substr(H.HAB_CODE,1,14) ORDER BY H.HAB_CODE";
			 */

			// String query="select a.hab_code,b.panch_code,b.panch_name from
			// rws_asset_hab_tbl a,rws_panchayat_raj_tbl b WHERE
			// a.hab_code=b.panch_code and ASSET_CODE='"+assetCode+"'";
			String query = "select a.hab_code,b.panch_code,b.panch_name,(H.CENSUS_PLAIN_POPU +H.CENSUS_SC_POPU+H.CENSUS_ST_POPU ) TOTAL_POP,H.COVERAGE_STATUS  from rws_asset_hab_tbl a,rws_panchayat_raj_tbl b,rws_habitation_directory_tbl h WHERE a.hab_code=b.panch_code and b.panch_code=h.hab_code and a.hab_code=h.hab_code and ASSET_CODE='"
					+ assetCode + "'";

			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(query);
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				// rwsMaster.setHabCode(rwsMasterData.rs.getString(1));
				rwsMaster.setHabCode("off");
				rwsMaster.setPanchRajCode(rwsMasterData.rs.getString(2));
				rwsMaster.setPanchRajName(rwsMasterData.rs.getString(3));
				rwsMaster.setTotalPop(rwsMasterData.rs.getInt(4));
				rwsMaster.setCoveredStatus(rwsMasterData.rs.getString(5));
				habSrcs.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The error in getAssetsOnSource=" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}

		ArrayList selectedHabCodes = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			String habCode = null;
			String query = "select * from RWS_OHGLCI_HAB_LINK_TBL where SUBCOMP_CODE='" + schemeCode + "'";
			//Debug.println("query is " + query);
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(query);
			selectedHabCodes = new ArrayList();
			//Debug.println("getting selected habCode");
			while (rwsMasterData.rs.next()) {
				//Debug.println("got selected hab code in rwsmasterdata");
				selectedHabCodes.add(rwsMasterData.rs.getString("hab_code"));
			}
		} catch (Exception e) {
			Debug.println("The error in getAssetsOnSource=" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}

		for (int i = 0; i < habSrcs.size(); i++) {
			rwsMaster = (RwsMaster) habSrcs.get(i);
			for (int j = 0; j < selectedHabCodes.size(); j++) {
				if (rwsMaster.getPanchRajCode().substring(0, 16).equals((String) selectedHabCodes.get(j))) {
					//Debug.println("switched to on");
					rwsMaster.setHabCode("on");
					rwsMaster.setSaved(true);
					habSrcs.set(i, rwsMaster);
				} else {
					//Debug.println("not switched to on");

				}
			}
		}
		return habSrcs;
	}

	public static ArrayList getSelectedHabitationLinkageForAsset(DataSource dataSource, String assetCode)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList habSrcs = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			/*
			 * String query="select
			 * H.HAB_CODE,PR.HAB_CODE,PR.PANCH_NAME,(H.CENSUS_PLAIN_POPU
			 * +H.CENSUS_SC_POPU+H.CENSUS_ST_POPU ) TOTAL_POP,H.COVERAGE_STATUS from
			 * RWS_HABITATION_DIRECTORY_TBL H ," + "RWS_PANCHAYAT_RAJ_TBL PR where
			 * substr(PR.HAB_CODE,1,2)='" + dcode + "' and
			 * substr(PR.HAB_CODE,6,2)='" + mcode + "'" + "and
			 * PR.HAB_CODE=substr(H.HAB_CODE,1,14) ORDER BY H.HAB_CODE";
			 */
			String query = "select hab_code from rws_asset_hab_tbl where ASSET_CODE =?";
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt.setString(1, assetCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setHabCode(rwsMasterData.rs.getString(1));
				habSrcs.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("Exception at getSelectedHabitationLinkageForAsset in RwsMasterData : " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return habSrcs;
	}
	
	public static ArrayList getHabsOnSource(String sourceCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList habSrcs = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			String query = "select H.HAB_CODE,PR.HAB_CODE HABCODE,PR.PANCH_NAME,"
					+ "(H.CENSUS_PLAIN_POPU +H.CENSUS_SC_POPU+H.CENSUS_ST_POPU ) TOTAL_POP,H.COVERAGE_STATUS from RWS_HABITATION_DIRECTORY_TBL H,"
					+ "RWS_PANCHAYAT_RAJ_TBL PR,RWS_SOURCE_HABITATION_TBL SH,RWS_SOURCE_TBL S where PR.HAB_CODE=substr(H.HAB_CODE,1,16) and "
					+ "PR.HAB_CODE=SH.HAB_CODE AND substr(H.HAB_CODE,1,16)=SH.HAB_CODE AND SH.SOURCE_CODE=S.SOURCE_CODE AND "
					+ "S.SOURCE_CODE=? AND substr(H.HAB_CODE,1,16)=SH.HAB_CODE ORDER BY H.HAB_CODE";
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt.setString(1, sourceCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setHabCode(rwsMasterData.rs.getString(1));
				rwsMaster.setPanchRajCode(rwsMasterData.rs.getString(2));
				rwsMaster.setPanchRajName(rwsMasterData.rs.getString(3));
				rwsMaster.setTotalPop(rwsMasterData.rs.getInt(4));
				rwsMaster.setCoveredStatus(rwsMasterData.rs.getString(5));
				habSrcs.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The Exception at getHabsOnSource in RwsMasterData " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return habSrcs;
	}

	public static ArrayList getAssetsOnSource(String sourceCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList assetSrcs = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			String query = "select s.asset_code,a.asset_name from RWS_ASSET_SOURCE_TBL s,rws_asset_mast_tbl a "
					+ "where SOURCE_CODE=? and a.asset_code=s.asset_code order by ASSET_CODE";
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt.setString(1, sourceCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setAssetCode(rwsMasterData.rs.getString(1));
				rwsMaster.setAssetName(rwsMasterData.rs.getString(2));
				assetSrcs.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The Exception at  getAssetsOnSource in RwsMasterData : " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return assetSrcs;
	}

	public static ArrayList getAssetsOnSameHabAsSources(String habCode, String status, DataSource dataSource)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList assetSrcs = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			if (status.equals("hab")) {
				rwsMasterData.rs = rwsMasterData.stmt.executeQuery("select hab_code,type_of_asset_name,asset_code,"
						+ "asset_name from RWS_ASSET_mast_TBL a,rws_asset_type_tbl at "
						+ "where a.type_of_asset_code=at.type_of_asset_code and " + "hab_code='" + habCode
						+ "' order by ASSET_CODE");
			} else if (status.equals("notHab")) {
				rwsMasterData.rs = rwsMasterData.stmt.executeQuery("select hab_code,type_of_asset_name,asset_code,"
						+ "asset_name from RWS_ASSET_mast_TBL a,rws_asset_type_tbl at "
						+ "where a.type_of_asset_code=at.type_of_asset_code and " + "hab_code!='" + habCode
						+ "' order by ASSET_CODE");
			}
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setHabCode(rwsMasterData.rs.getString(1));
				rwsMaster.setAssetTypeName(rwsMasterData.rs.getString(2));
				rwsMaster.setAssetCode(rwsMasterData.rs.getString(3));
				rwsMaster.setAssetName(rwsMasterData.rs.getString(4));

				assetSrcs.add(rwsMaster);
			}

		} catch (Exception e) {
			Debug.println("The error in getAssetsOnSameHabAsSources=" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return assetSrcs;
	}

	public static int insertSubSourceType(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("insert into rws_subSource_type_tbl values(?,?,?)");
			rwsMasterData.pstmt.setString(1,  rwsMaster.getSourceTypeCode());
			rwsMasterData.pstmt.setString(2,  rwsMaster.getSubSourceTypeCode());
			rwsMasterData.pstmt.setString(3,  rwsMaster.getSubSourceTypeName().toUpperCase() );
			rowCount = rwsMasterData.pstmt.executeUpdate();
		} catch (SQLException sqle) {
			int errorCode = sqle.getErrorCode();
			if (errorCode == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			Debug.println("Exception at  insertSubSourceType in RwsMasterData : " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return rowCount;
	}

	public static RwsMaster getSubSourceType(String sourceTypeCode, String subSourceTypeCode, DataSource dataSource)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("select * from rws_subSource_type_tbl where subSource_type_code=? and source_type_code=?" );
			rwsMasterData.pstmt.setString(1, subSourceTypeCode);
			rwsMasterData.pstmt.setString(2, sourceTypeCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setSourceTypeCode(rwsMasterData.rs.getString(1));
				rwsMaster.setSourceTypeName(getSourceTypeName(rwsMasterData.rs.getString(1), rwsMasterData.conn));
				rwsMaster.setSubSourceTypeCode(rwsMasterData.rs.getString(2));
				rwsMaster.setSubSourceTypeName(rwsMasterData.rs.getString(3));
			}
		} catch (Exception e) {
			Debug.println("Exception at  getSubSourceType in RwsMasterData : " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return rwsMaster;
	}

	public static ArrayList getSubSourceTypes(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList subSources = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("SELECT SUB.SOURCE_TYPE_CODE,S.SOURCE_TYPE_NAME,SUBSOURCE_TYPE_CODE,SUBSOURCE_TYPE_NAME FROM RWS_SUBSOURCE_TYPE_TBL SUB,RWS_SOURCE_TYPE_TBL S WHERE SUB.SOURCE_TYPE_CODE=S.SOURCE_TYPE_CODE ORDER BY SUB.SOURCE_TYPE_CODE,SUBSOURCE_TYPE_CODE");
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setSourceTypeCode(rwsMasterData.rs.getString(1));
				rwsMaster.setSourceTypeName(rwsMasterData.rs.getString(2));
				rwsMaster.setSubSourceTypeCode(rwsMasterData.rs.getString(3));
				rwsMaster.setSubSourceTypeName(rwsMasterData.rs.getString(4));
				subSources.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("Excpetion at getSubSourceTypes in RwsMasterData : " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return subSources;
	}

	public static int removeSubSourceType(String sourceTypeCode, String subSourceTypeCode, DataSource dataSource)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rcount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rcount = rwsMasterData.stmt.executeUpdate("delete  from rws_subSource_type_tbl where subSource_type_code="
					+ subSourceTypeCode + " and source_type_code=" + sourceTypeCode);
		} catch (Exception e) {
			Debug.println("The error in removeSubSourceType" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rcount;
	}

	public static int updateSubSourceType(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int updateCount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			ps = rwsMasterData.conn.prepareStatement(
					"update  rws_subSource_type_tbl set subSource_type_name=? where subSource_type_code=? and source_type_code=?");
			ps.setString(1, rwsMaster.getSubSourceTypeName().toUpperCase());
			ps.setString(2, rwsMaster.getSubSourceTypeCode());
			ps.setString(3, rwsMaster.getSourceTypeCode());
			updateCount = ps.executeUpdate();
		} catch (SQLException sqle) {
			if (sqle.getErrorCode() == 1)
				errorMessage = "Record with this name exists.";
			Debug.println("Exception at  updateSubSourceType in RwsMasterData : " + sqle);
		} catch (Exception e) {
			Debug.println("Exception at updateSubSourceType in  RwsMasterData : " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return updateCount;
	}

	public static String getSubSourceTypeCode(String sourceTypeCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String subSourceTypeCode = "";
		if (sourceTypeCode != null) {
			try {
				rwsMasterData.conn = RwsOffices.getConn();
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("SELECT MAX(to_number(SUBSOURCE_TYPE_CODE))+1 FROM RWS_SUBSOURCE_TYPE_TBL where SOURCE_TYPE_CODE=?" );
				rwsMasterData.pstmt.setString(1, sourceTypeCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				rwsMasterData.rs.next();
				subSourceTypeCode = rwsMasterData.rs.getString(1);
				if (subSourceTypeCode == null) {
					subSourceTypeCode = "1";
				}
			} catch (Exception e) {
				Debug.println("Exception at  getsubSourceTypeCode in RwsMasterData : " + e);
			} finally {
				rwsMasterData.closeAll();
			}
		}
		return subSourceTypeCode;
	}

	public static ArrayList getSubSourceTypeCodes(String sourceTypeCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList subSourcecodes = new ArrayList();

		try {
			//Debug.println("in getSubSourceTypeCodes");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(
					"SELECT SUBSOURCE_TYPE_CODE,SUBSOURCE_TYPE_NAME FROM RWS_SUBSOURCE_TYPE_TBL WHERE SOURCE_TYPE_CODE="
							+ sourceTypeCode + "order by SUBSOURCE_TYPE_CODE,source_type_code");

			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setSubSourceTypeCode(rwsMasterData.rs.getString(1));
				rwsMaster.setSubSourceTypeName(rwsMasterData.rs.getString(2));
				rwsMaster.setSourceTypeNoName(rwsMasterData.rs.getString(1) + " - " + rwsMasterData.rs.getString(2));

				subSourcecodes.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The error in getSubSourceTypeCodes" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return subSourcecodes;
	}

	public static int insertSourceType(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("insert into rws_source_type_tbl values(?,?)");
			rwsMasterData.pstmt.setString(1, rwsMaster.getSourceTypeCode());
			rwsMasterData.pstmt.setString(2, rwsMaster.getSourceTypeName().toUpperCase());
			rowCount = rwsMasterData.pstmt.executeUpdate();
		} catch (SQLException sqle) {
			int errorCode = sqle.getErrorCode();
			if (errorCode == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			Debug.println("Exception at insertSourceType RwsMasterData : " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return rowCount;
	}

	 
	public static RwsMaster getSourceType(String sourceTypeCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("select * from rws_source_type_tbl where source_type_code=?");
			rwsMasterData.pstmt.setString(1, sourceTypeCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setSourceTypeCode(rwsMasterData.rs.getString(1));
				rwsMaster.setSourceTypeName(rwsMasterData.rs.getString(2));
			}
		} catch (Exception e) {
			Debug.println("The Exception at getSourceType in RwsMasterData : " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return rwsMaster;
	}

	public static ArrayList getSourceTypes(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList sourceTypes = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery("select * from rws_source_type_tbl order by source_type_code");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setSourceTypeCode(rwsMasterData.rs.getString(1));
				rwsMaster.setSourceTypeName(rwsMasterData.rs.getString(2));
				rwsMaster.setSourceTypeNoName(rwsMasterData.rs.getString(1) + " - " + rwsMasterData.rs.getString(2));
				sourceTypes.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("Exception at  getSourceTypes in RwsMasterData : " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return sourceTypes;
	}

	public static int removeSourceType(String sourceTypeCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rcount = 0;
		try {
			//Debug.println("in removeSourceType");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rcount = rwsMasterData.stmt
					.executeUpdate("delete  from rws_source_type_tbl where source_type_code='" + sourceTypeCode + "'");
		} catch (Exception e) {
			Debug.println("The error in removeSourceType" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rcount;
	}

	public static int updateSourceType(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int updateCount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("update  rws_source_type_tbl set source_type_name=? where source_type_code=?");
			rwsMasterData.pstmt.setString(1, rwsMaster.getSourceTypeName().toUpperCase());
			rwsMasterData.pstmt.setString(2, rwsMaster.getSourceTypeCode());
			updateCount = rwsMasterData.pstmt.executeUpdate();
		} catch (SQLException sqle) {
			if (sqle.getErrorCode() == 1)
				errorMessage = "Record with this name exists.";
			Debug.println("Exception at updateSourceType in RwsMasterData : " + sqle);
		} catch (Exception e) {
			Debug.println("Exception at updateSourceType in RwsMasterData : " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return updateCount;
	}

	
	public static String getSourceTypeCode(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String scode = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery("SELECT MAX(to_number(SOURCE_TYPE_CODE))+1 FROM rws_source_type_tbl");
			rwsMasterData.rs.next();
			scode = rwsMasterData.rs.getString(1);
			if (scode == null) {
				scode = "1";
			}
		} catch (Exception e) {
			Debug.println("Exception at  getSourceTypeCode in RwsMasterData : " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return scode;
	}

	public static String getDistName(DataSource dataSource, String dcode) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String distname = "";
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("select DNAME from rws_district_tbl where DCODE=?");
			rwsMasterData.pstmt.setString(1, dcode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			if (rwsMasterData.rs.next())
				distname = rwsMasterData.rs.getString(1);
		}
		catch (Exception e) {
			Debug.println("Exception at getDistName in RwsMasterData : " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return distname;
	}

	public static String getCircleName(DataSource dataSource, String dcode) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();

		String distname = "";

		try {

			rwsMasterData.conn = RwsOffices.getConn();

			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(
					"select circle_office_name from rws_circle_office_tbl where circle_office_CODE=? ");
			rwsMasterData.pstmt.setString(1, dcode);

			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();

			if (rwsMasterData.rs.next())
				distname = rwsMasterData.rs.getString(1);

		}

		catch (Exception e) {
			Debug.println("The Exception in getCircleName=" + e);
		} finally {
			rwsMasterData.closeAll();
		}

		return distname;
	}

	public static String getDistName1(String dcode) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();

		String distname = "";

		try {
			//Debug.println("in getDistName");

			//Debug.println("1");
			rwsMasterData.conn = RwsOffices.getConn();
			//Debug.println("2");
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			//Debug.println("3");
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("select DNAME from rws_district_tbl where DCODE='" + dcode + "'");
			//Debug.println("4");
			if (rwsMasterData.rs.next())
				distname = rwsMasterData.rs.getString(1);
		//	Debug.println("5");
		}

		catch (Exception e) {
			Debug.println("The error in getDistName=" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}

		return distname;
	}

	public static int saveCensusHab(DataSource dataSource, String dcode, String mcode, String pcode, String vcode,
			String cvcode, String cvname, String mainVillage) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int delValue = 0;
		int insValue = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.conn.setAutoCommit(false);
			/*
			 * String q1 = "delete from rws_hab_quan_qual_stat_tbl where
			 * hab_code='"+td.getHabCode()+"'"; Debug.println("Q1:"+q1); rwsMasterData.stmt
			 * = rwsMasterData.conn.createStatement(); delValue =
			 * rwsMasterData.stmt.executeUpdate(q1); String query = "insert into
			 * rws_hab_quan_qual_stat_tbl
			 * values('"+td.getHabCode()+"','"+td.getInQua()+"','"+td.getQp1()+"','
			 * "+td.getQp2()+"','"+td.getQp3()+"','"+td.getQp4()+"','"+td.getSfncpop()+"')";
			 * Debug.println("Q2:"+query); rwsMasterData.stmt1 =
			 * rwsMasterData.conn.createStatement(); insValue =
			 * rwsMasterData.stmt1.executeUpdate(query); Debug.println("ins
			 * value1:"+insValue); query = "update RWS_HABITATION_DIRECTORY_TBL set
			 * CENSUS_SC_POPU='"+td.getScPop()+"',CENSUS_ST_POPU='"+td.getStPop()+"',
			 * CENSUS_PLAIN_POPU='"+td.getPlainPop()+"',SC_POP_COVERED='"+td.getScCov()+"',
			 * ST_POP_COVERED='"+td.getStCov()+"',PLAIN_POPU_COVERED='"+td.getPlainCov()+"'
			 * WHERE HAB_CODE='"+td.getHabCode()+"'"; Debug.println("Q3:"+query);
			 * rwsMasterData.stmt1 = rwsMasterData.conn.createStatement(); insValue +=
			 * rwsMasterData.stmt1.executeUpdate(query); Debug.println("ins
			 * value2:"+insValue);
			 */
			String query = "select * from RWS_CENSUS2001_VILLAGES_TBL WHERE CENSUS_VILLAGE_CODE=?";
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt.setString(1, cvcode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			if (rwsMasterData.rs.next()) {
				query = "select * from RWS_HAB_VILL_CENSUS_CODE_TBL where DISTRICT_CODE = 02" + dcode;
				rwsMasterData.stmt2 = rwsMasterData.conn.createStatement();
				rwsMasterData.rs1 = rwsMasterData.stmt2.executeQuery(query);
				String dist = "", mand = "", dist1 = "", mand1 = "", panch1 = "", panch = "", vill = "", vill1 = "",
						hab = "", hab1 = "", cvcodee = "", cvnamee = "";
				while (rwsMasterData.rs1.next()) {
					dist = rwsMasterData.rs1.getString("DISTRICT_NAME");
					int posdist = dist.indexOf("(");
					dist1 = dist.substring(posdist + 1, posdist + 3);
					mand = rwsMasterData.rs1.getString("BLOCK_NAME");
					int posmand = mand.indexOf("(");
					mand1 = mand.substring(posmand + 1, posmand + 3);
					panch = rwsMasterData.rs1.getString("GRAM_PANCHAYAT_NAME");
					int pospanch = panch.indexOf("(");
					panch1 = panch.substring(pospanch + 1, pospanch + 3);
					vill = rwsMasterData.rs1.getString("VILLAGE_NAME");
					int posvill = vill.indexOf("(");
					vill1 = vill.substring(posvill + 1, posvill + 4);
					if (dist1.equals(dcode) && mand1.equals(mcode) && panch1.equals(pcode) && vill1.equals(vcode)) {
						String q11 = "update RWS_HAB_VILL_CENSUS_CODE_TBL SET CENSUS_STATE_CODE=?,CENSUS_DISTRICT_CODE=?,CENSUS_DISTRICT_NAME=?,"
								+ "CENSUS_SUBDISTRICT_CODE=?,CENSUS_SUBDISTRICT_NAME=?,CENSUS_VILLAGE_CODE=?,CENSUS_VILLAGE_NAME=?,"
								+ "MAIN_VILL_OR_NOT=? where STATE_ID=? and STATE_NAME=? and DISTRICT_ID=? and DISTRICT_CODE=? and DISTRICT_NAME=?"
								+ " and BLOCK_ID=? and BLOCK_CODE=? and BLOCK_NAME=? and GRAM_PANCHAYAT_ID=? and GRAM_PANCHAYAT_CODE=? and "
								+ "GRAM_PANCHAYAT_NAME=? and VILLAGE_ID=? and VILLAGE_CODE=? and VILLAGE_NAME=?";
						ps = rwsMasterData.conn.prepareStatement(q11);
						ps.setString(1, rwsMasterData.rs.getString(1).trim());
						ps.setString(2, rwsMasterData.rs.getString(3).trim());
						ps.setString(3, rwsMasterData.rs.getString(4).trim());
						ps.setString(4, rwsMasterData.rs.getString(5).trim());
						ps.setString(5, rwsMasterData.rs.getString(6).trim());
						ps.setString(6, rwsMasterData.rs.getString(7).trim());
						ps.setString(7, rwsMasterData.rs.getString(8).trim());
						ps.setString(8, mainVillage);
						ps.setString(9, rwsMasterData.rs1.getString(1));
						ps.setString(10, rwsMasterData.rs1.getString(2));
						ps.setString(11, rwsMasterData.rs1.getString(3));
						ps.setString(12, rwsMasterData.rs1.getString(4));
						ps.setString(13, rwsMasterData.rs1.getString(5));
						ps.setString(14, rwsMasterData.rs1.getString(6));
						ps.setString(15, rwsMasterData.rs1.getString(7));
						ps.setString(16, rwsMasterData.rs1.getString(8));
						ps.setString(17, rwsMasterData.rs1.getString(9));
						ps.setString(18, rwsMasterData.rs1.getString(10));
						ps.setString(19, rwsMasterData.rs1.getString(11));
						ps.setString(20, rwsMasterData.rs1.getString(12));
						ps.setString(21, rwsMasterData.rs1.getString(13));
						ps.setString(22, rwsMasterData.rs1.getString(14));
						insValue += ps.executeUpdate();
					}
				}
			}
			if (insValue > 0) {
				rwsMasterData.conn.setAutoCommit(true);
				rwsMasterData.conn.commit();
			} else {
				rwsMasterData.conn.rollback();
			}
		} catch (Exception e) {
			Debug.println("The error in saveCensusHab in RwsMasterData is " + e);
			rwsMasterData.conn.rollback();
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		// Debug.println("row count in save=" + delValue);
		return insValue;
	}

	public static ArrayList getAddQualCodes(String qcode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList addqualcodes = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			if (qcode.length() >= 1 || qcode != null) {
				rwsMasterData.rs = rwsMasterData.stmt
						.executeQuery("select * from rws_qualification_tbl where qual_code <> " + qcode);
				while (rwsMasterData.rs.next()) {
					rwsMaster = new RwsMaster();

					rwsMaster.setQualCode(rwsMasterData.rs.getString("qual_code"));
					rwsMaster.setQualName(rwsMasterData.rs.getString("qual_name"));

					rwsMaster.setQualNoName(
							rwsMasterData.rs.getString("qual_code") + " - " + rwsMasterData.rs.getString("qual_name"));

					addqualcodes.add(rwsMaster);
				}
			}
		}

		catch (Exception e) {
			Debug.println("The error in getAddQualCodes" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return addqualcodes;
	}

	public static String getEmpCode(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String ecode = null;
		try {

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("SELECT MAX(to_number(employee_CODE))+1 FROM RWS_employee_TBL");
			rwsMasterData.rs.next();
			ecode = rwsMasterData.rs.getString(1);
			if (ecode == null) {
				ecode = "1";
			}
		} catch (Exception e) {
			Debug.println("Ther error in getEmpCode" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return ecode;
	}

	
	public static int insertAssetType(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0, rowCount1 = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			String qry1 = "select * from rws_asset_type_tbl where type_of_asset_name= ? or CODE_SERIES = ? ";
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement(qry1);
			rwsMasterData.ps.setString(1, rwsMaster.getAssetTypeName().toUpperCase());
			rwsMasterData.ps.setString(2, rwsMaster.getCodeSeries());
			rowCount1 = rwsMasterData.ps.executeUpdate();
			if (rowCount1 > 0) {
				errorMessage = "Record with this Name/Code exists.";
			} else {
				String qry = "insert into rws_asset_type_tbl values(?,?,?)";
				rwsMasterData.ps = rwsMasterData.conn.prepareStatement(qry);
				rwsMasterData.ps.setString(1, rwsMaster.getAssetTypeCode());
				rwsMasterData.ps.setString(2, rwsMaster.getAssetTypeName().toUpperCase());
				rwsMasterData.ps.setString(3, rwsMaster.getCodeSeries());
				rowCount = rwsMasterData.ps.executeUpdate();
			}
		} catch (SQLException sqle) {
			int errorCode = sqle.getErrorCode();
			if (errorCode == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData insertAssetType = " + e.getMessage());
		}
		finally {
			rwsMasterData.closeAll();
		}
		return rowCount;
	}

	 
	public static RwsMaster getAssetType(String assetTypeCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement("select * from rws_asset_type_tbl where type_of_asset_code= ? ");
			rwsMasterData.ps.setString(1, assetTypeCode);
			rwsMasterData.rs = rwsMasterData.ps.executeQuery();
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setAssetTypeCode(rwsMasterData.rs.getString(1));
				rwsMaster.setAssetTypeName(rwsMasterData.rs.getString(2));
				rwsMaster.setCodeSeries(rwsMasterData.rs.getString(3));
			}
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData getAssetType = " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return rwsMaster;
	}

	 
	public static ArrayList getAssetTypes(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList assetTypes = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement("select * from rws_asset_type_tbl order by type_of_asset_code");
			rwsMasterData.rs = rwsMasterData.ps.executeQuery();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setAssetTypeCode(rwsMasterData.rs.getString(1));
				rwsMaster.setAssetTypeName(rwsMasterData.rs.getString(2));
				rwsMaster.setAssetTypeNoName(rwsMasterData.rs.getString(1)+ " - " + rwsMasterData.rs.getString(2));
				assetTypes.add(rwsMaster);
			}
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData getAssetTypes = " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return assetTypes;
	}

	 
	public static int removeAssetType(String assetTypeCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rcount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement("delete  from rws_asset_type_tbl where type_of_asset_code= ? ");
			rwsMasterData.ps.setString(1, assetTypeCode);
			rcount = rwsMasterData.ps.executeUpdate();
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData removeAssetType = " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return rcount;
	}

	 
	public static int updateAssetType(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int updateCount = 0, updateCount1 = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			String qry1 = "select * from rws_asset_type_tbl where type_of_asset_name= ? and CODE_SERIES = ? ";
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement(qry1);
			rwsMasterData.ps.setString(1, rwsMaster.getAssetTypeName().toUpperCase());
			rwsMasterData.ps.setString(2, rwsMaster.getCodeSeries());
			updateCount1 = rwsMasterData.ps.executeUpdate();
			if (updateCount1 > 0) {
				errorMessage = "Record with this Name/Code exists.";
			} else {
				String uq = "update  rws_asset_type_tbl set type_of_asset_name= ? , CODE_SERIES = ? where type_of_asset_code= ? ";
				rwsMasterData.ps = rwsMasterData.conn.prepareStatement(uq);
				rwsMasterData.ps.setString(1, rwsMaster.getAssetTypeName().toUpperCase());
				rwsMasterData.ps.setString(2, rwsMaster.getCodeSeries());
				rwsMasterData.ps.setString(3, rwsMaster.getAssetTypeCode());
				updateCount = rwsMasterData.ps.executeUpdate();
			}
		} catch (SQLException sqle) {
			if (sqle.getErrorCode() == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData updateAssetType = " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return updateCount;
	}

	public static String getAssetTypeCode(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String code = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement("SELECT MAX(to_number(type_of_asset_code))+1 FROM rws_asset_type_tbl");
			rwsMasterData.rs = rwsMasterData.ps.executeQuery();
			rwsMasterData.rs.next();
			code = rwsMasterData.rs.getString(1);
			if (code == null) {
				code = "01";
			} else if (code.length() == 1) {
				code = "0" + code;
			}
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData getAssetTypeCode = " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return code;
	}

	public static String getAssetTypeCode(String name, Connection conn)	throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		String acode = null;
		try {
			rwsMasterData.conn = conn;
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement("SELECT type_of_asset_code FROM rws_asset_type_tbl where type_of_asset_name= ? ");
			rwsMasterData.ps.setString(1, name);
			rwsMasterData.rs = rwsMasterData.ps.executeQuery();
			rwsMasterData.rs.next();
			acode = rwsMasterData.rs.getString(1);
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData getAssetTypeCode = " + e.getMessage());
		} finally {
			rwsMasterData.stmt.close();
		}
		return acode;
	}

	  	 	
	public static int insertAssetCompType(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement("insert into RWS_ASSET_COMPONENT_TYPE_TBL values(?, ?, ?)");
			rwsMasterData.ps.setString(1, rwsMaster.getAssetTypeCode());
			rwsMasterData.ps.setString(2, rwsMaster.getAssetCompTypeCode());
			rwsMasterData.ps.setString(3, rwsMaster.getAssetCompTypeName().toUpperCase());
			rowCount = rwsMasterData.ps.executeUpdate();
		} catch (SQLException sqle) {
			if (sqle.getErrorCode() == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData insertAssetCompType = " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return rowCount;
	}

	public static RwsMaster getAssetCompType(String assetTypeCode, String assetCompCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement("select * from RWS_ASSET_COMPONENT_TYPE_TBL where type_of_asset_code = ? and asset_component_code= ? ");
			rwsMasterData.ps.setString(1, assetTypeCode);
			rwsMasterData.ps.setString(2, assetCompCode);
			rwsMasterData.rs = rwsMasterData.ps.executeQuery();
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setAssetTypeCode(rwsMasterData.rs.getString(1));
				
				rwsMaster.setAssetCompTypeCode(rwsMasterData.rs.getString(2));
				rwsMaster.setAssetCompTypeName(rwsMasterData.rs.getString(3));
				rwsMaster.setAssetTypeName(getAssetTypeName(dataSource,	rwsMasterData.rs.getString(1)));
			}
			rwsMasterData.rs.close();
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("The Exception in RwsMasterData getAssetCompType = " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return rwsMaster;
	}

	  	 	
	public static ArrayList getAssetCompTypes(String typeOfAsset, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList assetCompTypes = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			if (typeOfAsset.equals("")){
				rwsMasterData.ps = rwsMasterData.conn.prepareStatement("SELECT C.TYPE_OF_ASSET_CODE,T.TYPE_OF_ASSET_NAME,C.ASSET_COMPONENT_CODE,C.ASSET_COMPONENT_NAME FROM RWS_ASSET_COMPONENT_TYPE_TBL C, RWS_ASSET_TYPE_TBL T WHERE T.TYPE_OF_ASSET_CODE=C.TYPE_OF_ASSET_CODE ORDER BY C.TYPE_OF_ASSET_CODE,C.ASSET_COMPONENT_CODE");				
				rwsMasterData.rs = rwsMasterData.ps.executeQuery();
			}
			else{
				rwsMasterData.ps = rwsMasterData.conn.prepareStatement("SELECT C.TYPE_OF_ASSET_CODE,T.TYPE_OF_ASSET_NAME,C.ASSET_COMPONENT_CODE,C.ASSET_COMPONENT_NAME FROM RWS_ASSET_COMPONENT_TYPE_TBL C, RWS_ASSET_TYPE_TBL T WHERE T.TYPE_OF_ASSET_CODE=C.TYPE_OF_ASSET_CODE AND C.TYPE_OF_ASSET_CODE= ? AND T.TYPE_OF_ASSET_CODE= ? ORDER BY C.TYPE_OF_ASSET_CODE,C.ASSET_COMPONENT_CODE");
				rwsMasterData.ps.setString(1, typeOfAsset);
				rwsMasterData.ps.setString(2, typeOfAsset);
				rwsMasterData.rs = rwsMasterData.ps.executeQuery();
			}				
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setAssetTypeCode(rwsMasterData.rs.getString(1));
				rwsMaster.setAssetTypeName(rwsMasterData.rs.getString(2));
				rwsMaster.setAssetCompTypeCode(rwsMasterData.rs.getString(3));
				rwsMaster.setAssetCompTypeName(rwsMasterData.rs.getString(4));
				assetCompTypes.add(rwsMaster);
			}
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData getAssetCompTypes = " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return assetCompTypes;
	}

	  	 	
	public static int removeAssetCompType(String assetTypeCode, String assetCompCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rcount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement("delete from RWS_ASSET_COMPONENT_TYPE_TBL where type_of_asset_code= ? and asset_component_code= ? ");
			rwsMasterData.ps.setString(1, assetTypeCode);
			rwsMasterData.ps.setString(2, assetCompCode);
			rcount = rwsMasterData.ps.executeUpdate();
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData removeAssetCompType = " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return rcount;
	}

	  	 	
	public static int updateAssetCompType(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int updateCount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement("UPDATE  RWS_ASSET_COMPONENT_TYPE_TBL SET ASSET_COMPONENT_NAME= ? WHERE ASSET_COMPONENT_CODE= ? AND TYPE_OF_ASSET_CODE= ? ");
			rwsMasterData.ps.setString(1, rwsMaster.getAssetCompTypeName().toUpperCase());
			rwsMasterData.ps.setString(2, rwsMaster.getAssetCompTypeCode());
			rwsMasterData.ps.setString(3, rwsMaster.getAssetTypeCode());
			updateCount = rwsMasterData.ps.executeUpdate();
		} catch (SQLException sqle) {
			if (sqle.getErrorCode() == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData updateAssetCompType = " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return updateCount;
	}

	  	 	
	public static String getAssetCompTypeCode(String assetTypeCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String code = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement("SELECT MAX(to_number(asset_component_code))+1 FROM RWS_ASSET_COMPONENT_TYPE_TBL where type_of_asset_code= ? ");
			rwsMasterData.ps.setString(1, assetTypeCode);
			rwsMasterData.rs = rwsMasterData.ps.executeQuery();
			rwsMasterData.rs.next();
			code = rwsMasterData.rs.getString(1);
			if (code == null) {
				code = "01";
			} else if (code.length() == 1) {
				code = "0" + code;
			}
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData getAssetCompTypeCode = " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return code;
	}

	public static ArrayList getAssetCompTypeCodes(String assetTypeCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList assetCompTypes = new ArrayList();

		try {

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			if (assetTypeCode != null) {
				rwsMasterData.rs = rwsMasterData.stmt
						.executeQuery("SELECT * FROM RWS_ASSET_COMPONENT_TYPE_TBL where TYPE_OF_ASSET_CODE ='"
								+ assetTypeCode + "' order by ASSET_COMPONENT_CODE");

				while (rwsMasterData.rs.next()) {
					rwsMaster = new RwsMaster();

					rwsMaster.setAssetCompTypeCode(rwsMasterData.rs.getString("ASSET_COMPONENT_CODE"));
					rwsMaster.setAssetTypeNoName(rwsMasterData.rs.getString("ASSET_COMPONENT_CODE") + " - "
							+ rwsMasterData.rs.getString("ASSET_COMPONENT_NAME"));
					assetCompTypes.add(rwsMaster);
				}
			}
		} catch (Exception e) {
			Debug.println("The error in getAssetCompTypeCodes rwsMasterData= " + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return assetCompTypes;
	}

	public static int insertAssetSubCompType(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement("insert into RWS_ASSET_SUBCOMPONENT_TBL values( ?, ?, ?, ?)");
			rwsMasterData.ps.setString(1, rwsMaster.getAssetTypeCode());
			rwsMasterData.ps.setString(2, rwsMaster.getAssetCompTypeCode());
			rwsMasterData.ps.setString(3, rwsMaster.getAssetSubCompTypeCode());
			rwsMasterData.ps.setString(4, rwsMaster.getAssetSubCompTypeName().toUpperCase());
			rowCount = rwsMasterData.ps.executeUpdate();
		} catch (SQLException sqle) {
			int errorCode = sqle.getErrorCode();
			if (errorCode == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData insertAssetSubCompType = " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return rowCount;
	}

	 
	public static RwsMaster getAssetSubCompType(String assetTypeCode, String assetCompCode, String assetSubCompCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement("select * from RWS_ASSET_SUBCOMPONENT_TBL where type_of_asset_code= ? and asset_component_code= ? and asset_subcomponent_code= ? ");
			rwsMasterData.ps.setString(1, assetTypeCode);
			rwsMasterData.ps.setString(2, assetCompCode);
			rwsMasterData.ps.setString(3, assetSubCompCode);
			rwsMasterData.rs = rwsMasterData.ps.executeQuery();
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setAssetTypeCode(rwsMasterData.rs.getString(1));
				rwsMaster.setAssetTypeName(getAssetTypeName(dataSource,	rwsMasterData.rs.getString(1)));
				rwsMaster.setAssetCompTypeCode(rwsMasterData.rs.getString(2));
				rwsMaster.setAssetCompTypeName(getAssetCompTypeName(rwsMasterData.rs.getString(2), rwsMasterData.rs.getString(1), dataSource));
				rwsMaster.setAssetSubCompTypeCode(rwsMasterData.rs.getString(3));
				rwsMaster.setAssetSubCompTypeName(rwsMasterData.rs.getString(4));
			}
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData getAssetSubCompType = " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return rwsMaster;
	}

	 
	public static ArrayList getAssetSubCompTypes(String typeOfAsset, String assetComp, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList assetSubCompTypes = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			String query = null;
			if (typeOfAsset.equals("") && assetComp.equals(""))
				query = " SELECT DISTINCT S.TYPE_OF_ASSET_CODE, T.TYPE_OF_ASSET_NAME, "
						+ " S.ASSET_COMPONENT_CODE, C.ASSET_COMPONENT_NAME, "
						+ " S.ASSET_SUBCOMPONENT_CODE,S.ASSET_SUBCOMPONENT_NAME FROM "
						+ " RWS_ASSET_SUBCOMPONENT_TBL S, RWS_ASSET_COMPONENT_TYPE_TBL C,"
						+ " RWS_ASSET_TYPE_TBL T WHERE "
						+ " T.TYPE_OF_ASSET_CODE=S.TYPE_OF_ASSET_CODE "
						+ " AND S.ASSET_COMPONENT_CODE=C.ASSET_COMPONENT_CODE "
						+ " AND C.type_of_asset_code = T.type_of_asset_code "
						+ " ORDER BY S.TYPE_OF_ASSET_CODE,S.ASSET_COMPONENT_CODE,"
						+ " S.ASSET_SUBCOMPONENT_CODE ";
			else if (!typeOfAsset.equals("") && assetComp.equals(""))
				query = " SELECT DISTINCT S.TYPE_OF_ASSET_CODE, T.TYPE_OF_ASSET_NAME, "
						+ " S.ASSET_COMPONENT_CODE, C.ASSET_COMPONENT_NAME, "
						+ " S.ASSET_SUBCOMPONENT_CODE,S.ASSET_SUBCOMPONENT_NAME FROM "
						+ " RWS_ASSET_SUBCOMPONENT_TBL S, RWS_ASSET_COMPONENT_TYPE_TBL C,"
						+ " RWS_ASSET_TYPE_TBL T WHERE "
						+ " T.TYPE_OF_ASSET_CODE=S.TYPE_OF_ASSET_CODE "
						+ " AND S.ASSET_COMPONENT_CODE=C.ASSET_COMPONENT_CODE "
						+ " AND C.type_of_asset_code = T.type_of_asset_code  AND C.type_of_asset_code ='"
						+ typeOfAsset
						+ "'"
						+ " AND t.type_of_asset_code='"
						+ typeOfAsset
						+ "' ORDER BY S.TYPE_OF_ASSET_CODE,S.ASSET_COMPONENT_CODE,"
						+ " S.ASSET_SUBCOMPONENT_CODE ";
			else
				query = " SELECT DISTINCT S.TYPE_OF_ASSET_CODE, T.TYPE_OF_ASSET_NAME, "
						+ " S.ASSET_COMPONENT_CODE, C.ASSET_COMPONENT_NAME, "
						+ " S.ASSET_SUBCOMPONENT_CODE,S.ASSET_SUBCOMPONENT_NAME FROM "
						+ " RWS_ASSET_SUBCOMPONENT_TBL S, RWS_ASSET_COMPONENT_TYPE_TBL C,"
						+ " RWS_ASSET_TYPE_TBL T WHERE "
						+ " T.TYPE_OF_ASSET_CODE=S.TYPE_OF_ASSET_CODE "
						+ " AND S.ASSET_COMPONENT_CODE=C.ASSET_COMPONENT_CODE "
						+ " AND C.type_of_asset_code = T.type_of_asset_code  AND C.type_of_asset_code ='"
						+ typeOfAsset
						+ "'"
						+ " AND t.type_of_asset_code='"
						+ typeOfAsset
						+ "' AND S.ASSET_COMPONENT_CODE='"
						+ assetComp
						+ "' "
						+ "AND C.ASSET_COMPONENT_CODE='"
						+ assetComp
						+ "' ORDER BY S.TYPE_OF_ASSET_CODE,S.ASSET_COMPONENT_CODE,"
						+ " S.ASSET_SUBCOMPONENT_CODE ";
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.rs = rwsMasterData.ps.executeQuery();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setAssetTypeCode(rwsMasterData.rs.getString(1));
				rwsMaster.setAssetTypeName(rwsMasterData.rs.getString(2));
				rwsMaster.setAssetCompTypeCode(rwsMasterData.rs.getString(3));
				rwsMaster.setAssetCompTypeName(rwsMasterData.rs.getString(4));
				rwsMaster.setAssetSubCompTypeCode(rwsMasterData.rs.getString(5));
				rwsMaster.setAssetSubCompTypeName(rwsMasterData.rs.getString(6));
				assetSubCompTypes.add(rwsMaster);
			}
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData getAssetSubCompTypes is : "+e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return assetSubCompTypes;
	}

	 
	public static int removeAssetSubCompType(String assetTypeCode, String assetCompCode, String assetSubCompCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rcount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement("delete  from RWS_ASSET_SUBCOMPONENT_TBL where type_of_asset_code= ? and asset_component_code= ? and asset_subcomponent_code= ? ");
			rwsMasterData.ps.setString(1, assetTypeCode);
			rwsMasterData.ps.setString(2, assetCompCode);
			rwsMasterData.ps.setString(3, assetSubCompCode);
			rcount = rwsMasterData.ps.executeUpdate();
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData updateAssetSubCompType is : "+e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return rcount;
	}

	 
	public static int updateAssetSubCompType(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int updateCount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			ps = rwsMasterData.conn.prepareStatement("update  RWS_ASSET_SUBCOMPONENT_TBL set asset_subcomponent_name=? where asset_subcomponent_code=? and asset_component_code=? and type_of_asset_code=?");
			ps.setString(4, rwsMaster.getAssetTypeCode());
			ps.setString(3, rwsMaster.getAssetCompTypeCode());
			ps.setString(2, rwsMaster.getAssetSubCompTypeCode());
			ps.setString(1, rwsMaster.getAssetSubCompTypeName().toUpperCase());
			updateCount = ps.executeUpdate();
		} catch (SQLException sqle) {
			int errorCode = sqle.getErrorCode();
			if (errorCode == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData updateAssetSubCompType is : "+e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}

		return updateCount;
	}

	 
	public static String getAssetSubCompTypeCode(String assetTypeCode, String assetCompType, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String code = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement("SELECT MAX(to_number(asset_subcomponent_code))+1 FROM RWS_ASSET_SUBCOMPONENT_TBL where type_of_asset_code= ? and asset_component_code= ? ");
			rwsMasterData.ps.setString(1, assetTypeCode);
			rwsMasterData.ps.setString(2, assetCompType);
			rwsMasterData.rs = rwsMasterData.ps.executeQuery();
			rwsMasterData.rs.next();
			code = rwsMasterData.rs.getString(1);
			if (code == null) {
				code = "001";
			} else if (code.length() == 1) {
				code = "00" + code;
			} else if (code.length() == 2) {
				code = "0" + code;
			}
		} catch (Exception e) {
			System.out.println("The Exception in RwsMasterData getAssetSubCompTypeCode is : "+e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return code;
	}

	public static int insertAssetSubCompParam(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rowCount = rwsMasterData.stmt.executeUpdate(
					"insert into RWS_SUBCOMP_PARAM_TBL " + "values('" + rwsMaster.getAssetTypeCode() + "'," + "'"
							+ rwsMaster.getAssetCompTypeCode() + "'," + "'" + rwsMaster.getAssetSubCompTypeCode() + "',"
							+ "'" + rwsMaster.getDimension() + "'," + "'" + rwsMaster.getUom() + "')");
		} catch (Exception e) {
			Debug.println("The error in insertAssetSubCompParam" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static RwsMaster getAssetSubCompParam(String assetTypeCode, String assetCompCode, String assetSubCompCode,
			String measurment, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		try {

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("select * from RWS_SUBCOMP_PARAM_TBL where type_of_asset_code='" + assetTypeCode
							+ "' and asset_component_code='" + assetCompCode + "' and asset_subcomponent_code='"
							+ assetSubCompCode + "' and MEASUREMENT_TYPE='" + measurment + "'");
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setAssetTypeCode(rwsMasterData.rs.getString(1));
				rwsMaster.setAssetTypeName(getAssetTypeName(dataSource, rwsMasterData.rs.getString(1)));
				rwsMaster.setAssetCompTypeCode(rwsMasterData.rs.getString(2));
				rwsMaster.setAssetCompTypeName(
						getAssetCompTypeName(rwsMasterData.rs.getString(2), rwsMasterData.rs.getString(1), dataSource));
				rwsMaster.setAssetSubCompTypeCode(rwsMasterData.rs.getString(3));
				rwsMaster.setAssetSubCompTypeName(getAssetSubCompTypeName(rwsMasterData.rs.getString(3),
						rwsMasterData.rs.getString(2), rwsMasterData.rs.getString(1), rwsMasterData.conn));
				rwsMaster.setDimension(rwsMasterData.rs.getString(4));
				rwsMaster.setUom(rwsMasterData.rs.getString(5));
			}
		} catch (Exception e) {
			Debug.println("The error in getAssetSubCompParam" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rwsMaster;
	}

	public static ArrayList getAssetSubCompParmas(String typeOfAsset, String assetComp, String assetSubComp,
			DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList assetSubCompTypes = new ArrayList();
		try {

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			if (typeOfAsset.equals("") && assetComp.equals("") && assetSubComp.equals(""))
				rwsMasterData.rs = rwsMasterData.stmt.executeQuery("SELECT P.TYPE_OF_ASSET_CODE,T.TYPE_OF_ASSET_NAME,"
						+ "P.ASSET_COMPONENT_CODE,C.ASSET_COMPONENT_NAME,"
						+ "P.ASSET_SUBCOMPONENT_CODE,S.ASSET_SUBCOMPONENT_NAME,"
						+ "P.MEASUREMENT_TYPE,P.MEASUREMENT_UNIT "
						+ "FROM RWS_ASSET_SUBCOMPONENT_TBL S,RWS_ASSET_COMPONENT_TYPE_TBL C,"
						+ " RWS_ASSET_TYPE_TBL T,RWS_SUBCOMP_PARAM_TBL P WHERE "
						+ "P.TYPE_OF_ASSET_CODE=T.TYPE_OF_ASSET_CODE AND "
						+ "P.ASSET_COMPONENT_CODE=C.ASSET_COMPONENT_CODE AND "
						+ "P.ASSET_SUBCOMPONENT_CODE=S.ASSET_SUBCOMPONENT_CODE AND "
						+ "S.TYPE_OF_ASSET_CODE=T.TYPE_OF_ASSET_CODE AND "
						+ "S.ASSET_COMPONENT_CODE=C.ASSET_COMPONENT_CODE AND "
						+ "C.TYPE_OF_ASSET_CODE=T.TYPE_OF_ASSET_CODE "
						+ "ORDER BY P.TYPE_OF_ASSET_CODE,P.ASSET_COMPONENT_CODE," + "P.ASSET_SUBCOMPONENT_CODE");
			else if (!typeOfAsset.equals("") && assetComp.equals("") && assetSubComp.equals(""))
				rwsMasterData.rs = rwsMasterData.stmt.executeQuery("SELECT P.TYPE_OF_ASSET_CODE,T.TYPE_OF_ASSET_NAME,"
						+ "P.ASSET_COMPONENT_CODE,C.ASSET_COMPONENT_NAME,"
						+ "P.ASSET_SUBCOMPONENT_CODE,S.ASSET_SUBCOMPONENT_NAME,"
						+ "P.MEASUREMENT_TYPE,P.MEASUREMENT_UNIT "
						+ "FROM RWS_ASSET_SUBCOMPONENT_TBL S,RWS_ASSET_COMPONENT_TYPE_TBL C,"
						+ " RWS_ASSET_TYPE_TBL T,RWS_SUBCOMP_PARAM_TBL P WHERE "
						+ "P.TYPE_OF_ASSET_CODE=T.TYPE_OF_ASSET_CODE AND "
						+ "P.ASSET_COMPONENT_CODE=C.ASSET_COMPONENT_CODE AND "
						+ "P.ASSET_SUBCOMPONENT_CODE=S.ASSET_SUBCOMPONENT_CODE AND "
						+ "S.TYPE_OF_ASSET_CODE=T.TYPE_OF_ASSET_CODE AND "
						+ "S.ASSET_COMPONENT_CODE=C.ASSET_COMPONENT_CODE AND "
						+ "C.TYPE_OF_ASSET_CODE=T.TYPE_OF_ASSET_CODE AND S.TYPE_OF_ASSET_CODE='" + typeOfAsset + "'"
						+ " AND T.TYPE_OF_ASSET_CODE='" + typeOfAsset + "' AND C.TYPE_OF_ASSET_CODE='" + typeOfAsset
						+ "'" + " ORDER BY P.TYPE_OF_ASSET_CODE,P.ASSET_COMPONENT_CODE," + "P.ASSET_SUBCOMPONENT_CODE");
			else if (!typeOfAsset.equals("") && !assetComp.equals("") && assetSubComp.equals(""))
				rwsMasterData.rs = rwsMasterData.stmt.executeQuery("SELECT P.TYPE_OF_ASSET_CODE,T.TYPE_OF_ASSET_NAME,"
						+ "P.ASSET_COMPONENT_CODE,C.ASSET_COMPONENT_NAME,"
						+ "P.ASSET_SUBCOMPONENT_CODE,S.ASSET_SUBCOMPONENT_NAME,"
						+ "P.MEASUREMENT_TYPE,P.MEASUREMENT_UNIT "
						+ "FROM RWS_ASSET_SUBCOMPONENT_TBL S,RWS_ASSET_COMPONENT_TYPE_TBL C,"
						+ " RWS_ASSET_TYPE_TBL T,RWS_SUBCOMP_PARAM_TBL P WHERE "
						+ "P.TYPE_OF_ASSET_CODE=T.TYPE_OF_ASSET_CODE AND "
						+ "P.ASSET_COMPONENT_CODE=C.ASSET_COMPONENT_CODE AND "
						+ "P.ASSET_SUBCOMPONENT_CODE=S.ASSET_SUBCOMPONENT_CODE AND "
						+ "S.TYPE_OF_ASSET_CODE=T.TYPE_OF_ASSET_CODE AND "
						+ "S.ASSET_COMPONENT_CODE=C.ASSET_COMPONENT_CODE AND "
						+ "C.TYPE_OF_ASSET_CODE=T.TYPE_OF_ASSET_CODE AND S.TYPE_OF_ASSET_CODE='" + typeOfAsset + "'"
						+ " AND T.TYPE_OF_ASSET_CODE='" + typeOfAsset + "' AND C.TYPE_OF_ASSET_CODE='" + typeOfAsset
						+ "'" + " AND P.ASSET_COMPONENT_CODE='" + assetComp + "' AND C.ASSET_COMPONENT_CODE='"
						+ assetComp + "' AND S.ASSET_COMPONENT_CODE='" + assetComp + "'"
						+ "ORDER BY P.TYPE_OF_ASSET_CODE,P.ASSET_COMPONENT_CODE," + "P.ASSET_SUBCOMPONENT_CODE");
			else if (!typeOfAsset.equals("") && !assetComp.equals("") && !assetSubComp.equals(""))
				rwsMasterData.rs = rwsMasterData.stmt.executeQuery("SELECT P.TYPE_OF_ASSET_CODE,T.TYPE_OF_ASSET_NAME,"
						+ "P.ASSET_COMPONENT_CODE,C.ASSET_COMPONENT_NAME,"
						+ "P.ASSET_SUBCOMPONENT_CODE,S.ASSET_SUBCOMPONENT_NAME,"
						+ "P.MEASUREMENT_TYPE,P.MEASUREMENT_UNIT "
						+ "FROM RWS_ASSET_SUBCOMPONENT_TBL S,RWS_ASSET_COMPONENT_TYPE_TBL C,"
						+ " RWS_ASSET_TYPE_TBL T,RWS_SUBCOMP_PARAM_TBL P WHERE "
						+ "P.TYPE_OF_ASSET_CODE=T.TYPE_OF_ASSET_CODE AND "
						+ "P.ASSET_COMPONENT_CODE=C.ASSET_COMPONENT_CODE AND "
						+ "P.ASSET_SUBCOMPONENT_CODE=S.ASSET_SUBCOMPONENT_CODE AND "
						+ "S.TYPE_OF_ASSET_CODE=T.TYPE_OF_ASSET_CODE AND "
						+ "S.ASSET_COMPONENT_CODE=C.ASSET_COMPONENT_CODE AND "
						+ "C.TYPE_OF_ASSET_CODE=T.TYPE_OF_ASSET_CODE AND S.TYPE_OF_ASSET_CODE='" + typeOfAsset + "'"
						+ " AND T.TYPE_OF_ASSET_CODE='" + typeOfAsset + "' AND C.TYPE_OF_ASSET_CODE='" + typeOfAsset
						+ "'" + " AND P.ASSET_COMPONENT_CODE='" + assetComp + "' AND C.ASSET_COMPONENT_CODE='"
						+ assetComp + "' AND S.ASSET_COMPONENT_CODE='" + assetComp + "'"
						+ " AND S.ASSET_SUBCOMPONENT_CODE='" + assetSubComp + "' AND P.ASSET_SUBCOMPONENT_CODE='"
						+ assetSubComp + "'" + " ORDER BY P.TYPE_OF_ASSET_CODE,P.ASSET_COMPONENT_CODE,"
						+ "P.ASSET_SUBCOMPONENT_CODE");

			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setAssetTypeCode(rwsMasterData.rs.getString(1));
				rwsMaster.setAssetTypeName(rwsMasterData.rs.getString(2));
				rwsMaster.setAssetCompTypeCode(rwsMasterData.rs.getString(3));
				rwsMaster.setAssetCompTypeName(rwsMasterData.rs.getString(4));
				rwsMaster.setAssetSubCompTypeCode(rwsMasterData.rs.getString(5));
				rwsMaster.setAssetSubCompTypeName(rwsMasterData.rs.getString(6));
				rwsMaster.setDimension(rwsMasterData.rs.getString(7));
				rwsMaster.setUom(rwsMasterData.rs.getString(8));

				assetSubCompTypes.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The error in getAssetSubCompParmas" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return assetSubCompTypes;
	}

	/*
	 * public static int removeAssetSubCompParam(String assetTypeCode, String
	 * assetCompCode, String assetSubCompCode, String dimension, DataSource
	 * dataSource) throws Exception { RwsMasterData rwsMasterData=new
	 * RwsMasterData(); int rcount = 0; try { Debug.println("assettypecode=" +
	 * assetTypeCode); Debug.println("assetCompCode=" + assetCompCode);
	 * Debug.println("assetSubCompCode=" + assetSubCompCode); rwsMasterData.conn =
	 * RwsOffices.getConn(); rwsMasterData.stmt =
	 * rwsMasterData.conn.createStatement(); rcount = rwsMasterData.stmt
	 * .executeUpdate("delete from RWS_SUBCOMP_PARAM_TBL where
	 * type_of_asset_code='" + assetTypeCode + "' and asset_component_code='" +
	 * assetCompCode + "' and asset_subcomponent_code='" + assetSubCompCode + "' and
	 * MEASUREMENT_TYPE='" + dimension + "'"); Debug.println("rcount=" + rcount); }
	 * catch (Exception e) { Debug.println("The error in removeAssetSubCompParam" +
	 * e); } finally { rwsMasterData.closeAll(); } return rcount; }
	 */
	public static int removeAssetSubCompParam(String assetTypeCode, String assetCompCode, String assetSubCompCode,
			String dimension, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rcount = 0;
		try {

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rcount = rwsMasterData.stmt.executeUpdate("delete from RWS_SUBCOMP_PARAM_TBL where type_of_asset_code='"
					+ assetTypeCode + "' and asset_component_code='" + assetCompCode + "' and asset_subcomponent_code='"
					+ assetSubCompCode + "' and MEASUREMENT_TYPE='" + dimension + "'");
		} catch (Exception e) {
			Debug.println("The error in removeAssetSubCompParam" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rcount;
	}

	public static void updateAssetSubCompParam(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			ps = rwsMasterData.conn.prepareStatement(
					"update RWS_SUBCOMP_PARAM_TBL set measurement_type=?,measurement_unit=? where asset_subcomponent_code=? and asset_component_code=? and type_of_asset_code=?");
			ps.setString(5, rwsMaster.getAssetTypeCode());
			ps.setString(4, rwsMaster.getAssetCompTypeCode());
			ps.setString(3, rwsMaster.getAssetSubCompTypeCode());
			ps.setString(2, rwsMaster.getUom());
			ps.setString(1, rwsMaster.getDimension());
			ps.executeUpdate();
		} catch (Exception e) {
			Debug.println("The Exception in updateAssetSubCompParam : " + e);
		} finally {
			rwsMasterData.closeAll();
		}
	}


	public static int[] insertAsset(RwsMaster rwsMaster, ArrayList habs, ArrayList sources, ArrayList headworks,
			ArrayList pipeline, ArrayList reservior, String opType, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		PanchRaj panchRaj = new PanchRaj();
		Asset_SubComponent assetSources = new Asset_SubComponent();
		Asset_HeadWorks assetHeadworks = new Asset_HeadWorks();
		Asset_PipeLine assetPipeline = new Asset_PipeLine();
		Asset_Reservior assetReservior = new Asset_Reservior();
		int[] rowCount = new int[50];
		String habCode = "";
		String assetTypeCode = "";
		String assetCompTypeCode = "";
		String assetSubCompTypeCode = "";
		String query1 = "", query = "";
		String schemeCode = "";
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.conn.setAutoCommit(false);
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			if (opType.equals("Modify")) {
				query = "update RWS_ASSET_MAST_TBL set ASSET_NAME='" + rwsMaster.getAssetName().toUpperCase()
						+ "',LOCATION='" + rwsMaster.getLocation().toUpperCase() + "',DATE_CREATION=TO_DATE('"
						+ rwsMaster.getDateofCreation() + "','dd/mm/yyyy'),ASSET_COST =" + rwsMaster.getAssetCost()
						+ ",START_YEAR='" + rwsMaster.getStartYear() + "',END_YEAR='" + rwsMaster.getEndYear()
						+ "',ASSET_STATUS=" + rwsMaster.getAssetStatus() + "UPDATE_DATE=SYSDATE " + "where asset_code='"
						+ rwsMaster.getAssetCode() + "'";
				rwsMasterData.stmt.addBatch(query);
				habCode = rwsMaster.getHabCode();
				query = "delete from RWS_ASSET_HAB_TBL where asset_code='" + rwsMaster.getAssetCode() + "'";
				rwsMasterData.stmt.addBatch(query);
				RwsMaster rm = null;
				for (int i = 0; i < habs.size(); i++) {
					rm = (RwsMaster) habs.get(i);
					if (rm.getHabCode() != null) {
						query = "insert into RWS_ASSET_HAB_TBL(ASSET_CODE,HAB_CODE) values('" + rwsMaster.getAssetCode()
								+ "','" + rm.getHabCode() + "')";
						rwsMasterData.stmt.addBatch(query);
					}
				}
			}
			if (opType.equals("Add New")) {
				query = "select hab_code from	 RWS_ASSET_MAST_TBL where  asset_code='" + rwsMaster.getAssetCode()+ "'";
				rwsMasterData.stmt = rwsMasterData.conn.createStatement();
				rwsMasterData.rs = rwsMasterData.stmt.executeQuery(query);
				if (rwsMasterData.rs.next())
					habCode = rwsMasterData.rs.getString(1);
				schemeCode = rwsMaster.getHabCode() + rwsMaster.getPumpCode();
				assetTypeCode = rwsMaster.getAssetTypeCode();
				assetCompTypeCode = rwsMaster.getAssetCompTypeCode();
				assetSubCompTypeCode = rwsMaster.getAssetSubCompTypeCode();
				/*
				 * Debug.println("query= " + query + "Scheme Code= " + schemeCode + "habCode=" +
				 * habCode + "asset type=" + assetTypeCode + "assetComptype=" +
				 * assetCompTypeCode + "assetSubcompType=" + assetSubCompTypeCode);
				 */
				query = "insert into RWS_ASSET_MAST_TBL(ASSET_CODE,ASSET_NAME,TYPE_OF_ASSET_CODE,HAB_CODE,LOCATION,DATE_CREATION,ASSET_STATUS,ASSET_COST,START_YEAR,END_YEAR,CIRCLE_OFFICE_CODE,DIVISION_OFFICE_CODE,SUBDIVISION_OFFICE_CODE,UPDATE_DATE,) values('"
						+ rwsMaster.getAssetCode() + "','" + rwsMaster.getAssetName().toUpperCase() + "','"
						+ rwsMaster.getAssetTypeCode() + "','" + rwsMaster.getHabCode() + "','"
						+ rwsMaster.getLocation().toUpperCase() + "',TO_DATE('" + rwsMaster.getDateofCreation()
						+ "','dd/mm/yyyy')," + "nvl('" + rwsMaster.getAssetStatus() + "','')" + ",nvl('"
						+ rwsMaster.getAssetCost() + "',''),'" + rwsMaster.getStartYear() + "','"
						+ rwsMaster.getEndYear() + "','" + rwsMaster.getCoc() + "',nvl('" + rwsMaster.getDoc()
						+ "',''),'" + rwsMaster.getSdoc() + "',SYSDATE)";
				rwsMasterData.stmt.addBatch(query);
				query = "insert into RWS_ASSET_SCHEME_TBL  values('" + rwsMaster.getAssetCode() + "','" + schemeCode	+ "')";
				rwsMasterData.stmt.addBatch(query);

				habCode = rwsMaster.getHabCode();
				query = "delete from RWS_ASSET_HAB_TBL where asset_code='" + rwsMaster.getAssetCode() + "'";
				rwsMasterData.stmt.addBatch(query);

				if (habs != null)
					for (int i = 0; i < habs.size(); i++) {
						panchRaj = (PanchRaj) habs.get(i);
						if (panchRaj.getHabCode() != null) {
							if (!assetTypeCode.equals("04")) {
								query = "insert into RWS_ASSET_HAB_TBL(ASSET_CODE,HAB_CODE) values('"
										+ rwsMaster.getAssetCode() + "','" + panchRaj.getHabCode() + "')";
								rwsMasterData.stmt.addBatch(query);
							}
						}
					}
			}
			rowCount = rwsMasterData.stmt.executeBatch();
			rwsMasterData.conn.commit();
			rwsMasterData.conn.setAutoCommit(true);
		}

		catch (Exception b) {
			Debug.println("Error in insertAsset in RwsMasterData: " + b.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return rowCount;
	}

	public static String insertAsset(RwsMaster rwsMaster, ArrayList habs, String opType, DataSource dataSource)
			throws Exception {
		// Debug.println("optype from method:" + opType);
		String actOpType = opType;
		if (opType.equals("Add New Scheme"))
			opType = "Add New";
		RwsMasterData rwsMasterData = new RwsMasterData();
		PanchRaj panchRaj = new PanchRaj();
		Asset_SubComponent assetSources = new Asset_SubComponent();
		Asset_HeadWorks assetHeadworks = new Asset_HeadWorks();
		Asset_PipeLine assetPipeline = new Asset_PipeLine();
		Asset_Reservior assetReservior = new Asset_Reservior();
		int[] rowCount = new int[50];
		String habCode = "";
		String assetTypeCode = "";
		String assetCompTypeCode = "";
		String assetSubCompTypeCode = "";
		String query1 = "", query = "";
		String schemeCode = "";
		boolean isInserted = true;
		String message = "";
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.conn.setAutoCommit(false);
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			if (opType.equals("Modify")) {
				query = "update RWS_ASSET_MAST_TBL set ASSET_NAME='" + rwsMaster.getAssetName().toUpperCase()
						+ "',LOCATION='" + rwsMaster.getLocation().toUpperCase() + "',DATE_CREATION=TO_DATE('"
						+ rwsMaster.getDateofCreation() + "','dd/mm/yyyy'),UPDATE_DATE=(SYSDATE),ASSET_COST =nvl('"
						+ rwsMaster.getAssetCost() + "',0),START_YEAR=nvl('" + rwsMaster.getStartYear()
						+ "',0),END_YEAR=nvl('" + rwsMaster.getEndYear() + "',0),ASSET_STATUS=nvl('"
						+ rwsMaster.getAssetStatus() + "',0),DEFUNCT_REASON='" + rwsMaster.getDefunctReasons()
						+ "',POPU_BENEFITED = '" + rwsMaster.getTotPopBenfit() + "',";

				if (rwsMaster.getAssetTypeCode().equals("09"))
					query += "DIRECT_PUMPING_YIELD='" + rwsMaster.getDpYield() + "',";
				query += " remarks='" + rwsMaster.getRemarks() + "',latitude='" + rwsMaster.getLatitude() + "'"
						+ ", longitude='" + rwsMaster.getLongitude() + "',elevation='" + rwsMaster.getElevation()
						+ "',way_point='" + rwsMaster.getWaypoint() + "',LAST_REPAIRED_DATE=to_date('"
						+ rwsMaster.getLastRepairedDate() + "','dd/mm/yyyy') where asset_code='"
						+ rwsMaster.getAssetCode() + "'";

				rwsMasterData.stmt.addBatch(query);
				habCode = rwsMaster.getHabCode();
				query = "delete from RWS_ASSET_HAB_TBL where asset_code='" + rwsMaster.getAssetCode() + "'";
				rwsMasterData.stmt.addBatch(query);
				RwsMaster rm = null;
				if (habs != null)
					if (habs.size() == 1) {
						Object o = (Object) habs.get(0);
						Class cc = o.getClass();
						if (cc.getName().equals("nic.watersoft.masters.PanchRaj")) {
							panchRaj = (PanchRaj) habs.get(0);
							if (panchRaj.getHabCode() != null) {
								query = "insert into RWS_ASSET_HAB_TBL(ASSET_CODE,HAB_CODE) values('"
										+ rwsMaster.getAssetCode() + "','" + panchRaj.getHabCode() + "')";
								rwsMasterData.stmt.addBatch(query);
							}
						}
						if (cc.getName().equals("nic.watersoft.masters.RwsMaster")) {
							rm = (RwsMaster) habs.get(0);
							if (rm.getHabCode() != null) {
								query = "insert into RWS_ASSET_HAB_TBL(ASSET_CODE,HAB_CODE) values('"
										+ rwsMaster.getAssetCode() + "','" + rm.getHabCode() + "')";
								rwsMasterData.stmt.addBatch(query);
							}
						}
					} else {
						for (int i = 0; i < habs.size(); i++) {
							Object o = (Object) habs.get(i);
							Class cc = o.getClass();
							if (cc.getName().equals("nic.watersoft.masters.PanchRaj")) {
								panchRaj = (PanchRaj) habs.get(i);
								if (panchRaj.getHabCode() != null) {
									query = "insert into RWS_ASSET_HAB_TBL(ASSET_CODE,HAB_CODE) values('"
											+ rwsMaster.getAssetCode() + "','" + panchRaj.getHabCode() + "')";
									rwsMasterData.stmt.addBatch(query);
								}
							}
							if (cc.getName().equals("nic.watersoft.masters.RwsMaster")) {
								rm = (RwsMaster) habs.get(i);
								if (rm.getHabCode() != null) {
									query = "insert into RWS_ASSET_HAB_TBL(ASSET_CODE,HAB_CODE) values('"
											+ rwsMaster.getAssetCode() + "','" + rm.getHabCode() + "')";
									rwsMasterData.stmt.addBatch(query);
								}
							}
						}
					}
			}
			if (opType.equals("Add New")) {
				query = "select hab_code from	 RWS_ASSET_MAST_TBL where  asset_code=?";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, rwsMaster.getAssetCode());
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				if (rwsMasterData.rs.next())
					habCode = rwsMasterData.rs.getString(1);
				schemeCode = rwsMaster.getHabCode() + rwsMaster.getPumpCode();
				assetTypeCode = rwsMaster.getAssetTypeCode();
				assetCompTypeCode = rwsMaster.getAssetCompTypeCode();
				assetSubCompTypeCode = rwsMaster.getAssetSubCompTypeCode();
				String yeild = "";
				if (rwsMaster.getDpYield() != null)
					yeild = rwsMaster.getDpYield();
				String latitude = "";
				if (rwsMaster.getLatitude() != null)
					latitude = rwsMaster.getLatitude();
				String longitude = "";
				if (rwsMaster.getLongitude() != null)
					longitude = rwsMaster.getLongitude();
				String elevation = "";
				if (rwsMaster.getElevation() != null)
					elevation = rwsMaster.getElevation();
				String waypoint = "";
				if (rwsMaster.getWaypoint() != null)
					waypoint = rwsMaster.getWaypoint();
				if (!rwsMaster.getAssetTypeCode().equals("09"))
					query = "insert into RWS_ASSET_MAST_TBL(ASSET_CODE,ASSET_NAME,TYPE_OF_ASSET_CODE,HAB_CODE,LOCATION,DATE_CREATION,ASSET_STATUS,ASSET_COST,START_YEAR,END_YEAR,CIRCLE_OFFICE_CODE,DIVISION_OFFICE_CODE,SUBDIVISION_OFFICE_CODE,UPDATE_DATE,DEFUNCT_REASON,POPU_BENEFITED,remarks,latitude,longitude,elevation,way_point,LAST_REPAIRED_DATE) values('"
							+ rwsMaster.getAssetCode() + "','" + rwsMaster.getAssetName().toUpperCase() + "','"
							+ rwsMaster.getAssetTypeCode() + "','" + rwsMaster.getHabCode() + "','"
							+ rwsMaster.getLocation().toUpperCase() + "',TO_DATE('" + rwsMaster.getDateofCreation()
							+ "','dd/mm/yyyy')," + "nvl('" + rwsMaster.getAssetStatus() + "','')" + ",nvl('"
							+ rwsMaster.getAssetCost() + "',''),'" + rwsMaster.getStartYear() + "','"
							+ rwsMaster.getEndYear() + "','" + rwsMaster.getCoc() + "',nvl('" + rwsMaster.getDoc()
							+ "',''),'" + rwsMaster.getSdoc() + "',sysdate,'" + rwsMaster.getDefunctReasons() + "','"
							+ rwsMaster.getTotPopBenfit() + "','" + rwsMaster.getRemarks() + "','" + latitude + "','"
							+ longitude + "','" + elevation + "','" + waypoint + "',to_date('"
							+ rwsMaster.getLastRepairedDate() + "','dd/mm/yyyy'))";
				else
					query = "insert into RWS_ASSET_MAST_TBL(ASSET_CODE,ASSET_NAME,TYPE_OF_ASSET_CODE,HAB_CODE,LOCATION,DATE_CREATION,ASSET_STATUS,ASSET_COST,START_YEAR,END_YEAR,CIRCLE_OFFICE_CODE,DIVISION_OFFICE_CODE,SUBDIVISION_OFFICE_CODE,UPDATE_DATE,DEFUNCT_REASON,POPU_BENEFITED,remarks,direct_pumping_yield,latitude,longitude,elevation,way_point,LAST_REPAIRED_DATE) values('"
							+ rwsMaster.getAssetCode() + "','" + rwsMaster.getAssetName().toUpperCase() + "','"
							+ rwsMaster.getAssetTypeCode() + "','" + rwsMaster.getHabCode() + "','"
							+ rwsMaster.getLocation().toUpperCase() + "',TO_DATE('" + rwsMaster.getDateofCreation()
							+ "','dd/mm/yyyy')," + "nvl('" + rwsMaster.getAssetStatus() + "','')" + ",nvl('"
							+ rwsMaster.getAssetCost() + "',''),'" + rwsMaster.getStartYear() + "','"
							+ rwsMaster.getEndYear() + "','" + rwsMaster.getCoc() + "',nvl('" + rwsMaster.getDoc()
							+ "',''),'" + rwsMaster.getSdoc() + "',sysdate,'" + rwsMaster.getDefunctReasons() + "','"
							+ rwsMaster.getTotPopBenfit() + "','" + rwsMaster.getRemarks() + "','" + yeild + "','"
							+ latitude + "','" + longitude + "','" + elevation + "','" + waypoint + "',to_date('"
							+ rwsMaster.getLastRepairedDate() + "','dd/mm/yyyy'))";

				rwsMasterData.stmt.addBatch(query);
				query = "insert into RWS_ASSET_SCHEME_TBL  values('" + rwsMaster.getAssetCode() + "','" + schemeCode
						+ "')";
				rwsMasterData.stmt.addBatch(query);

				habCode = rwsMaster.getHabCode();

				query = "delete from RWS_ASSET_HAB_TBL where asset_code='" + rwsMaster.getAssetCode() + "'";
				rwsMasterData.stmt.addBatch(query);
				
				query = "select a.SOURCE_CODE,a.WORK_ID from RWS_SOURCE_IDEN_FIN_TBL a, RWS_SOURCE_TBL b where a.SOURCE_CODE=b.SOURCE_CODE and a.WORK_ID<>b.ASSET_CODE and a.WORK_ID=?";
				System.out.println(query);
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, rwsMaster.getAssetCode());
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				if (rwsMasterData.rs.next()){					 
					 query = "insert into rws_asset_source_lnk_tbl  values('" + rwsMasterData.rs.getString(1) + "','" + rwsMasterData.rs.getString(2) + "')";
					 System.out.println(query);
					 rwsMasterData.stmt.addBatch(query);
				}
				
				
				RwsMaster rm = null;
				if (habs != null)
					if (habs.size() == 1) {
						Object o = (Object) habs.get(0);
						Class cc = o.getClass();
						if (cc.getName().equals("nic.watersoft.masters.PanchRaj")) {
							panchRaj = (PanchRaj) habs.get(0);
							if (panchRaj.getHabCode() != null) {
								query = "insert into RWS_ASSET_HAB_TBL(ASSET_CODE,HAB_CODE) values('"
										+ rwsMaster.getAssetCode() + "','" + panchRaj.getHabCode() + "')";
								rwsMasterData.stmt.addBatch(query);
							}
						}
						if (cc.getName().equals("nic.watersoft.masters.RwsMaster")) {
							rm = (RwsMaster) habs.get(0);
							if (rm.getHabCode() != null) {
								query = "insert into RWS_ASSET_HAB_TBL(ASSET_CODE,HAB_CODE) values('"
										+ rwsMaster.getAssetCode() + "','" + rm.getHabCode() + "')";
								rwsMasterData.stmt.addBatch(query);
							}
						}
					} else {
						for (int i = 0; i < habs.size(); i++) {
							Object o = (Object) habs.get(i);
							Class cc = o.getClass();

							if (cc.getName().equals("nic.watersoft.masters.PanchRaj")) {
								panchRaj = (PanchRaj) habs.get(i);
								if (panchRaj.getHabCode() != null) {
									query = "insert into RWS_ASSET_HAB_TBL(ASSET_CODE,HAB_CODE) values('"
											+ rwsMaster.getAssetCode() + "','" + panchRaj.getHabCode() + "')";
									rwsMasterData.stmt.addBatch(query);
								}
							}
							if (cc.getName().equals("nic.watersoft.masters.RwsMaster")) {
								rm = (RwsMaster) habs.get(i);
								if (rm.getHabCode() != null) {
									query = "insert into RWS_ASSET_HAB_TBL(ASSET_CODE,HAB_CODE) values('"
											+ rwsMaster.getAssetCode() + "','" + rm.getHabCode() + "')";
									rwsMasterData.stmt.addBatch(query);
								}
							}
						}
					}
				if (actOpType.equals("Add New Scheme")) {
					query = "insert into rws_work_asset_tbl values('" + rwsMaster.getWorkid() + "','"
							+ rwsMaster.getAssetCode() + "')";
					// rwsMasterData.stmt.addBatch(query);
				}
			}
			rowCount = rwsMasterData.stmt.executeBatch();

			if (opType.equals("Add New")) {
				for (int i = 0; i < rowCount.length; i++) {
					if (rowCount[i] < 0 && i != 2)
						isInserted = false;
				}
				if (isInserted) {
					message = "Record inserted Successfully-Please Select Asset Code to Add SubComponents";
					rwsMasterData.conn.commit();
				} else {
					message = "Record Cannot be Inserted";
				}
			}
			if (opType.equals("Modify")) {
				for (int i = 0; i < rowCount.length; i++) {
					if (rowCount[i] < 0 && i != 1)
						isInserted = false;
				}

				if (isInserted) {
					message = "Record Updated Successfully";
					rwsMasterData.conn.commit();
				} else {
					message = "Record Cannot be Updated";
				}
			}
			rwsMasterData.conn.setAutoCommit(true);

		} catch (Exception b) {
			isInserted = false;
			message = "Record Cannot be Inserted";
			b.printStackTrace();
			Debug.println("Error in insert Asset in RwsMasterData: " + b.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return message;
	}

	public static int[] insertAssetHab(RwsMaster rwsMaster, ArrayList habs, DataSource dataSource) throws Exception {
		PanchRaj panchRaj = new PanchRaj();

		int[] rowCount = new int[50];
		String habCode = "";
		String assetTypeCode = "";
		String assetCompTypeCode = "";
		String assetSubCompTypeCode = "";
		String query1 = "", query = "";
		String schemeCode = "";
		RwsMasterData rwsMasterData = new RwsMasterData();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.conn.setAutoCommit(false);
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			query = "delete from RWS_ASSET_HAB_TBL where asset_code='" + rwsMaster.getAssetCode() + "'";
			rwsMasterData.stmt.addBatch(query);
			for (int i = 0; i < habs.size(); i++) {
				panchRaj = (PanchRaj) habs.get(i);
				if (panchRaj.getHabCode() != null) {
					query = "insert into RWS_ASSET_HAB_TBL(ASSET_CODE,HAB_CODE) values('" + rwsMaster.getAssetCode()	+ "','" + panchRaj.getHabCode() + "')";
					rwsMasterData.stmt.addBatch(query);
				}
			}
			rowCount = rwsMasterData.stmt.executeBatch();
			rwsMasterData.conn.commit();
			rwsMasterData.conn.setAutoCommit(true);
		} catch (Exception b) {
			Debug.println("Error in insertAssetHab in RwsMasterData: " + b.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return rowCount;
	}

	public static DAOMessage insertAssetSubCompParams(DataSource dataSource, String assetCode, String assetCompTypeCode,
			String assetSubCompTypeCode, String assetTypeCode, String opType, ArrayList subComps, String compType)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		Asset_SubComponent assetSources = new Asset_SubComponent();
		Asset_HeadWorks assetHeadworks = new Asset_HeadWorks();
		Asset_PipeLine assetPipeline = new Asset_PipeLine();
		Asset_Reservior assetReservior = new Asset_Reservior();
		Asset_Pumpset assetPumpset = new Asset_Pumpset();
		DAOMessage daoMessage = new DAOMessage();
		String query1 = "";
		String query = "";
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			String Tab_Prifix = "";
			if (assetTypeCode.equals("01"))
				Tab_Prifix = "RWS_AST_";
			else if (assetTypeCode.equals("02"))
				Tab_Prifix = "RWS_AST_";
			else if (assetTypeCode.equals("03"))
				Tab_Prifix = "RWS_AST_";
			else if (assetTypeCode.equals("09"))
				Tab_Prifix = "RWS_AST_";
			if (assetTypeCode.equals("07") && assetCompTypeCode.equals("01") && assetSubCompTypeCode.equals("001")) {
				Asset_Ponds assetPonds;
				if (subComps != null) {
					for (int i = 0; i < subComps.size(); i++) {
						assetPonds = (Asset_Ponds) subComps.get(i);
							if (assetPonds.getWaterQuality().equals("SAFE SOURCE")) {
								assetPonds.setFloride("");
								assetPonds.setBrakish("");
								assetPonds.setIron("");
								assetPonds.setOthers("");
								assetPonds.setOthersType("");
							}
							query = "update  RWS_OPENWELL_POND_TBL  set "
									+ "ASSET_CODE=?,"
									+ "HAB_CODE=?,POND_CODE=?,POND_NAME=?,POND_LOCATION=?,"
									+ "SIZE_AREA=nvl(?,0),STORAGE_VOL=nvl(?,0),HYGENITY=?,USAGE_PURPOSE=?,"
									+ "FED_BY=?,FED_NAME=?,FED_OTHERS_NAME=?,WATER_QUALITY=?,"
									+ "FLORIDE=nvl(?,0),BRAKISH=nvl(?,0),IRON=nvl(?,0),OTHER_TYPE=?,"
									+ "OTHER_PER=? where POND_CODE=?";
							rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
							rwsMasterData.pstmt.setString(1, assetCode);
							rwsMasterData.pstmt.setString(2, format(assetPonds.getHabCode()));
							rwsMasterData.pstmt.setString(3, format(assetPonds.getPondCode()));
							rwsMasterData.pstmt.setString(4, format(assetPonds.getName()));
							rwsMasterData.pstmt.setString(5, format(assetPonds.getLocation()));
							rwsMasterData.pstmt.setString(6, assetPonds.getAreaSize());
							rwsMasterData.pstmt.setString(7, assetPonds.getVolumeOfStorage());
							rwsMasterData.pstmt.setString(8, format(assetPonds.getHygeinity()));
							rwsMasterData.pstmt.setString(9, format(assetPonds.getPurpose()));
							rwsMasterData.pstmt.setString(10,  format(assetPonds.getFedBy()));
							rwsMasterData.pstmt.setString(11, format(assetPonds.getFedName()));
							rwsMasterData.pstmt.setString(12,  format(assetPonds.getFedOthersName()));
							rwsMasterData.pstmt.setString(13,  format(assetPonds.getWaterQuality()));
							rwsMasterData.pstmt.setString(14, assetPonds.getFloride());
							rwsMasterData.pstmt.setString(15,  assetPonds.getBrakish());
							rwsMasterData.pstmt.setString(16,  assetPonds.getIron());
							rwsMasterData.pstmt.setString(17,  format(assetPonds.getOthersType()));
							rwsMasterData.pstmt.setString(18,  format(assetPonds.getOthers()));
							rwsMasterData.pstmt.setString(19, assetPonds.getPondCode());
							rowCount = rwsMasterData.pstmt.executeUpdate();
							if (rowCount < 1) {
								query = "INSERT INTO  RWS_OPENWELL_POND_TBL  (ASSET_CODE,"
									+ "HAB_CODE,POND_CODE,POND_NAME,POND_LOCATION,"
									+ "SIZE_AREA,STORAGE_VOL,HYGENITY,USAGE_PURPOSE,"
									+ "FED_BY,FED_NAME,FED_OTHERS_NAME,WATER_QUALITY,"
									+ "FLORIDE,BRAKISH,IRON,OTHER_TYPE,"
									+ "OTHER_PER) "
									+ "VALUES"
									+ "(?,?,?,?,?,nvl(?,0),nvl(?,0),?,?,?,?,?,?,nvl(?,0),nvl(?,0),nvl(?,0),?,?)";
							rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
							rwsMasterData.pstmt.setString(1, assetCode);
							rwsMasterData.pstmt.setString(2, format(assetPonds.getHabCode()));
							rwsMasterData.pstmt.setString(3, format(assetPonds.getPondCode()));
							rwsMasterData.pstmt.setString(4, format(assetPonds.getName()));
							rwsMasterData.pstmt.setString(5, format(assetPonds.getLocation()));
							rwsMasterData.pstmt.setString(6, assetPonds.getAreaSize());
							rwsMasterData.pstmt.setString(7, assetPonds.getVolumeOfStorage());
							rwsMasterData.pstmt.setString(8, format(assetPonds.getHygeinity()));
							rwsMasterData.pstmt.setString(9, format(assetPonds.getPurpose()));
							rwsMasterData.pstmt.setString(10,  format(assetPonds.getFedBy()));
							rwsMasterData.pstmt.setString(11, format(assetPonds.getFedName()));
							rwsMasterData.pstmt.setString(12,  format(assetPonds.getFedOthersName()));
							rwsMasterData.pstmt.setString(13,  format(assetPonds.getWaterQuality()));
							rwsMasterData.pstmt.setString(14, assetPonds.getFloride());
							rwsMasterData.pstmt.setString(15,  assetPonds.getBrakish());
							rwsMasterData.pstmt.setString(16,  assetPonds.getIron());
							rwsMasterData.pstmt.setString(17,  format(assetPonds.getOthersType()));
							rwsMasterData.pstmt.setString(18,  format(assetPonds.getOthers()));
							rowCount = rwsMasterData.pstmt.executeUpdate();
						}
							
					}
				}
				daoMessage.setRowCount(rowCount);
				return daoMessage;
			}
			if (assetTypeCode.equals("05") && assetCompTypeCode.equals("01") && assetSubCompTypeCode.equals("001")) {
				Tab_Prifix = "RWS_SHALLOWHANDPUMPS_TBL";
				Asset_SHP assetSHP;
				if (subComps != null) {
					for (int i = 0; i < subComps.size(); i++) {
						assetSHP = (Asset_SHP) subComps.get(i);
							if (assetSHP.getWaterQuality().equals("SAFE SOURCE")) {
								assetSHP.setFloride("");
								assetSHP.setBrakish("");
								assetSHP.setIron("");
								assetSHP.setOthers("");
								assetSHP.setOthersType("");
							}
							query = "update  " + Tab_Prifix + "  set " + "ASSET_CODE=?,"
									+ "HAB_CODE=?,SHALLOWHP_CODE=?,LOCATION=?,DIAMETER=nvl(?,0),"
									+ "DEPTH=nvl(?,0),HYGIENE=?,	AVERAGE_HOURS=nvl(?,0),AVERAGE_TIME=nvl(?,0),"
									+ "YIELD=?,WATER_QUALITY=?,FLORIDE_PER=nvl(?,0),BRAKISH_PER=nvl(?,0),"
									+ "IRON_PER=nvl(?,0),OTHERS=?,OTHERS_PER=?,latitude=?,"
									+ "longitude=?,elevation=?,way_point=? where SHALLOWHP_CODE=?";
							rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
							rwsMasterData.pstmt.setString(1, assetCode);
							rwsMasterData.pstmt.setString(2, format(assetSHP.getHabCode()));
							rwsMasterData.pstmt.setString(3, format(assetSHP.getShallowHandPumpCode()));
							rwsMasterData.pstmt.setString(4, format(assetSHP.getLocation()));
							rwsMasterData.pstmt.setString(5, format(assetSHP.getDiameter()));
							rwsMasterData.pstmt.setString(6, format(assetSHP.getDepth()));
							rwsMasterData.pstmt.setString(7, format(assetSHP.getHygiene()));
							rwsMasterData.pstmt.setString(8,  format(assetSHP.getAvgNoOfHoursWorkingPerDay()));
							rwsMasterData.pstmt.setString(9, format(assetSHP.getAvgTimeToFill()));
							rwsMasterData.pstmt.setString(10,  format(assetSHP.getYeild()));
							rwsMasterData.pstmt.setString(11,  format(assetSHP.getWaterQuality()));
							rwsMasterData.pstmt.setString(12, assetSHP.getFloride());
							rwsMasterData.pstmt.setString(13,  assetSHP.getBrakish());
							rwsMasterData.pstmt.setString(14,  assetSHP.getIron());
							rwsMasterData.pstmt.setString(15,  format(assetSHP.getOthersType()));
							rwsMasterData.pstmt.setString(16,  format(assetSHP.getOthers()));
							rwsMasterData.pstmt.setString(17,  format(assetSHP.getLatitude()));
							rwsMasterData.pstmt.setString(18,  format(assetSHP.getLongitude()));
							rwsMasterData.pstmt.setString(19,  format(assetSHP.getElevation()));
							rwsMasterData.pstmt.setString(20,  format(assetSHP.getWaypoint()));
							rwsMasterData.pstmt.setString(21, assetSHP.getShallowHandPumpCode());
							rowCount = rwsMasterData.pstmt.executeUpdate();
							if (rowCount < 1) {							
								query = "INSERT INTO  " + Tab_Prifix + "(ASSET_CODE,"
										+ "HAB_CODE,SHALLOWHP_CODE,LOCATION,DIAMETER,"
										+ "DEPTH,HYGIENE,AVERAGE_HOURS,AVERAGE_TIME,"
										+ "YIELD,WATER_QUALITY,FLORIDE_PER,BRAKISH_PER,"
										+ "IRON_PER,OTHERS,OTHERS_PER,latitude,"
										+ "longitude,elevation,way_point) VALUES"
										+ " (?,?,?,?,nvl(?,0),nvl(?,0),?,nvl(?,0),nvl(?,0),?,?,nvl(?,0),nvl(?,0),nvl(?,0), ?,?,?,?,?,? )";
							rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
							rwsMasterData.pstmt.setString(1, assetCode);
							rwsMasterData.pstmt.setString(2, format(assetSHP.getHabCode()));
							rwsMasterData.pstmt.setString(3, format(assetSHP.getShallowHandPumpCode()));
							rwsMasterData.pstmt.setString(4, format(assetSHP.getLocation()));
							rwsMasterData.pstmt.setString(5, format(assetSHP.getDiameter()));
							rwsMasterData.pstmt.setString(6, format(assetSHP.getDepth()));
							rwsMasterData.pstmt.setString(7, format(assetSHP.getHygiene()));
							rwsMasterData.pstmt.setString(8,  format(assetSHP.getAvgNoOfHoursWorkingPerDay()));
							rwsMasterData.pstmt.setString(9, format(assetSHP.getAvgTimeToFill()));
							rwsMasterData.pstmt.setString(10,  format(assetSHP.getYeild()));
							rwsMasterData.pstmt.setString(11,  format(assetSHP.getWaterQuality()));
							rwsMasterData.pstmt.setString(12, assetSHP.getFloride());
							rwsMasterData.pstmt.setString(13,  assetSHP.getBrakish());
							rwsMasterData.pstmt.setString(14,  assetSHP.getIron());
							rwsMasterData.pstmt.setString(15,  format(assetSHP.getOthersType()));
							rwsMasterData.pstmt.setString(16,  format(assetSHP.getOthers()));
							rwsMasterData.pstmt.setString(17,  format(assetSHP.getLatitude()));
							rwsMasterData.pstmt.setString(18,  format(assetSHP.getLongitude()));
							rwsMasterData.pstmt.setString(19,  format(assetSHP.getElevation()));
							rwsMasterData.pstmt.setString(20,  format(assetSHP.getWaypoint()));
							rowCount = rwsMasterData.pstmt.executeUpdate();
						}
					}
				}
				daoMessage.setRowCount(rowCount);
				return daoMessage;
			}
			if (assetTypeCode.equals("06") && assetCompTypeCode.equals("01") && assetSubCompTypeCode.equals("001")) {
				Tab_Prifix = "RWS_OPEN_WELL_MAST_TBL";
				Asset_OpenWells assetOpenWells;
				if (subComps != null) {
					for (int i = 0; i < subComps.size(); i++) {
						assetOpenWells = (Asset_OpenWells) subComps.get(i);
						/*if (assetOpenWells.getOthers() == null || ((String) assetOpenWells.getOthers()).equals("")) {
							assetOpenWells.setOthers("");
						}else {*/
							if (assetOpenWells.getWaterQuality().equals("SAFE SOURCE")) {
								assetOpenWells.setFloride("");
								assetOpenWells.setBrakish("");
								assetOpenWells.setIron("");
								assetOpenWells.setOthers("");
								assetOpenWells.setOthersType("");
							}
							query = "update  " + Tab_Prifix + "  set " + "ASSET_CODE=?,"
									+ "HABITATION_CODE=?,OPENWELL_CODE=?,LOCATION=?,DIAMETER=nvl(?,0),"
									+ "DEPTH=nvl(?,0),NORMAL_WATER_LEVEL=nvl(?,0),MIN_WATER_LEVEL=nvl(?,0),"
									+ "MAX_WATER_LEVEL=nvl(?,0),PLATFORM_EXISTS=?,QUALITY=?,FLOURIDE_PER=nvl(?,0),"
									+ "BRAKISH_PER=nvl(?,0),IRON_PER=nvl(?,0),OTHER_TYPE=?,OTHER_PER=?,"
									+ "latitude=?,longitude=?,elevation=?,way_point=?,"
									+ "PURPOSE=? where OPENWELL_CODE=?";
							rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
							rwsMasterData.pstmt.setString(1, assetCode);
							rwsMasterData.pstmt.setString(2,  format(assetOpenWells.getHabCode()));
							rwsMasterData.pstmt.setString(3,  format(assetOpenWells.getOpenWellCode()));
							rwsMasterData.pstmt.setString(4,  format(assetOpenWells.getLocation()));
							rwsMasterData.pstmt.setString(5,  format(assetOpenWells.getDiameter()));
							rwsMasterData.pstmt.setString(6,  format(assetOpenWells.getDepth()));
							rwsMasterData.pstmt.setString(7,  format(assetOpenWells.getNormalWaterLevel()));
							rwsMasterData.pstmt.setString(8,  format(assetOpenWells.getMinimumWaterLevel()));
							rwsMasterData.pstmt.setString(9,  format(assetOpenWells.getMaximumWaterLevel()));
							rwsMasterData.pstmt.setString(10,  format(assetOpenWells.getPlatformExists()));
							rwsMasterData.pstmt.setString(11,  format(assetOpenWells.getWaterQuality()));
							rwsMasterData.pstmt.setString(12, assetOpenWells.getFloride());
							rwsMasterData.pstmt.setString(13,  assetOpenWells.getBrakish());
							rwsMasterData.pstmt.setString(14,  assetOpenWells.getIron());
							rwsMasterData.pstmt.setString(15,  format(assetOpenWells.getOthersType()));
							rwsMasterData.pstmt.setString(16,  format(assetOpenWells.getOthers()));
							rwsMasterData.pstmt.setString(17,  format(assetOpenWells.getLatitude()));
							rwsMasterData.pstmt.setString(18,  format(assetOpenWells.getLongitude()));
							rwsMasterData.pstmt.setString(19,  format(assetOpenWells.getElevation()));
							rwsMasterData.pstmt.setString(20,  format(assetOpenWells.getWaypoint()));
							rwsMasterData.pstmt.setString(21,  format(assetOpenWells.getPurpose()));
							rwsMasterData.pstmt.setString(22, assetOpenWells.getOpenWellCode());
							rowCount = rwsMasterData.pstmt.executeUpdate();
							if (rowCount < 1) {		
							query = "INSERT INTO  " + Tab_Prifix + "  ( ASSET_CODE,"
									+ "HABITATION_CODE,OPENWELL_CODE,LOCATION,DIAMETER,"
									+ "DEPTH,NORMAL_WATER_LEVEL,MIN_WATER_LEVEL,MAX_WATER_LEVEL,"
									+ "PLATFORM_EXISTS,QUALITY,FLOURIDE_PER,BRAKISH_PER,"
									+ "IRON_PER,OTHER_TYPE,OTHER_PER,latitude,"
									+ "longitude,elevation,way_point,PURPOSE) "
									+ "VALUES(?,?,?,?,nvl(?,0),nvl(?,0),nvl(?,0),nvl(?,0),nvl(?,0),?,?,nvl(?,0),nvl(?,0),nvl(?,0),?,?,?,?,?,?,?)";
							rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
							rwsMasterData.pstmt.setString(1, assetCode);
							rwsMasterData.pstmt.setString(2,  format(assetOpenWells.getHabCode()));
							rwsMasterData.pstmt.setString(3,  format(assetOpenWells.getOpenWellCode()));
							rwsMasterData.pstmt.setString(4,  format(assetOpenWells.getLocation()));
							rwsMasterData.pstmt.setString(5,  format(assetOpenWells.getDiameter()));
							rwsMasterData.pstmt.setString(6,  format(assetOpenWells.getDepth()));
							rwsMasterData.pstmt.setString(7,  format(assetOpenWells.getNormalWaterLevel()));
							rwsMasterData.pstmt.setString(8,  format(assetOpenWells.getMinimumWaterLevel()));
							rwsMasterData.pstmt.setString(9,  format(assetOpenWells.getMaximumWaterLevel()));
							rwsMasterData.pstmt.setString(10,  format(assetOpenWells.getPlatformExists()));
							rwsMasterData.pstmt.setString(11,  format(assetOpenWells.getWaterQuality()));
							rwsMasterData.pstmt.setString(12, assetOpenWells.getFloride());
							rwsMasterData.pstmt.setString(13,  assetOpenWells.getBrakish());
							rwsMasterData.pstmt.setString(14,  assetOpenWells.getIron());
							rwsMasterData.pstmt.setString(15,  format(assetOpenWells.getOthersType()));
							rwsMasterData.pstmt.setString(16,  format(assetOpenWells.getOthers()));
							rwsMasterData.pstmt.setString(17,  format(assetOpenWells.getLatitude()));
							rwsMasterData.pstmt.setString(18,  format(assetOpenWells.getLongitude()));
							rwsMasterData.pstmt.setString(19,  format(assetOpenWells.getElevation()));
							rwsMasterData.pstmt.setString(20,  format(assetOpenWells.getWaypoint()));
							rwsMasterData.pstmt.setString(21,  format(assetOpenWells.getPurpose()));
							rowCount = rwsMasterData.pstmt.executeUpdate();
						}
						
					}
				}
				daoMessage.setRowCount(rowCount);
				return daoMessage;
			}
			if (assetTypeCode.equals("08") && assetCompTypeCode.equals("01") && assetSubCompTypeCode.equals("001")) {
				DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				Date date = new Date();
				String currentDate = dateFormat.format(date);
				String collectiontank = null;
				Tab_Prifix = "RWS_AST_OTHERS_PARAM_TBL";
				Asset_Others assetOthers;
				if (subComps != null) {
					for (int i = 0; i < subComps.size(); i++) {
						assetOthers = (Asset_Others) subComps.get(i);
						if (isDataAlreadyExists(dataSource, Tab_Prifix, "OTHER_COMP_CODE", assetOthers.getGeneralCode(),
								assetCode)) {
							query = "update  " + Tab_Prifix + "  set ASSET_CODE=?,"
									+ "OTHER_COMP_CODE=?,COMP_NAME=?,COMP_LOCATION=?,REMARKS=?,"
									+ "HAB_CODE=?,SPECIAL_ASSET_TYPE=?,YEILD=?,COLLECTION_TANK=?,"
									+ "COLLECTION_TANK_CAPACITY=?,LATITUDE=?,LONGITUDE=?,ELEVATION=?,"
									+ "WAY_POINT=?,STATUS=?,UPDATE_DATE=to_date(?,'dd/mm/yyyy') where "
									+ "OTHER_COMP_CODE=?";
							rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
							rwsMasterData.pstmt.setString(1, assetCode);
							rwsMasterData.pstmt.setString(2, format(assetOthers.getGeneralCode()));
							rwsMasterData.pstmt.setString(3, format(assetOthers.getComponentName()));
							rwsMasterData.pstmt.setString(4, format(assetOthers.getLocation()));
							rwsMasterData.pstmt.setString(5, format(assetOthers.getRemarks()));
							rwsMasterData.pstmt.setString(6, format(assetOthers.getHabCode()));
							rwsMasterData.pstmt.setString(7, assetOthers.getSpecialAssetType());
							rwsMasterData.pstmt.setString(8, assetOthers.getYield());
							rwsMasterData.pstmt.setString(9, assetOthers.getCollectionTank());
							rwsMasterData.pstmt.setString(10,  format(assetOthers.getCollectionTankCapacity()));
							rwsMasterData.pstmt.setString(11,  format(assetOthers.getLatitude()));
							rwsMasterData.pstmt.setString(12,  format(assetOthers.getLongitude()));
							rwsMasterData.pstmt.setString(13,  format(assetOthers.getElevation()));
							rwsMasterData.pstmt.setString(14,  format(assetOthers.getWayPoint()));
							rwsMasterData.pstmt.setString(15,  format(assetOthers.getStatus()));
							rwsMasterData.pstmt.setString(16, currentDate);
							rwsMasterData.pstmt.setString(17, assetOthers.getGeneralCode());
							rowCount = rwsMasterData.pstmt.executeUpdate();
						} else {
							if (assetOthers.getCollectionTankCapacity() == null) {
								collectiontank = "";
							} else {
								collectiontank = assetOthers.getCollectionTankCapacity();
							}
							query = "insert into  " + Tab_Prifix
									+ "  (ASSET_CODE,OTHER_COMP_CODE,COMP_NAME,COMP_LOCATION,"
									+ "REMARKS,HAB_CODE,SPECIAL_ASSET_TYPE,YEILD,"
									+ "COLLECTION_TANK,COLLECTION_TANK_CAPACITY,LATITUDE,LONGITUDE,"
									+ "ELEVATION,WAY_POINT,STATUS,UPDATE_DATE) values "
									+ "(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,to_date(?,'dd/mm/yyyy'))";
							rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
							rwsMasterData.pstmt.setString(1, assetCode);
							rwsMasterData.pstmt.setString(2, format(assetOthers.getGeneralCode()));
							rwsMasterData.pstmt.setString(3, format(assetOthers.getComponentName()));
							rwsMasterData.pstmt.setString(4, format(assetOthers.getLocation()));
							rwsMasterData.pstmt.setString(5, format(assetOthers.getRemarks()));
							rwsMasterData.pstmt.setString(6, format(assetOthers.getHabCode()));
							rwsMasterData.pstmt.setString(7, assetOthers.getSpecialAssetType());
							rwsMasterData.pstmt.setString(8, assetOthers.getYield());
							rwsMasterData.pstmt.setString(9, assetOthers.getCollectionTank());
							rwsMasterData.pstmt.setString(10,  collectiontank);
							rwsMasterData.pstmt.setString(11,  format(assetOthers.getLatitude()));
							rwsMasterData.pstmt.setString(12,  format(assetOthers.getLongitude()));
							rwsMasterData.pstmt.setString(13,  format(assetOthers.getElevation()));
							rwsMasterData.pstmt.setString(14,  format(assetOthers.getWayPoint()));
							rwsMasterData.pstmt.setString(15,  format(assetOthers.getStatus()));
							rwsMasterData.pstmt.setString(16, currentDate);
							rowCount = rwsMasterData.pstmt.executeUpdate();
						}
					}
				}
				daoMessage.setRowCount(rowCount);
				return daoMessage;
			} 
			if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("06")
					&& assetSubCompTypeCode.equals("001")) {
				if (subComps != null) {
					for (int i = 0; i < subComps.size(); i++) {
						assetPumpset = (Asset_Pumpset) subComps.get(i);
						if (isDataAlreadyExists(dataSource, Tab_Prifix + "SUBCOMP_PARAM_TBL", "PUMP_CODE",
								assetPumpset.getPumpCode(), assetCode)) {
							query = "update " + Tab_Prifix + "SUBCOMP_PARAM_TBL  set  "
									+ "PUMP_MAKE=?,PUMP_CPTY=?,PUMP_TYPE=?,YEAR_COMM=?,"
									+ "HR_RUN=?,USAGE=?,DESIGNED_LPM=?,DESIGNED_HEAD=?," 
									+ "CONTROL_PANEL=?,LOW_VOLT_PROB=?,POWER_AVAIL_PER_DAY=?,FEAS_URBAN_LINE=?,"
									+ "COST=?,URBAN_LINE_DISTANCE=?,SUGGESTIONS=?,GENERATOR_EXISTING=?,"
									+ "GENERATOR_CAPACITY=?,GENERATOR_WORKING=?,HAB_CODE=?,LOCATION=?,"
									+ "FEEDER=?,latitude=?,longitude=?,elevation=?,"
									+ "way_point=?  where PUMP_CODE=? AND ASSET_CODE=?";
							rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
							rwsMasterData.pstmt.setString(1, assetPumpset.getPumpMake());
							rwsMasterData.pstmt.setString(2, assetPumpset.getPumpCapacity());
							rwsMasterData.pstmt.setString(3, assetPumpset.getPumpType());
							rwsMasterData.pstmt.setString(4,  assetPumpset.getPumpYearOfCommissioning());
							rwsMasterData.pstmt.setString(5,  assetPumpset.getPumpHoursRunningPerDay());
							rwsMasterData.pstmt.setString(6, assetPumpset.getPumpUsage());
							rwsMasterData.pstmt.setString(7, assetPumpset.getPumpDesignedLpm());
							rwsMasterData.pstmt.setString(8, assetPumpset.getPumpDesignedHead());
							rwsMasterData.pstmt.setString(9, assetPumpset.getPumpControlPanel());
							rwsMasterData.pstmt.setString(10, assetPumpset.getPumpLowVoltageProblems());
							rwsMasterData.pstmt.setString(11, assetPumpset.getPumpHoursOfPowerAvailability());
							rwsMasterData.pstmt.setString(12, assetPumpset.getPumpFeasiblityOfGettingUrbanLine());
							rwsMasterData.pstmt.setString(13, assetPumpset.getPumpAppCostOfUrbanFeeder());
							rwsMasterData.pstmt.setString(14, assetPumpset.getPumpDistanceFromWhereUrbanLineCanBeHad());
							rwsMasterData.pstmt.setString(15,  assetPumpset.getPumpSuggestions());
							rwsMasterData.pstmt.setString(16,  assetPumpset.getGeneratorExisting());
							rwsMasterData.pstmt.setString(17,  assetPumpset.getGeneratorCapacity());
							rwsMasterData.pstmt.setString(18,  assetPumpset.getGeneratorWorking());
							rwsMasterData.pstmt.setString(19,  assetPumpset.getHabCode());
							rwsMasterData.pstmt.setString(20,  assetPumpset.getPumpLocation());
							rwsMasterData.pstmt.setString(21,  assetPumpset.getPumpFeeder());
							rwsMasterData.pstmt.setString(22, assetPumpset.getLatitude());
							rwsMasterData.pstmt.setString(23, assetPumpset.getLongitude());
							rwsMasterData.pstmt.setString(24, assetPumpset.getElevation());
							rwsMasterData.pstmt.setString(25,  assetPumpset.getWaypoint());
							rwsMasterData.pstmt.setString(26,  assetPumpset.getPumpCode());
							rwsMasterData.pstmt.setString(27,  assetCode);						
						} else {
							query = "INSERT INTO " + Tab_Prifix + "SUBCOMP_PARAM_TBL("
									+ "PUMP_MAKE,PUMP_CPTY,PUMP_TYPE,YEAR_COMM,HR_RUN,"
									+ "USAGE,DESIGNED_LPM,DESIGNED_HEAD,CONTROL_PANEL,LOW_VOLT_PROB,"
									+ "POWER_AVAIL_PER_DAY,FEAS_URBAN_LINE,COST,URBAN_LINE_DISTANCE,SUGGESTIONS,"
									+ "GENERATOR_EXISTING,GENERATOR_CAPACITY,GENERATOR_WORKING,HAB_CODE,LOCATION,"
									+ "FEEDER,latitude,longitude,elevation,way_point,"
									+ "PUMP_CODE,ASSET_CODE) "
									+ " VALUES( ?,?,?,?,?,"
									+ "?,?,?,?,?,"
									+ "?,?,?,?,?,"
									+ "?,?,?,?,?,"
									+ "?,?,?,?,?,?,?)";									
							rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
							rwsMasterData.pstmt.setString(1, assetPumpset.getPumpMake());
							rwsMasterData.pstmt.setString(2, assetPumpset.getPumpCapacity());
							rwsMasterData.pstmt.setString(3, assetPumpset.getPumpType());
							rwsMasterData.pstmt.setString(4, assetPumpset.getPumpYearOfCommissioning());
							rwsMasterData.pstmt.setString(5, assetPumpset.getPumpHoursRunningPerDay());
							rwsMasterData.pstmt.setString(6, assetPumpset.getPumpUsage());
							rwsMasterData.pstmt.setString(7, assetPumpset.getPumpDesignedLpm());
							rwsMasterData.pstmt.setString(8, assetPumpset.getPumpDesignedHead());
							rwsMasterData.pstmt.setString(9, assetPumpset.getPumpControlPanel());
							rwsMasterData.pstmt.setString(10, assetPumpset.getPumpLowVoltageProblems());
							rwsMasterData.pstmt.setString(11, assetPumpset.getPumpHoursOfPowerAvailability());
							rwsMasterData.pstmt.setString(12, assetPumpset.getPumpFeasiblityOfGettingUrbanLine());
							rwsMasterData.pstmt.setString(13, assetPumpset.getPumpAppCostOfUrbanFeeder());
							rwsMasterData.pstmt.setString(14, assetPumpset.getPumpDistanceFromWhereUrbanLineCanBeHad());
							rwsMasterData.pstmt.setString(15,  assetPumpset.getPumpSuggestions());
							rwsMasterData.pstmt.setString(16,  assetPumpset.getGeneratorExisting());
							rwsMasterData.pstmt.setString(17,  assetPumpset.getGeneratorCapacity());
							rwsMasterData.pstmt.setString(18,  assetPumpset.getGeneratorWorking());
							rwsMasterData.pstmt.setString(19,  assetPumpset.getHabCode());
							rwsMasterData.pstmt.setString(20,  assetPumpset.getPumpLocation());
							rwsMasterData.pstmt.setString(21,  assetPumpset.getPumpFeeder());
							rwsMasterData.pstmt.setString(22, assetPumpset.getLatitude());
							rwsMasterData.pstmt.setString(23, assetPumpset.getLongitude());
							rwsMasterData.pstmt.setString(24, assetPumpset.getElevation());
							rwsMasterData.pstmt.setString(25,  assetPumpset.getWaypoint());
							rwsMasterData.pstmt.setString(26,  assetPumpset.getPumpCode());
							rwsMasterData.pstmt.setString(27,  assetCode);			
						}
						rowCount = rwsMasterData.pstmt.executeUpdate();						
					}
				}
				daoMessage.setRowCount(rowCount);
				return daoMessage;
			}
			if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("05")
					&& assetSubCompTypeCode.equals("001")) {
				if (subComps != null) {
					for (int i = 0; i < subComps.size(); i++) {
						assetPumpset = (Asset_Pumpset) subComps.get(i);
						if (isDataAlreadyExists(dataSource, Tab_Prifix + "OTHERS_PARAM_TBL", "OTHER_COMP_CODE",
								assetPumpset.getOtherCompCode(), assetCode)) {
							query = "update " + Tab_Prifix + "OTHERS_PARAM_TBL  set "
									+ " OTHER_COMP_CODE=?, ASSET_CODE=?, COMP_NAME=?, COMP_LOCATION=?, REMARKS=?, "
									+ "HAB_CODE=? where OTHER_COMP_CODE=?";
							rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
							rwsMasterData.pstmt.setString(1, assetPumpset.getOtherCompCode());
							rwsMasterData.pstmt.setString(2, assetCode);
							rwsMasterData.pstmt.setString(3, assetPumpset.getCompName());
							rwsMasterData.pstmt.setString(4,  assetPumpset.getCompLocation());
							rwsMasterData.pstmt.setString(5,  assetPumpset.getRemarks());
							rwsMasterData.pstmt.setString(6, assetPumpset.getHabCode());
							rwsMasterData.pstmt.setString(7, assetPumpset.getOtherCompCode());
						} else {
							query = "INSERT INTO " + Tab_Prifix + "OTHERS_PARAM_TBL("
									+ " OTHER_COMP_CODE, ASSET_CODE,COMP_NAME,"
									+ "COMP_LOCATION,REMARKS,HAB_CODE) VALUES(?,?,?,?,?,?)";
							rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
							rwsMasterData.pstmt.setString(1, assetPumpset.getOtherCompCode());
							rwsMasterData.pstmt.setString(2, assetCode);
							rwsMasterData.pstmt.setString(3, assetPumpset.getCompName());
							rwsMasterData.pstmt.setString(4,  assetPumpset.getCompLocation());
							rwsMasterData.pstmt.setString(5,  assetPumpset.getRemarks());
							rwsMasterData.pstmt.setString(6, assetPumpset.getHabCode());
						}
						rowCount = rwsMasterData.pstmt.executeUpdate();
					}
				}
				if (rowCount > 0) {
					query = "update RWS_ASSET_MAST_TBL set UPDATE_DATE=SYSDATE where asset_code=?";
					rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
					rwsMasterData.pstmt.setString(1, assetCode);
					rwsMasterData.pstmt.executeUpdate();
				}
				daoMessage.setRowCount(rowCount);
				return daoMessage;
			}
			if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("05")
					&& assetSubCompTypeCode.equals("002")) {
				if (subComps != null) {
					for (int i = 0; i < subComps.size(); i++) {
						assetPumpset = (Asset_Pumpset) subComps.get(i);
						String check = "select * from " + Tab_Prifix + "CHLORINATION_TBL where CL_CODE=? and hab_code=?";
						rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(check);
						rwsMasterData.pstmt.setString(1, assetPumpset.getOtherCompCode());
						rwsMasterData.pstmt.setString(2, assetPumpset.getHabCode());
						rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
						if (rwsMasterData.rs.next()) {
							query = "update " + Tab_Prifix + "CHLORINATION_TBL  set "
									+ " CL_CODE =?, LOCATION=?,REMARKS=? , HAB_CODE=?,"
									+ "WORKING=?,BLEACHING_WORKING=?,LIQUID_CHILORINE_WORKING=?,GAS_CHILORINE_WORKING=?,"
									+ "ONLINE_DOSE_WORKING=? where CL_CODE=? and HAB_CODE=? AND ASSET_CODE=?";
							rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
							rwsMasterData.pstmt.setString(1, assetPumpset.getOtherCompCode());
							rwsMasterData.pstmt.setString(2, assetPumpset.getCompLocation());
							rwsMasterData.pstmt.setString(3, assetPumpset.getRemarks());
							rwsMasterData.pstmt.setString(4,  assetPumpset.getHabCode());
							rwsMasterData.pstmt.setString(5,  assetPumpset.getWorkingOrNot());
							rwsMasterData.pstmt.setString(6, assetPumpset.getBp());
							rwsMasterData.pstmt.setString(7, assetPumpset.getLc());
							rwsMasterData.pstmt.setString(8, assetPumpset.getGc());
							rwsMasterData.pstmt.setString(9, assetPumpset.getOd());
							rwsMasterData.pstmt.setString(10, assetPumpset.getOtherCompCode());
							rwsMasterData.pstmt.setString(11,  assetPumpset.getHabCode());
							rwsMasterData.pstmt.setString(12, assetCode);							
						} else {
							query = "INSERT INTO " + Tab_Prifix + "CHLORINATION_TBL("
									+ " CL_CODE,LOCATION,REMARKS,HAB_CODE,WORKING,"
									+ "BLEACHING_WORKING,LIQUID_CHILORINE_WORKING,"
									+ "GAS_CHILORINE_WORKING,ONLINE_DOSE_WORKING,ASSET_CODE) VALUES (?,?,?,?,?,?,?,?,?,?)";
							rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
							rwsMasterData.pstmt.setString(1, assetPumpset.getOtherCompCode());
							rwsMasterData.pstmt.setString(2, assetPumpset.getCompLocation());
							rwsMasterData.pstmt.setString(3, assetPumpset.getRemarks());
							rwsMasterData.pstmt.setString(4,  assetPumpset.getHabCode());
							rwsMasterData.pstmt.setString(5,  assetPumpset.getWorkingOrNot());
							rwsMasterData.pstmt.setString(6, assetPumpset.getBp());
							rwsMasterData.pstmt.setString(7, assetPumpset.getLc());
							rwsMasterData.pstmt.setString(8, assetPumpset.getGc());
							rwsMasterData.pstmt.setString(9, assetPumpset.getOd());
							rwsMasterData.pstmt.setString(10, assetCode);		
						}
						rowCount = rwsMasterData.pstmt.executeUpdate();
					}
				}
				if (rowCount > 0) {
					query = "update RWS_ASSET_MAST_TBL set UPDATE_DATE=SYSDATE where asset_code=?";
					rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
					rwsMasterData.pstmt.setString(1, assetCode);
					rwsMasterData.pstmt.executeUpdate();
				}
				daoMessage.setRowCount(rowCount);
				return daoMessage;
			}
			if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("05")
					&& assetSubCompTypeCode.equals("003")) {
				Asset_Pumpset assetPumpsets;
				if (subComps != null) {
					for (int i = 0; i < subComps.size(); i++) {
						assetPumpsets = (Asset_Pumpset) subComps.get(i);
						String check = "select * from " + Tab_Prifix + "OANDM_PARAM_TBL where ASSET_CODE=?";
						rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(check);
						rwsMasterData.pstmt.setString(1, assetCode);
						rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
						if (rwsMasterData.rs.next()) {
							query = "update " + Tab_Prifix + "OANDM_PARAM_TBL set "
									+ "AGENCY_CODE=?,POWER_COST=?,CONSUM_ANNUM=?,WAGES_ANNUM=?,"
									+ "SOURCES_FUND=?,TARIFF_MONTH=?,PUBLIC_STAND_POSTS=?',HOUSE_CONN=? where ASSET_CODE=?";
							rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
							rwsMasterData.pstmt.setString(1, assetPumpset.getAgencyCode());
							rwsMasterData.pstmt.setString(2, assetPumpset.getPowerCost());
							rwsMasterData.pstmt.setString(3, assetPumpset.getConsumAnnum());
							rwsMasterData.pstmt.setString(4,  assetPumpset.getWagesAnnum());
							rwsMasterData.pstmt.setString(5,  "1");
							rwsMasterData.pstmt.setString(6, assetPumpset.getTariffMonth());
							rwsMasterData.pstmt.setString(7, assetPumpset.getStandPosts());
							rwsMasterData.pstmt.setString(8, assetPumpset.getHouseConn());
							rwsMasterData.pstmt.setString(9, assetCode);
											
						} else {
							query = "insert into " + Tab_Prifix + "OANDM_PARAM_TBL values(?,?,?,?,?,?,?,?,?,?)";
							rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
							rwsMasterData.pstmt.setString(1, assetCode);
							rwsMasterData.pstmt.setString(2, assetPumpset.getOandmCode());
							rwsMasterData.pstmt.setString(3, assetPumpset.getAgencyCode());
							rwsMasterData.pstmt.setString(4, assetPumpset.getPowerCost());
							rwsMasterData.pstmt.setString(5, assetPumpset.getConsumAnnum());
							rwsMasterData.pstmt.setString(6,  assetPumpset.getWagesAnnum());
							rwsMasterData.pstmt.setString(7,  assetPumpsets.getSourceFund());
							rwsMasterData.pstmt.setString(8, assetPumpset.getTariffMonth());
							rwsMasterData.pstmt.setString(9, assetPumpset.getHouseConn());
							rwsMasterData.pstmt.setString(10, assetPumpset.getStandPosts());
						}
						rowCount = rwsMasterData.pstmt.executeUpdate();
					}
				}
				if (rowCount > 0) {
					query = "update RWS_ASSET_MAST_TBL set UPDATE_DATE=SYSDATE where asset_code=?";
					rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
					rwsMasterData.pstmt.setString(1, assetCode);
					rwsMasterData.pstmt.executeUpdate();
				}
				daoMessage.setRowCount(rowCount);
				return daoMessage;
			}

			if (assetTypeCode.equals("03") && assetCompTypeCode.equals("02") && assetSubCompTypeCode.equals("002")
					&& opType.equalsIgnoreCase("Add New")) {
				try {
					assetHeadworks = (Asset_HeadWorks) subComps.get(0);
				} catch (Exception e) {
					Debug.println("error is" + e);
				}
				if (!assetHeadworks.getAssetCode().equals("")) {
				} else {
				}
				if (rowCount > 0)
					Debug.println("record inserted into rws_hp_subcomp_param_tbl  ");
			} else if (assetTypeCode.equals("04") && assetCompTypeCode.equals("01")
					&& assetSubCompTypeCode.equals("001")) {
				assetSources = (Asset_SubComponent) subComps.get(0);
				if (assetSources.getQualityAffected().equals("N")) {
					assetSources.setBrakish(0);
					assetSources.setIron(0);
					assetSources.setOthers("");
					assetSources.setOthersType("");
				}
				query = "update RWS_HP_SUBCOMP_PARAM_TBL set " 
						+ "LOCATION = nvl(?,''),DIAMETER = nvl(?,0),CASING =nvl(?,''),"
						+ "GEN_CONDITION = nvl(?,''), GI_NO = nvl(?,0), pipe_length = nvl(?,0),"
						+ "PAINTED = nvl(?,''), STATIC_WL=nvl(?,0)" + ", SUMMER_WL=nvl(?,0), "
						+ "platform_existing=nvl(?,''), SER_NO =nvl(?,0), SER_HRS = nvl(?,0), REPAIRS=nvl(?,''), "
						+ "PLATFORM_CONDITION=nvl(?,''), DRAIN=nvl(?,''), DRAIN_CONDITION=nvl(?,''), "
						+ "DRAIN_SD=nvl(?,''), DRAIN_LP =nvl(?,''), HYGIENE =nvl(?,''), AVG_TIME = nvl(?,0), "
						+ "P_YEILD =nvl(?,0), PYEILD_LOCAL = nvl(?,''),PERIOD =nvl(?,''),DEPTH= nvl(?,0),QUALITY_AFFECTED=nvl(?,''),"
						+ " FLOURIDE =nvl(?,0), BRAKISH =nvl(?,0), IRON =nvl(?,0), CONT_OTHERS_PER  =nvl(?,''), "
						+ "cont_others_type =?,latitude=?,longitude=?,elevation=?,way_point=? where "
						+ "hp_code = ? and ASSET_CODE=?";
				
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetSources.getLocation());
				rwsMasterData.pstmt.setString(2, assetSources.getDiameter());
				rwsMasterData.pstmt.setString(3, assetSources.getCasing());
				rwsMasterData.pstmt.setString(4, assetSources.getGenCondition());
				rwsMasterData.pstmt.setString(5, assetSources.getGino());
				rwsMasterData.pstmt.setString(6, assetSources.getPipeLength());
				rwsMasterData.pstmt.setString(7, assetSources.getPainted());
				rwsMasterData.pstmt.setString(8, assetSources.getStaticWaterLevel());
				rwsMasterData.pstmt.setString(9, assetSources.getSummerWaterLevel());
				rwsMasterData.pstmt.setString(10, assetSources.getPcond());
				rwsMasterData.pstmt.setString(11, assetSources.getSerno());
				rwsMasterData.pstmt.setString(12, assetSources.getSerhrs());
				rwsMasterData.pstmt.setString(13, assetSources.getRepairs());
				rwsMasterData.pstmt.setString(14, format(assetSources.getPlatformCondition()));
				rwsMasterData.pstmt.setString(15, assetSources.getDrain());
				rwsMasterData.pstmt.setString(16, format(assetSources.getDrainCondition()));
				rwsMasterData.pstmt.setString(17, assetSources.getDrainsd());
				rwsMasterData.pstmt.setString(18, assetSources.getDrainlp());
				rwsMasterData.pstmt.setString(19, assetSources.getHygiene());
				rwsMasterData.pstmt.setString(20, assetSources.getAvgtime());
				rwsMasterData.pstmt.setString(21, assetSources.getPyield());
				rwsMasterData.pstmt.setString(22, assetSources.getPyieldLocal());
				rwsMasterData.pstmt.setString(23, format(assetSources.getPeriod()));
				rwsMasterData.pstmt.setInt(24, assetSources.getDepth());
				rwsMasterData.pstmt.setString(25, format(assetSources.getQualityAffected()));
				rwsMasterData.pstmt.setDouble(26, assetSources.getFlouride());
				rwsMasterData.pstmt.setDouble(27, assetSources.getBrakish());
				rwsMasterData.pstmt.setDouble(28, assetSources.getIron());
				rwsMasterData.pstmt.setString(29, format(assetSources.getOthers()));
				rwsMasterData.pstmt.setString(30, format(assetSources.getOthersType()) );
				rwsMasterData.pstmt.setString(31, assetSources.getLatitude());
				rwsMasterData.pstmt.setString(32, assetSources.getLongitude());
				rwsMasterData.pstmt.setString(33, assetSources.getElevation());
				rwsMasterData.pstmt.setString(34, assetSources.getWaypoint());
				rwsMasterData.pstmt.setString(35, assetSources.getHpCode());
				rwsMasterData.pstmt.setString(36, assetCode);		
				rowCount = rwsMasterData.pstmt.executeUpdate();
				
				if (rowCount < 1) {
					query = "INSERT INTO RWS_HP_SUBCOMP_PARAM_TBL("
							+ "LOCATION ,DIAMETER,CASING,GEN_CONDITION,GI_NO,"
							+ "pipe_length,PAINTED,STATIC_WL,SUMMER_WL,platform_existing,"
							+ "SER_NO,SER_HRS,REPAIRS,PLATFORM_CONDITION,DRAIN,"
							+ "DRAIN_CONDITION,DRAIN_SD,DRAIN_LP,HYGIENE,AVG_TIME,"
							+ "P_YEILD,PYEILD_LOCAL,PERIOD,DEPTH,QUALITY_AFFECTED,"
							+ "FLOURIDE,BRAKISH,IRON,CONT_OTHERS_PER,cont_others_type,"
							+ "latitude,longitude,elevation,way_point,HP_CODE,ASSET_CODE) VALUES"
							+ "(?,?,?,?,?,?,?,?,?,?,"
							+ "?,?,?,?,?,?,?,?,?,?,"
							+ "?,?,?,?,?,?,?,?,?,?,"
							+ "?,?,?,?,?,?)";
					rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
					rwsMasterData.pstmt.setString(1, assetSources.getLocation());
					rwsMasterData.pstmt.setString(2, assetSources.getDiameter());
					rwsMasterData.pstmt.setString(3, assetSources.getCasing());
					rwsMasterData.pstmt.setString(4, assetSources.getGenCondition());
					rwsMasterData.pstmt.setString(5, assetSources.getGino());
					rwsMasterData.pstmt.setString(6, assetSources.getPipeLength());
					rwsMasterData.pstmt.setString(7, assetSources.getPainted());
					rwsMasterData.pstmt.setString(8, assetSources.getStaticWaterLevel());
					rwsMasterData.pstmt.setString(9, assetSources.getSummerWaterLevel());
					rwsMasterData.pstmt.setString(10, assetSources.getPcond());
					rwsMasterData.pstmt.setString(11, assetSources.getSerno());
					rwsMasterData.pstmt.setString(12, assetSources.getSerhrs());
					rwsMasterData.pstmt.setString(13, assetSources.getRepairs());
					rwsMasterData.pstmt.setString(14, format(assetSources.getPlatformCondition()));
					rwsMasterData.pstmt.setString(15, assetSources.getDrain());
					rwsMasterData.pstmt.setString(16, format(assetSources.getDrainCondition()));
					rwsMasterData.pstmt.setString(17, assetSources.getDrainsd());
					rwsMasterData.pstmt.setString(18, assetSources.getDrainlp());
					rwsMasterData.pstmt.setString(19, assetSources.getHygiene());
					rwsMasterData.pstmt.setString(20, assetSources.getAvgtime());
					rwsMasterData.pstmt.setString(21, assetSources.getPyield());
					rwsMasterData.pstmt.setString(22, assetSources.getPyieldLocal());
					rwsMasterData.pstmt.setString(23, format(assetSources.getPeriod()));
					rwsMasterData.pstmt.setInt(24, assetSources.getDepth());
					rwsMasterData.pstmt.setString(25, format(assetSources.getQualityAffected()));
					rwsMasterData.pstmt.setDouble(26, assetSources.getFlouride());
					rwsMasterData.pstmt.setDouble(27, assetSources.getBrakish());
					rwsMasterData.pstmt.setDouble(28, assetSources.getIron());
					rwsMasterData.pstmt.setString(29, format(assetSources.getOthers()));
					rwsMasterData.pstmt.setString(30, format(assetSources.getOthersType()) );
					rwsMasterData.pstmt.setString(31, assetSources.getLatitude());
					rwsMasterData.pstmt.setString(32, assetSources.getLongitude());
					rwsMasterData.pstmt.setString(33, assetSources.getElevation());
					rwsMasterData.pstmt.setString(34, assetSources.getWaypoint());
					rwsMasterData.pstmt.setString(35, assetSources.getHpCode());
					rwsMasterData.pstmt.setString(36, assetCode);		
					rowCount = rwsMasterData.pstmt.executeUpdate();
				}
				daoMessage.setRowCount(rowCount);
				return daoMessage;
			}
			if (compType.equals("Reservoirs") && (opType.equals("Modify") || opType.equalsIgnoreCase("Add New"))) {
				int[] rowCounts;
				boolean flag = false;
				String message = "";
				String insertionMode = "";
				if (subComps != null) {
					if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
							|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("04")
							&& assetSubCompTypeCode.equals("001")) {
						for (int i = 0; i < subComps.size(); i++) {
							assetReservior = (Asset_Reservior) subComps.get(i);
							if (isDataAlreadyExists(dataSource, Tab_Prifix + "Ohsr_SC_PARAM_TBL", "Ohsr_code",
									assetReservior.getOhsrCode(), assetCode)) {
								query = "update " + Tab_Prifix + "Ohsr_SC_PARAM_TBL set "
										+ "Ohsr_CAP_LTS=nvl(?,0), Ohsr_LOC=?,Ohsr_SATGES=nvl(?,0),Ohsr_FILL_HR=nvl(?,0),"
										+ "Ohsr_EMPTY_HR =nvl(?,0),Ohsr_MWL=nvl(?,0), Ohsr_NO_OF_FILLING =nvl(?,0),"
										+ "hab_code =?,water_qty=?,latitude=?,longitude=?,elevation=?,way_point=? "
										+ "where asset_code =? and Ohsr_code =?";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, assetReservior.getOhsrCapacityLts());
								rwsMasterData.pstmt.setString(2, assetReservior.getOhsrLocation());
								rwsMasterData.pstmt.setString(3, assetReservior.getOhsrStages());
								rwsMasterData.pstmt.setString(4, assetReservior.getOhsrFillHrs());
								rwsMasterData.pstmt.setString(5, assetReservior.getOhsrEmptyHrs());
								rwsMasterData.pstmt.setString(6, assetReservior.getOhsrMwl());
								rwsMasterData.pstmt.setString(7, assetReservior.getNoOfFillings());
								rwsMasterData.pstmt.setString(8, assetReservior.getHabCode());
								rwsMasterData.pstmt.setString(9, assetReservior.getOhsrLwl());
								rwsMasterData.pstmt.setString(10, assetReservior.getLatitude());
								rwsMasterData.pstmt.setString(11, assetReservior.getLongitude());
								rwsMasterData.pstmt.setString(12, assetReservior.getElevation());
								rwsMasterData.pstmt.setString(13, assetReservior.getWaypoint());
								rwsMasterData.pstmt.setString(14, assetCode);
								rwsMasterData.pstmt.setString(15, assetReservior.getOhsrCode());
								insertionMode = "update";
							} else {
								query = "INSERT INTO  " + Tab_Prifix + "Ohsr_SC_PARAM_TBL("
										+ "Ohsr_CAP_LTS, Ohsr_LOC,Ohsr_SATGES,Ohsr_FILL_HR, Ohsr_EMPTY_HR ,"
										+ "Ohsr_MWL,Ohsr_NO_OF_FILLING ,hab_code,water_qty,latitude,"
										+ "longitude,elevation,way_point,asset_code,Ohsr_code) "
										+ "VALUES(nvl(?,0),?,nvl(?,0),nvl(?,0),nvl(?,0),"
										+ "nvl(?,0),nvl(?,0),?,?,?,"
										+ "?,?,?,?,?)";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, assetReservior.getOhsrCapacityLts());
								rwsMasterData.pstmt.setString(2, assetReservior.getOhsrLocation());
								rwsMasterData.pstmt.setString(3, assetReservior.getOhsrStages());
								rwsMasterData.pstmt.setString(4, assetReservior.getOhsrFillHrs());
								rwsMasterData.pstmt.setString(5, assetReservior.getOhsrEmptyHrs());
								rwsMasterData.pstmt.setString(6, assetReservior.getOhsrMwl());
								rwsMasterData.pstmt.setString(7, assetReservior.getNoOfFillings());
								rwsMasterData.pstmt.setString(8, assetReservior.getHabCode());
								rwsMasterData.pstmt.setString(9, assetReservior.getOhsrLwl());
								rwsMasterData.pstmt.setString(10, assetReservior.getLatitude());
								rwsMasterData.pstmt.setString(11, assetReservior.getLongitude());
								rwsMasterData.pstmt.setString(12, assetReservior.getElevation());
								rwsMasterData.pstmt.setString(13, assetReservior.getWaypoint());
								rwsMasterData.pstmt.setString(14, assetCode);
								rwsMasterData.pstmt.setString(15, assetReservior.getOhsrCode());
								insertionMode = "insert";
							}
							rowCount = rwsMasterData.pstmt.executeUpdate();
							daoMessage = getDaoMessage(insertionMode, rowCount);
						}
					}
					else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
							|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("04")
							&& assetSubCompTypeCode.equals("002")) {
						for (int i = 0; i < subComps.size(); i++) {
							assetReservior = (Asset_Reservior) subComps.get(i);
							if (isDataAlreadyExists(dataSource, Tab_Prifix + "Ohbr_SC_PARAM_TBL", "Ohbr_code",
									assetReservior.getOhbrCode(), assetCode)) {
								query = "update " + Tab_Prifix + "Ohbr_SC_PARAM_TBL set "
										+ "Ohbr_CAP_LTS=nvl(?,0), Ohbr_LOC=?, Ohbr_SATGES=nvl(?,0), Ohbr_FILL_HR=nvl(?,0), "
										+ "Ohbr_EMPTY_HR =nvl(?,0),Ohbr_MWL=nvl(?,0),hab_code =? ,Ohbr_LWL=nvl(?,0),  "
										+ "latitude=?,longitude=?,elevation=?,way_point=? where asset_code =? and Ohbr_code =?";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, format(assetReservior.getOhbrCapacityLts()));
								rwsMasterData.pstmt.setString(2, format(assetReservior.getOhbrLocation()));
								rwsMasterData.pstmt.setString(3, format(assetReservior.getOhbrStages()));
								rwsMasterData.pstmt.setString(4, format(assetReservior.getOhbrFillHrs()));
								rwsMasterData.pstmt.setString(5, format(assetReservior.getOhbrEmptyHrs()));
								rwsMasterData.pstmt.setString(6, format(assetReservior.getOhbrMwl()));
								rwsMasterData.pstmt.setString(7, format(assetReservior.getHabCode()));
								rwsMasterData.pstmt.setString(8, format(assetReservior.getOhbrLwl()));
								rwsMasterData.pstmt.setString(9, assetReservior.getLatitude());
								rwsMasterData.pstmt.setString(10, assetReservior.getLongitude());
								rwsMasterData.pstmt.setString(11, assetReservior.getElevation());
								rwsMasterData.pstmt.setString(12, assetReservior.getWaypoint());
								rwsMasterData.pstmt.setString(13, format(assetCode));
								rwsMasterData.pstmt.setString(14, format(assetReservior.getOhbrCode()));
								insertionMode = "update";
							} else {
								query = "INSERT INTO " + Tab_Prifix + "Ohbr_SC_PARAM_TBL("
										+ "Ohbr_CAP_LTS, Ohbr_LOC, Ohbr_SATGES,Ohbr_FILL_HR,"
										+ " Ohbr_EMPTY_HR,Ohbr_MWL,hab_code,Ohbr_LWL,"
										+ "latitude,longitude,elevation,way_point,asset_code,Ohbr_code) "
										+ "VALUES(nvl(?,0),?,nvl(?,0),nvl(?,0),"
										+ "nvl(?,0),nvl(?,0),nvl(?,0),?,"
										+ "?,?,?,?,?,?)";
						
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, format(assetReservior.getOhbrCapacityLts()));
								rwsMasterData.pstmt.setString(2, format(assetReservior.getOhbrLocation()));
								rwsMasterData.pstmt.setString(3, format(assetReservior.getOhbrStages()));
								rwsMasterData.pstmt.setString(4, format(assetReservior.getOhbrFillHrs()));
								rwsMasterData.pstmt.setString(5, format(assetReservior.getOhbrEmptyHrs()));
								rwsMasterData.pstmt.setString(6, format(assetReservior.getOhbrMwl()));
								rwsMasterData.pstmt.setString(7, format(assetReservior.getHabCode()));
								rwsMasterData.pstmt.setString(8, format(assetReservior.getOhbrLwl()));
								rwsMasterData.pstmt.setString(9, assetReservior.getLatitude());
								rwsMasterData.pstmt.setString(10, assetReservior.getLongitude());
								rwsMasterData.pstmt.setString(11, assetReservior.getElevation());
								rwsMasterData.pstmt.setString(12, assetReservior.getWaypoint());
								rwsMasterData.pstmt.setString(13, assetCode);
								rwsMasterData.pstmt.setString(14, assetReservior.getOhbrCode());
								insertionMode = "insert";
							}
							rowCount = rwsMasterData.pstmt.executeUpdate();
							daoMessage = getDaoMessage(insertionMode, rowCount);
							if (rowCount > 0)
								Debug.println("record inserted into rwc  ");
						}
					} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
							|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("04")
							&& assetSubCompTypeCode.equals("003")) {
						for (int i = 0; i < subComps.size(); i++) {
							assetReservior = (Asset_Reservior) subComps.get(i);
							if (isDataAlreadyExists(dataSource, Tab_Prifix + "GLSR_SC_PARAM_TBL", "glsr_code",
									assetReservior.getGlsrCode(), assetCode)) {
								query = "update " + Tab_Prifix + "GLSR_SC_PARAM_TBL set " 
									+ "GLSR_CAP_LTS=nvl(?,0), GLSR_LOC=?, GLSR_SATGES=nvl(?,0),GLSR_FILL_HR=nvl(?,0),"
									+ "GLSR_EMPTY_HR =nvl(?,0),GLSR_MWL=nvl(?,0), GLSR_NO_OF_FILLING =nvl(?,0),"
									+ "hab_code =?,water_qty=?,latitude=?,longitude=?,"
									+ "elevation=?,way_point=? where asset_code =? and glsr_code =?";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, format(assetReservior.getGlsrCapacityInLts()));
								rwsMasterData.pstmt.setString(2, format(assetReservior.getGlsrLocation()));
								rwsMasterData.pstmt.setString(3, format(assetReservior.getGlsrStages()));
								rwsMasterData.pstmt.setString(4, format(assetReservior.getGlsrFillHrs()));
								rwsMasterData.pstmt.setString(5, format(assetReservior.getGlsrEmptyHrs()));
								rwsMasterData.pstmt.setString(6, format(assetReservior.getGlsrMwl()));
								rwsMasterData.pstmt.setString(7, assetReservior.getGlsrNoOfFillings());
								rwsMasterData.pstmt.setString(8, assetReservior.getHabCode());
								rwsMasterData.pstmt.setString(9, assetReservior.getGlsrLwl());
								rwsMasterData.pstmt.setString(10, assetReservior.getLatitude());
								rwsMasterData.pstmt.setString(11, assetReservior.getLongitude());
								rwsMasterData.pstmt.setString(12, assetReservior.getElevation());
								rwsMasterData.pstmt.setString(13, assetReservior.getWaypoint());
								rwsMasterData.pstmt.setString(14, format(assetCode));
								rwsMasterData.pstmt.setString(15, format(assetReservior.getGlsrCode()));
								insertionMode = "update";
							} else {
								query = "INSERT INTO " + Tab_Prifix + "GLSR_SC_PARAM_TBL("
										+ "GLSR_CAP_LTS, GLSR_LOC,GLSR_SATGES,GLSR_FILL_HR,"
										+ "GLSR_EMPTY_HR,GLSR_MWL,GLSR_NO_OF_FILLING,hab_code,"
										+ "water_qty,latitude,longitude,elevation,"
										+ "way_point,asset_code,glsr_code) VALUES(nvl(?,0),?,nvl(?,0),?,?,?,?,?,?,?,?,?,?,?,?)";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, format(assetReservior.getGlsrCapacityInLts()));
								rwsMasterData.pstmt.setString(2, format(assetReservior.getGlsrLocation()));
								rwsMasterData.pstmt.setString(3, format(assetReservior.getGlsrStages()));
								rwsMasterData.pstmt.setString(4, format(assetReservior.getGlsrFillHrs()));
								rwsMasterData.pstmt.setString(5, format(assetReservior.getGlsrEmptyHrs()));
								rwsMasterData.pstmt.setString(6, format(assetReservior.getGlsrMwl()));
								rwsMasterData.pstmt.setString(7, assetReservior.getGlsrNoOfFillings());
								rwsMasterData.pstmt.setString(8, assetReservior.getHabCode());
								rwsMasterData.pstmt.setString(9, assetReservior.getGlsrLwl());
								rwsMasterData.pstmt.setString(10, assetReservior.getLatitude());
								rwsMasterData.pstmt.setString(11, assetReservior.getLongitude());
								rwsMasterData.pstmt.setString(12, assetReservior.getElevation());
								rwsMasterData.pstmt.setString(13, assetReservior.getWaypoint());
								rwsMasterData.pstmt.setString(14, format(assetCode));
								rwsMasterData.pstmt.setString(15, format(assetReservior.getGlsrCode()));
								insertionMode = "insert";
							}
							rowCount = rwsMasterData.pstmt.executeUpdate();
							daoMessage = getDaoMessage(insertionMode, rowCount);
						}
					} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
							|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("04")
							&& assetSubCompTypeCode.equals("004")) {
						for (int i = 0; i < subComps.size(); i++) {
							assetReservior = (Asset_Reservior) subComps.get(i);
							if (isDataAlreadyExists(dataSource, Tab_Prifix + "Glbr_SC_PARAM_TBL", "Glbr_code",
									assetReservior.getGlbrCode(), assetCode)) {
								query = "update " + Tab_Prifix + "Glbr_SC_PARAM_TBL set " 
								+ "Glbr_CAP_LTS=nvl(?,0), Glbr_LOC=?, Glbr_LWL=nvl(?,0), Glbr_FILL_HR=nvl(?,0), "
								+ "Glbr_EMPTY_HR =nvl(?,0),Glbr_MWL=nvl(?,0),hab_code=?,latitude=?,"
								+ "longitude=?,elevation=?,way_point=? where asset_code =? and Glbr_code =?";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, format(assetReservior.getGlbrCapacityInLts()));
								rwsMasterData.pstmt.setString(2, format(assetReservior.getGlbrLocation()));
								rwsMasterData.pstmt.setString(3, format(assetReservior.getGlbrLwl()));
								rwsMasterData.pstmt.setString(4, format(assetReservior.getGlbrFillHrs()));
								rwsMasterData.pstmt.setString(5, format(assetReservior.getGlbrEmptyHrs()));
								rwsMasterData.pstmt.setString(6, format(assetReservior.getGlbrMwl()));
								rwsMasterData.pstmt.setString(7, format(assetReservior.getHabCode()));
								rwsMasterData.pstmt.setString(8, assetReservior.getLatitude());
								rwsMasterData.pstmt.setString(9, assetReservior.getLongitude());
								rwsMasterData.pstmt.setString(10, assetReservior.getElevation());
								rwsMasterData.pstmt.setString(11, assetReservior.getWaypoint());
								rwsMasterData.pstmt.setString(12,format( assetCode));
								rwsMasterData.pstmt.setString(13, format(assetReservior.getGlbrCode()));
								insertionMode = "update";
							} else {
								query = "INSERT INTO  " + Tab_Prifix + "Glbr_SC_PARAM_TBL("
										+ "Glbr_CAP_LTS, Glbr_LOC, Glbr_LWL,  Glbr_FILL_HR, "
										+ "Glbr_EMPTY_HR ,Glbr_MWL,hab_code,latitude,"
										+ "longitude,elevation,way_point,asset_code,Glbr_code) VALUES"
										+ "(nvl(?,0),?,nvl(?,0),nvl(?,0),nvl(?,0),nvl(?,0),?,?,?,?,?,?,?)";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, format(assetReservior.getGlbrCapacityInLts()));
								rwsMasterData.pstmt.setString(2, format(assetReservior.getGlbrLocation()));
								rwsMasterData.pstmt.setString(3, format(assetReservior.getGlbrLwl()));
								rwsMasterData.pstmt.setString(4, format(assetReservior.getGlbrFillHrs()));
								rwsMasterData.pstmt.setString(5, format(assetReservior.getGlbrEmptyHrs()));
								rwsMasterData.pstmt.setString(6, format(assetReservior.getGlbrMwl()));
								rwsMasterData.pstmt.setString(7, format(assetReservior.getHabCode()));
								rwsMasterData.pstmt.setString(8, assetReservior.getLatitude());
								rwsMasterData.pstmt.setString(9, assetReservior.getLongitude());
								rwsMasterData.pstmt.setString(10, assetReservior.getElevation());
								rwsMasterData.pstmt.setString(11, assetReservior.getWaypoint());
								rwsMasterData.pstmt.setString(12,format( assetCode));
								rwsMasterData.pstmt.setString(13, format(assetReservior.getGlbrCode()));
								insertionMode = "insert";
							}

							rowCount = rwsMasterData.pstmt.executeUpdate();
							daoMessage = getDaoMessage(insertionMode, rowCount);

							if (rowCount > 0)
								Debug.println("record inserted into rwc   ");

						}
					} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
							|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("04")
							&& assetSubCompTypeCode.equals("005")) {
						for (int i = 0; i < subComps.size(); i++) {
							assetReservior = (Asset_Reservior) subComps.get(i);
							if (isDataAlreadyExists(dataSource, Tab_Prifix + "BPT_PARAM_TBL", "BPT_CODE",
									assetReservior.getBptCode(), assetCode)) {

								query = "update " + Tab_Prifix + "BPT_PARAM_TBL  set  " 
								+ "CAPACITY =?,STAGING  =nvl(?,0),BPT_MWL =nvl(?,0), BPT_LWL =nvl(?,0),LOCATION =?,HAB_CODE =? where asset_code=? and BPT_CODE  =?";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, format(assetReservior.getBptCapacity()));
								rwsMasterData.pstmt.setString(2, format(assetReservior.getBptStaging()));
								rwsMasterData.pstmt.setString(3, format(assetReservior.getBptMaxwl()));
								rwsMasterData.pstmt.setString(4, format(assetReservior.getBptMinwl()));
								rwsMasterData.pstmt.setString(5, format(assetReservior.getBptLocation()));
								rwsMasterData.pstmt.setString(6, format(assetReservior.getHabCode()));
								rwsMasterData.pstmt.setString(7, format(assetCode));
								rwsMasterData.pstmt.setString(8,  format(assetReservior.getBptCode()));
								insertionMode = "update";
								// rwsMasterData.stmt.addBatch(query);
							} else {
								query = "INSERT INTO " + Tab_Prifix + "BPT_PARAM_TBL("
										+ "CAPACITY,STAGING,BPT_MWL , BPT_LWL,LOCATION ,HAB_CODE,asset_code,BPT_CODE ) VALUES(?,nvl(?,0),nvl(?,0),nvl(?,0),?,?,?,?)";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, format(assetReservior.getBptCapacity()));
								rwsMasterData.pstmt.setString(2, format(assetReservior.getBptStaging()));
								rwsMasterData.pstmt.setString(3, format(assetReservior.getBptMaxwl()));
								rwsMasterData.pstmt.setString(4, format(assetReservior.getBptMinwl()));
								rwsMasterData.pstmt.setString(5, format(assetReservior.getBptLocation()));
								rwsMasterData.pstmt.setString(6, format(assetReservior.getHabCode()));
								rwsMasterData.pstmt.setString(7, format(assetCode));
								rwsMasterData.pstmt.setString(8,  format(assetReservior.getBptCode()));
								insertionMode = "insert";
							}
							rowCount =  rwsMasterData.pstmt.executeUpdate();
							daoMessage = getDaoMessage(insertionMode, rowCount);
							if (rowCount > 0)
								Debug.println("record inserted into rwc   ");
						}
					} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
							|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("04")
							&& assetSubCompTypeCode.equals("006")) {
						for (int i = 0; i < subComps.size(); i++) {
							assetReservior = (Asset_Reservior) subComps.get(i);
							if (isDataAlreadyExists(dataSource, Tab_Prifix + "cis_sc_param_tbl", "cissc_CODE",
									assetReservior.getCisCode(), assetCode)) {
								query = "update  " + Tab_Prifix + "cis_sc_param_tbl set " 
									+ "CIS_LOC =?, CIS_CAP_LTS=nvl(?,0),CIS_COND=?,CIS_PF =?,"
									+ "CIS_PF_CON =?, CIS_DRAIN=?, HAB_CODE =?,CIS_HR =nvl(?,0),"
									+ "water_qty=?,latitude=?,longitude=?,elevation=?,"
									+ "way_point=? where asset_code =? and  cissc_CODE=?";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, format(assetReservior.getCisLocation()));
								rwsMasterData.pstmt.setString(2, format(assetReservior.getCisCapLts()));
								rwsMasterData.pstmt.setString(3, format(assetReservior.getCisCond()));
								rwsMasterData.pstmt.setString(4, format(assetReservior.getCisPf()));
								rwsMasterData.pstmt.setString(5, format(assetReservior.getCisPfCond()));
								rwsMasterData.pstmt.setString(6, format(assetReservior.getCisDrain()));
								rwsMasterData.pstmt.setString(7, format(assetReservior.getHabCode()));
								rwsMasterData.pstmt.setString(8,  format(assetReservior.getCisHr()));
								rwsMasterData.pstmt.setString(9, assetReservior.getCisNoOfTaps());
								rwsMasterData.pstmt.setString(10, assetReservior.getLatitude());
								rwsMasterData.pstmt.setString(11, assetReservior.getLongitude());
								rwsMasterData.pstmt.setString(12, assetReservior.getElevation());
								rwsMasterData.pstmt.setString(13, assetReservior.getWaypoint());
								rwsMasterData.pstmt.setString(14, assetCode);
								rwsMasterData.pstmt.setString(15, assetReservior.getCisCode());
								insertionMode = "update";
							} else {
								query = "INSERT INTO  " + Tab_Prifix + "cis_sc_param_tbl("
										+ "CIS_LOC, CIS_CAP_LTS, CIS_COND,CIS_PF,CIS_PF_CON ,"
										+ "CIS_DRAIN, HAB_CODE,CIS_HR,water_qty,latitude,"
										+ "longitude,elevation,way_point,asset_code,cissc_CODE) VALUES(?,nvl(?,0),?,?,?,?,?,nvl(?,0),?,?,?,?,?,?,?)";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, format(assetReservior.getCisLocation()));
								rwsMasterData.pstmt.setString(2, format(assetReservior.getCisCapLts()));
								rwsMasterData.pstmt.setString(3, format(assetReservior.getCisCond()));
								rwsMasterData.pstmt.setString(4, format(assetReservior.getCisPf()));
								rwsMasterData.pstmt.setString(5, format(assetReservior.getCisPfCond()));
								rwsMasterData.pstmt.setString(6, format(assetReservior.getCisDrain()));
								rwsMasterData.pstmt.setString(7, format(assetReservior.getHabCode()));
								rwsMasterData.pstmt.setString(8,  format(assetReservior.getCisHr()));
								rwsMasterData.pstmt.setString(9, assetReservior.getCisNoOfTaps());
								rwsMasterData.pstmt.setString(10, assetReservior.getLatitude());
								rwsMasterData.pstmt.setString(11, assetReservior.getLongitude());
								rwsMasterData.pstmt.setString(12, assetReservior.getElevation());
								rwsMasterData.pstmt.setString(13, assetReservior.getWaypoint());
								rwsMasterData.pstmt.setString(14, assetCode);
								rwsMasterData.pstmt.setString(15, assetReservior.getCisCode());
								insertionMode = "insert";
							}
							rowCount = rwsMasterData.pstmt.executeUpdate();
							daoMessage = getDaoMessage(insertionMode, rowCount);
						}
					} 
					else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
							|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("04")
							&& assetSubCompTypeCode.equals("007")) {
						for (int i = 0; i < subComps.size(); i++) {
							assetReservior = (Asset_Reservior) subComps.get(i);
							if (isDataAlreadyExists(dataSource, Tab_Prifix + "STANDPOST_TBL", "STANDPOST_CODE",
									assetReservior.getStandPostCode(), assetCode)) {
								query = "update  " + Tab_Prifix + "STANDPOST_TBL set " 
									+ "LOCATION =?,NAME =?,REMARKS=?,UPDATE_DATE=sysdate"
										+ " where asset_code =? and  STANDPOST_CODE=?";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, format(assetReservior.getSpLocation()));
								rwsMasterData.pstmt.setString(2, format(assetReservior.getStandPostName()));
								rwsMasterData.pstmt.setString(3, format(assetReservior.getSpRemarks()));
								rwsMasterData.pstmt.setString(4, assetCode);
								rwsMasterData.pstmt.setString(5, assetReservior.getStandPostCode());
								insertionMode = "update";
							} else {
								query = "INSERT INTO  " + Tab_Prifix + "STANDPOST_TBL("
										+ "LOCATION, NAME, REMARKS,UPDATE_DATE,asset_code,STANDPOST_CODE) VALUES(?,?,?,sysdate,?,?)";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, format(assetReservior.getSpLocation()));
								rwsMasterData.pstmt.setString(2, format(assetReservior.getStandPostName()));
								rwsMasterData.pstmt.setString(3, format(assetReservior.getSpRemarks()));
								rwsMasterData.pstmt.setString(4, assetCode);
								rwsMasterData.pstmt.setString(5, assetReservior.getStandPostCode());
								insertionMode = "insert";
							}
							rowCount = rwsMasterData.pstmt.executeUpdate();
							daoMessage = getDaoMessage(insertionMode, rowCount);
						}
					}
				}
				rwsMasterData.conn.commit();
			}
			if (compType.equals("Pipeline") && opType.equals("Modify")) {
				String insertionMode = "";
				if (subComps != null) {
					if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
							|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("03")
							&& assetSubCompTypeCode.equals("001")) {
						for (int i = 0; i < subComps.size(); i++) {
							assetPipeline = (Asset_PipeLine) subComps.get(i);
							if (isDataAlreadyExists(dataSource, Tab_Prifix + "PUMPINGMAIN_TBL", "PUMPINGMAIN_CODE",
									assetPipeline.getPmCode(), assetCode)) {
								query = "UPDATE " + Tab_Prifix + "PUMPINGMAIN_TBL   set " 
									+ "HAB_CODE =?, LENGTH =?,AIRVALVE_NO=nvl(?,0),SCOUREVALVE=nvl(?,0),REFLEXVALVE=nvl(?,0),"
									+ "SLUICEVALVE=nvl(?,0),NO_OF_PIPES =nvl(?,0),ZERO_VELOCITY_VALVE =nvl(?,0),AIR_CUSHION_VALVE =nvl(?,0),NON_RETURN_VALVE =nvl(?,0),"
									+ "LOCATION =? where ASSET_CODE=? and PUMPINGMAIN_CODE  =?";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, assetPipeline.getHabCode());
								rwsMasterData.pstmt.setString(2, format(assetPipeline.getPmLen()));
								rwsMasterData.pstmt.setString(3, assetPipeline.getPmAvNo());
								rwsMasterData.pstmt.setString(4, assetPipeline.getPmScrvNo());
								rwsMasterData.pstmt.setString(5, assetPipeline.getPmRvNo());
								rwsMasterData.pstmt.setString(6, assetPipeline.getPmSvNo());
								rwsMasterData.pstmt.setString(7, format(assetPipeline.getNoOfPipes()));
								rwsMasterData.pstmt.setString(8,  assetPipeline.getPmZeroVelocityValve());
								rwsMasterData.pstmt.setString(9,  assetPipeline.getPmAirCusionValve());
								rwsMasterData.pstmt.setString(10, assetPipeline.getPmNonReturnValve());
								rwsMasterData.pstmt.setString(11, assetPipeline.getPmLocation());
								rwsMasterData.pstmt.setString(12, assetCode);
								rwsMasterData.pstmt.setString(13, assetPipeline.getPmCode());
								insertionMode = "update";
							} else {
								query = "INSERT INTO " + Tab_Prifix + "PUMPINGMAIN_TBL"
										+ "(HAB_CODE, LENGTH,AIRVALVE_NO,SCOUREVALVE,REFLEXVALVE,"
										+ "SLUICEVALVE,NO_OF_PIPES,ZERO_VELOCITY_VALVE,AIR_CUSHION_VALVE,NON_RETURN_VALVE,"
										+ "LOCATION,ASSET_CODE,PUMPINGMAIN_CODE) VALUES ("
										+ "?,?,nvl(?,0),nvl(?,0),nvl(?,0),nvl(?,0),"
										+ "nvl(?,0),nvl(?,0),nvl(?,0),nvl(?,0),?,?,?)";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, assetPipeline.getHabCode());
								rwsMasterData.pstmt.setString(2, format(assetPipeline.getPmLen()));
								rwsMasterData.pstmt.setString(3, assetPipeline.getPmAvNo());
								rwsMasterData.pstmt.setString(4, assetPipeline.getPmScrvNo());
								rwsMasterData.pstmt.setString(5, assetPipeline.getPmRvNo());
								rwsMasterData.pstmt.setString(6, assetPipeline.getPmSvNo());
								rwsMasterData.pstmt.setString(7, format(assetPipeline.getNoOfPipes()));
								rwsMasterData.pstmt.setString(8,  assetPipeline.getPmZeroVelocityValve());
								rwsMasterData.pstmt.setString(9,  assetPipeline.getPmAirCusionValve());
								rwsMasterData.pstmt.setString(10, assetPipeline.getPmNonReturnValve());
								rwsMasterData.pstmt.setString(11, assetPipeline.getPmLocation());
								rwsMasterData.pstmt.setString(12, assetCode);
								rwsMasterData.pstmt.setString(13, assetPipeline.getPmCode());
								insertionMode = "insert";
							}

							rowCount = rwsMasterData.pstmt.executeUpdate();
							daoMessage = getDaoMessage(insertionMode, rowCount);
						}
					}
					else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
							|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("03")
							&& assetSubCompTypeCode.equals("002")) {
						for (int i = 0; i < subComps.size(); i++) {
							assetPipeline = (Asset_PipeLine) subComps.get(i);
							if (isDataAlreadyExists(dataSource, Tab_Prifix + "GRAVITYMAIN_TBL", "GRAVITYMAIN_CODE",
									assetPipeline.getGravitymain_code(), assetCode)) {
								query = "UPDATE " + Tab_Prifix + "GRAVITYMAIN_TBL   set "
										+ "GRAVITYMAIN_CODE =?, HAB_CODE  =?, LENGTH  =nvl(?,0),AIRVALVE_NO =nvl(?,0),SCOUREVALVE =nvl(?,0),"
										+ "REFLEXVALVE=nvl(?,0),SLUICEVALVE =nvl(?,0),ZERO_VELOCITY_VALVE =nvl(?,0),AIR_CUSHION_VALVE =nvl(?,0),NON_RETURN_VALVE =nvl(?,0),"
										+ "NO_OF_PIPES =nvl(?,0),LOCATION  =? where ASSET_CODE=? and GRAVITYMAIN_CODE  =?";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, assetPipeline.getGravitymain_code());
								rwsMasterData.pstmt.setString(2, assetPipeline.getHabCode());
								rwsMasterData.pstmt.setString(3, assetPipeline.getLengths());
								rwsMasterData.pstmt.setString(4, assetPipeline.getAirvalve_no());
								rwsMasterData.pstmt.setString(5, assetPipeline.getScourevalve());
								rwsMasterData.pstmt.setString(6, assetPipeline.getReflexvalve());
								rwsMasterData.pstmt.setString(7, assetPipeline.getSluicevalve());
								rwsMasterData.pstmt.setString(8,  assetPipeline.getZeroVelocityValve());
								rwsMasterData.pstmt.setString(9,  assetPipeline.getAirCushionValve());
								rwsMasterData.pstmt.setString(10, assetPipeline.getNonReturnValve());
								rwsMasterData.pstmt.setString(11,format( assetPipeline.getNoOfPipes()));
								rwsMasterData.pstmt.setString(12, assetPipeline.getGravitymain_location());
								rwsMasterData.pstmt.setString(13, assetCode);
								rwsMasterData.pstmt.setString(14, assetPipeline.getGravitymain_code());
								insertionMode = "update";
							} else {
								query = "INSERT INTO  " + Tab_Prifix + "GRAVITYMAIN_TBL("
										+ "HAB_CODE , LENGTH ,AIRVALVE_NO,SCOUREVALVE,REFLEXVALVE,"
										+ "SLUICEVALVE ,NO_OF_PIPES,LOCATION,ZERO_VELOCITY_VALVE,AIR_CUSHION_VALVE,"
										+ "NON_RETURN_VALVE,ASSET_CODE,GRAVITYMAIN_CODE) VALUES(?,nvl(?,0),nvl(?,0),nvl(?,0),nvl(?,0)," 
										+ "nvl(?,0),nvl(?,0),?,nvl(?,0),nvl(?,0),nvl(?,0),?,?)";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
							
								rwsMasterData.pstmt.setString(1, assetPipeline.getHabCode());
								rwsMasterData.pstmt.setString(2, assetPipeline.getLengths());
								rwsMasterData.pstmt.setString(3, assetPipeline.getAirvalve_no());
								rwsMasterData.pstmt.setString(4, assetPipeline.getScourevalve());
								rwsMasterData.pstmt.setString(5, assetPipeline.getReflexvalve());
								rwsMasterData.pstmt.setString(6, assetPipeline.getSluicevalve());
								
								rwsMasterData.pstmt.setString(9,  assetPipeline.getZeroVelocityValve());
								rwsMasterData.pstmt.setString(10,  assetPipeline.getAirCushionValve());
								rwsMasterData.pstmt.setString(11, assetPipeline.getNonReturnValve());
								rwsMasterData.pstmt.setString(7,format( assetPipeline.getNoOfPipes()));
								rwsMasterData.pstmt.setString(8, assetPipeline.getGravitymain_location());
								rwsMasterData.pstmt.setString(12, assetCode);
								rwsMasterData.pstmt.setString(13, assetPipeline.getGravitymain_code());
								insertionMode = "insert";
							}
							rowCount = rwsMasterData.pstmt.executeUpdate();
							daoMessage = getDaoMessage(insertionMode, rowCount);
						}
					} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
							|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("03")
							&& assetSubCompTypeCode.equals("003")) {
						for (int i = 0; i < subComps.size(); i++) {
							assetPipeline = (Asset_PipeLine) subComps.get(i);
							if (isDataAlreadyExists(dataSource, Tab_Prifix + "DISTRI_SC_PARAM_TBL", "DISTRISC_CODE",
									assetPipeline.getDisCode(), assetCode)) {
								query = "UPDATE " + Tab_Prifix + "DISTRI_SC_PARAM_TBL  set "
										+ "HAB_CODE =?,DIS_COVE =?,DIS_LN=nvl(?,0),DIS_TLC=nvl(?,0),DIS_BN=nvl(?,0),"
										+ "NO_OF_PIPES=nvl(?,0),NO_AIRVALVES=nvl(?,0),NO_SCOURVALVES =nvl(?,0),NO_SLUICEVALVES=nvl(?,0),NO_PR_HC=nvl(?,0),"
										+ "LOCATION=?,NO_STANDPOSTS=nvl(?,0) where ASSET_CODE=? and DISTRISC_CODE =?";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, assetPipeline.getHabCode());
								rwsMasterData.pstmt.setString(2, assetPipeline.getDisFullVillagesCovered());
								rwsMasterData.pstmt.setString(3, assetPipeline.getDisTotalLengthNeeded());
								rwsMasterData.pstmt.setString(4, assetPipeline.getDisTotalLengthProvided());
								rwsMasterData.pstmt.setString(5, assetPipeline.getDisBalanceNeeded());
								rwsMasterData.pstmt.setString(6, format(assetPipeline.getDisNoOfPipes()));
								rwsMasterData.pstmt.setString(7, assetPipeline.getDisNoOfAirValves());
								rwsMasterData.pstmt.setString(8,  assetPipeline.getDisNoOfScourValves());
								rwsMasterData.pstmt.setString(9,  assetPipeline.getDisNoOfSluiceValves());
								rwsMasterData.pstmt.setString(10, assetPipeline.getDisNoOfPrivateHouseConnections());
								rwsMasterData.pstmt.setString(11, assetPipeline.getDisLocation());
								rwsMasterData.pstmt.setString(12, assetPipeline.getDisNoOfStandPosts());
								rwsMasterData.pstmt.setString(13, assetCode);
								rwsMasterData.pstmt.setString(14, assetPipeline.getDisCode());
								insertionMode = "update";
							} else {
								query = "INSERT INTO " + Tab_Prifix + "DISTRI_SC_PARAM_TBL("
										+ "HAB_CODE,DIS_COVE,DIS_LN," + "DIS_TLC,DIS_BN,NO_OF_PIPES,NO_AIRVALVES,"
										+ "NO_SCOURVALVES ,NO_SLUICEVALVES,NO_PR_HC,LOCATION,"
										+ "NO_STANDPOSTS,ASSET_CODE,DISTRISC_CODE) VALUES(?,?,nvl(?,0),nvl(?,0),nvl(?,0)," 
										+ "nvl(?,0),nvl(?,0),nvl(?,0),nvl(?,0),nvl(?,0),"
										+ "?,nvl(?,0),?,?)";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, assetPipeline.getHabCode());
								rwsMasterData.pstmt.setString(2, assetPipeline.getDisFullVillagesCovered());
								rwsMasterData.pstmt.setString(3, assetPipeline.getDisTotalLengthNeeded());
								rwsMasterData.pstmt.setString(4, assetPipeline.getDisTotalLengthProvided());
								rwsMasterData.pstmt.setString(5, assetPipeline.getDisBalanceNeeded());
								rwsMasterData.pstmt.setString(6, format(assetPipeline.getDisNoOfPipes()));
								rwsMasterData.pstmt.setString(7, assetPipeline.getDisNoOfAirValves());
								rwsMasterData.pstmt.setString(8,  assetPipeline.getDisNoOfScourValves());
								rwsMasterData.pstmt.setString(9,  assetPipeline.getDisNoOfSluiceValves());
								rwsMasterData.pstmt.setString(10, assetPipeline.getDisNoOfPrivateHouseConnections());
								rwsMasterData.pstmt.setString(11, assetPipeline.getDisLocation());
								rwsMasterData.pstmt.setString(12, assetPipeline.getDisNoOfStandPosts());
								rwsMasterData.pstmt.setString(13, assetCode);
								rwsMasterData.pstmt.setString(14, assetPipeline.getDisCode());
								insertionMode = "insert";
							}
							rowCount = rwsMasterData.pstmt.executeUpdate();
							daoMessage = getDaoMessage(insertionMode, rowCount);
						}
					}
				}
			}
			if (compType.equals("Headworks") && (opType.equals("Modify") || opType.equals("Add New"))) {
				String insertionMode = "";
				if (subComps != null) {
					for (int i = 0; i < subComps.size(); i++) {
						assetHeadworks = (Asset_HeadWorks) subComps.get(i);
						if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
								|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("02")
								&& assetSubCompTypeCode.equals("001")) {
							if (isDataAlreadyExists(dataSource, Tab_Prifix + "RW_COLLWELL_PARAM_TBL",
									"RW_COLLWELL_CODE", assetHeadworks.getCollectionWellCode(), assetCode)) {
								query = "update " + Tab_Prifix + "RW_COLLWELL_PARAM_TBL  set " 
									+ "HAB_CODE= ?,DIAMETER= nvl(?,0) , DEPTH = nvl(?,0), TYPE_OF_FLOORING =?, LOCATION =?, "
									+ "capacity=nvl(?,0)  where asset_code =? and RW_COLLWELL_CODE  =?";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, assetHeadworks.getHabCode());
								rwsMasterData.pstmt.setString(2, assetHeadworks.getRwDiameter());
								rwsMasterData.pstmt.setString(3, assetHeadworks.getRwDepth());
								rwsMasterData.pstmt.setString(4, assetHeadworks.getRwTypeOfFlooring());
								rwsMasterData.pstmt.setString(5, assetHeadworks.getRwLocation());
								rwsMasterData.pstmt.setDouble(6, assetHeadworks.getRwCapacity());
								rwsMasterData.pstmt.setString(7, assetCode);
								rwsMasterData.pstmt.setString(8, assetHeadworks.getCollectionWellCode());
								insertionMode = "update";
							} else {
								query = "insert into " + Tab_Prifix + "RW_COLLWELL_PARAM_TBL "
										+ "(HAB_CODE,DIAMETER,DEPTH,TYPE_OF_FLOORING,location,capacity,ASSET_CODE,RW_COLLWELL_CODE)" 
										+ " values(?, nvl(?,0), nvl(?,0),?,?, nvl(?,0),?,?)";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, assetHeadworks.getHabCode());
								rwsMasterData.pstmt.setString(2, assetHeadworks.getRwDiameter());
								rwsMasterData.pstmt.setString(3, assetHeadworks.getRwDepth());
								rwsMasterData.pstmt.setString(4, assetHeadworks.getRwTypeOfFlooring());
								rwsMasterData.pstmt.setString(5, assetHeadworks.getRwLocation());
								rwsMasterData.pstmt.setDouble(6, assetHeadworks.getRwCapacity());
								rwsMasterData.pstmt.setString(7, assetCode);
								rwsMasterData.pstmt.setString(8, assetHeadworks.getCollectionWellCode());
								insertionMode = "insert";

							}
							rowCount = rwsMasterData.pstmt.executeUpdate();
							daoMessage = getDaoMessage(insertionMode, rowCount);
						} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02")
								|| assetTypeCode.equals("03") || assetTypeCode.equals("09"))
								&& assetCompTypeCode.equals("02") && assetSubCompTypeCode.equals("002")) {
							if (isDataAlreadyExists(dataSource, Tab_Prifix + "SS_SC_PARAM_TBL", "sssc_code",
									assetHeadworks.getSsTankCode(), assetCode)) {
								query = "update " + Tab_Prifix + "SS_SC_PARAM_TBL set " 
									+ "SS_SIZE=nvl(?,0), CAPACITY_DAYS=nvl(?,0), CAPACITY_MCUM=nvl(?,0), TANK_ADEQACY=nvl(?,0), "
									+ "LOCATION=?,  POWER_CON=?,  HAB_CODE=?, OTHERS=NVL(?,''), "
									+ "DEPTH=NVL(?,0), POWER_HRS=nvl(?,0),latitude=?,longitude=?,"
									+ "elevation=?,way_point=? where asset_code=? and sssc_code =?";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, assetHeadworks.getSsSize());
								rwsMasterData.pstmt.setString(2, assetHeadworks.getSsCapacityDays());
								rwsMasterData.pstmt.setString(3, assetHeadworks.getSsCapacityMcum());
								rwsMasterData.pstmt.setString(4, assetHeadworks.getSsTankAdeq());
								rwsMasterData.pstmt.setString(5, assetHeadworks.getSsTankLocation());
								rwsMasterData.pstmt.setString(6, assetHeadworks.getPowerConn());
								rwsMasterData.pstmt.setString(7, assetHeadworks.getHabCode());
								rwsMasterData.pstmt.setString(8, assetHeadworks.getPowerConnOthers());
								rwsMasterData.pstmt.setFloat(9, assetHeadworks.getSsDepth());
								rwsMasterData.pstmt.setString(10, assetHeadworks.getPowerHours());
								rwsMasterData.pstmt.setString(11, assetHeadworks.getLatitude());
								rwsMasterData.pstmt.setString(12, assetHeadworks.getLongitude());
								rwsMasterData.pstmt.setString(13, assetHeadworks.getElevation());
								rwsMasterData.pstmt.setString(14, assetHeadworks.getWaypoint());
								rwsMasterData.pstmt.setString(15, assetCode);
								rwsMasterData.pstmt.setString(16, assetHeadworks.getSsTankCode());
								insertionMode = "update";
							} else {
								query = "INSERT INTO " + Tab_Prifix + "SS_SC_PARAM_TBL ("
										+ "SS_SIZE, CAPACITY_DAYS, CAPACITY_MCUM, "
										+ "TANK_ADEQACY, LOCATION,  POWER_CON,"
										+ " HAB_CODE, OTHERS, DEPTH, POWER_HRS,latitude,longitude,elevation,way_point,asset_code,sssc_code) VALUES("
										+ "nvl(?,0),nvl(?,0),nvl(?,0),nvl(?,0),?,?,?,NVL(?,''),NVL(?,0),nvl(?,0),?,?,?,?,?,?)";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, assetHeadworks.getSsSize());
								rwsMasterData.pstmt.setString(2, assetHeadworks.getSsCapacityDays());
								rwsMasterData.pstmt.setString(3, assetHeadworks.getSsCapacityMcum());
								rwsMasterData.pstmt.setString(4, assetHeadworks.getSsTankAdeq());
								rwsMasterData.pstmt.setString(5, assetHeadworks.getSsTankLocation());
								rwsMasterData.pstmt.setString(6, assetHeadworks.getPowerConn());
								rwsMasterData.pstmt.setString(7, assetHeadworks.getHabCode());
								rwsMasterData.pstmt.setString(8, assetHeadworks.getPowerConnOthers());
								rwsMasterData.pstmt.setFloat(9, assetHeadworks.getSsDepth());
								rwsMasterData.pstmt.setString(10, assetHeadworks.getPowerHours());
								rwsMasterData.pstmt.setString(11, assetHeadworks.getLatitude());
								rwsMasterData.pstmt.setString(12, assetHeadworks.getLongitude());
								rwsMasterData.pstmt.setString(13, assetHeadworks.getElevation());
								rwsMasterData.pstmt.setString(14, assetHeadworks.getWaypoint());
								rwsMasterData.pstmt.setString(15, assetCode);
								rwsMasterData.pstmt.setString(16, assetHeadworks.getSsTankCode());
								insertionMode = "insert";
							}
							rowCount = rwsMasterData.pstmt.executeUpdate();
							daoMessage = getDaoMessage(insertionMode, rowCount);
						} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02")
								|| assetTypeCode.equals("03") || assetTypeCode.equals("09"))
								&& assetCompTypeCode.equals("02")
								&& (assetSubCompTypeCode.equals("003") || assetSubCompTypeCode.equals("004"))
								|| assetSubCompTypeCode.equals("010") || assetSubCompTypeCode.equals("011")) {
							if (assetSubCompTypeCode.equals("003")|| assetSubCompTypeCode.equals("010")) {
								String chkFilter = assetHeadworks.getWtpSedimentationTankValue()
										+ assetHeadworks.getWtpHorizontalRoughingFilterValue()
										+ assetHeadworks.getWtpVerticalRoughingFilterValue();
								if (isDataAlreadyExists(dataSource, Tab_Prifix + "WTP_SC_PARAM_TBL", "WTPSC_CODE",
										assetHeadworks.getWtpCode(), assetCode)) {
									query = "update " + Tab_Prifix + "WTP_SC_PARAM_TBL set " 
										+ "WTP_TYPW =?, WTP_MLD =nvl(?,0), UNITS_NO =nvl(?,0), RATE_OF_FILTRATION  =nvl(?,0), "
										+ "WTP_SIZE =?, UNITS_STANDBY =nvl(?,0), PERFORMANCE =?, USE_CAPACITYMLD  =nvl(?,0),"
										+ "EXTENTION_SCOPE =?, LOCATION =?, HAB_CODE =?, CHK_FILTER =?, "
										+ "FREQ_SAND_SCRAP =nvl(?,0),latitude=?,longitude=?,elevation=?,"
										+ "way_point=? where WTPSC_CODE =?";
									rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
									rwsMasterData.pstmt.setString(1, assetHeadworks.getWtpType());
									rwsMasterData.pstmt.setString(2, assetHeadworks.getWtpMld());
									rwsMasterData.pstmt.setString(3, assetHeadworks.getWtpUnits());
									rwsMasterData.pstmt.setDouble(4, assetHeadworks.getWtpRateOfFiltration());
									rwsMasterData.pstmt.setString(5, assetHeadworks.getWtpSize());
									rwsMasterData.pstmt.setString(6, assetHeadworks.getWtpUnitsStandby());
									rwsMasterData.pstmt.setString(7, assetHeadworks.getWtpPerformance());
									rwsMasterData.pstmt.setFloat(8, assetHeadworks.getWtpNoOfHoursOfUsage());
									rwsMasterData.pstmt.setString(9, assetHeadworks.getWtpExtentionScope());
									rwsMasterData.pstmt.setString(10, assetHeadworks.getWtpLocation());
									rwsMasterData.pstmt.setString(11, assetHeadworks.getHabCode());
									rwsMasterData.pstmt.setString(12, chkFilter);
									rwsMasterData.pstmt.setInt(13, assetHeadworks.getWtpFreqSandScrap());
									rwsMasterData.pstmt.setString(14, assetHeadworks.getLatitude());
									rwsMasterData.pstmt.setString(15, assetHeadworks.getLongitude());
									rwsMasterData.pstmt.setString(16, assetHeadworks.getElevation());
									rwsMasterData.pstmt.setString(17, assetHeadworks.getWaypoint());
									rwsMasterData.pstmt.setString(18, assetHeadworks.getWtpCode());
									insertionMode = "update";
								} else {
									query = "insert into  " + Tab_Prifix + "WTP_SC_PARAM_TBL("
											+ "WTP_TYPW,WTP_MLD,UNITS_NO,RATE_OF_FILTRATION,"
											+ "WTP_SIZE,UNITS_STANDBY,PERFORMANCE,USE_CAPACITYMLD,"
											+ "EXTENTION_SCOPE,LOCATION,HAB_CODE,CHK_FILTER,"
											+ "FREQ_SAND_SCRAP,latitude,longitude,elevation,"
											+ "way_point,asset_code,WTPSC_CODE) values("
											+ "?,nvl(?,0),nvl(?,0),nvl(?,0),?,nvl(?,0),?,nvl(?,0),?,?,?,?,nvl(?,0),?,?,?,?,?,?)";
									rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
									rwsMasterData.pstmt.setString(1, assetHeadworks.getWtpType());
									rwsMasterData.pstmt.setString(2, assetHeadworks.getWtpMld());
									rwsMasterData.pstmt.setString(3, assetHeadworks.getWtpUnits());
									rwsMasterData.pstmt.setDouble(4, assetHeadworks.getWtpRateOfFiltration());
									rwsMasterData.pstmt.setString(5, assetHeadworks.getWtpSize());
									rwsMasterData.pstmt.setString(6, assetHeadworks.getWtpUnitsStandby());
									rwsMasterData.pstmt.setString(7, assetHeadworks.getWtpPerformance());
									rwsMasterData.pstmt.setFloat(8, assetHeadworks.getWtpNoOfHoursOfUsage());
									rwsMasterData.pstmt.setString(9, assetHeadworks.getWtpExtentionScope());
									rwsMasterData.pstmt.setString(10, assetHeadworks.getWtpLocation());
									rwsMasterData.pstmt.setString(11, assetHeadworks.getHabCode());
									rwsMasterData.pstmt.setString(12, chkFilter);
									rwsMasterData.pstmt.setInt(13, assetHeadworks.getWtpFreqSandScrap());
									rwsMasterData.pstmt.setString(14, assetHeadworks.getLatitude());
									rwsMasterData.pstmt.setString(15, assetHeadworks.getLongitude());
									rwsMasterData.pstmt.setString(16, assetHeadworks.getElevation());
									rwsMasterData.pstmt.setString(17, assetHeadworks.getWaypoint());
									rwsMasterData.pstmt.setString(18, assetCode);
									rwsMasterData.pstmt.setString(19, assetHeadworks.getWtpCode());
									insertionMode = "insert";
								}
								rowCount = rwsMasterData.pstmt.executeUpdate();
								daoMessage = getDaoMessage(insertionMode, rowCount);
							}
							if (assetSubCompTypeCode.equals("011")) {
								String chkFilter = assetHeadworks.getWtpSedimentationTankValue()
										+ assetHeadworks.getWtpHorizontalRoughingFilterValue()
										+ assetHeadworks.getWtpVerticalRoughingFilterValue();
								if (isDataAlreadyExists(dataSource, Tab_Prifix + "WTP_SC_PARAM_TBL", "WTPSC_CODE",
										assetHeadworks.getWtpCode(), assetCode)) {
									query = "update " + Tab_Prifix + "WTP_SC_PARAM_TBL set " 
									+ "WTP_TYPW =?, WTP_MLD =nvl(?,0), UNITS_NO =nvl(?,0), UNITS_STANDBY =nvl(?,0), "
									+ "USE_CAPACITYMLD  =nvl(?,0),LOCATION =?, HAB_CODE =?,SHELTER_EXISTING = nvl(?,0),"
									+ "RWS_TANK_EXISTING=nvl(?,0),PWS_TANK_EXISTING=nvl(?,0) ,latitude=?,longitude=?,"
									+ "elevation=?,way_point=?,CHK_FILTER=? where WTPSC_CODE =?";
									rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
									rwsMasterData.pstmt.setString(1, assetHeadworks.getWtpType());
									rwsMasterData.pstmt.setString(2, assetHeadworks.getWtpMld());
									rwsMasterData.pstmt.setString(3, assetHeadworks.getWtpUnits());
									rwsMasterData.pstmt.setString(4, assetHeadworks.getWtpUnitsStandby());
									rwsMasterData.pstmt.setFloat(5, assetHeadworks.getWtpNoOfHoursOfUsage());
									rwsMasterData.pstmt.setString(6, assetHeadworks.getWtpLocation());
									rwsMasterData.pstmt.setString(7, assetHeadworks.getHabCode());
									rwsMasterData.pstmt.setInt(8, assetHeadworks.getWtpShelter());
									rwsMasterData.pstmt.setString(9, assetHeadworks.getWtpRawWater());
									rwsMasterData.pstmt.setString(10, assetHeadworks.getWtpProductWater());
									rwsMasterData.pstmt.setString(11, assetHeadworks.getLatitude());
									rwsMasterData.pstmt.setString(12, assetHeadworks.getLongitude());
									rwsMasterData.pstmt.setString(13, assetHeadworks.getElevation());
									rwsMasterData.pstmt.setString(14, assetHeadworks.getWaypoint());
									rwsMasterData.pstmt.setString(15, chkFilter);
									rwsMasterData.pstmt.setString(16, assetHeadworks.getWtpCode());
									insertionMode = "update";
								} else {
									query = "insert into  " + Tab_Prifix
											+ "WTP_SC_PARAM_TBL("
											+ "WTP_TYPW,WTP_MLD,UNITS_NO,UNITS_STANDBY,USE_CAPACITYMLD,"
											+ "LOCATION,HAB_CODE,SHELTER_EXISTING,RWS_TANK_EXISTING,"
											+ "PWS_TANK_EXISTING,latitude,longitude,elevation,"
											+ "way_point,CHK_FILTER,asset_code,WTPSC_CODE) values("
											+ "?,nvl(?,0),nvl(?,0),nvl(?,0),?,"
											+ "?,?,nvl(?,0),nvl(?,0),"
											+ "nvl(?,0),?,?,?,?,?,?,?)";
									rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
									rwsMasterData.pstmt.setString(1, assetHeadworks.getWtpType());
									rwsMasterData.pstmt.setString(2, assetHeadworks.getWtpMld());
									rwsMasterData.pstmt.setString(3, assetHeadworks.getWtpUnits());
									rwsMasterData.pstmt.setString(4, assetHeadworks.getWtpUnitsStandby());
									rwsMasterData.pstmt.setFloat(5, assetHeadworks.getWtpNoOfHoursOfUsage());
									rwsMasterData.pstmt.setString(6, assetHeadworks.getWtpLocation());
									rwsMasterData.pstmt.setString(7, assetHeadworks.getHabCode());
									rwsMasterData.pstmt.setInt(8, assetHeadworks.getWtpShelter());
									rwsMasterData.pstmt.setString(9, assetHeadworks.getWtpRawWater());
									rwsMasterData.pstmt.setString(10, assetHeadworks.getWtpProductWater());
									rwsMasterData.pstmt.setString(11, assetHeadworks.getLatitude());
									rwsMasterData.pstmt.setString(12, assetHeadworks.getLongitude());
									rwsMasterData.pstmt.setString(13, assetHeadworks.getElevation());
									rwsMasterData.pstmt.setString(14, assetHeadworks.getWaypoint());
									rwsMasterData.pstmt.setString(15, chkFilter);
									rwsMasterData.pstmt.setString(16, assetCode);
									rwsMasterData.pstmt.setString(17, assetHeadworks.getWtpCode());
									insertionMode = "insert";
								}
								rowCount = rwsMasterData.pstmt.executeUpdate();
								daoMessage = getDaoMessage(insertionMode, rowCount);
							} else if (assetSubCompTypeCode.equals("004")) {
								String chkFilter = assetHeadworks.getWtpClarifloculatorValue() + "0000";
								if (isDataAlreadyExists(dataSource, Tab_Prifix + "WTP_SC_PARAM_TBL", "WTPSC_CODE",
										assetHeadworks.getWtpCode(), assetCode)) {
									query = "update " + Tab_Prifix + "WTP_SC_PARAM_TBL set " 
										+ "WTP_TYPW =?, WTP_MLD =nvl(?,0), UNITS_NO =nvl(?,0), RATE_OF_FILTRATION  =nvl(?,0), "
										+ "WTP_SIZE =?, UNITS_STANDBY =nvl(?,0), BACKWASH_FEQ =nvl(?,0), LOCATION =?, "
										+ "HAB_CODE =?, CHK_FILTER =? ,latitude=?,longitude=?,"
										+ "elevation=?,way_point=? where WTPSC_CODE =?";
									rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
									rwsMasterData.pstmt.setString(1, assetHeadworks.getWtpType());
									rwsMasterData.pstmt.setString(2, assetHeadworks.getWtpMld());
									rwsMasterData.pstmt.setString(3, assetHeadworks.getWtpUnits());
									rwsMasterData.pstmt.setDouble(4, assetHeadworks.getWtpRateOfFiltration());
									rwsMasterData.pstmt.setString(5, assetHeadworks.getWtpSize());
									rwsMasterData.pstmt.setString(6, assetHeadworks.getWtpUnitsStandby());
									rwsMasterData.pstmt.setString(7, assetHeadworks.getWtpBackwashFreq());
									rwsMasterData.pstmt.setString(8, assetHeadworks.getWtpLocation());
									rwsMasterData.pstmt.setString(9, assetHeadworks.getHabCode());
									rwsMasterData.pstmt.setString(10, chkFilter);
									rwsMasterData.pstmt.setString(11, assetHeadworks.getLatitude());
									rwsMasterData.pstmt.setString(12, assetHeadworks.getLongitude());
									rwsMasterData.pstmt.setString(13, assetHeadworks.getElevation());
									rwsMasterData.pstmt.setString(14, assetHeadworks.getWaypoint());
									rwsMasterData.pstmt.setString(15, assetHeadworks.getWtpCode());
									insertionMode = "update";
								} else {
									query = "INSERT INTO " + Tab_Prifix + "WTP_SC_PARAM_TBL ("
											+ "WTP_TYPW,WTP_MLD,UNITS_NO,RATE_OF_FILTRATION,"
											+ "WTP_SIZE,UNITS_STANDBY,BACKWASH_FEQ,LOCATION,"
											+ "HAB_CODE,CHK_FILTER,latitude,longitude,"
											+ "elevation,way_point,asset_code,WTPSC_CODE) VALUES("
											+"?,nvl(?,0),nvl(?,0),nvl(?,0),"
											+ "nvl(?,0),nvl(?,0),nvl(?,0),?,"
											+ "?,?,?,?,"
											+ "?,?,?,?)";
									rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
									rwsMasterData.pstmt.setString(1, assetHeadworks.getWtpType());
									rwsMasterData.pstmt.setString(2, assetHeadworks.getWtpMld());
									rwsMasterData.pstmt.setString(3, assetHeadworks.getWtpUnits());
									rwsMasterData.pstmt.setDouble(4, assetHeadworks.getWtpRateOfFiltration());
									rwsMasterData.pstmt.setString(5, assetHeadworks.getWtpSize());
									rwsMasterData.pstmt.setString(6, assetHeadworks.getWtpUnitsStandby());
									rwsMasterData.pstmt.setString(7, assetHeadworks.getWtpBackwashFreq());
									rwsMasterData.pstmt.setString(8, assetHeadworks.getWtpLocation());
									rwsMasterData.pstmt.setString(9, assetHeadworks.getHabCode());
									rwsMasterData.pstmt.setString(10, chkFilter);
									rwsMasterData.pstmt.setString(11, assetHeadworks.getLatitude());
									rwsMasterData.pstmt.setString(12, assetHeadworks.getLongitude());
									rwsMasterData.pstmt.setString(13, assetHeadworks.getElevation());
									rwsMasterData.pstmt.setString(14, assetHeadworks.getWaypoint());
									rwsMasterData.pstmt.setString(15, assetCode);
									rwsMasterData.pstmt.setString(16, assetHeadworks.getWtpCode());
									insertionMode = "insert";
								}
								rowCount = rwsMasterData.pstmt.executeUpdate();
								daoMessage = getDaoMessage(insertionMode, rowCount);
							}
						} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02")
								|| assetTypeCode.equals("03") || assetTypeCode.equals("09"))
								&& assetCompTypeCode.equals("02") && assetSubCompTypeCode.equals("005")) {
							if (isDataAlreadyExists(dataSource, Tab_Prifix + "SUMP_M_SC_PARAM_TBL", "SUMPCODE",
									assetHeadworks.getSumpCode(), assetCode)) {
								query = "update " + Tab_Prifix + "SUMP_M_SC_PARAM_TBL  set "
										+ "SUMP_CONDITION=?,LOCATION=?,HAB_CODE=?,SUMP_MADE_OF=?,"
										+ "SUMP_DIAMETER=?,SUMP_DEPTH=?,SUMP_TYPE=?,SUMP_CAPACITY=?," 
										+ "FILLING_HR ?,EMPTY_TIME_HR=? where SUMPCODE =?";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, assetHeadworks.getSumpCondition());
								rwsMasterData.pstmt.setString(2, assetHeadworks.getSumpLocation());
								rwsMasterData.pstmt.setString(3, assetHeadworks.getHabCode());
								rwsMasterData.pstmt.setString(4, assetHeadworks.getSumpMadeOf());
								rwsMasterData.pstmt.setFloat(5, assetHeadworks.getSumpDiameter());
								rwsMasterData.pstmt.setFloat(6, assetHeadworks.getSumpDepth());
								rwsMasterData.pstmt.setString(7, assetHeadworks.getSumpType());
								rwsMasterData.pstmt.setString(8, assetHeadworks.getSumpCapacity());
								rwsMasterData.pstmt.setString(9, assetHeadworks.getSumpFillHr());
								rwsMasterData.pstmt.setString(10, assetHeadworks.getSumpEmptyHr());
								rwsMasterData.pstmt.setString(11, assetHeadworks.getSumpCode());
								insertionMode = "update";
							} else {
								query = "INSERT INTO " + Tab_Prifix + "SUMP_M_SC_PARAM_TBL(  "
										+ "SUMP_CONDITION,LOCATION,HAB_CODE," + "SUMP_MADE_OF,SUMP_DIAMETER,SUMP_DEPTH,"
										+ "SUMP_TYPE,SUMP_CAPACITY,FILLING_HR,EMPTY_TIME_HR,SUMPCODE,asset_code) VALUES("
										+ "?,?,?,?,?,?,?,?,?,?,?,?)";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, assetHeadworks.getSumpCondition());
								rwsMasterData.pstmt.setString(2, assetHeadworks.getSumpLocation());
								rwsMasterData.pstmt.setString(3, assetHeadworks.getHabCode());
								rwsMasterData.pstmt.setString(4, assetHeadworks.getSumpMadeOf());
								rwsMasterData.pstmt.setFloat(5, assetHeadworks.getSumpDiameter());
								rwsMasterData.pstmt.setFloat(6, assetHeadworks.getSumpDepth());
								rwsMasterData.pstmt.setString(7, assetHeadworks.getSumpType());
								rwsMasterData.pstmt.setString(8, assetHeadworks.getSumpCapacity());
								rwsMasterData.pstmt.setString(9, assetHeadworks.getSumpFillHr());
								rwsMasterData.pstmt.setString(10, assetHeadworks.getSumpEmptyHr());
								rwsMasterData.pstmt.setString(11, assetHeadworks.getSumpCode());
								rwsMasterData.pstmt.setString(12, assetCode);
								insertionMode = "insert";
							}
							rowCount = rwsMasterData.pstmt.executeUpdate();
							daoMessage = getDaoMessage(insertionMode, rowCount);
						} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02")
								|| assetTypeCode.equals("03") || assetTypeCode.equals("09"))
								&& assetCompTypeCode.equals("02") && assetSubCompTypeCode.equals("006")) {
							if (isDataAlreadyExists(dataSource, Tab_Prifix + "FP_BRIDGE_PARAM_TBL", "BRIDGE_CODE",
									assetHeadworks.getBridgeCode(), assetCode)) {
								query = "update " + Tab_Prifix + "FP_BRIDGE_PARAM_TBL  set "
										+ "HAB_CODE=?,LOCATION=? where "
										+ " BRIDGE_CODE  =?";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, assetHeadworks.getHabCode());
								rwsMasterData.pstmt.setString(2, assetHeadworks.getBridgeLocation());
								rwsMasterData.pstmt.setString(3, assetHeadworks.getBridgeCode());
								insertionMode = "update";
							} else {
								query = "insert into " + Tab_Prifix
										+ "FP_BRIDGE_PARAM_TBL(BRIDGE_CODE,asset_code,HAB_CODE,LOCATION) VALUES("
										+ "?,?,?,NVL(?,''))";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, assetHeadworks.getBridgeCode());
								rwsMasterData.pstmt.setString(2, assetCode);
								rwsMasterData.pstmt.setString(3, assetHeadworks.getHabCode());
								rwsMasterData.pstmt.setString(4, assetHeadworks.getBridgeLocation());
								
								insertionMode = "insert";
							}

							rowCount = rwsMasterData.pstmt.executeUpdate();
							daoMessage = getDaoMessage(insertionMode, rowCount);
						} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02")
								|| assetTypeCode.equals("03") || assetTypeCode.equals("09"))
								&& assetCompTypeCode.equals("02") && assetSubCompTypeCode.equals("007")) {
							if (isDataAlreadyExists(dataSource, Tab_Prifix + "PUMPHOUSE_PARAM_TBL", "PUMPHOUSE_CODE",
									assetHeadworks.getPumpHouseCode(), assetCode)) {
								query = "update " + Tab_Prifix + "PUMPHOUSE_PARAM_TBL  set "
										+ "LOCATION =?,HAB_CODE =?,AREA =? where PUMPHOUSE_CODE  =?";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, assetHeadworks.getPumpHouseLocation());
								rwsMasterData.pstmt.setString(2, assetHeadworks.getHabCode());
								rwsMasterData.pstmt.setString(3, assetHeadworks.getPumpHouseArea());
								rwsMasterData.pstmt.setString(4, assetHeadworks.getPumpHouseCode());
								insertionMode = "update";
							} else {
								query = "INSERT INTO " + Tab_Prifix
										+ "PUMPHOUSE_PARAM_TBL(   "
										+ "LOCATION ,HAB_CODE,AREA,PUMPHOUSE_CODE,ASSET_CODE) VALUES("
										+ "?,?,?,?,?)";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, assetHeadworks.getPumpHouseLocation());
								rwsMasterData.pstmt.setString(2, assetHeadworks.getHabCode());
								rwsMasterData.pstmt.setString(3, assetHeadworks.getPumpHouseArea());
								rwsMasterData.pstmt.setString(4, assetHeadworks.getPumpHouseCode());
								rwsMasterData.pstmt.setString(5, assetCode);
								insertionMode = "insert";
							}
							rowCount = rwsMasterData.pstmt.executeUpdate();
							daoMessage = getDaoMessage(insertionMode, rowCount);
						} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02")
								|| assetTypeCode.equals("03") || assetTypeCode.equals("09"))
								&& assetCompTypeCode.equals("02") && assetSubCompTypeCode.equals("008")) {
							if (isDataAlreadyExists(dataSource, Tab_Prifix + "WATCHMAN_PARAM_TBL", "WATCHMAN_CODE",
									assetHeadworks.getWatchManCode(), assetCode)) {
								query = "update " + Tab_Prifix + "WATCHMAN_PARAM_TBL  set "
										+ "HAB_CODE =?,LOCATION =? where "
										+ " WATCHMAN_CODE =?";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, assetHeadworks.getHabCode());
								rwsMasterData.pstmt.setString(2, assetHeadworks.getWatchManLocation());
								rwsMasterData.pstmt.setString(3, assetHeadworks.getWatchManCode());
								insertionMode = "update";
							} else {
								query = "INSERT INTO " + Tab_Prifix + "WATCHMAN_PARAM_TBL ("
										+ "HAB_CODE,LOCATION,WATCHMAN_CODE,ASSET_CODE) VALUES(" 
										+"?,?,?,?)";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, assetHeadworks.getHabCode());
								rwsMasterData.pstmt.setString(2, assetHeadworks.getWatchManLocation());
								rwsMasterData.pstmt.setString(3, assetHeadworks.getWatchManCode());
								rwsMasterData.pstmt.setString(4, assetCode);
								insertionMode = "insert";
							}
							rowCount = rwsMasterData.pstmt.executeUpdate();
							daoMessage = getDaoMessage(insertionMode, rowCount);
						}

						else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
								|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("02")
								&& assetSubCompTypeCode.equals("009")) {
							if (isDataAlreadyExists(dataSource, Tab_Prifix + "CW_COLLWELL_PARAM_TBL",
									"CW_COLLWELL_CODE", assetHeadworks.getCollectionWellCode(), assetCode)) {
								query = "update " + Tab_Prifix + "CW_COLLWELL_PARAM_TBL  set "
										+ " HAB_CODE =?, LOCATION = ?, CAPACITY =? where "
										+ " CW_COLLWELL_CODE  =?";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, assetHeadworks.getHabCode());
								rwsMasterData.pstmt.setString(2, assetHeadworks.getRwLocation());
								rwsMasterData.pstmt.setDouble(3, assetHeadworks.getRwCapacity());
								rwsMasterData.pstmt.setString(4, assetHeadworks.getCollectionWellCode());
								insertionMode = "update";
							} else {
								query = "INSERT INTO  " + Tab_Prifix + "CW_COLLWELL_PARAM_TBL("
										+ " HAB_CODE , LOCATION , CAPACITY,CW_COLLWELL_CODE,ASSET_CODE) VALUES(?,?,?,?,?)";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, assetHeadworks.getHabCode());
								rwsMasterData.pstmt.setString(2, assetHeadworks.getRwLocation());
								rwsMasterData.pstmt.setDouble(3, assetHeadworks.getRwCapacity());
								rwsMasterData.pstmt.setString(4, assetHeadworks.getCollectionWellCode());
								rwsMasterData.pstmt.setString(5, assetCode);
								insertionMode = "insert";
							}
							rowCount = rwsMasterData.pstmt.executeUpdate();
							daoMessage = getDaoMessage(insertionMode, rowCount);
						}
						else if (assetTypeCode.equals("08") && assetCompTypeCode.equals("01")
								&& assetSubCompTypeCode.equals("002")) {
							String chkFilter = assetHeadworks.getWtpSedimentationTankValue()
									+ assetHeadworks.getWtpHorizontalRoughingFilterValue()
									+ assetHeadworks.getWtpVerticalRoughingFilterValue();
							if (isDataAlreadyExists(dataSource, Tab_Prifix + "RWS_AST_WTP_SC_PARAM_TBL", "WTPSC_CODE",
									assetHeadworks.getWtpCode(), assetCode)) {
								query = "update " + Tab_Prifix + "RWS_AST_WTP_SC_PARAM_TBL set "
									+ "WTP_TYPW =?, WTP_MLD =nvl(?,0), UNITS_NO =nvl(?,0), UNITS_STANDBY =nvl(?,0), "
									+ "USE_CAPACITYMLD  =nvl(?,0),LOCATION =?, HAB_CODE =?,SHELTER_EXISTING = nvl(?,0),"
									+ "RWS_TANK_EXISTING=nvl(?,0),PWS_TANK_EXISTING=nvl(?,0) ,latitude=?,longitude=?,elevation=?,way_point=?,"
									+ "AVE_CANS_SUPPLIED=? where WTPSC_CODE =?";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, assetHeadworks.getWtpType());
								rwsMasterData.pstmt.setString(2, assetHeadworks.getWtpMld());
								rwsMasterData.pstmt.setString(3, assetHeadworks.getWtpUnits());
								rwsMasterData.pstmt.setString(4, assetHeadworks.getWtpUnitsStandby());
								rwsMasterData.pstmt.setFloat(5, assetHeadworks.getWtpNoOfHoursOfUsage());
								rwsMasterData.pstmt.setString(6, assetHeadworks.getWtpLocation());
								rwsMasterData.pstmt.setString(7, assetHeadworks.getHabCode());
								rwsMasterData.pstmt.setInt(8, assetHeadworks.getWtpShelter());
								rwsMasterData.pstmt.setString(9, assetHeadworks.getWtpRawWater());
								rwsMasterData.pstmt.setString(10, assetHeadworks.getWtpProductWater());
								rwsMasterData.pstmt.setString(11, assetHeadworks.getLatitude());
								rwsMasterData.pstmt.setString(12, assetHeadworks.getLongitude());
								rwsMasterData.pstmt.setString(13, assetHeadworks.getElevation());
								rwsMasterData.pstmt.setString(14, assetHeadworks.getWaypoint());
								rwsMasterData.pstmt.setString(15, assetHeadworks.getAveCansSupplied() );
								rwsMasterData.pstmt.setString(16, assetHeadworks.getWtpCode());
								insertionMode = "update";
							} else {
								query = "insert into  " + Tab_Prifix
										+ "RWS_AST_WTP_SC_PARAM_TBL("
										+ "WTP_TYPW,WTP_MLD,UNITS_NO,UNITS_STANDBY,USE_CAPACITYMLD"
										+ "LOCATION,HAB_CODE,SHELTER_EXISTING,RWS_TANK_EXISTING,"
										+ "PWS_TANK_EXISTING,latitude,longitude,elevation,"
										+ "way_point,AVE_CANS_SUPPLIED,asset_code,WTPSC_CODE) values("
										+ "?,nvl(?,0),nvl(?,0),nvl(?,0),?"
										+ "?,?,nvl(?,0),nvl(?,0),"
										+ "nvl(?,0),?,?,?,?,?,?,?)";
								rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
								rwsMasterData.pstmt.setString(1, assetHeadworks.getWtpType());
								rwsMasterData.pstmt.setString(2, assetHeadworks.getWtpMld());
								rwsMasterData.pstmt.setString(3, assetHeadworks.getWtpUnits());
								rwsMasterData.pstmt.setString(4, assetHeadworks.getWtpUnitsStandby());
								rwsMasterData.pstmt.setFloat(5, assetHeadworks.getWtpNoOfHoursOfUsage());
								rwsMasterData.pstmt.setString(6, assetHeadworks.getWtpLocation());
								rwsMasterData.pstmt.setString(7, assetHeadworks.getHabCode());
								rwsMasterData.pstmt.setInt(8, assetHeadworks.getWtpShelter());
								rwsMasterData.pstmt.setString(9, assetHeadworks.getWtpRawWater());
								rwsMasterData.pstmt.setString(10, assetHeadworks.getWtpProductWater());
								rwsMasterData.pstmt.setString(11, assetHeadworks.getLatitude());
								rwsMasterData.pstmt.setString(12, assetHeadworks.getLongitude());
								rwsMasterData.pstmt.setString(13, assetHeadworks.getElevation());
								rwsMasterData.pstmt.setString(14, assetHeadworks.getWaypoint());
								rwsMasterData.pstmt.setString(15, assetHeadworks.getAveCansSupplied() );
								rwsMasterData.pstmt.setString(16, assetCode);
								rwsMasterData.pstmt.setString(17, assetHeadworks.getWtpCode());
								insertionMode = "insert";
							}
							rowCount = rwsMasterData.pstmt.executeUpdate();
							daoMessage = getDaoMessage(insertionMode, rowCount);
						}
					}
				}
		/*	int[] updateCounts = rwsMasterData.stmt.executeBatch();
				for (int j = 0; j < updateCounts.length; j++) {
					rowCount = updateCounts.length;
				}
				rwsMasterData.conn.commit();
			}*/
			if (rowCount > 0) {
				query = "update RWS_ASSET_MAST_TBL set UPDATE_DATE=SYSDATE where asset_code=?";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.pstmt.executeUpdate();
			}
			daoMessage.setRowCount(rowCount);
			}
			return daoMessage;
		} catch (Exception e) {
			//Debug.println("Error in insertAssetSubCompParams=" + e);
			daoMessage.setMessage("An Internal Exception has occured while saving");
			e.printStackTrace();
		} finally {
			rwsMasterData.closeAll();
		}
		daoMessage.setRowCount(rowCount);
		return daoMessage;
	}

	public static DAOMessage getDaoMessage(String insertionMode, int rowCount) {
		DAOMessage daoMessage = new DAOMessage();
		if (insertionMode == null || insertionMode.equals("")) {
			if (rowCount > 0)
				daoMessage.setMessage("Saved Successfully");
			else
				daoMessage.setMessage("Cannot Be Saved");
		} else if (insertionMode.equals("insert")) {
			if (rowCount > 0)
				daoMessage.setMessage("Record Inserted Successfully");
			else
				daoMessage.setMessage("Record Cannot be Inserted Successfully");
		} else if (insertionMode.equals("update")) {
			if (rowCount > 0)
				daoMessage.setMessage("Record Updated Successfully");
			else
				daoMessage.setMessage("Record Cannot be Updated");
		}
		return daoMessage;
	}

	public static int insertHabInSub(DataSource dataSource, String tabPrifix, String tempSubCode, String habCode,
			String subCompCode, String assetCode) {
		int rowCount = 0;
		RwsMasterData rwsMasterData = new RwsMasterData();
		try {

			String query = null;
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.stmt1 = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = null;
			String q1 = "select count(*) from " + tabPrifix + " where " + tempSubCode + "='" + subCompCode + "'";
			int cnt = 0;
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(q1);
			if (rwsMasterData.rs.next()) {
				cnt = rwsMasterData.rs.getInt(1);
			}
			if (cnt > 0) {
				query = "update " + tabPrifix + " set hab_code='" + habCode + "' where " + tempSubCode + "='"
						+ subCompCode + "'";
			} else
				query = "insert into " + tabPrifix + "(" + tempSubCode + ",hab_code,asset_code) values('" + subCompCode
						+ "', '" + habCode + "' ,'" + assetCode + "')";
			rowCount = rwsMasterData.stmt1.executeUpdate(query);

		} catch (Exception e) {
			Debug.println("Error :" + e);
		} finally {
			try {
				// rwsMasterData.stmt1.close();
				// rwsMasterData.stmt.close();
				rwsMasterData.closeAll();
			} catch (Exception e) {
				Debug.println("Exception in closing connection" + e);
			}

		}

		return rowCount;
	}

	public static String getHabCode(DataSource dataSource, String tabPrifix, String tempSubCode, String subCompCode) {
		String habCode = "";
		RwsMasterData rwsMasterData = new RwsMasterData();
		try {
			String hab_code_field = "hab_code";
			if (tabPrifix.equals("RWS_OPEN_WELL_MAST_TBL"))
				hab_code_field = "HABITATION_CODE ";
			if (tabPrifix.equals("RWS_HP_SUBCOMP_PARAM_TBL"))
				hab_code_field = "substr(HP_CODE,1,16) ";
			String query = null;
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.rs = null;
			String q1 = "select " + hab_code_field + " from " + tabPrifix + " where " + tempSubCode + "=?";
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(q1);
			rwsMasterData.pstmt.setString(1, subCompCode);
			int cnt = 0;
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			if (rwsMasterData.rs.next()) {
				habCode = rwsMasterData.rs.getString(1);
				cnt++;
			}
			if (cnt == 0) {
				habCode = "";
			}
		} catch (Exception e) {
			Debug.println("Error in getHabCode :" + e);
		} finally {
			try {
				rwsMasterData.closeAll();
			} catch (Exception e) {
				Debug.println("Exception in closing connection" + e);
			}
		}
		return habCode;
	}

	public static RwsMaster getAsset(String assetCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		Collection panchRajs = new ArrayList();
		Collection sources = new ArrayList();
		Collection pipeLine = new ArrayList();
		Collection headWorks = new ArrayList();
		Collection reservior = new ArrayList();
		PanchRaj panchRaj = new PanchRaj();
		Asset_SubComponent assetSources = new Asset_SubComponent();
		Asset_HeadWorks assetHeadworks = new Asset_HeadWorks();
		Asset_PipeLine assetPipeline = new Asset_PipeLine();
		Asset_Reservior assetReservior = new Asset_Reservior();
		RwsMaster rwsMaster = null;
		String habCode = null;
		String assetTypeCode = null;
		try {
			//Debug.println("in getAsset");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.stmt1 = rwsMasterData.conn.createStatement();
			rwsMasterData.stmt2 = rwsMasterData.conn.createStatement();

			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("select * from RWS_ASSET_MAST_TBL where asset_code='" + assetCode + "'");
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setAssetCode(rwsMasterData.rs.getString(1));
				rwsMaster.setAssetName(rwsMasterData.rs.getString(2));
				rwsMaster.setAssetTypeCode(rwsMasterData.rs.getString(3));
				rwsMaster.setAssetTypeName(getAssetTypeName(dataSource, rwsMasterData.rs.getString(3)));
				Debug.println("$$$$$$$$$$$$$$$$" + getAssetTypeName(dataSource, rwsMasterData.rs.getString(3))
						+ "$$$$$$$$$$$$$");
				rwsMaster.setHabCode(rwsMasterData.rs.getString(4) + " "
						+ rwsMasterData.getHabName(rwsMasterData.rs.getString(4), rwsMasterData.conn));
				habCode = rwsMasterData.rs.getString(4);
				assetTypeCode = rwsMasterData.rs.getString(3);
				Debug.println("assetTypeCode=" + assetTypeCode + "habCode=" + habCode + "district="
						+ habCode.substring(0, 2) + "mandal=" + habCode.substring(5, 7) + "pcode="
						+ habCode.substring(12, 14) + "vcode=" + habCode.substring(7, 10));
				rwsMaster.setLocation(rwsMasterData.rs.getString(5));
				if (rwsMasterData.rs.getDate(6) != null)
					rwsMaster.setDateofCreation(df.format(rwsMasterData.rs.getDate(6)));
				rwsMaster.setAssetStatus(rwsMasterData.rs.getString(7));
				rwsMaster.setAssetCost(rwsMasterData.rs.getString(8));
				rwsMaster.setStartYear(rwsMasterData.rs.getString(9));
				rwsMaster.setEndYear(rwsMasterData.rs.getString(10));
				rwsMaster.setDcode(habCode.substring(0, 2));
				rwsMaster.setDistrict(getDistrictName(habCode.substring(0, 2), rwsMasterData.conn));
				rwsMaster.setMandal(habCode.substring(5, 7));
				rwsMaster.setMandalName(
						getMandalName(habCode.substring(0, 2), habCode.substring(5, 7), rwsMasterData.conn));
				rwsMaster.setPCode(getPanchayatName(habCode.substring(0, 2), habCode.substring(5, 7),
						habCode.substring(12, 14), rwsMasterData.conn));
				Debug.println("pname=" + getPanchayatName(habCode.substring(0, 2), habCode.substring(5, 7),
						habCode.substring(12, 14), rwsMasterData.conn));
				rwsMaster.setVCode(getVillageName(habCode.substring(0, 2), habCode.substring(5, 7),
						habCode.substring(12, 14), habCode.substring(7, 10), rwsMasterData.conn));
				Debug.println("vname=" + getVillageName(habCode.substring(0, 2), habCode.substring(5, 7),
						habCode.substring(12, 14), habCode.substring(7, 10), rwsMasterData.conn));
				rwsMaster.setCoc(rwsMasterData.rs.getString(11) + " "
						+ getCircleOfficeName("1", rwsMasterData.rs.getString(11), rwsMasterData.conn));
				rwsMaster.setDoc(rwsMasterData.rs.getString(12) + " " + getDivisionOfficeName("1",
						rwsMasterData.rs.getString(11), rwsMasterData.rs.getString(12), rwsMasterData.conn));
				rwsMaster.setSdoc(rwsMasterData.rs.getString(13) + " "
						+ getSubDivisionOfficeName("1", rwsMasterData.rs.getString(11), rwsMasterData.rs.getString(12),
								rwsMasterData.rs.getString(13), rwsMasterData.conn));

			}
			ResultSet rset = rwsMasterData.stmt1
					.executeQuery("select SCHEME_CODE from RWS_ASSET_SCHEME_TBL where ASSET_CODE='" + assetCode + "'");
			while (rset.next()) {
				rwsMaster.setSchemeCode(rset.getString(1));
			}
			String query = "select * from rws_panchayat_raj_tbl where panch_code in(select hab_code from rws_asset_hab_tbl where asset_code='"
					+ assetCode + "')";
			Debug.println("query in getAsset is " + query);
			rwsMasterData.rs1 = rwsMasterData.stmt1.executeQuery(query);

			int temp = 1;
			while (rwsMasterData.rs1.next()) {
				temp = 0;
				panchRaj = new PanchRaj();
				panchRaj.setHabCode(rwsMasterData.rs1.getString(2));
				panchRaj.setHabName(rwsMasterData.rs1.getString(3));
				panchRajs.add(panchRaj);
			}

			if (assetTypeCode.equals("04") || temp == 1) {
				ResultSet rs4 = rwsMasterData.stmt1
						.executeQuery("select * from rws_panchayat_raj_tbl where panch_code='" + habCode + "'");
				while (rs4.next()) {
					panchRaj = new PanchRaj();
					panchRaj.setHabCode(rs4.getString(2));
					panchRaj.setHabName(rs4.getString(3));
					panchRajs.add(panchRaj);
				}
			}
			rwsMaster.setAssetHabs(panchRajs);

			/*
			 * ResultSet rs2=stmt2.executeQuery("select * from rws_asset_subcomp_param_tbl
			 * where asset_code='"+assetCode+"'"); while(rs2.next()) { if(rs2.getInt(2) ==
			 * 1) { assetSources =new Asset_SubComponent();
			 * assetSources.setAssetSubComp(getAssetSubComponentName("01",rwsMasterData.rs.
			 * getString(3),rs2.getString(3),rwsMasterData.conn));
			 * assetSources.setDiameter(rs2.getString(4));
			 * assetSources.setDepth(rs2.getString(5));
			 * assetSources.setYield(rs2.getString(6));
			 * assetSources.setType(rs2.getString(7));
			 * assetSources.setDemand(rs2.getString(8));
			 * assetSources.setCapacity(rs2.getString(9));
			 * assetSources.setHead(rs2.getString(10)); sources.add(assetSources); } else
			 * if(rs2.getInt(2) == 2) { assetHeadworks = new Asset_HeadWorks();
			 * assetHeadworks.setAssetSubComp(getAssetSubComponentName("02",rwsMasterData.rs
			 * .getString(3),rs2.getString(3),rwsMasterData.conn));
			 * assetHeadworks.setDiameter(rs2.getString(4));
			 * assetHeadworks.setDepth(rs2.getString(5));
			 * assetHeadworks.setDesignPeriod(rs2.getString(11));
			 * assetHeadworks.setCapacity(rs2.getString(9));
			 * assetHeadworks.setSize(rs2.getString(12));
			 * assetHeadworks.setBedsPumpsets(rs2.getString(14));
			 * assetHeadworks.setRateOfFiltration(rs2.getString(15));
			 * assetHeadworks.setRemarks(rs2.getString(22)); headWorks.add(assetHeadworks);
			 * } else if(rs2.getInt(2) == 3) { assetPipeline = new Asset_PipeLine();
			 * assetPipeline.setAssetSubComp(getAssetSubComponentName("03",rwsMasterData.rs.
			 * getString(3),rs2.getString(3),rwsMasterData.conn));
			 * assetPipeline.setType(rs2.getString(7));
			 * assetPipeline.setPclass(rs2.getString(17));
			 * assetPipeline.setDiameter(rs2.getString(4));
			 * assetPipeline.setLength(rs2.getString(18));
			 * assetPipeline.setValves(rs2.getString(19));
			 * assetPipeline.setPublicStandPosts(rs2.getString(20));
			 * assetPipeline.setHouseConnections(rs2.getString(21));
			 * pipeLine.add(assetPipeline); } else if(rs2.getInt(2) == 4) { assetReservior =
			 * new Asset_Reservior();
			 * assetReservior.setAssetSubComp(getAssetSubComponentName("04",rwsMasterData.rs
			 * .getString(3),rs2.getString(3),rwsMasterData.conn));
			 * assetReservior.setOhsr(rs2.getString(9));
			 * assetReservior.setOhbr(rs2.getString(22)); reservior.add(assetReservior); } }
			 */
			rwsMaster.setAssetSubComponents(sources);
			rwsMaster.setAssetHeadWorks(headWorks);
			rwsMaster.setAssetPipeLine(pipeLine);
			rwsMaster.setAssetReservior(reservior);

		} catch (Exception e) {
			Debug.println("The error in getAsset=" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rwsMaster;
	}

	public static ArrayList getSelectedHabs(String assetCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		ArrayList panchRajs = new ArrayList();
		PanchRaj panchRaj = new PanchRaj();

		try {
			Debug.println("in getAsset");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt1 = rwsMasterData.conn.createStatement();

			String query = "select * from rws_panchayat_raj_tbl where panch_code in(select hab_code from rws_asset_hab_tbl where asset_code='"
					+ assetCode + "')";
			Debug.println("query in getAsset is " + query);
			rwsMasterData.rs1 = rwsMasterData.stmt1.executeQuery(query);

			while (rwsMasterData.rs1.next()) {

				panchRaj = new PanchRaj();
				panchRaj.setHabCode(rwsMasterData.rs1.getString(2));
				panchRaj.setHabName(rwsMasterData.rs1.getString(3));
				panchRajs.add(panchRaj);
			}

		} catch (Exception e) {
			Debug.println("The error in getAsset=" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return panchRajs;
	}

	public static ArrayList getAssetHabCodes(DataSource dataSource, String habCode, String pumpCode,
			String assetTypeCode) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		ArrayList panchRajs = new ArrayList();
		PanchRaj panchRaj = new PanchRaj();
		String schemeCode = habCode + pumpCode;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			String query = "select * from rws_panchayat_raj_tbl where panch_code in(select h.hab_code from rws_asset_hab_tbl h,rws_asset_scheme_tbl s where "
					+ "s.asset_code=h.asset_code and s.scheme_code=?)";
			rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt1.setString(1, schemeCode);
			rwsMasterData.rs1 = rwsMasterData.pstmt1.executeQuery();
			int temp = 1;
			while (rwsMasterData.rs1.next()) {
				temp = 0;
				panchRaj = new PanchRaj();
				panchRaj.setHabCode(rwsMasterData.rs1.getString(2));
				panchRaj.setHabName(rwsMasterData.rs1.getString(3));
				panchRajs.add(panchRaj);
			}

			if (temp == 1) {
				rwsMasterData.pstmt1= rwsMasterData.conn.prepareStatement("select * from rws_panchayat_raj_tbl where panch_code=?");
				rwsMasterData.pstmt1.setString(1, habCode);
				ResultSet rs4 = rwsMasterData.pstmt1
						.executeQuery();
				while (rs4.next()) {
					panchRaj = new PanchRaj();
					panchRaj.setHabCode(rs4.getString(2));
					panchRaj.setHabName(rs4.getString(3));
					panchRajs.add(panchRaj);
				}
			}
		} catch (Exception e) {
			Debug.println("exception at getAssetHabCodes in RwsMasterData: " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return panchRajs;
	}

	
	public static int updateAssetProgram(String assetCode, String program) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int count = 0;
		String query = "";
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			query = "update rws_asset_mast_tbl set programme_code=? where asset_code=?";
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt.setString(1, program);
			rwsMasterData.pstmt.setString(2, assetCode);
			count = rwsMasterData.pstmt.executeUpdate();
		} catch (Exception e) {
			Debug.println("Exception at  updateAssetProgram in RwsMasterData " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return count;

	}

	public static ArrayList getAssets(String coc, String doc, String sdoc, String mcode, String pcode, String vcode,
			String habCode, String assetTypeCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList assets = new ArrayList();
		ArrayList assets1 = new ArrayList();
		ArrayList assets2 = new ArrayList();
		ArrayList assets3 = new ArrayList();
		ArrayList assets4 = new ArrayList();
		ArrayList assets5 = new ArrayList();
		ArrayList assets6 = new ArrayList();
		ArrayList assets7 = new ArrayList();
		ArrayList assets8 = new ArrayList();
		ArrayList assets9 = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			String dcode = coc;
			String query = "";
			query = "select distinct AM.ASSET_CODE,AM.ASSET_NAME,AM.TYPE_OF_ASSET_CODE,AM.HAB_CODE,AM.LOCATION,AM.DATE_CREATION,"
					+ "AM.ASSET_STATUS, AM.ASSET_COST ,AM.START_YEAR,AM.END_YEAR,AST.SCHEME_CODE,atype.type_of_asset_name,d.dcode,d.dname,m.mcode,"
					+ "m.mname, p.pcode,p.pname,v.vcode, v.vname,h.panch_code,h.panch_name,nvl(am.programme_code,'')as programme_code from "
					+ "rws_district_tbl d,rws_mandal_tbl m,rws_panchayat_tbl p,rws_village_tbl v,rws_panchayat_raj_tbl h,rws_habitation_directory_tbl hd, "
					+ "RWS_ASSET_MAST_TBL AM,RWS_ASSET_SCHEME_TBL AST,rws_asset_type_tbl atype where d.dcode=m.dcode and m.dcode=p.dcode and "
					+ "m.mcode =p.mcode and p.dcode=v.dcode and p.mcode=v.mcode and p.pcode=v.pcode and substr (h.panch_code,1,2) = v.dcode and "
					+ "substr(h.panch_code,6,2) = v.mcode and substr(h.panch_code,13,2) = v.pcode and substr (h.panch_code,8,3) = v.vcode and h.panch_code=hd.hab_code "
					+ "and hd.coverage_status is not null and hd.coverage_status <> 'UI' and AST.asset_code=AM.asset_code and am.hab_code=hd.hab_code and "
					+ "am.type_of_asset_code=atype.type_of_asset_code";
			if (coc != null && !coc.equals(""))
				query += " and substr(AM.HAB_CODE,1,2)='" + coc + "'";
			if (mcode != null && !mcode.equals(""))
				query += " and substr(AM.HAB_CODE,6,2)='" + mcode + "'";
			if (habCode != null && !habCode.equals(""))
				query += " and AM.HAB_CODE='" + habCode + "'";
			if (assetTypeCode != null && !assetTypeCode.equals(""))
				query += " and AM.TYPE_OF_ASSET_CODE='" + assetTypeCode + "'";
			query += " order by am.type_of_asset_code";
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(query);
			int i = 0;
			while (rwsMasterData.rs.next()) {
				i = i + 1;
				rwsMaster = new RwsMaster();
				rwsMaster.setAssetCode(rwsMasterData.rs.getString(1));
				if (rwsMasterData.rs.getString(3).equals("01") || rwsMasterData.rs.getString(3).equals("02")
						|| rwsMasterData.rs.getString(3).equals("03") || rwsMasterData.rs.getString(3).equals("09")) {
					rwsMaster.setCompExists(	ComponentExistsOrNot(rwsMasterData.rs.getString(1), rwsMasterData.rs.getString(3)));
				} else {
					rwsMaster.setCompExists("");
				}

				rwsMaster.setAssetName(rwsMasterData.rs.getString(2));

				rwsMaster.setAssetTypeCode(rwsMasterData.rs.getString(3));
				// rwsMaster.setAssetTypeName(getAssetTypeName(dataSource,rwsMasterData.rs.getString(3)));
				rwsMaster.setAssetTypeName(rwsMasterData.rs.getString("TYPE_OF_ASSET_NAME"));
				/*
				 * rwsMasterData.stmt1 = rwsMasterData.conn.createStatement();
				 * //Debug.println("GETTING PANCHAYAT NAMES"+rwsMasterData.rs.getString(4));
				 * ResultSet rset=rwsMasterData.stmt1.executeQuery("select
				 * pa.pname,v.vname,p.panch_name from rws_panchayat_tbl pa,
				 * rws_panchayat_raj_tbl p, rws_village_tbl v where substr
				 * (p.panch_code,1,2)=pa.DCODE and substr (p.panch_code,6,2)=pa.MCODE and substr
				 * (p.panch_code,13,2)=pa.PCODE and substr(p.panch_code,1,2)=v.DCODE and substr
				 * (p.panch_code,6,2)=v.MCODE and substr(p.panch_code,13,2)=v.PCODE and substr
				 * (p.panch_code,8,3)=VCODE and
				 * panch_code='"+rwsMasterData.rs.getString(4)+"'"); if(rset.next()) {
				 * //Debug.println(rset.getString(1));
				 * rwsMaster.setPanchName(rset.getString(1));
				 * rwsMaster.setVillName(rset.getString(2));
				 * rwsMaster.setHabitation(rset.getString(3)); }// else {
				 * //Debug.println("in else -"); rwsMaster.setPanchName("- -
				 * -"); rwsMaster.setVillName("- - -"); rwsMaster.setHabitation("- - -"); }
				 */
				String prog_code = "";
				if (rwsMasterData.rs.getString("programme_code") != null)
					prog_code = rwsMasterData.rs.getString("programme_code");
				rwsMaster.setProgram(prog_code);
				rwsMaster.setPanchName(rwsMasterData.rs.getString("pname"));
				rwsMaster.setVillName(rwsMasterData.rs.getString("vname"));
				rwsMaster.setHabitation(rwsMasterData.rs.getString("panch_name"));
				rwsMaster.setHabCode(rwsMasterData.rs.getString(4));
				// rwsMaster.setHabName(rwsMasterData.getHabName(rwsMasterData.rs.getString(4),
				// rwsMasterData.conn));
				rwsMaster.setLocation(rwsMasterData.rs.getString(5));
				if (rwsMasterData.rs.getDate(6) != null)
					rwsMaster.setDateofCreation(df.format(rwsMasterData.rs.getDate(6)));
				rwsMaster.setAssetStatus(rwsMasterData.rs.getString(7));
				if (rwsMasterData.rs.getInt(7) == 1) {
					rwsMaster.setAssetStatusName("Working");
				} else if (rwsMasterData.rs.getInt(7) == 2) {
					rwsMaster.setAssetStatusName("Not Working");
				} else if (rwsMasterData.rs.getInt(7) == 3) {
					rwsMaster.setAssetStatusName("Dried");
				} else if (rwsMasterData.rs.getInt(7) == 4) {
					rwsMaster.setAssetStatusName("Seasonal");
				} else if (rwsMasterData.rs.getInt(7) == 5) {
					rwsMaster.setAssetStatusName("Condemed");
				}
				rwsMaster.setAssetCost(rwsMasterData.rs.getString(8));
				rwsMaster.setStartYear(rwsMasterData.rs.getString(9));
				rwsMaster.setEndYear(rwsMasterData.rs.getString(10));
				rwsMaster.setSchemeCode(rwsMasterData.rs.getString(11));
				if (assetTypeCode != null && !assetTypeCode.equals("")) {
					if (rwsMasterData.rs.getString(3).equals("01") || rwsMasterData.rs.getString(3).equals("02")
							|| rwsMasterData.rs.getString(3).equals("03")
							|| rwsMasterData.rs.getString(3).equals("09")) {
						rwsMaster.setTotalCovered(
								totalHabCoveredForAsset(rwsMasterData.rs.getString(1), rwsMasterData.rs.getString(3)));
						ArrayList sCount = getSourceCount(rwsMasterData.rs.getString(1), rwsMasterData.rs.getString(3));
						// Debug.println("scount:" + sCount.size());
						rwsMaster.setSurfaceSourceCount(Integer.parseInt((String) sCount.get(0)));
						rwsMaster.setSubsurfaceSourceCount(Integer.parseInt((String) sCount.get(1)));
					}
				}
				if (rwsMasterData.rs.getString("TYPE_OF_ASSET_CODE").equals("01"))
					assets1.add(rwsMaster);
				if (rwsMasterData.rs.getString("TYPE_OF_ASSET_CODE").equals("02"))
					assets2.add(rwsMaster);
				if (rwsMasterData.rs.getString("TYPE_OF_ASSET_CODE").equals("03"))
					assets3.add(rwsMaster);
				if (rwsMasterData.rs.getString("TYPE_OF_ASSET_CODE").equals("04"))
					assets4.add(rwsMaster);
				if (rwsMasterData.rs.getString("TYPE_OF_ASSET_CODE").equals("05"))
					assets5.add(rwsMaster);
				if (rwsMasterData.rs.getString("TYPE_OF_ASSET_CODE").equals("06"))
					assets6.add(rwsMaster);
				if (rwsMasterData.rs.getString("TYPE_OF_ASSET_CODE").equals("07"))
					assets7.add(rwsMaster);
				if (rwsMasterData.rs.getString("TYPE_OF_ASSET_CODE").equals("08"))
					assets8.add(rwsMaster);
				if (rwsMasterData.rs.getString("TYPE_OF_ASSET_CODE").equals("09"))
					assets9.add(rwsMaster);
			}
			assets.add(0, assets1);
			assets.add(1, assets2);
			assets.add(2, assets3);
			assets.add(3, assets4);
			assets.add(4, assets5);
			assets.add(5, assets6);
			assets.add(6, assets7);
			assets.add(7, assets8);
			assets.add(8, assets9);

		} catch (Exception e) {
			Debug.println("Exception at  getAssets in RwsMasterData is:   " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return assets;
	}


	public static boolean checkWorkInProjectShelf(String assetCode, Connection connn) {
		boolean flag = false;
		try {

			Statement stmt = connn.createStatement();
			ResultSet rs = stmt.executeQuery(
					"select * from   RWS_DDWS_SCHEME_DATA_PORT where WORK_ID='" + assetCode + "' and WORK_ASSET='A'");
			if (rs.next())
				flag = true;
		} catch (Exception e) {
			Debug.println("Exception in this function:" + e);
		}
		return flag;
	}

	public static String removeAsset(String assetCode, DataSource dataSource, String user) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int[] count = new int[5];
		String query = "";
		boolean subComponentsExists = false;
		String tabPrifix = "";
		String message = "";
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			boolean flag = false;
			if (!flag) {

				rwsMasterData.conn.setAutoCommit(false);
				query = "select * from rws_asset_mast_tbl where asset_code=?";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				String assetTypeCode = "";
				String assetName = "";
				String assetCost = "";
				while (rwsMasterData.rs.next()) {
					assetTypeCode = rwsMasterData.rs.getString("type_of_asset_code");
					assetName = rwsMasterData.rs.getString("asset_name");
					assetCost = rwsMasterData.rs.getString("asset_cost");
				}
				rwsMasterData.stmt=rwsMasterData.conn.createStatement();
				if (assetTypeCode.equals("01")) {
					tabPrifix = "RWS_AST_";
				} else if (assetTypeCode.equals("02")) {
					tabPrifix = "RWS_AST_";
				} else if (assetTypeCode.equals("03")) {
					tabPrifix = "RWS_AST_";
				} else if (assetTypeCode.equals("09"))
					tabPrifix = "RWS_AST_";
				if (assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
						|| assetTypeCode.equals("09")) {
					query = "select " + "(select count(*) from RWS_SOURCE_TBL WHERE ASSET_CODE=?)source_count," 
							+ "(select count(*) from " + tabPrifix	+ "SUBCOMP_PARAM_TBL WHERE ASSET_CODE=?)comcomp_param_count,"
							+ "(select count(*) from " + tabPrifix + "RW_COLLWELL_PARAM_TBL WHERE ASSET_CODE=?)rwcw_count," 
							+ "(select count(*) from " + tabPrifix + "SS_SC_PARAM_TBL WHERE ASSET_CODE=?)sstank_count,"
							+ "(select count(*) from " + tabPrifix + "WTP_SC_PARAM_TBL WHERE ASSET_CODE=?)filters_count,"
							+ "(select count(*) from " + tabPrifix + "SUMP_M_SC_PARAM_TBL WHERE ASSET_CODE=?)sump_count,"
							+ "(select count(*) from " + tabPrifix + "FP_BRIDGE_PARAM_TBL WHERE ASSET_CODE=?)fpb_count," 
							+ "(select count(*) from " + tabPrifix + "PUMPHOUSE_PARAM_TBL WHERE ASSET_CODE=?)pumphouse_count,"
							+ "(select count(*) from " + tabPrifix + "WATCHMAN_PARAM_TBL WHERE ASSET_CODE=?)watchman_count," 
							+ "(select count(*) from " + tabPrifix	+ "CW_COLLWELL_PARAM_TBL WHERE ASSET_CODE=?)cpws_cwcw_count,"
							+ "(select count(*) from " + tabPrifix + "PUMPINGMAIN_TBL WHERE ASSET_CODE=?)pumpingmain_count," 
							+ "(select count(*) from " + tabPrifix	+ "GRAVITYMAIN_TBL WHERE ASSET_CODE=?)gravitymain_count, "
							+ "(select count(*) from " + tabPrifix + "DISTRI_SC_PARAM_TBL WHERE ASSET_CODE=?)distribution_count," 
							+ "(select count(*) from " + tabPrifix	+ "OHSR_SC_PARAM_TBL WHERE ASSET_CODE=?)ohsr_count, "
							+ "(select count(*) from " + tabPrifix + "OHBR_SC_PARAM_TBL WHERE ASSET_CODE=?)ohbr_count, " 
							+ "(select count(*) from " + tabPrifix	+ "GLSR_SC_PARAM_TBL WHERE ASSET_CODE=?)glsr_count,"
							+ "(select count(*) from " + tabPrifix + "GLBR_SC_PARAM_TBL WHERE ASSET_CODE=?)glbr_count, " 
							+ "(select count(*) from " + tabPrifix	+ "BPT_PARAM_TBL WHERE ASSET_CODE=?)bpt_count, "
							+ "(select count(*) from " + tabPrifix + "CIS_SC_PARAM_TBL WHERE ASSET_CODE=?)cis_count, " 
							+ "(select count(*) from " + tabPrifix	+ "OTHERS_PARAM_TBL WHERE ASSET_CODE=?)others_param_count,"
							+ "(select count(*) from " + tabPrifix + "CHLORINATION_TBL WHERE ASSET_CODE=?)chlorination_param_count," 
							+ "(select count(*) from " + tabPrifix	+ "OANDM_PARAM_TBL WHERE ASSET_CODE=?)oandm_param_count from dual";
					rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
					rwsMasterData.pstmt.setString(1, assetCode);
					rwsMasterData.pstmt.setString(2, assetCode);
					rwsMasterData.pstmt.setString(3, assetCode);
					rwsMasterData.pstmt.setString(4, assetCode);
					rwsMasterData.pstmt.setString(5, assetCode);
					rwsMasterData.pstmt.setString(6, assetCode);
					rwsMasterData.pstmt.setString(7, assetCode);
					rwsMasterData.pstmt.setString(8, assetCode);
					rwsMasterData.pstmt.setString(9, assetCode);
					rwsMasterData.pstmt.setString(10, assetCode);
					rwsMasterData.pstmt.setString(11, assetCode);
					rwsMasterData.pstmt.setString(12, assetCode);
					rwsMasterData.pstmt.setString(13, assetCode);
					rwsMasterData.pstmt.setString(14, assetCode);
					rwsMasterData.pstmt.setString(15, assetCode);
					rwsMasterData.pstmt.setString(16, assetCode);
					rwsMasterData.pstmt.setString(17, assetCode);
					rwsMasterData.pstmt.setString(18, assetCode);
					rwsMasterData.pstmt.setString(19, assetCode);
					rwsMasterData.pstmt.setString(20, assetCode);
					rwsMasterData.pstmt.setString(21, assetCode);
					rwsMasterData.pstmt.setString(22, assetCode);
					rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
					
					while (rwsMasterData.rs.next()) {
						rwsMasterData.stmt.addBatch(
								"delete from RWS_ASSET_COMPONENT_IMAGE_TBL where asset_code='" + assetCode + "'");
						for (int i = 1; i < 23; i++) {
							if (rwsMasterData.rs.getInt(i) > 0) {
								if (i == 1) {
									query = "delete from RWS_SOURCE_TBL where asset_code='" + assetCode + "'";
									rwsMasterData.stmt.addBatch(query);
								}
								if (i == 2) {
									query = "delete from " + tabPrifix + "SUBCOMP_PARAM_TBL where asset_code='"
											+ assetCode + "'";
									rwsMasterData.stmt.addBatch(query);
								}
								if (i == 3) {
									query = "delete from " + tabPrifix + "RW_COLLWELL_PARAM_TBL where asset_code='"
											+ assetCode + "'";
									rwsMasterData.stmt.addBatch(query);
								}
								if (i == 4) {
									query = "delete from " + tabPrifix + "SS_SC_PARAM_TBL  where asset_code='"
											+ assetCode + "'";
									rwsMasterData.stmt.addBatch(query);
								}
								if (i == 5) {
									query = "delete from " + tabPrifix + "WTP_SC_PARAM_TBL  where asset_code='"
											+ assetCode + "'";
									rwsMasterData.stmt.addBatch(query);
								}
								if (i == 6) {
									query = "delete from " + tabPrifix + "SUMP_M_SC_PARAM_TBL  where asset_code='"
											+ assetCode + "'";
									rwsMasterData.stmt.addBatch(query);
								}
								if (i == 7) {
									query = "delete from " + tabPrifix + "FP_BRIDGE_PARAM_TBL  where asset_code='"
											+ assetCode + "'";
									rwsMasterData.stmt.addBatch(query);
								}
								if (i == 8) {
									query = "delete from " + tabPrifix + "PUMPHOUSE_PARAM_TBL  where asset_code='"
											+ assetCode + "'";
									rwsMasterData.stmt.addBatch(query);
								}
								if (i == 9) {
									query = "delete from " + tabPrifix + "WATCHMAN_PARAM_TBL  where asset_code='"
											+ assetCode + "'";
									rwsMasterData.stmt.addBatch(query);
								}
								if (i == 10) {
									query = "delete from " + tabPrifix + "CW_COLLWELL_PARAM_TBL  where asset_code='"
											+ assetCode + "'";
									rwsMasterData.stmt.addBatch(query);
								}
								if (i == 11) {
									Statement newst = rwsMasterData.conn.createStatement();
									ResultSet newrs = newst.executeQuery("select a.asset_code,a.PUMPINGMAIN_CODE from "
											+ tabPrifix
											+ "PUMPINGMAIN_TBL a, RWS_PUMPINGMAIN_PIPES_TBL b where a.asset_code='"
											+ assetCode + "' and a.PUMPINGMAIN_CODE=b.PM_CODE");
									if (newrs.next()) {
										rwsMasterData.stmt
												.addBatch("delete from  RWS_PUMPINGMAIN_PIPES_TBL where pm_code='"
														+ newrs.getString(2) + "'");
									}
									if (newrs != null)
										newrs.close();
									if (newst != null)
										newst.close();
									query = "delete from  " + tabPrifix + "PUMPINGMAIN_TBL where asset_code='"
											+ assetCode + "'";
									rwsMasterData.stmt.addBatch(query);
								}
								if (i == 12) {
									Statement newst = rwsMasterData.conn.createStatement();
									ResultSet newrs = newst.executeQuery("select a.asset_code,a.GRAVITYMAIN_CODE from "
											+ tabPrifix
											+ "GRAVITYMAIN_TBL a, rws_gravitymain_pipes_tbl b where a.asset_code='"
											+ assetCode + "' and a.GRAVITYMAIN_CODE=b.GM_CODE");
									if (newrs.next()) {
										rwsMasterData.stmt
												.addBatch("delete from  rws_gravitymain_pipes_tbl where gm_code='"
														+ newrs.getString(2) + "'");
									}
									if (newrs != null)
										newrs.close();
									if (newst != null)
										newst.close();
									query = "delete from " + tabPrifix + "GRAVITYMAIN_TBL where asset_code='"
											+ assetCode + "'";
									rwsMasterData.stmt.addBatch(query);
								}
								if (i == 13) {
									Statement newst = rwsMasterData.conn.createStatement();
									ResultSet newrs = newst.executeQuery("select a.asset_code,a.DISTRISC_CODE from "
											+ tabPrifix
											+ "DISTRI_SC_PARAM_TBL a, rws_distribution_pipes_tbl b where a.asset_code='"
											+ assetCode + "' and a.DISTRISC_CODE=b.DISTRISC_CODE");
									if (newrs.next()) {
										rwsMasterData.stmt.addBatch(
												"delete from  rws_distribution_pipes_tbl where DISTRISC_CODE='"
														+ newrs.getString(2) + "'");
									}
									if (newrs != null)
										newrs.close();
									if (newst != null)
										newst.close();
									query = "delete from " + tabPrifix + "DISTRI_SC_PARAM_TBL where asset_code='"
											+ assetCode + "'";
									rwsMasterData.stmt.addBatch(query);
								}
								if (i == 14) {
									Statement newst = rwsMasterData.conn.createStatement();
									ResultSet newrs = newst.executeQuery("select a.asset_code,a.OHSR_CODE from "
											+ tabPrifix
											+ "OHSR_SC_PARAM_TBL a, RWS_OHGLCI_HAB_LINK_TBL b where a.asset_code='"
											+ assetCode + "' and a.OHSR_CODE =b.SUBCOMP_CODE");
									if (newrs.next()) {
										rwsMasterData.stmt
												.addBatch("delete from  RWS_OHGLCI_HAB_LINK_TBL where SUBCOMP_CODE ='"
														+ newrs.getString(2) + "'");
									}
									if (newrs != null)
										newrs.close();
									if (newst != null)
										newst.close();
									query = "delete from " + tabPrifix + "OHSR_SC_PARAM_TBL  where asset_code='"
											+ assetCode + "'";
									rwsMasterData.stmt.addBatch(query);
								}
								if (i == 15) {
									query = "delete from " + tabPrifix + "OHBR_SC_PARAM_TBL  where asset_code='"
											+ assetCode + "'";
									rwsMasterData.stmt.addBatch(query);
								}
								if (i == 16) {
									Statement newst = rwsMasterData.conn.createStatement();
									ResultSet newrs = newst.executeQuery("select a.asset_code,a.OHSR_CODE from "
											+ tabPrifix
											+ "OHSR_SC_PARAM_TBL a, RWS_OHGLCI_HAB_LINK_TBL b where a.asset_code='"
											+ assetCode + "' and a.OHSR_CODE =b.SUBCOMP_CODE");
									if (newrs.next()) {
										rwsMasterData.stmt
												.addBatch("delete from  RWS_OHGLCI_HAB_LINK_TBL where SUBCOMP_CODE ='"
														+ newrs.getString(2) + "'");
									}
									if (newrs != null)
										newrs.close();
									if (newst != null)
										newst.close();
									query = "delete from " + tabPrifix + "GLSR_SC_PARAM_TBL  where asset_code='"
											+ assetCode + "'";
									rwsMasterData.stmt.addBatch(query);
								}
								if (i == 17) {
									query = "delete from " + tabPrifix + "GLBR_SC_PARAM_TBL  where asset_code='"
											+ assetCode + "'";
									rwsMasterData.stmt.addBatch(query);
								}
								if (i == 18) {
									query = "delete from " + tabPrifix + "BPT_PARAM_TBL  where asset_code='" + assetCode
											+ "'";
									rwsMasterData.stmt.addBatch(query);
								}
								if (i == 19) {
									Statement newst = rwsMasterData.conn.createStatement();
									ResultSet newrs = newst.executeQuery("select a.asset_code,a.OHSR_CODE from "
											+ tabPrifix
											+ "OHSR_SC_PARAM_TBL a, RWS_OHGLCI_HAB_LINK_TBL b where a.asset_code='"
											+ assetCode + "' and a.OHSR_CODE =b.SUBCOMP_CODE");
									if (newrs.next()) {
										rwsMasterData.stmt
												.addBatch("delete from  RWS_OHGLCI_HAB_LINK_TBL where SUBCOMP_CODE ='"
														+ newrs.getString(2) + "'");
									}
									if (newrs != null)
										newrs.close();
									if (newst != null)
										newst.close();
									query = "delete from " + tabPrifix + "CIS_SC_PARAM_TBL  where asset_code='"
											+ assetCode + "'";
									rwsMasterData.stmt.addBatch(query);
								}
								if (i == 20) {
									query = "delete from " + tabPrifix + "OTHERS_PARAM_TBL  where asset_code='"
											+ assetCode + "'";
									rwsMasterData.stmt.addBatch(query);
								}
								if (i == 21) {
									query = "delete from " + tabPrifix + "CHLORINATION_TBL  where asset_code='"
											+ assetCode + "'";
									rwsMasterData.stmt.addBatch(query);
								}
								if (i == 22) {
									query = "delete from " + tabPrifix + "OANDM_PARAM_TBL  where asset_code='"
											+ assetCode + "'";
									rwsMasterData.stmt.addBatch(query);
								}
							}
						}
					}
				}
				if (assetTypeCode.equals("04")) {
					/*
					 * query="select count(*) from RWS_HP_SUBCOMP_PARAM_TBL WHERE
					 * ASSET_CODE='"+assetCode+"'";
					 * 
					 * Debug.println("query is "+query);
					 * rwsMasterData.rs=rwsMasterData.stmt.executeQuery(query);
					 * while(rwsMasterData.rs.next()) {
					 * 
					 * if(rwsMasterData.rs.getInt(1)>0) { subComponentsExists=true; message="Record
					 * Cannot be deleted as SubComponents Exists"; } }
					 */
					query = "delete from RWS_ASSET_COMPONENT_IMAGE_TBL where asset_code='" + assetCode + "'";

					rwsMasterData.stmt.executeUpdate(query);

					query = "delete from RWS_HP_SUBCOMP_PARAM_TBL WHERE ASSET_CODE='" + assetCode + "'";
					rwsMasterData.stmt.executeUpdate(query);
					subComponentsExists = false;
				}
				if (assetTypeCode.equals("05")) {

					query = "delete from RWS_ASSET_COMPONENT_IMAGE_TBL where asset_code='" + assetCode + "'";

					rwsMasterData.stmt.executeUpdate(query);

					query = "delete from RWS_SHALLOWHANDPUMPS_TBL  WHERE ASSET_CODE='" + assetCode + "'";
					Debug.println("query is " + query);
					rwsMasterData.stmt.executeUpdate(query);
					subComponentsExists = false;
					/*
					 * query="select count(*) from RWS_SHALLOWHANDPUMPS_TBL WHERE
					 * ASSET_CODE='"+assetCode+"'";
					 * 
					 * Debug.println("query is "+query);
					 * rwsMasterData.rs=rwsMasterData.stmt.executeQuery(query);
					 * while(rwsMasterData.rs.next()) {
					 * 
					 * if(rwsMasterData.rs.getInt(1)>0) { subComponentsExists=true; message="Record
					 * Cannot be deleted as SubComponents Exists"; } }
					 */
				}
				if (assetTypeCode.equals("06")) {

					query = "delete from RWS_ASSET_COMPONENT_IMAGE_TBL where asset_code='" + assetCode + "'";

					rwsMasterData.stmt.executeUpdate(query);

					query = "delete from RWS_OPEN_WELL_MAST_TBL  WHERE ASSET_CODE='" + assetCode + "'";
					// Debug.println("query is " + query);
					rwsMasterData.stmt.executeUpdate(query);
					subComponentsExists = false;
					/*
					 * query="select count(*) from RWS_OPEN_WELL_MAST_TBL WHERE
					 * ASSET_CODE='"+assetCode+"'";
					 * 
					 * Debug.println("query is "+query);
					 * rwsMasterData.rs=rwsMasterData.stmt.executeQuery(query);
					 * while(rwsMasterData.rs.next()) {
					 * 
					 * if(rwsMasterData.rs.getInt(1)>0) { subComponentsExists=true; message="Record
					 * Cannot be deleted as SubComponents Exists"; } }
					 */
				}
				if (assetTypeCode.equals("07")) {

					query = "delete from RWS_ASSET_COMPONENT_IMAGE_TBL where asset_code='" + assetCode + "'";

					rwsMasterData.stmt.executeUpdate(query);

					query = "delete from RWS_OPENWELL_POND_TBL  WHERE ASSET_CODE='" + assetCode + "'";
					// Debug.println("query is " + query);
					rwsMasterData.stmt.executeUpdate(query);
					subComponentsExists = false;
					/*
					 * query="select count(*) from RWS_OPENWELL_POND_TBL WHERE
					 * ASSET_CODE='"+assetCode+"'";
					 * 
					 * Debug.println("query is "+query);
					 * rwsMasterData.rs=rwsMasterData.stmt.executeQuery(query);
					 * while(rwsMasterData.rs.next()) {
					 * 
					 * if(rwsMasterData.rs.getInt(1)>0) { subComponentsExists=true; message="Record
					 * Cannot be deleted as SubComponents Exists"; } }
					 */
				}
				if (assetTypeCode.equals("08")) {

					query = "delete from RWS_ASSET_COMPONENT_IMAGE_TBL where asset_code='" + assetCode + "'";

					rwsMasterData.stmt.executeUpdate(query);

					query = "select count(*) from RWS_AST_OTHERS_PARAM_TBL WHERE ASSET_CODE='" + assetCode + "'";

					rwsMasterData.rs = rwsMasterData.stmt.executeQuery(query);
					while (rwsMasterData.rs.next()) {

						if (rwsMasterData.rs.getInt(1) > 0) {
							subComponentsExists = true;
							message = "Record Cannot be deleted as SubComponents Exists";
						}
					}
				}
				if (!subComponentsExists) {
					rwsMasterData.stmt.addBatch("delete from RWS_ASSET_IMAGE_TBL where asset_code='" + assetCode + "'");
					rwsMasterData.stmt
							.addBatch("delete from RWS_ASSET_SUBCOMP_PARAM_TBL where asset_code='" + assetCode + "'");
					rwsMasterData.stmt.addBatch("delete from RWS_ASSET_HAB_TBL where asset_code='" + assetCode + "'");
					rwsMasterData.stmt
							.addBatch("delete from RWS_ASSET_SCHEME_TBL where asset_code='" + assetCode + "'");
					rwsMasterData.stmt.addBatch("delete from RWS_ASSET_MAST_TBL where asset_code='" + assetCode + "'");
					count = rwsMasterData.stmt.executeBatch();
				}
				if (count.length > 0) {
					String currentDate = new WorksData1().getServerDate();
					rwsMasterData.stmt4 = rwsMasterData.conn.createStatement();
					String insertQuery = "insert into rws_asset_deleted_tbl values('" + assetCode + "','" + assetName
							+ "','" + assetCost + "',to_date('" + currentDate + "','dd/mm/yyyy'),'" + user + "')";
					rwsMasterData.stmt.executeUpdate(insertQuery);
					message = "Record Deleted Successfully";
				}

			} else {
				message = "Record Deletion Failed - Asset Exists in DDWS Data";
			}

			rwsMasterData.conn.commit();
		} catch (Exception e) {
			rwsMasterData.conn.rollback();
			message = "Record Cannot be Deleted";
		} finally {
			rwsMasterData.closeAll();
		}
		return message;
	}

	public static int[] updateAsset(RwsMaster rwsMaster, ArrayList habs, ArrayList sources, ArrayList headworks,
			ArrayList pipeline, ArrayList reservior, String assetCompTypeCode, String assetSubCompTypeCode,
			DataSource dataSource) throws Exception {

		RwsMasterData rwsMasterData = new RwsMasterData();
		PanchRaj panchRaj = new PanchRaj();
		Asset_SubComponent assetSources = new Asset_SubComponent();
		Asset_HeadWorks assetHeadworks = new Asset_HeadWorks();
		Asset_PipeLine assetPipeline = new Asset_PipeLine();
		Asset_Reservior assetReservior = new Asset_Reservior();
		String habCode = "";
		String assetTypeCode = "";
		String query1 = "";
		String insertQuery = "";
		int[] updateCounts = new int[50];
		try {
			assetTypeCode = rwsMaster.getAssetTypeCode();
			rwsMasterData.conn = RwsOffices.getConn();
			String query = "select hab_code from RWS_ASSET_MAST_TBL where asset_code='" + rwsMaster.getAssetCode()
					+ "'";
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(query);
			if (rwsMasterData.rs.next())
				habCode = rwsMasterData.rs.getString(1);
			rwsMasterData.conn.setAutoCommit(false);
			query = "update RWS_ASSET_MAST_TBL set ASSET_NAME='" + rwsMaster.getAssetName().toUpperCase()
					+ "',LOCATION='" + rwsMaster.getLocation().toUpperCase() + "',DATE_CREATION=TO_DATE('"
					+ rwsMaster.getDateofCreation() + "','dd/mm/yyyy'),ASSET_COST =" + rwsMaster.getAssetCost()
					+ ",START_YEAR='" + rwsMaster.getStartYear() + "',END_YEAR='" + rwsMaster.getEndYear()
					+ "',UPDATE_DATE=SYSDATE," + " ASSET_STATUS=" + rwsMaster.getAssetStatus() + ",latitude="
					+ rwsMaster.getLatitude() + ",longitude=" + rwsMaster.getLongitude() + " elevation="
					+ rwsMaster.getElevation() + ",way_point=" + rwsMaster.getWaypoint() + " where asset_code='"
					+ rwsMaster.getAssetCode() + "'";
			rwsMasterData.stmt.addBatch(query);
			query = "delete from RWS_ASSET_HAB_TBL where asset_code='" + rwsMaster.getAssetCode() + "'";
			rwsMasterData.stmt.addBatch(query);
			for (int i = 0; i < habs.size(); i++) {
				panchRaj = (PanchRaj) habs.get(i);
				if (panchRaj.getHabCode() != null) {
					if (panchRaj.getHabCode().equals(habCode))
						Debug.println("habCode in equal=" + habCode);
					else
						rwsMasterData.stmt.addBatch("insert into RWS_ASSET_HAB_TBL(ASSET_CODE,HAB_CODE) values('"
								+ rwsMaster.getAssetCode() + "','" + panchRaj.getHabCode() + "'");
				}
			}

			for (int i = 0; i < sources.size(); i++) {
				assetSources = (Asset_SubComponent) sources.get(i);
				if (assetTypeCode.equals("04") && assetCompTypeCode.equals("01") && assetSubCompTypeCode.equals("001"))
					query1 = "update RWS_HP_SUBCOMP_PARAM_TBL set " + "LOCATION = '" + assetSources.getLocation()
							+ "',DIAMETER = nvl('" + assetSources.getDiameter() + ",''),CASING =nvl('"
							+ assetSources.getCasing() + "',''),"
							+ ",GEN_CONDITION = nvl('" + assetSources.getGenCondition() + "',''), GI_NO = nvl('"
							+ assetSources.getGino() + "',''), pipe_length = nvl('" + assetSources.getPipeLength()
							+ "',0)," + " PAINTED = nvl('" + assetSources.getPainted() + "',''), STATIC_WL=nvl('"
							+ assetSources.getStaticWaterLevel() + "" + "',''), SUMMER_WL=nvl('"
							+ assetSources.getSummerWaterLevel() + "',''), PLATFORM_EXISTING ='"
							+ assetSources.getPcond()
							+ "', SER_NO =nvl('" + assetSources.getSerno() + "','')," + " SER_HRS = nvl('"
							+ assetSources.getSerhrs() + "',''), REPAIRS='" + assetSources.getRepairs()
							+ "', PLATFORM_CONDITION='" + format(assetSources.getPlatformCondition()) + "', DRAIN='"
							+ assetSources.getDrain() + "', DRAIN_CONDITION='" + assetSources.getDrainCondition()
							+ "',DRAIN_SD='" + assetSources.getDrainsd() + "', DRAIN_LP ='" + assetSources.getDrainlp()
							+ "', HYGIENE ='" + assetSources.getHygiene() + "', AVG_TIME = nvl('"
							+ assetSources.getAvgtime() + "',''), P_YEILD =nvl('" + assetSources.getPyield()
							+ "',''), PYEILD_LOCAL = '" + assetSources.getPyieldLocal() + "'," + "PERIOD ='"
							+ assetSources.getPeriod() + "',DEPTH= nvl('" + assetSources.getDepth()
							+ "',''),QUALITY_AFFECTED='" + assetSources.getQualityAffected() + "'," + " FLOURIDE =nvl('"
							+ assetSources.getFlouride() + "',''), BRAKISH =nvl('" + assetSources.getBrakish()
							+ "',''), IRON =nvl('" + assetSources.getIron() + "',''), cont_others_type = '"
							+ assetSources.getOtherspecify() + "' where ASSET_CODE='" + rwsMaster.getAssetCode() + "'";

				else if (assetTypeCode.equals("01") && assetCompTypeCode.equals("01")
						&& assetSubCompTypeCode.equals("001"))
					query1 = "update RWS_AST_SUBCOMP_PARAM_TBL set POP_DES=" + assetSources.getPopDes() + ",SOURCE ='"
							+ assetSources.getSource() + "',SOUR_QLTY='" + assetSources.getSourceQuality()
							+ "',SOUR_YEILD=" + assetSources.getSourceYield() + ",SOUR_DEPEN='"
							+ assetSources.getSourceDepend() + "',SOUR_DEPTH=" + assetSources.getSourceDepth()
							+ ",SOUR_DIAMETER =" + assetSources.getSourceDiameter() + ",SOUR_COND='"
							+ assetSources.getSourceCondition() + "',SOUR_SWL =" + assetSources.getSourceSwl()
							+ ",SOUR_NWL=" + assetSources.getSourceNwl() + ",PH_SIZE='" + assetSources.getPhSize()
							+ "',PH_COND='" + assetSources.getPhCondition() + "',PH_TYPE='" + assetSources.getPhType()
							+ "',PUMP_NAME ='" + assetSources.getPumpName() + "',PUMP_CPTY="
							+ assetSources.getPumpCapacity() + ",PUMP_TYPE='" + assetSources.getPumpType()
							+ "',YEAR_PUR=" + assetSources.getPurYear() + ",HR_RUN=" + assetSources.getHrRun()
							+ ",HR_SIN=" + assetSources.getHrSin() + ",HR_MS =" + assetSources.getHrMs() + ",STA_EXE='"
							+ assetSources.getStaExe() + "',PUMP_DUTY_LPM=" + assetSources.getPumpDutyLpm()
							+ ",PUMP_DUTY_HEAD=" + assetSources.getPumpDutyHead() + " where ASSET_CODE='"
							+ rwsMaster.getAssetCode() + "'";
				rwsMasterData.stmt.addBatch(query1);
			}

			for (int i = 0; i < pipeline.size(); i++) {
				assetPipeline = (Asset_PipeLine) pipeline.get(i);
				String query3 = "update  RWS_ASSET_SUBCOMP_PARAM_TBL set type='" + assetPipeline.getType() + "',class='"
						+ assetPipeline.getPclass() + "',diameter='" + assetPipeline.getDiameter() + "',length='"
						+ assetPipeline.getLength() + "',valves='" + assetPipeline.getValves() + "',PUBLIC_POSTS='"
						+ assetPipeline.getPublicStandPosts() + "',HOUSE_CONN='" + assetPipeline.getHouseConnections()
						+ "' where asset_code='" + rwsMaster.getAssetCode() + "' and ASSET_SUBCOMPONENT_CODE='"
						+ getAssetSubCompCode(getAssetTypeCode(rwsMaster.getAssetTypeCode(), rwsMasterData.conn), "03",
								assetPipeline.getAssetSubComp(), rwsMasterData.conn)
						+ "' and ASSET_COMPONENT_CODE='03'";

				rwsMasterData.stmt.addBatch(query3);
			}
			for (int i = 0; i < reservior.size(); i++) {
				assetReservior = (Asset_Reservior) reservior.get(i);
				if (assetTypeCode.equals("01") && assetCompTypeCode.equals("04") && assetSubCompTypeCode.equals("001"))
					query1 = "update RWS_AST_OHSR_SC_PARAM_TBL  set  OHSR_NO=" + assetReservior.getOhsrNo()
							+ ",OHSR_LTS =" + assetReservior.getOhrsLts() + ",OHSR_LOCATION ='"
							+ assetReservior.getOhsrLocation() + "',OHSR_CAP_LTS=" + assetReservior.getOhsrCapacityLts()
							+ ",OHSR_MADE='" + assetReservior.getOhsrMade() + "',OHSR_HT =" + assetReservior.getOhsrHt()
							+ ",OHSR_COND='" + assetReservior.getOhsrCond() + "',OHSR_FILL_HRS ="
							+ assetReservior.getOhsrFillHrs() + ",OHSR_EMPTY=" + assetReservior.getOhsrEmptyHrs()
							+ ",OHSR_HYG='" + assetReservior.getOhsrHygiene() + "',OHSR_FEN='"
							+ assetReservior.getOhsrFen() + "' water_qty='" + assetReservior.getOhsrLwl() + "'";
				else if (assetTypeCode.equals("03") && assetCompTypeCode.equals("04")
						&& assetSubCompTypeCode.equals("001"))
					query1 = "update RWS_AST_OHSR_SC_PARAM_TBL  set  OHSR_CODE='" + assetReservior.getOhsrCode()
							+ "',OHSR_CAP_LTS =" + assetReservior.getOhsrCapacityLts() + ",OHSR_LOC ='"
							+ assetReservior.getOhsrLocation() + "',OHSR_SATGES =" + assetReservior.getOhsrStages()
							+ ",water_qty=" + assetReservior.getOhsrLwl() + ",OHSR_MWL  =" + assetReservior.getOhsrMwl()
							+ ",OHSR_FILL_HR =" + assetReservior.getOhsrFillHrs() + ",OHSR_EMPTY_HR="
							+ assetReservior.getOhsrEmptyHrs() + "";
				else if (assetTypeCode.equals("03") && assetCompTypeCode.equals("04")
						&& assetSubCompTypeCode.equals("002"))
					query1 = "update RWS_AST_OHBR_SC_PARAM_TBL  set  OHBR_CODE='" + assetReservior.getOhbrCode()
							+ "',OHBR_CAP_LTS  =" + assetReservior.getOhbrCapacityLts() + ",OHBR_LOC ='"
							+ assetReservior.getOhbrLocation() + "',OHBR_SATGES =" + assetReservior.getOhbrStages()
							+ ",OHBR_LWL=" + assetReservior.getOhbrLwl() + ",OHBR_MWL  =" + assetReservior.getOhbrMwl()
							+ ",OHBR_FILL_HR =" + assetReservior.getOhbrFillHrs() + ",OHBR_EMPTY_HR="
							+ assetReservior.getOhbrEmptyHrs() + "";
				else if (assetTypeCode.equals("03") && assetCompTypeCode.equals("04")
						&& assetSubCompTypeCode.equals("003"))
					query1 = "update RWS_AST_GLSR_SC_PARAM_TBL  set  GLSR_CODE='" + assetReservior.getGlsrCode()
							+ "',GLSR_CAP_LTS  =" + assetReservior.getGlsrCapacityInLts() + ",GLSR_LOC ='"
							+ assetReservior.getGlsrLocation() + "',GLSR_SATGES =" + assetReservior.getGlsrStages()
							+ ",GLSR_LWL =" + assetReservior.getGlsrLwl() + ",GLSR_MWL   ="
							+ assetReservior.getGlsrMwl() + ",GLSR_FILL_HR =" + assetReservior.getGlsrFillHrs()
							+ ",GLSR_EMPTY_HR=" + assetReservior.getGlsrEmptyHrs() + ", water_qty='"
							+ assetReservior.getOhsrLwl() + "'";
				else if (assetTypeCode.equals("03") && assetCompTypeCode.equals("04")
						&& assetSubCompTypeCode.equals("004"))
					query1 = "update RWS_AST_GLBR_SC_PARAM_TBL  set  GLBR_CODE='" + assetReservior.getGlbrCode()
							+ "',GLBR_CAP_LTS  =" + assetReservior.getGlbrCapacityInLts() + ",GLBR_LOC ='"
							+ assetReservior.getGlbrLocation() + "',GLBR_LWL =" + assetReservior.getGlbrLwl()
							+ ",GLBR_MWL   =" + assetReservior.getGlbrMwl() + ",GLBR_FILL_HR ="
							+ assetReservior.getGlbrFillHrs() + ",GLBR_EMPTY_HR=" + assetReservior.getGlbrEmptyHrs()
							+ "";
				rwsMasterData.stmt.addBatch(query1);
			}

			updateCounts = rwsMasterData.stmt.executeBatch();
			rwsMasterData.conn.commit();
		} catch (Exception b) {
			Debug.println("Update counts in UpdateAsset is: " + b);
		} finally {
			rwsMasterData.closeAll();
		}
		return updateCounts;
	}

	
	public static String checkAssetCode(String assetCode) {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String assetCodee = null;
		String query = "";
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			query = "SELECT MAX(to_number(ASSET_CODE))+1 FROM RWS_ASSET_MAST_TBL where asset_code like ?";
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt.setString(1, assetCode.substring(0, 10)+"%");
		//	Debug.println("query in check AssetCode=" + query);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			if (rwsMasterData.rs.next()) {
				assetCodee = rwsMasterData.rs.getString(1);
				if (!assetCodee.equals(assetCode)) {
					if (assetCodee == null) {
						assetCodee = "0001";
					} else if (assetCodee.length() == 1) {
						assetCodee = "000" + assetCodee;
					} else if (assetCodee.length() == 2) {
						assetCodee = "00" + assetCodee;
					} else if (assetCodee.length() == 3) {
						assetCodee = "0" + assetCodee;
					}
					assetCode = assetCodee;
				}
			}
		} catch (Exception e) {
			Debug.println("Exception at  checkAssetCode in RwsMasterData : " + e);
		} finally {
			try {
				rwsMasterData.closeAll();
			} catch (Exception e1) {
				e1.printStackTrace();
			}
		}
//		Debug.println("Asset Code in check:" + assetCode);
		return assetCode;
	}

	
	public static String getAssetCode(String coc, String doc, String sdoc, String habCode, String typeOfAsset,
			DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String assetCode = null;
		String query = "";
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			/*
			 * query = "SELECT MAX(to_number(ASSET_CODE))+1 FROM RWS_ASSET_MAST_TBL where
			 * TYPE_OF_ASSET_CODE='" + typeOfAsset + "' and CIRCLE_OFFICE_CODE='" + coc + "'
			 * and DIVISION_OFFICE_CODE='" + doc + "' and SUBDIVISION_OFFICE_CODE='" + sdoc
			 * + "' and substr(HAB_CODE,6,2)='" + habCode.substring(5,7) + "'";
			 */
			/*
			 * query = "SELECT MAX(to_number(ASSET_CODE))+1 FROM RWS_ASSET_MAST_TBL where
			 * substr(asset_code,7,2)='" + typeOfAsset + "' and
			 * CIRCLE_OFFICE_CODE='" + coc + "' and DIVISION_OFFICE_CODE='" + doc +
			 * "' and SUBDIVISION_OFFICE_CODE='" + "' and
			 * substr(HAB_CODE,6,2)='" + habCode.substring(5,7) + "'"; + sdoc
			 */
			// query = "SELECT MAX(to_number(ASSET_CODE))+1 FROM
			// RWS_ASSET_MAST_TBL where substr
			// (asset_code,7,2)='"+typeOfAsset+"' and
			// substr(hab_code,1,2)='"+habCode.substring(0,2)+"' and
			// substr(hab_code,6,2)='"+habCode.substring(5,7)+"'";// and
			// hab_code='"+habCode+"'";

			query = "SELECT max(to_number(substr(ASSET_CODE,11,4)))+1  FROM RWS_ASSET_MAST_TBL where substr (asset_code,1,4)='0000' and  "
					+ "substr (asset_code,7,2)=? and  substr (asset_code,5,2)=? and substr (asset_code,9,2)=?";
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt.setString(1, typeOfAsset);
			rwsMasterData.pstmt.setString(2, habCode.substring(0, 2));
			rwsMasterData.pstmt.setString(3, habCode.substring(5, 7));
		//	Debug.println("query in getAssetCode=" + query);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			rwsMasterData.rs.next();
			assetCode = rwsMasterData.rs.getString(1);
			if (assetCode == null) {
				assetCode = "0001";
			} else if (assetCode.length() == 1) {
				assetCode = "000" + assetCode;
			} else if (assetCode.length() == 2) {
				assetCode = "00" + assetCode;
			} else if (assetCode.length() == 3) {
				assetCode = "0" + assetCode;
			}

		} catch (Exception e) {
			Debug.println("Exception at getAssetCode in RwsMasterData : " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return assetCode;
	}
	public static ArrayList getAssetCompTypesOnAssetType(String assetTypeCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList assets = new ArrayList();
		try {
			Debug.println("in getAssetCompTypesOnAssetType");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("select * from RWS_ASSET_COMPONENT_TYPE_TBL where TYPE_OF_ASSET_CODE=" + assetTypeCode
							+ " order by ASSET_COMPONENT_CODE");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setAssetCompTypeCode(rwsMasterData.rs.getString("ASSET_COMPONENT_CODE"));
				rwsMaster.setDistNoName(rwsMasterData.rs.getString("ASSET_COMPONENT_CODE") + " - "
						+ rwsMasterData.rs.getString("ASSET_COMPONENT_NAME"));
				assets.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The error in getAssetCompTypesOnAssetType=" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return assets;
	}

	// **********************************Public Represntatives
	// methods**********************************

	public static int insertPublicRep(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			// Debug.println("in insertPublicRep");
			rwsMasterData.conn = RwsOffices.getConn();
			String qry = "insert into RWS_PUBLIC_REP_TBL values(?,?)";
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(qry);
			rwsMasterData.pstmt.setString(1, rwsMaster.getPublicRepCode());
			rwsMasterData.pstmt.setString(2, rwsMaster.getPublicRepName().toUpperCase());
			rowCount = rwsMasterData.pstmt.executeUpdate();
		} catch (SQLException sqle) {
			int errorCode = sqle.getErrorCode();
			if (errorCode == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			Debug.println("The error in insertPublicRep=" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static RwsMaster getPublicRep(String publicRepCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		try {
			// Debug.println("in getPublicRep");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn
					.prepareStatement("select * from RWS_PUBLIC_REP_TBL where REP_CODE=?");
			rwsMasterData.pstmt.setString(1, publicRepCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setPublicRepCode(rwsMasterData.rs.getString(1));
				rwsMaster.setPublicRepName(rwsMasterData.rs.getString(2));
			}
		} catch (Exception e) {
			Debug.println("The error in getPublicRep=" + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return rwsMaster;
	}

	public static ArrayList getPublicReps(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList publicReps = new ArrayList();
		try {
			// Debug.println("in getPublicReps");
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("select * from RWS_PUBLIC_REP_TBL order by to_number(rep_code)");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setPublicRepCode(rwsMasterData.rs.getString(1));
				rwsMaster.setPublicRepName(rwsMasterData.rs.getString(2));
				publicReps.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The error in getPublicReps=" + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return publicReps;
	}

	public static int removePublicRep(String publicRepCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int del = 0;
		try {
			// Debug.println("in removePublicRep");
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn
					.prepareStatement("delete from RWS_PUBLIC_REP_TBL where REP_CODE=?");
			rwsMasterData.pstmt.setString(1, publicRepCode);
			del = rwsMasterData.pstmt.executeUpdate();
		} catch (Exception e) {
			Debug.println("The error in removePublicRep=" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return del;
	}

	public static int updatePublicRep(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int updateCount = 0;
		try {
			// Debug.println("in updatePublicRep");
			rwsMasterData.conn = RwsOffices.getConn();
			String qry = "update  RWS_PUBLIC_REP_TBL set REP_NAME=? where REP_CODE=?";
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(qry);
			rwsMasterData.pstmt.setString(1, rwsMaster.getPublicRepName().toUpperCase());
			rwsMasterData.pstmt.setString(2, rwsMaster.getPublicRepCode());
			updateCount = rwsMasterData.pstmt.executeUpdate();
		} catch (SQLException sqle) {
			int errorCode = sqle.getErrorCode();
			if (errorCode == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			Debug.println("The error in updatePublicRep=" + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return updateCount;
	}

	public static String getPublicRepCode(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String code = null;
		try {
			// Debug.println("in getPublicRepCode");
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("SELECT MAX(to_number(REP_CODE))+1 FROM RWS_PUBLIC_REP_TBL");
			rwsMasterData.rs.next();
			code = rwsMasterData.rs.getString(1);
			if (code == null) {
				code = "01";
			} else if (code.length() == 1) {
				code = "0" + code;
			}
		} catch (Exception e) {
			Debug.println("The error in getPublicRepCode in RwsMasterData " + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return code;
	}

	public static int insertInstitute(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			// Debug.println("in insertInstitute");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rowCount = rwsMasterData.stmt.executeUpdate("insert into RWS_PUBLIC_INSTITUTE_TBL values('"
					+ rwsMaster.getInstituteCode() + "','" + rwsMaster.getInstituteName().toUpperCase() + "')");
		} catch (SQLException e) {
			// Debug.println("The error in insertInstitute" + e);
			// Debug.println("The error code is " + e.getErrorCode());
			int errorCode = e.getErrorCode();
			if (errorCode == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			Debug.println("Error in insertInstitute " + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static RwsMaster getInstitute(String instituteCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("select * from RWS_PUBLIC_INSTITUTE_TBL where INST_CODE=?");
			rwsMasterData.pstmt.setString(1, instituteCode);
			rwsMasterData.rs = rwsMasterData.pstmt	.executeQuery();
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setInstituteCode(rwsMasterData.rs.getString(1));
				rwsMaster.setInstituteName(rwsMasterData.rs.getString(2));
			}
		} catch (Exception e) {
			Debug.println("Exception at getInstitute of RwsMAsterData is : " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return rwsMaster;
	}


	public ArrayList getInstitutes(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList institutes = new ArrayList();

		try {
			Debug.println("in getInstitutes");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(
					"select inst_code,inst_name from RWS_PUBLIC_INSTITUTE_TBL order by to_number(INST_CODE)");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setInstituteCode(rwsMasterData.rs.getString(1));
				rwsMaster.setInstituteName(rwsMasterData.rs.getString(2));
				rwsMaster.setInsDisplay(rwsMasterData.rs.getString(1) + "-" + rwsMasterData.rs.getString(2));
				institutes.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The error in getInstitutes=" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return institutes;
	}

	// ****************************************************************************************//
	public int[] insertHabStatus(RwsMaster rwsMaster, ArrayList insts, ArrayList waterSupply, DataSource dataSource)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		Debug.println("in insertHabStatus");
		HabInstitute habInstitute = new HabInstitute();
		ContaminationTypes contaminationTypes = null;
		HabWaterSupply habWS = new HabWaterSupply();
		int[] updateCounts = new int[insts.size()];
		String habCode = rwsMaster.getHabCode();
		boolean recordNotExistsInHabitationDirectoryTbl = true, exists = false;
		boolean insUpdate = false, cnsUpdate = false, flag = false;
		String StatusDate = null, previousCoverageStatus = null;
		rwsMasterData.conn = RwsOffices.getConn();
		rwsMasterData.stmt1 = rwsMasterData.conn.createStatement();
		// int freezedYear=2006;

		// ***********code to get the freezed year
		/*
		 * java.util.Date today = new java.util.Date(); int jFreezedYear=0; //
		 * java.text.SimpleDateFormat sdf1 = new
		 * java.text.SimpleDateFormat("dd-MMM-yy hh:mm:ss a");
		 * java.text.SimpleDateFormat sdf1 = new java.text.SimpleDateFormat("yyyy"); int
		 * currentYear = Integer.parseInt(sdf1.format(today)); sdf1 = new
		 * java.text.SimpleDateFormat("mm"); int currentMonth =
		 * Integer.parseInt(sdf1.format(today)); sdf1 = new
		 * java.text.SimpleDateFormat("dd"); int currentDay =
		 * Integer.parseInt(sdf1.format(today)); Calendar c1 = Calendar.getInstance();
		 * Calendar c2 = Calendar.getInstance(); c1.set(currentYear, currentMonth ,
		 * currentDay); c2.set(currentYear, 3 , 31); if(c1.before(c2))
		 * jFreezedYear=currentYear-2; else jFreezedYear=currentYear-1;
		 */
		/// end****************************
		// int freezedYear=jFreezedYear;
		int freezedYear = 2006;
		Debug.println("freezed Year in insertHabStatus() is " + freezedYear);
		int habYear = 0;

		try {
			Debug.println(
					"in insertHabStatus  in second same method 23-01-2012 not updated here gis data not used this .java");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.conn.setAutoCommit(false);
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			// rwsMasterData.stmt1 = rwsMasterData.conn.createStatement();
			Debug.println("habCode=" + habCode);
			// String query = "select count(*) from RWS_HABITATION_DIRECTORY_TBL
			// where hab_code='"+ habCode + "'";
			String query = "select hd.*,to_char(hd.status_date,'yyyy')as habYear from RWS_HABITATION_DIRECTORY_TBL hd  where hab_code='"
					+ habCode + "'";

			rwsMasterData.rs = rwsMasterData.stmt1.executeQuery(query);
			if (rwsMasterData.rs.next()) {
				// if (rwsMasterData.rs.getInt(1) > 0)
				StatusDate = df.format(rwsMasterData.rs.getDate("STATUS_DATE"));
				habYear = rwsMasterData.rs.getInt("HABYEAR");
				previousCoverageStatus = rwsMasterData.rs.getString("COVERAGE_STATUS");
				recordNotExistsInHabitationDirectoryTbl = false;
			}
			Debug.println("qa " + rwsMaster.getQualityAffected() + "con named" + rwsMaster.getContamName() + "perc "
					+ rwsMaster.getPercent());
			String finyr = rwsMaster.getHabYear();
			Debug.println("fin yrs 6666666 sliue  " + finyr);
			String finyrMon = finyr.substring(3, 5);
			finyr = finyr.substring(6, 10);
			Debug.println("DT vsliue  " + finyrMon);
			Debug.println("fin yrs  sliue  " + finyr);
			int fyr = Integer.parseInt(finyr);
			int fyrMon = Integer.parseInt(finyrMon);
			if (fyrMon > 4) {
				fyr = fyr + 1;
				finyr = finyr + "-" + fyr;
				Debug.println("fin yrs  sliue  " + finyr);
			} else {
				fyr = fyr - 1;
				finyr = fyr + "-" + finyr;
				Debug.println("fin yrs  sliue  " + finyr);
				Debug.println("circle code " + rwsMaster.getCircleOfficeCode());
			}

			if (recordNotExistsInHabitationDirectoryTbl) {
				Debug.println("in if");
				Debug.println("Insert rwsMaster.getExistWaterLevel()" + rwsMaster.getExistWaterLevel());
				Debug.println(
						"status year in form is " + Integer.parseInt(rwsMaster.getHabYear().substring(6, 10)) + "");
				Debug.println("habYear from database is " + habYear);
				if (Integer.parseInt(rwsMaster.getHabYear().substring(6, 10)) > freezedYear
						&& Integer.parseInt(rwsMaster.getHabYear().substring(6, 10)) > habYear) {
					rwsMaster.setPrevYrStatus(previousCoverageStatus);
					// query = "INSERT INTO RWS_HABITATION_DIR_HIS_TBL SELECT *
					// FROM RWS_HABITATION_DIRECTORY_TBL WHERE HAB_CODE =
					// '"+habCode+"'";
					// Debug.println("insert query is "+query);
					// rwsMasterData.stmt.addBatch(query);

				}
				query = "insert into RWS_HABITATION_DIRECTORY_TBL values(" + "'" + rwsMaster.getCircleOfficeCode()
						+ "'," + rwsMaster.getDivisionOfficeCode() + "," + "'" + rwsMaster.getSubdivisionOfficeCode()
						+ "','" + rwsMaster.getHabCode() + "'," + "'" + rwsMaster.getCensusYear() + "',"
						+ rwsMaster.getCensusPop() + "," + "" + rwsMaster.getCensusSc() + "," + rwsMaster.getCensusSt()
						+ "," + "" + rwsMaster.getFloatPop() + ",'" + rwsMaster.getFloatReason() + "'," + "TO_DATE('"
						+ rwsMaster.getHabYear() + "','dd/mm/yyyy')," + "" + rwsMaster.getPopCovered() + ","
						+ rwsMaster.getScCovered() + "," + "" + rwsMaster.getStCovered() + ","
						+ rwsMaster.getTotalWaterSupply() + "," + "" + rwsMaster.getExistWaterLevel() + "," + "'"
						+ rwsMaster.getCoveredStatus() + "'," + "" + rwsMaster.getNearWaterSource() + "," + ""
						+ rwsMaster.getNearWaterGroundSource() + "," + "'" + rwsMaster.getRemarks() + "','"
						+ rwsMaster.getQualityAffected() + "'," + "TO_DATE('" + rwsMaster.getUpdateDate()
						+ "','dd/mm/yyyy'),'"
						// + rwsMaster.getStatusAsOn1405() + "')";
						+ rwsMaster.getPrevYrStatus() + "','" + rwsMaster.getPresentvYrStatus() + "','"
						+ rwsMaster.getProposedFcYr() + "'," + rwsMaster.getProposedFCAmt() + ")";
				Debug.println("Hab Directory Query is(insert query) : \n" + query);
				rwsMasterData.stmt.addBatch(query);
				// added by swapna Gis-data update on 23-01-2012
				String prajquery = " UPDATE RWS_PANCHAYAT_RAJ_TBL " + " SET  LATITUDE='" + rwsMaster.getLatitude()
						+ "'," + "LONGITUDE='" + rwsMaster.getLongitude() + "'," + "ELEVATION='"
						+ rwsMaster.getElevation() + "'," + "WAY_POINT='" + rwsMaster.getWaypoint() + "',"
						+ "landmark='" + rwsMaster.getLandmark() + "' " + " WHERE panch_CODE='" + rwsMaster.getHabCode()
						+ "'";

				Debug.println("query in panchayat updatation of gis data222 " + prajquery);
				rwsMasterData.stmt.addBatch(prajquery);
				//

				for (int i = 0; i < insts.size(); i++) {
					habInstitute = (HabInstitute) insts.get(i);
					Debug.println("habInstitute.getInstituteNo()=" + habInstitute.getInstituteNo());
					if (habInstitute.getInstituteNo().length() != 0) {
						Debug.println("habInstitute.getInstituteNo()=" + habInstitute.getInstituteNo());
						query = "insert into rws_hab_institute_tbl values(" + "'" + rwsMaster.getHabCode() + "'," + "'"
								+ habInstitute.getInstituteCode() + "'," + "'" + habInstitute.getInstituteNo() + "',"
								+ "'" + habInstitute.getInstituteCovered() + "','" + habInstitute.getInstituteWorking()
								+ "','" + habInstitute.getInstituteNotWorking() + "')";
						Debug.println("Hab Institute Query is(insert query) : \n" + query);
						rwsMasterData.stmt.addBatch(query);

					}
				}
				if (rwsMaster.getQualityAffected().equals("Y") || rwsMaster.getCoveredStatus().equals("NSS"))
					if (Double.parseDouble(rwsMaster.getPercent()) != 0.0) {

						query = "insert into RWS_HAB_CONTAMINATION_TBL values(" + "'" + rwsMaster.getHabCode() + "',"
								+ "'" + rwsMaster.getContamName() + "'," + "" + rwsMaster.getPercent() + "','" + finyr
								+ "'," + "TO_DATE('" + rwsMaster.getUpdateDate() + "','dd/mm/yyyy'))";
						Debug.println("Hab Component Query is(insert query) : \n" + query);
						rwsMasterData.stmt.addBatch(query);

					}

				String q1 = "select * from rws_hab_supply_status_tbl where hab_code='" + habCode + "'";
				Debug.println("select query is " + query);

				rwsMasterData.rs = rwsMasterData.stmt1.executeQuery(query);
				if (rwsMasterData.rs.next()) {
					exists = true;

				}
				Debug.println("habsupply data exists is " + exists);

				Debug.println("checking !recordNotExistsInHabitationDirectoryTbl");
				if (!exists) {
					Debug.println("in !recordNotExistsInHabitationDirectoryTbl");
					query = "insert into rws_hab_supply_status_tbl(hab_code,SHP_DK_SUPPLY,SHP_NO,HPS_OTH_SUPPLY,HPS_NO,PWS_SUPPLY,PWS_NO,CPWS_SUPPLY,CPWS_NO,MPWS_SUPPLY,MPWS_NO,HPS_OTH_SUPPLY_UNSAFE,HPS_NO_UNSAFE,OWS_OTH_SUPPLY,OWS_NO,PONDS_OTH_SUPPLY,PONDS_NO,DW_TANKS_SUPPLY,DW_TANKS_NO,STAT_OF_HAB) "
							+ "values('" + rwsMaster.getHabCode() + "','" + rwsMaster.getShpSupply() + "','"
							+ rwsMaster.getShpNo() + "','" + rwsMaster.getHpSupply() + "','" + rwsMaster.getHpNo()
							+ "','" + rwsMaster.getPwsSupply() + "','" + rwsMaster.getPwsNo() + "','"
							+ rwsMaster.getCpwsSupply() + "','" + rwsMaster.getCpwsNo() + "'," + "'"
							+ rwsMaster.getMpwsSupply() + "','" + rwsMaster.getMpwsNo() + "','"
							+ rwsMaster.getDpSupply() + "','" + rwsMaster.getDpNo() + "','" + rwsMaster.getOwsSupply()
							+ "','" + rwsMaster.getOwsNo() + "','" + rwsMaster.getPondsSupply() + "','"
							+ rwsMaster.getPondsNo() + "','" + rwsMaster.getDwSupply() + "'," + "'"
							+ rwsMaster.getDwNo() + "','" + rwsMaster.getStatus() + "')";
					Debug.println("HabSupply query(insert query)=" + query);
					rwsMasterData.stmt.addBatch(query);
				}
			} else {

				query = " SELECT count(*) FROM rws_hab_contamination_tbl WHERE hab_code = '" + habCode + "'";
				Debug.println("query in contaminatin  " + query);
				rwsMasterData.rs = rwsMasterData.stmt1.executeQuery(query);
				if (rwsMasterData.rs.next()) {
					if (rwsMasterData.rs.getInt(1) > 0)
						cnsUpdate = true;
				}

				rwsMasterData.conn.setAutoCommit(false);
				rwsMasterData.stmt = rwsMasterData.conn.createStatement();

				// Debug.println("sataus1"+StatusDate+"ali");
				// Debug.println("sataus2"+rwsMaster.getHabYear()+"sadiq");

				if (Integer.parseInt(rwsMaster.getHabYear().substring(6, 10)) > freezedYear
						&& Integer.parseInt(rwsMaster.getHabYear().substring(6, 10)) > habYear) {
					rwsMaster.setPrevYrStatus(previousCoverageStatus);
					// query = "INSERT INTO RWS_HABITATION_DIR_HIS_TBL SELECT *
					// FROM RWS_HABITATION_DIRECTORY_TBL WHERE HAB_CODE =
					// '"+habCode+"'";
					// Debug.println("insert query is "+query);
					// rwsMasterData.stmt.addBatch(query);

				}
				/*
				 * if(StatusDate!=null && !StatusDate.equals(rwsMaster.getHabYear().trim())) {
				 * String query1 = "insert into RWS_HABITATION_DIR_HIS_TBL values(" + "'" +
				 * rwsMaster.getCircleOfficeCode() + "'," + rwsMaster.getDivisionOfficeCode() +
				 * "," + "'" + rwsMaster.getSubdivisionOfficeCode() + "','" +
				 * rwsMaster.getHabCode() + "'," + "'" + rwsMaster.getCensusYear() + "'," +
				 * rwsMaster.getCensusPop() + "," + "" + rwsMaster.getCensusSc() + "," +
				 * rwsMaster.getCensusSt() + "," + "" + rwsMaster.getFloatPop() + ",'" +
				 * rwsMaster.getFloatReason() + "'," + "TO_DATE('" + rwsMaster.getHabYear() +
				 * "','dd/mm/yyyy')," + "" + rwsMaster.getPopCovered() + "," +
				 * rwsMaster.getScCovered() + "," + "" + rwsMaster.getStCovered() + "," +
				 * rwsMaster.getTotalWaterSupply() + "," + "" + rwsMaster.getExistWaterLevel() +
				 * "," + "'" + rwsMaster.getStatus() + "'," + "" +
				 * rwsMaster.getNearWaterSource() + "," + "" +
				 * rwsMaster.getNearWaterGroundSource() + "," + "'" + rwsMaster.getRemarks() +
				 * "','" + rwsMaster.getQualityAffected() + "'," + "TO_DATE('" +
				 * rwsMaster.getUpdateDate() + "','dd/mm/yyyy'),'" + rwsMaster.getPrevYrStatus()
				 * +"','" + rwsMaster.getPresentvYrStatus() +"','" + rwsMaster.getProposedFcYr()
				 * + "'," + rwsMaster.getProposedFCAmt() + ")";
				 * 
				 * Debug.println("Hab Directory histroy Query is : \n" + query1); int i =
				 * rwsMasterData.stmt.executeUpdate(query1); if(i>0)
				 * Debug.println("Record insert into dic his tab"); else
				 * Debug.println("Record not inserted"); }
				 */
				query = " UPDATE RWS_HABITATION_DIRECTORY_TBL " + " SET CENSUS_YEAR='" + rwsMaster.getCensusYear()
						+ "'," + " CENSUS_PLAIN_POPU='" + rwsMaster.getCensusPop() + "'," + " CENSUS_SC_POPU='"
						+ rwsMaster.getCensusSc() + "'," + " CENSUS_ST_POPU='" + rwsMaster.getCensusSt() + "',"
						+ " FLOAT_POP='" + rwsMaster.getFloatPop()

						+ "', FLOAT_POP_REASONS='" + rwsMaster.getFloatReason() + "'," + " STATUS_DATE=TO_DATE('"
						+ rwsMaster.getHabYear() + "','dd/mm/yyyy')," + " PLAIN_POPU_COVERED='"
						+ rwsMaster.getPopCovered() + "'," + " SC_POP_COVERED='" + rwsMaster.getScCovered() + "',"
						+ " ST_POP_COVERED='" + rwsMaster.getStCovered() + "'," + " TOTAL_WATER_SUPPLY='"
						+ rwsMaster.getTotalWaterSupply() + "'," + " EXIST_WATER_LEVEL='"
						+ rwsMaster.getExistWaterLevel() + "'," + " COVERAGE_STATUS='" + rwsMaster.getStatus() + "',"
						+ " NEAR_SURFACE_SOURCE='" + rwsMaster.getNearWaterSource() + "'," + " NEAR_GROUND_SOURCE='"
						+ rwsMaster.getNearWaterGroundSource() + "'," + " REMARKS='" + rwsMaster.getRemarks() + "',"
						+ " quality_affected='" + rwsMaster.getQualityAffected() + "',UPDATE_DATE=TO_DATE('"
						+ rwsMaster.getUpdateDate() + "','dd/mm/yyyy'),PREVIOUS_YR_STATUS='"
						+ rwsMaster.getPrevYrStatus() + "',PRESENT_YR_STATUS='" + rwsMaster.getPresentvYrStatus()
						+ "', PROPOSED_FC_YEAR = '" + rwsMaster.getProposedFcYr() + "', PROPOSED_FC_EST_AMT ="
						+ "nvl(PROPOSED_FC_EST_AMT,'" + rwsMaster.getProposedFCAmt() + "') " + "WHERE HAB_CODE='"
						+ rwsMaster.getHabCode() + "'";
				Debug.println("Hab Directory query(insert query is)=" + query);
				rwsMasterData.stmt.addBatch(query);
				// added by swapna Gis-data update on 12-01-2012
				// added by swapna Gis-data update on 23-01-2012
				String prajquery = " UPDATE RWS_PANCHAYAT_RAJ_TBL " + " SET  LATITUDE='" + rwsMaster.getLatitude()
						+ "'," + "LONGITUDE='" + rwsMaster.getLongitude() + "'," + "ELEVATION='"
						+ rwsMaster.getElevation() + "'," + "WAY_POINT='" + rwsMaster.getWaypoint() + "',"
						+ "landmark='" + rwsMaster.getLandmark() + "' " + " WHERE panch_CODE='" + rwsMaster.getHabCode()
						+ "'";

				Debug.println("query in panchayat updatation of gis data22233 " + prajquery);
				rwsMasterData.stmt.addBatch(prajquery);
				//
				for (int i = 0; i < insts.size(); i++) {
					habInstitute = (HabInstitute) insts.get(i);
					insUpdate = false;
					query = " SELECT count(*) FROM rws_hab_institute_tbl  WHERE P_INST_CODE = '"
							+ habInstitute.getInstituteCode() + "'and  hab_code='" + habCode + "'";
					Debug.println("habInst select query=" + query);

					rwsMasterData.rs = rwsMasterData.stmt1.executeQuery(query);
					if (rwsMasterData.rs.next()) {
						if (rwsMasterData.rs.getInt(1) > 0)
							insUpdate = true;
					}

					if (insUpdate)
						query = " UPDATE RWS_HAB_INSTITUTE_TBL " + " SET P_INST_NO='" + habInstitute.getInstituteNo()
								+ "'," + " P_INST_COVERED='" + habInstitute.getInstituteCovered() + "',"
								+ " P_INST_WORKING ='" + habInstitute.getInstituteWorking() + "',"
								+ " P_INST_NOTWORKING_NO='" + habInstitute.getInstituteNotWorking() + "'"
								+ " WHERE P_INST_CODE = '" + habInstitute.getInstituteCode() + "'" + " AND HAB_CODE='"
								+ rwsMaster.getHabCode() + "'";
					else
						query = " INSERT INTO rws_hab_institute_tbl(" + "HAB_CODE,P_INST_CODE,P_INST_NO ,"
								+ "P_INST_WORKING ,P_INST_NOTWORKING_NO,P_INST_COVERED) VALUES('" + habCode + "', "
								+ " '" + habInstitute.getInstituteCode() + "', '" + habInstitute.getInstituteNo()
								+ "', " + " '" + habInstitute.getInstituteWorking() + "', " + " '"
								+ habInstitute.getInstituteNotWorking() + "', " + " '"
								+ habInstitute.getInstituteCovered() + "') ";

					Debug.println("HabInstitute query(insert query)=" + query);
					rwsMasterData.stmt.addBatch(query);
				}

				// code to check whether hab supply status data already exists
				String q1 = "select * from rws_hab_supply_status_tbl where hab_code='" + habCode + "'";
				Debug.println("select query is " + query);
				rwsMasterData.rs = rwsMasterData.stmt1.executeQuery(query);
				if (rwsMasterData.rs.next()) {
					exists = true;

				}
				Debug.println("habsupply data exists is " + exists);
				// end of code to check whether hab supply status data already
				// exists
				if (exists) {
					query = " UPDATE rws_hab_supply_status_tbl SET " + " hps_oth_supply = '" + rwsMaster.getHpSupply()
							+ "', " + " hps_no = '" + rwsMaster.getHpNo() + "', " + " shp_dk_supply = '"
							+ rwsMaster.getShpSupply() + "', " + " shp_no = '" + rwsMaster.getShpNo() + "', "
							+ " pws_supply = '" + rwsMaster.getPwsSupply() + "', " + " pws_no = '"
							+ rwsMaster.getPwsNo() + "', " + " cpws_supply = '" + rwsMaster.getCpwsSupply() + "', "
							+ " cpws_no = '" + rwsMaster.getCpwsNo() + "', " + " mpws_supply = '"
							+ rwsMaster.getMpwsSupply() + "', " + " mpws_no = '" + rwsMaster.getMpwsNo() + "', "
							+ " HPS_OTH_SUPPLY_UNSAFE = '" + rwsMaster.getDpSupply() + "', " + " HPS_NO_UNSAFE = '"
							+ rwsMaster.getDpNo() + "', " + " ows_oth_supply = '" + rwsMaster.getOwsSupply() + "', "
							+ " ows_no = '" + rwsMaster.getOwsNo() + "', " + " ponds_oth_supply = '"
							+ rwsMaster.getPondsSupply() + "', " + " ponds_no = '" + rwsMaster.getPondsNo() + "', "
							+ " DW_TANKS_SUPPLY = '" + rwsMaster.getDwSupply() + "', " + " DW_TANKS_NO = '"
							+ rwsMaster.getDwNo() + "', " + " stat_of_hab = '" + rwsMaster.getStatus() + "'"
							+ " WHERE hab_code='" + rwsMaster.getHabCode() + "'";

					Debug.println(" Update habSuply query is(insert query) " + query);
					rwsMasterData.stmt.addBatch(query);
				}
				Debug.println("rwsMaster.getCoveredStatus()  " + rwsMaster.getCoveredStatus());
				if (rwsMaster.getQualityAffected().equals("Y") || rwsMaster.getStatus().equals("NSS")
						|| rwsMaster.getCoveredStatus().equals("NSS")) {
					if (cnsUpdate && (StatusDate != null && StatusDate.equals(rwsMaster.getHabYear().trim())))
						/*
						 * query = " UPDATE rws_hab_contamination_tbl " + " SET cont_perc =
						 * '" + rwsMaster.getPercent() + "'" + " WHERE cont_type = '" +
						 * rwsMaster.getContamName() + "'" + " AND hab_code='" + rwsMaster.getHabCode()
						 * + "'";
						 */
						query = "UPDATE rws_hab_contamination_tbl " + " SET cont_perc = '" + rwsMaster.getPercent()
								+ "', cont_type ='" + rwsMaster.getContamName() + "' WHERE  hab_code='"
								+ rwsMaster.getHabCode() + "'";

					else
						query = " INSERT INTO rws_hab_contamination_tbl VALUES('" + habCode + "', " + " '"
								+ rwsMaster.getContamName() + "', '" + rwsMaster.getPercent() + "','" + finyr + "',"
								+ "TO_DATE('" + rwsMaster.getUpdateDate() + "','dd/mm/yyyy'))";
					Debug.println("Update Hab Contam query(insert query)=" + query);
					rwsMasterData.stmt.addBatch(query);

				} else {
					query = " SELECT count(*) FROM rws_hab_contamination_tbl WHERE hab_code='" + habCode + "'";
					Debug.println("hab contam select query=" + query);
					rwsMasterData.stmt1 = rwsMasterData.conn.createStatement();
					rwsMasterData.rs = rwsMasterData.stmt1.executeQuery(query);
					if (rwsMasterData.rs.next()) {
						if (rwsMasterData.rs.getInt(1) > 0) {
							query = " DELETE FROM rws_hab_contamination_tbl WHERE hab_code='" + habCode + "'";
							Debug.println("Hab Contam Delete query(insert query)=" + query);
							rwsMasterData.stmt.addBatch(query);
						}
					}
				}

			}
			updateCounts = rwsMasterData.stmt.executeBatch();
			flag = true;
			Debug.println("updateCounts=" + updateCounts.length);
			for (int i = 0; i < updateCounts.length; i++) {
				if (updateCounts[i] == 0) {
					Debug.println("update Count=" + i + "count[i]=" + updateCounts[i]);
					flag = false;
				}
			}
			Debug.println("printing updateCounts");
			for (int i = 0; i < updateCounts.length; i++) {
				Debug.println("update Count=" + i + "count[i]=" + updateCounts[i]);

			}
			Debug.println("flag=" + flag);
			if (flag) {
				rwsMasterData.conn.commit();
				if (recordNotExistsInHabitationDirectoryTbl)
					errorMessage = "Record Inserted Successfully.";
				else
					errorMessage = "Record Updated Successfully";
			} else if (recordNotExistsInHabitationDirectoryTbl)
				errorMessage = "Record can't inserted.";
			else
				errorMessage = "Record can't updated";
			rwsMasterData.conn.setAutoCommit(true);

		} catch (BatchUpdateException b) {
			System.err.println("Update counts of successful commands: " + b);
		} catch (Exception e) {
			Debug.println("The error in insertHabStatus " + e);
			e.printStackTrace();
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return updateCounts;
	}

	public static int removeInstitute(String instituteCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rcount = 0;
		try {
			Debug.println("in removeInstitute");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rcount = rwsMasterData.stmt
					.executeUpdate("delete  from RWS_PUBLIC_INSTITUTE_TBL where INST_CODE='" + instituteCode + "'");
		} catch (Exception e) {
			Debug.println("The error in removeInstitute" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rcount;
	}

	public static int updateInstitute(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int updateCount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("update  RWS_PUBLIC_INSTITUTE_TBL set INST_NAME=? where INST_CODE=?");
			rwsMasterData.pstmt.setString(1,  rwsMaster.getInstituteName().toUpperCase());
			rwsMasterData.pstmt.setString(2,  rwsMaster.getInstituteCode());
			updateCount = rwsMasterData.pstmt.executeUpdate();
		} catch (SQLException sqle) {
			if (sqle.getErrorCode() == 1)
				errorMessage = "Record with this name exists.";
			Debug.println("The Excption at  updateInstitute in RwsMasterData :  " + sqle);
		} catch (Exception e) {
			Debug.println("The Excption at  updateInstitute in RwsMasterData : " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return updateCount;
	}

	public static String getInstituteCode(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String code = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery("SELECT MAX(to_number(INST_CODE))+1 FROM RWS_PUBLIC_INSTITUTE_TBL");
			rwsMasterData.rs.next();
			code = rwsMasterData.rs.getString(1);
			if (code == null) {
				code = "1";
			} else if (code.length() == 1) {
				code = "0" + code;
			}
		} catch (Exception e) {
			Debug.println("Exception at getInstituteCode of RwsMasterData is: " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return code;
	}

	public int[] updateHabStatus(RwsMaster rwsMaster, ArrayList insts, ArrayList waterSupply, ArrayList contaminations,
			DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		Debug.println("in updateHabStatus");
		int[] updateCounts = new int[10];
		HabInstitute habInstitute = new HabInstitute();
		HabWaterSupply habWS = new HabWaterSupply();
		ContaminationTypes habCont = new ContaminationTypes();
		String habCode = rwsMaster.getHabCode();
		boolean insUpdate = false, cnsUpdate = false;
		try {

			rwsMasterData.conn = RwsOffices.getConn();

			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			String query = " SELECT count(*) FROM rws_hab_institute_tbl WHERE hab_code='" + habCode + "'";
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(query);
			if (rwsMasterData.rs.next()) {
				if (rwsMasterData.rs.getInt(1) > 0)
					insUpdate = true;
			}

			query = " SELECT count(*) FROM rws_hab_contamination_tbl WHERE hab_code = '" + habCode + "'";
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(query);
			if (rwsMasterData.rs.next()) {
				if (rwsMasterData.rs.getInt(1) > 0)
					cnsUpdate = true;
			}

			rwsMasterData.conn.setAutoCommit(false);
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			// add by ali
			String finyr = rwsMaster.getHabYear();
			String finyrMon = finyr.substring(3, 5);
			finyr = finyr.substring(6, 10);
			int fyr = Integer.parseInt(finyr);
			int fyrMon = Integer.parseInt(finyrMon);
			if (fyrMon > 4) {
				fyr = fyr + 1;
				finyr = finyr + "-" + fyr;
				Debug.println("fin yrs  sliue  " + finyr);
			} else {
				fyr = fyr - 1;
				finyr = fyr + "-" + finyr;
				Debug.println("fin yrs  sliue  " + finyr);
			}
			// end
			query = " UPDATE RWS_HABITATION_DIRECTORY_TBL " + " SET CENSUS_YEAR='" + rwsMaster.getCensusYear() + "',"
					+ " CENSUS_PLAIN_POPU='" + rwsMaster.getCensusPop() + "'," + " CENSUS_SC_POPU='"
					+ rwsMaster.getCensusSc() + "'," + " CENSUS_ST_POPU='" + rwsMaster.getCensusSt() + "',"
					+ " FLOAT_POP='" + rwsMaster.getFloatPop() + "'," + " FLOAT_POP_REASONS='"
					+ rwsMaster.getFloatReason() + "'," + " STATUS_DATE=TO_DATE('" + rwsMaster.getHabYear()
					+ "','dd/mm/yyyy')," + " PLAIN_POPU_COVERED='" + rwsMaster.getPopCovered() + "',"
					+ " SC_POP_COVERED='" + rwsMaster.getScCovered() + "'," + " ST_POP_COVERED='"
					+ rwsMaster.getStCovered() + "'," + " TOTAL_WATER_SUPPLY='" + rwsMaster.getTotalWaterSupply() + "',"
					+ " EXIST_WATER_LEVEL='" + rwsMaster.getExistWaterLevel() + "'," + " COVERAGE_STATUS='"
					+ rwsMaster.getStatus() + "'," + " NEAR_SURFACE_SOURCE='" + rwsMaster.getNearWaterSource() + "',"
					+ " NEAR_GROUND_SOURCE='" + rwsMaster.getNearWaterGroundSource() + "'," + " REMARKS='"
					+ rwsMaster.getRemarks() + "'," + " quality_affected='" + rwsMaster.getQualityAffected()
					+ "', PROPOSED_FC_YEAR = '" + rwsMaster.getProposedFcYr() + "', PROPOSED_FC_EST_AMT ="
					+ rwsMaster.getProposedFCAmt() + " WHERE HAB_CODE='" + rwsMaster.getHabCode() + "'";
			rwsMasterData.stmt.addBatch(query);

			for (int i = 0; i < insts.size(); i++) {
				habInstitute = (HabInstitute) insts.get(i);
				if (insUpdate)
					query = " UPDATE RWS_HAB_INSTITUTE_TBL " + " SET P_INST_NO='" + habInstitute.getInstituteNo() + "',"
							+ " P_INST_COVERED='" + habInstitute.getInstituteCovered() + "'," + " P_INST_WORKING ='"
							+ habInstitute.getInstituteWorking() + "'," + " P_INST_NOTWORKING_NO='"
							+ habInstitute.getInstituteNotWorking() + "'" + " WHERE P_INST_CODE = '"
							+ habInstitute.getInstituteCode() + "'" + " AND HAB_CODE='" + rwsMaster.getHabCode() + "'";

				else
					query = " INSERT INTO rws_hab_institute_tbl(" + "HAB_CODE,P_INST_CODE,P_INST_NO ,"
							+ "P_INST_WORKING ,P_INST_NOTWORKING_NO,P_INST_COVERED) VALUES('" + habCode + "', " + " '"
							+ habInstitute.getInstituteCode() + "', '" + habInstitute.getInstituteNo() + "', " + " '"
							+ habInstitute.getInstituteWorking() + "', " + " '" + habInstitute.getInstituteNotWorking()
							+ "', " + " '" + habInstitute.getInstituteCovered() + "') ";

				Debug.println("insert query is " + query);
				rwsMasterData.stmt.addBatch(query);
			}

			query = " UPDATE rws_hab_supply_status_tbl SET " + " shp_dk_supply = '" + rwsMaster.getShpSupply() + "', "
					+ " shp_no = '" + rwsMaster.getShpNo() + "', " + " cisterns_dk_supply = '"
					+ rwsMaster.getCisternsSupply() + "', " + " cisterns_no = '" + rwsMaster.getCisternsNo() + "', "
					+ " glsrs_dk_supply = '" + rwsMaster.getGlsrSupply() + "', " + " glsrs_no = '"
					+ rwsMaster.getGlsrNo() + "', " + " ohsrs_dk_supply = '" + rwsMaster.getOhsrSupply() + "', "
					+ " ohsrs_no = '" + rwsMaster.getOhsrNo() + "', " + " hps_oth_supply = '" + rwsMaster.getHpSupply()
					+ "', " + " hps_no = '" + rwsMaster.getHpNo() + "', " + " ows_oth_supply = '"
					+ rwsMaster.getOwsSupply() + "', " + " ows_no = '" + rwsMaster.getOwsNo() + "', "
					+ " ponds_oth_supply = '" + rwsMaster.getPondsSupply() + "', " + " ponds_no = '"
					+ rwsMaster.getPondsNo() + "', " + " shwell_oth_supply = '" + rwsMaster.getShwSupply() + "', "
					+ " shwell_no = '" + rwsMaster.getShwNo() + "', " + " pcpd_drink = '" + rwsMaster.getPcpdDrink()
					+ "', " + " pcpd_others = '" + rwsMaster.getPcpdOthers() + "', " + " stat_of_hab = '"
					+ rwsMaster.getStatus() + "'" + " WHERE hab_code='" + habCode + "'";
			Debug.println(" Update query is(insert query) " + query);
			rwsMasterData.stmt.addBatch(query);

			for (int i = 0; i < contaminations.size(); i++) {
				habCont = (ContaminationTypes) contaminations.get(i);
				if (cnsUpdate)
					query = " UPDATE rws_hab_contamination_tbl " + " SET cont_perc = '" + habCont.getPercent() + "'"
							+ " WHERE cont_type = '" + habCont.getContType() + "'" + " AND hab_code='"
							+ rwsMaster.getHabCode() + "'";
				else
					query = " INSERT INTO rws_hab_contamination_tbl VALUES('" + habCode + "', " + " '"
							+ habCont.getContType() + "', '" + habCont.getPercent() + "','" + finyr + "'," + "TO_DATE('"
							+ rwsMaster.getUpdateDate() + "','dd/mm/yyyy'))";

				rwsMasterData.stmt.addBatch(query);
			}
			updateCounts = rwsMasterData.stmt.executeBatch();
			rwsMasterData.conn.commit();
		} catch (BatchUpdateException b) {
			System.err.println("Update counts of successful commands:updateHabStatus " + b);
		} catch (Exception e) {
			Debug.println("The error in updateHabStatus " + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return updateCounts;
	}

	public static RwsMaster getHabStatus(String habCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		HabInstitute habInstitute = null;
		ContaminationTypes contaminationTypes = null;
		HabWaterSupply habWS = null;
		Collection institutes = new ArrayList();
		Collection waterSupply = new ArrayList();
		Collection contaminations = new ArrayList();
		rwsMasterData.stmt1 = null;
		rwsMasterData.stmt2 = null;
		rwsMasterData.stmt3 = null;
		Statement stmt4 = null;

		try {
			Debug.println("in getHabStatus");

			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("SELECT * FROM RWS_HABITATION_DIRECTORY_TBL WHERE HAB_CODE='" + habCode + "'");
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setCoc(getCircleOfficeName("1", rwsMasterData.rs.getString(1), rwsMasterData.conn));
				rwsMaster.setDoc(getDivisionOfficeName("1", rwsMasterData.rs.getString(1),
						rwsMasterData.rs.getString(2), rwsMasterData.conn));
				rwsMaster.setSdoc(getSubDivisionOfficeName("1", rwsMasterData.rs.getString(1),
						rwsMasterData.rs.getString(2), rwsMasterData.rs.getString(3), rwsMasterData.conn));

				rwsMaster.setDistCode(habCode.substring(0, 2));
				rwsMaster.setMandalCode(habCode.substring(5, 7));
				rwsMaster.setVCode(habCode.substring(7, 10));
				rwsMaster.setPCode(habCode.substring(12, 14));

				rwsMaster.setHabName(rwsMasterData.getHabName(rwsMasterData.rs.getString(4), rwsMasterData.conn));
				rwsMaster.setCensusYear(rwsMasterData.rs.getString(5));
				rwsMaster.setCensusPop(rwsMasterData.rs.getInt(6));
				rwsMaster.setCensusSc(rwsMasterData.rs.getInt(7));
				rwsMaster.setCensusSt(rwsMasterData.rs.getInt(8));
				rwsMaster.setTotalPop(
						rwsMasterData.rs.getInt(6) + rwsMasterData.rs.getInt(7) + rwsMasterData.rs.getInt(8));
				rwsMaster.setFloatPop(rwsMasterData.rs.getInt(9));
				rwsMaster.setNetPop(rwsMasterData.rs.getInt(6) + rwsMasterData.rs.getInt(7) + rwsMasterData.rs.getInt(8)
						+ rwsMasterData.rs.getInt(9));
				rwsMaster.setFloatReason(rwsMasterData.rs.getString(10));
				rwsMaster.setHabYear(df.format(rwsMasterData.rs.getDate(11)));
				rwsMaster.setPopCovered(rwsMasterData.rs.getInt(12));
				rwsMaster.setScCovered(rwsMasterData.rs.getInt(13));
				rwsMaster.setStCovered(rwsMasterData.rs.getInt(14));
				rwsMaster.setTotalCovered(
						rwsMasterData.rs.getInt(12) + rwsMasterData.rs.getInt(13) + rwsMasterData.rs.getInt(14));
				rwsMaster.setTotalWaterSupply(rwsMasterData.rs.getInt(15));
				rwsMaster.setExistWaterLevel(rwsMasterData.rs.getInt(16));
				rwsMaster.setCoveredStatus(rwsMasterData.rs.getString(17));
				rwsMaster.setNearWaterSource(rwsMasterData.rs.getInt(18));
				rwsMaster.setNearWaterGroundSource(rwsMasterData.rs.getInt(19));
				rwsMaster.setRemarks(rwsMasterData.rs.getString(20));
				rwsMaster.setQualityAffected(rwsMasterData.rs.getString(21));
				rwsMaster.setUpdateDate(rwsMasterData.rs.getString(22));
				rwsMaster.setPrevYrStatus(rwsMasterData.rs.getString(23));
				rwsMaster.setPresentvYrStatus(rwsMasterData.rs.getString(24));
				rwsMaster.setProposedFcYr(rwsMasterData.rs.getString(25));
				rwsMaster.setProposedFCAmt(rwsMasterData.rs.getInt(26));

				rwsMasterData.stmt1 = rwsMasterData.conn.createStatement();

				rwsMasterData.rs1 = rwsMasterData.stmt1.executeQuery(
						"SELECT P_INST_CODE,INST_NAME,P_INST_NO,P_INST_COVERED,P_INST_WORKING,P_INST_NOTWORKING_NO  FROM RWS_HAB_INSTITUTE_TBL HI,RWS_PUBLIC_INSTITUTE_TBL I WHERE HI.P_INST_CODE=I.INST_CODE AND HAB_CODE='"
								+ habCode + "'");
				while (rwsMasterData.rs1.next()) {
					habInstitute = new HabInstitute();
					habInstitute.setInstituteCode(rwsMasterData.rs1.getString(1));
					habInstitute.setInstituteName(rwsMasterData.rs1.getString(2));
					habInstitute.setInstituteNo(rwsMasterData.rs1.getString(3));
					habInstitute.setInstituteCovered(rwsMasterData.rs1.getString(4));
					habInstitute.setInstituteWorking(rwsMasterData.rs1.getString(5));
					habInstitute.setInstituteNotWorking(rwsMasterData.rs1.getString(6));

					institutes.add(habInstitute);
				}

				rwsMaster.setHabInsts(institutes);

				rwsMasterData.stmt3 = rwsMasterData.conn.createStatement();

				String[] comps = { "HAND PUMPS", "SHALLOW HAND PUMPS", "OPEN WELLS", "PONDS", "PWS", "CPWS",
						"HOUSE HOLDS" };
				String q = null;
				int rowCount = 0;
				for (int j = 0; j < comps.length; j++) {

					rowCount = 0;
					q = " SELECT total_no,total_pop,plain_pop,sc_pop,st_pop,depth,yeild,platform,quality,portable "
							+ " FROM RWS_HAB_COMPONENT_TBL WHERE HAB_CODE='" + habCode + "' " + " AND component = '"
							+ comps[j] + "'";

					rwsMasterData.rs3 = rwsMasterData.stmt3.executeQuery(q);
					while (rwsMasterData.rs3.next()) {
						rowCount++;
						habWS = new HabWaterSupply();
						/*
						 * habWS.setComponent(comps[j]); habWS.setTotalNo(rs3.getInt(1));
						 * habWS.setTotalPop(rs3.getInt(2)); habWS.setPlainPop(rs3.getInt(3));
						 * habWS.setScPop(rs3.getInt(4)); habWS.setStPop(rs3.getInt(5));
						 * habWS.setDepth(rs3.getString(6));
						 * habWS.setYeild(rwsMasterData.rs3.getString(7));
						 * habWS.setPlatform(rwsMasterData.rs3.getString(8));
						 * habWS.setQuality(rwsMasterData.rs3.getString(9));
						 * habWS.setPortable(rwsMasterData.rs3.getString(10));
						 */
						waterSupply.add(habWS);
					}
					if (rowCount <= 0) {
						// habWS = new
						// HabWaterSupply(comps[j],0,0,0,0,0,"","","","","");
						waterSupply.add(habWS);
					}
				}
				rwsMaster.setHabWaterSupply(waterSupply);

				rwsMasterData.stmt3 = rwsMasterData.conn.createStatement();
				String query = " SELECT NVL(cont_type,''), NVL(cont_perc,0.0) " + " FROM rws_hab_contamination_tbl"
						+ " WHERE hab_code = '" + habCode + "'";
				rwsMasterData.rs3 = rwsMasterData.stmt3.executeQuery(query);
				while (rwsMasterData.rs3.next()) {
					contaminationTypes = new ContaminationTypes();
					contaminationTypes.setContType(rwsMasterData.rs3.getString(1));
					contaminationTypes.setPercent(rwsMasterData.rs3.getDouble(2));
					contaminations.add(contaminationTypes);
				}
				rwsMaster.setContaminations(contaminations);
			}
		} catch (Exception e) {
			Debug.println("The error in getHabStatus = " + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rwsMaster;
	}

	public RwsMaster getHabSupplyStatus(String habCode, DataSource dataSource) throws Exception {
		RwsMaster rwsMaster = null;
		HabInstitute habInstitute = null;
		ContaminationTypes contaminationTypes = null;
		HabWaterSupply habWS = null;
		ArrayList institutes = new ArrayList();
		ArrayList waterSupply = new ArrayList();
		ArrayList contaminations = new ArrayList();
		Connection conn = RwsOffices.getConn();

		Statement stmt = null;
		Statement stmt1 = null;
		Statement stmt2 = null;
		Statement stmt3 = null;

		ResultSet rs = null;
		ResultSet rs1 = null;
		ResultSet rs2 = null;
		ResultSet rs3 = null;

		int pwsCount = 0;
		int mpwsCount = 0;
		int cpwsCount = 0;
		int shpCount = 0;
		int hpCount = 0;
		int pondsCount = 0;
		int openwellCount = 0;
		Debug.println("in getHabSupplyStatus() in rwsmasterdata");
		String habcode = null;

		try {
			Debug.println("in getHabSupplyStatus");

			// code to get pwsCount
			Debug.println("*1");
			stmt2 = conn.createStatement();
			/*
			 * //code modifed for efficiency String countQuery="select count(*) as count
			 * from rws_asset_mast_tbl a,rws_asset_scheme_tbl s" + " where
			 * a.asset_code=s.asset_code and substr(s.scheme_code,17,3) like '6%'" + " and
			 * substr(s.scheme_code,1,16)='"+habCode+"'";
			 * Debug.println("countQuery is "+countQuery);
			 * rs2=stmt2.executeQuery(countQuery); Debug.println("*2"); if(rs2.next()) {
			 * pwsCount=rs2.getInt("count"); Debug.println("pwsCount is "+pwsCount); }
			 * countQuery="select count(*) as count from rws_asset_mast_tbl
			 * a,rws_asset_scheme_tbl s" + " where a.asset_code=s.asset_code and
			 * substr(s.scheme_code,17,3) like '4%'" + " and
			 * substr(s.scheme_code,1,16)='"+habCode+"'";
			 * Debug.println("countQuery is "+countQuery);
			 * rs2=stmt2.executeQuery(countQuery); if(rs2.next()) {
			 * mpwsCount=rs2.getInt("count"); Debug.println("mpwsCount is
			 * "+mpwsCount); } Debug.println("*3"); countQuery="select count(*) as count
			 * from rws_asset_mast_tbl a,rws_asset_scheme_tbl s,RWS_HP_SUBCOMP_PARAM_TBL
			 * h" + " where a.asset_code=s.asset_code and substr(s.scheme_code,17,3) like
			 * '0%'" + " and h.asset_code=a.asset_code and
			 * substr(s.scheme_code,1,16)='"+habCode+"'";
			 * Debug.println("countQuery is "+countQuery); Debug.println("*4");
			 * rs2=stmt2.executeQuery(countQuery); if(rs2.next()) {
			 * hpCount=rs2.getInt("count"); Debug.println("hpCount is "+hpCount); }
			 * 
			 * 
			 * countQuery="select count(*) as count from rws_asset_mast_tbl
			 * a,rws_asset_scheme_tbl s," + " RWS_SHALLOWHANDPUMPS_TBL subcompTbl where
			 * a.asset_code=s.asset_code and substr(s.scheme_code,17,3) like '3%'" + " and
			 * substr(s.scheme_code,1,16)='"+habCode+"' and
			 * subcompTbl.asset_code=a.asset_code"; Debug.println("countQuery is
			 * "+countQuery); Debug.println("*5"); rs2=stmt2.executeQuery(countQuery);
			 * if(rs2.next()) { shpCount=rs2.getInt("count"); Debug.println("shpCount is
			 * "+shpCount); }
			 * 
			 * countQuery="select count(*) as count from rws_asset_mast_tbl
			 * a,rws_asset_scheme_tbl s, RWS_OPEN_WELL_MAST_TBL subcompTbl" + " where
			 * a.asset_code=subcompTbl.asset_code and a.asset_code=s.asset_code and
			 * substr(s.scheme_code,17,3) like '2%'" + " and
			 * substr(s.scheme_code,1,16)='"+habCode+"'";
			 * Debug.println("countQuery is "+countQuery); Debug.println("*6");
			 * rs2=stmt2.executeQuery(countQuery); if(rs2.next()) {
			 * openwellCount=rs2.getInt("count"); Debug.println("openwellCount is
			 * "+openwellCount); }
			 * 
			 * countQuery="select count(*) as count from rws_asset_mast_tbl
			 * a,rws_asset_scheme_tbl s,RWS_OPENWELL_POND_TBL SUBCOMPTBL" + " where
			 * a.asset_code=subcompTbl.asset_code and a.asset_code=s.asset_code and
			 * substr(s.scheme_code,17,3) like '7%'" + " and
			 * substr(s.scheme_code,1,16)='"+habCode+"'";
			 * Debug.println("countQuery is "+countQuery); Debug.println("*7");
			 * rs2=stmt2.executeQuery(countQuery); if(rs2.next()) {
			 * pondsCount=rs2.getInt("count"); Debug.println("pondsCount is "+pondsCount); }
			 * 
			 * countQuery="select count(*) as count from rws_asset_mast_tbl
			 * a,rws_asset_scheme_tbl s" + " where a.asset_code=s.asset_code and
			 * substr(s.scheme_code,17,3) like '8%'" + " and
			 * substr(s.scheme_code,1,16)='"+habCode+"'";
			 * Debug.println("countQuery is "+countQuery); Debug.println("*8");
			 * rs2=stmt2.executeQuery(countQuery); if(rs2.next()) {
			 * cpwsCount=rs2.getInt("count"); Debug.println("cpwsCount is
			 * "+cpwsCount); } //end of code Debug.println("in getHabSupplyStatus in
			 * RwsMasterData.java"); Debug.println("*9");
			 */

			String query = "select ";

			// pwsCount
			query = query + "(select count(*) as count from rws_asset_mast_tbl a,rws_asset_scheme_tbl s"
					+ " where a.asset_code=s.asset_code and substr(s.scheme_code,17,3) like '6%'"
					+ " and substr(s.scheme_code,1,16)='" + habCode + "')as pwsCount,";

			// mpwsCount
			query = query + "(select count(*) as count from rws_asset_mast_tbl a,rws_asset_scheme_tbl s"
					+ " where a.asset_code=s.asset_code and substr(s.scheme_code,17,3) like '4%'"
					+ " and substr(s.scheme_code,1,16)='" + habCode + "')as mpwsCount,";

			// hpCount
			query = query
					+ "(select count(*) as count from rws_asset_mast_tbl a,rws_asset_scheme_tbl s,RWS_HP_SUBCOMP_PARAM_TBL h"
					+ " where a.asset_code=s.asset_code and substr(s.scheme_code,17,3) like '0%'"
					+ " and h.asset_code=a.asset_code and substr(s.scheme_code,1,16)='" + habCode + "')as hpCount,";

			// shpCount
			query = query + "(select count(*) as count from rws_asset_mast_tbl a,rws_asset_scheme_tbl s,"
					+ " RWS_SHALLOWHANDPUMPS_TBL subcompTbl where a.asset_code=s.asset_code and substr(s.scheme_code,17,3) like '3%'"
					+ " and substr(s.scheme_code,1,16)='" + habCode
					+ "' and subcompTbl.asset_code=a.asset_code)as shpCount,";

			// openWellCount
			query = query
					+ "(select count(*) as count from rws_asset_mast_tbl a,rws_asset_scheme_tbl s, RWS_OPEN_WELL_MAST_TBL subcompTbl"
					+ " where a.asset_code=subcompTbl.asset_code and a.asset_code=s.asset_code and substr(s.scheme_code,17,3) like '2%'"
					+ " and substr(s.scheme_code,1,16)='" + habCode + "')as openWellCount,";

			// pondsCount
			query = query
					+ "(select count(*) as count from rws_asset_mast_tbl a,rws_asset_scheme_tbl s,RWS_OPENWELL_POND_TBL SUBCOMPTBL"
					+ " where a.asset_code=subcompTbl.asset_code and a.asset_code=s.asset_code and substr(s.scheme_code,17,3) like '7%'"
					+ " and substr(s.scheme_code,1,16)='" + habCode + "')as pondsCount,";

			// cpwsCount
			query = query + "(select count(*) as count from rws_asset_mast_tbl a,rws_asset_scheme_tbl s"
					+ " where a.asset_code=s.asset_code and substr(s.scheme_code,17,3) like '8%'"
					+ " and substr(s.scheme_code,1,16)='" + habCode + "')as cpwsCount";

			query = query + " from dual";

			Debug.println("query is " + query);

			rs2 = stmt2.executeQuery(query);
			if (rs2.next()) {
				pwsCount = rs2.getInt("pwsCount");
				Debug.println("pwsCount is " + pwsCount);
				mpwsCount = rs2.getInt("mpwsCount");
				Debug.println("mpwsCount is " + mpwsCount);
				hpCount = rs2.getInt("hpCount");
				Debug.println("hpCount is " + hpCount);
				shpCount = rs2.getInt("shpCount");
				Debug.println("shpCount is " + shpCount);
				openwellCount = rs2.getInt("openWellCount");
				Debug.println("openWellCount is " + openwellCount);
				pondsCount = rs2.getInt("pondsCount");
				Debug.println("pondsCount is " + pondsCount);
				cpwsCount = rs2.getInt("cpwsCount");
				Debug.println("cpwsCount is " + cpwsCount);

			}

			stmt = conn.createStatement();
			Debug.println("habCode=" + habCode);
			query = "SELECT * FROM RWS_HABITATION_DIRECTORY_TBL WHERE HAB_CODE='" + habCode + "'";
			Debug.println("query=" + query);
			Debug.println("*10");
			rs = stmt.executeQuery(query);
			int netPop = 0;
			double totpop = 0;
			int csyear = 0;
			if (rs.next()) {
				rwsMaster = new RwsMaster();
				habcode = rs.getString(4);
				try {
					rwsMaster.setCoc(rs.getString(1));
					rwsMaster.setDoc(rs.getString(2));
					rwsMaster.setSdoc(rs.getString(3));
					rwsMaster.setCon(getCircleOfficeName("1", rs.getString(1), conn));
					rwsMaster.setDon(getDivisionOfficeName("1", rs.getString(1), rs.getString(2), conn));
					rwsMaster.setSdon(
							getSubDivisionOfficeName("1", rs.getString(1), rs.getString(2), rs.getString(3), conn));
				} catch (Exception e) {
					Debug.println("Exception in getting coc or doc or sdoc is " + e);
				}
				rwsMaster.setDcode(habcode.substring(0, 2));
				rwsMaster.setDistrict(getDistrictName(habcode.substring(0, 2), conn));
				rwsMaster.setMandal(habcode.substring(5, 7));
				rwsMaster.setMandalName(getMandalName(habcode.substring(0, 2), habcode.substring(5, 7), conn));
				Debug.println("*11");
				rwsMaster.setPCode(habcode.substring(12, 14));
				rwsMaster.setVCode(habcode.substring(7, 10));
				rwsMaster.setPName(getPanchayatName(habcode.substring(0, 2), habcode.substring(5, 7),
						habcode.substring(12, 14), conn));
				rwsMaster.setVName(getVillageName(habcode.substring(0, 2), habcode.substring(5, 7),
						habcode.substring(12, 14), habcode.substring(7, 10), conn));
				Debug.println("*12");
				rwsMaster.setHabCode(format(rs.getString(4)));
				rwsMaster.setHabName(format(getHabName(rs.getString(4), conn)));
				rwsMaster.setCensusYear(format(rs.getString(5)));

				try {
					csyear = Integer.parseInt(format(rs.getString(5)));
					rwsMaster.setCensusPop(rs.getInt(6));
					rwsMaster.setCensusSc(rs.getInt(7));
					rwsMaster.setCensusSt(rs.getInt(8));
					rwsMaster.setTotalPop(rs.getInt(6) + rs.getInt(7) + rs.getInt(8));
					rwsMaster.setFloatPop(rs.getInt(9));
					netPop = rs.getInt(6) + rs.getInt(7) + rs.getInt(8) + rs.getInt(9);
					rwsMaster.setNetPop(netPop);
				} catch (Exception e) {
					Debug.println("Exception in getting population details " + e);
				}
				Debug.println("*13");
				rwsMaster.setFloatReason(rs.getString(10));
				rwsMaster.setHabYear(df.format(rs.getDate(11)));
				rwsMaster.setPopCovered(rs.getInt(12));
				rwsMaster.setScCovered(rs.getInt(13));
				rwsMaster.setStCovered(rs.getInt(14));
				rwsMaster.setTotalCovered(rs.getInt(12) + rs.getInt(13) + rs.getInt(14));
				rwsMaster.setTotalWaterSupply(rs.getInt(15));
				rwsMaster.setExistWaterLevel(rs.getInt(16));
				Debug.println("coverageStatus in RwsMasterData is " + rs.getString(17));
				rwsMaster.setCoveredStatus(rs.getString(17));
				rwsMaster.setNearWaterSource(rs.getInt(18));
				rwsMaster.setNearWaterGroundSource(rs.getInt(19));
				rwsMaster.setRemarks(rs.getString(20));
				rwsMaster.setQualityAffected(rs.getString(21));
				Debug.println("*14");
				if (rs.getString(22) == null)
					rwsMaster.setUpdateDate("");
				else
					rwsMaster.setUpdateDate(df.format(rs.getDate(22)));
				if (rs.getString(21) == null) {
					rwsMaster.setPrevYrStatus("");
					rwsMaster.setPresentvYrStatus("");
					Debug.println("previous yr status in getHabSupplyStatus() in dao is ''");
				} else {
					rwsMaster.setPrevYrStatus(rs.getString(23));
					rwsMaster.setPresentvYrStatus(rs.getString(24));
					Debug.println("previous yr status in getHabSupplyStatus() in dao is " + rs.getString(23));
				}
				Debug.println("*15");
				rwsMaster.setProposedFcYr(rs.getString(25));
				rwsMaster.setProposedFCAmt(rs.getInt(26));
				stmt1 = conn.createStatement();
				query = "SELECT P_INST_CODE,INST_NAME,P_INST_NO,P_INST_COVERED,P_INST_WORKING,P_INST_NOTWORKING_NO FROM RWS_HAB_INSTITUTE_TBL HI,RWS_PUBLIC_INSTITUTE_TBL I WHERE HI.P_INST_CODE=I.INST_CODE AND HAB_CODE='"
						+ habCode + "'";
				Debug.println("query for inst=" + query);
				rs1 = stmt1.executeQuery(query);
				Debug.println("*16");
				while (rs1.next()) {
					habInstitute = new HabInstitute();
					habInstitute.setInstituteCode(rs1.getString(1));
					habInstitute.setInstituteName(rs1.getString(2));
					habInstitute.setInstituteNo(rs1.getString(3));
					habInstitute.setInstituteCovered(rs1.getString(4));
					habInstitute.setInstituteWorking(rs1.getString(5));
					habInstitute.setInstituteNotWorking(rs1.getString(6));

					institutes.add(habInstitute);
				}
				Debug.println("*17");
				Debug.println("printing institutes size");
				Debug.println("institutes size is " + institutes.size());
				rwsMaster.setHabInsts(institutes);

				stmt3 = conn.createStatement();

				String q = null;
				q = " SELECT NVL(shp_dk_supply,0)as shp_dk_supply, NVL(shp_no,0)as shp_no, cisterns_dk_supply, cisterns_no, glsrs_dk_supply, glsrs_no,"
						+ " ohsrs_dk_supply, ohsrs_no, (NVL(shp_dk_supply,0) "
						+ " + NVL(cisterns_dk_supply,0) + NVL(glsrs_dk_supply,0) + NVL(ohsrs_dk_supply,0)), "
						+ " ( NVL(shp_no,0) + NVL(cisterns_no,0) + NVL(glsrs_no,0) + NVL(ohsrs_no,0) ), "
						+ " NVL(hps_oth_supply,0)as hps_oth_supply, NVL(hps_no,0)hps_no, ows_oth_supply, NVL(ows_no,0)ows_no, NVL(ponds_oth_supply,0)ponds_oth_supply,NVL(ponds_no,0)ponds_no, shwell_oth_supply,"
						+ " shwell_no, (NVL(hps_oth_supply,0) + NVL(ows_oth_supply,0) + NVL(ponds_oth_supply,0)  "
						+ " + NVL(shwell_oth_supply,0)), (NVL(hps_no,0) + NVL(ows_no,0) + NVL(ponds_no,0) + NVL(shwell_no,0)), "
						+ " pcpd_drink, pcpd_others, (NVL(pcpd_drink,0) +NVL(pcpd_others,0)), stat_of_hab, "
						+ "NVL(PWS_NO,0)pws_no,NVL(PWS_SUPPLY,0)pws_supply,NVL(MPWS_NO,0)mpws_no,NVL(MPWS_SUPPLY,0)mpws_supply,NVL(CPWS_NO,0)as cpws_no,NVL(CPWS_SUPPLY,0)as cpws_supply,NVL(HPS_NO_UNSAFE,0)as HPS_NO_UNSAFE,NVL(HPS_OTH_SUPPLY_UNSAFE,0)as HPS_OTH_SUPPLY_UNSAFE,NVL(DW_TANKS_NO,0)as dw_tanks_no,NVL(DW_TANKS_SUPPLY,0)dw_tanks_supply,NVL(CATTLE_NO,0)as cattle_no,NVL(CATTLE_SUPPLY,0)as cattle_supply"
						+ " FROM rws_hab_supply_status_tbl WHERE hab_code='" + habCode + "'";
				Debug.println(" SELECT QUERY is " + q);
				Debug.println("*18");
				rs3 = stmt3.executeQuery(q);
				while (rs3.next()) {
					Debug.println("*19");
					habWS = new HabWaterSupply();
					rwsMaster.setShpSupply(rs3.getString("shp_dk_supply"));
					// rwsMaster.setShpNo(rs3.getString(2));
					// rwsMaster.setShpNo(shpCount+"");
					rwsMaster.setShpNo(rs3.getString("shp_no"));
					rwsMaster.setCisternsSupply(rs3.getString("cisterns_dk_supply"));
					rwsMaster.setCisternsNo(rs3.getString("cisterns_no"));
					rwsMaster.setGlsrSupply(rs3.getString("glsrs_dk_supply"));
					rwsMaster.setGlsrNo(rs3.getString("glsrs_no"));
					rwsMaster.setOhsrSupply(rs3.getString("ohsrs_dk_supply"));
					rwsMaster.setOhsrNo(rs3.getString("ohsrs_no"));
					double drinkTotalSupply = rs3.getDouble(9);
					rwsMaster.setDrinkTotalSupply(String.valueOf(drinkTotalSupply));
					rwsMaster.setDrinkTotalNo(rs3.getString(10));
					rwsMaster.setHpSupply(rs3.getString("hps_oth_supply"));
					// rwsMaster.setHpNo(rs3.getString(12));
					// rwsMaster.setHpNo(hpCount+"");
					rwsMaster.setHpNo(rs3.getString("hps_no"));
					// rwsMaster.setHpNo("hps_no");

					rwsMaster.setOwsSupply(rs3.getString("ows_oth_supply"));
					rwsMaster.setOwsNo(rs3.getString("ows_no"));
					Debug.println("*20");
					// rwsMaster.setOwsNo(openwellCount+"");
					rwsMaster.setPondsSupply(rs3.getString("ponds_oth_supply"));
					// rwsMaster.setPondsNo(rs3.getString(16));

					// this comment should be removed
					// rwsMaster.setPondsNo(pondsCount+"");
					rwsMaster.setPondsNo(rs3.getString("ponds_no"));

					// rwsMaster.setPondsNo("");
					rwsMaster.setShwSupply(rs3.getString("shwell_oth_supply"));
					rwsMaster.setShwNo(rs3.getString("shwell_no"));
					double otherTotalSupply = rs3.getDouble(19);
					rwsMaster.setOtherTotalSupply(String.valueOf(otherTotalSupply));
					rwsMaster.setOtherTotalNo(rs3.getString(20));

					rwsMaster.setPcpdDrink(rs3.getString(21));
					rwsMaster.setPcpdOthers(rs3.getString(22));
					rwsMaster.setPcpdTotal(rs3.getString(23));
					rwsMaster.setStatus(rs3.getString(24));
					// rwsMaster.setPwsNo(rs3.getString(25));

					// rwsMaster.setPwsNo(pwsCount+"");
					rwsMaster.setPwsNo(rs3.getString("pws_no"));
					rwsMaster.setPwsSupply(rs3.getString("pws_supply"));
					rwsMaster.setMpwsNo(rs3.getString("mpws_no"));
					// rwsMaster.setMpwsNo(mpwsCount+"");
					rwsMaster.setMpwsSupply(rs3.getString("mpws_supply"));
					rwsMaster.setCpwsNo(rs3.getString("cpws_no"));
					// rwsMaster.setCpwsNo(cpwsCount+"");
					rwsMaster.setCpwsSupply(rs3.getString("cpws_supply"));
					rwsMaster.setDpNo(rs3.getString("HPS_NO_UNSAFE"));
					rwsMaster.setDpSupply(rs3.getString("HPS_OTH_SUPPLY_UNSAFE"));
					rwsMaster.setDwNo(rs3.getString("dw_tanks_no"));
					rwsMaster.setDwSupply(rs3.getString("dw_tanks_supply"));
					rwsMaster.setCattleNo(rs3.getString("cattle_no"));
					Debug.println("*21");
					rwsMaster.setCattleSupply(rs3.getString("cattle_supply"));

					double totalWaterSupply = drinkTotalSupply + otherTotalSupply;
					rwsMaster.setTotalWaterSupply((int) (totalWaterSupply));

					Calendar rightNow = Calendar.getInstance();
					int year = rightNow.get(Calendar.YEAR);
					Debug.println("year=" + year + "csyear=" + csyear + "val="
							+ Math.pow(1.02, Double.parseDouble("" + (year - csyear))));
					totpop = Double.parseDouble("" + netPop);
					totpop = totpop * Math.pow(1.02, Double.parseDouble("" + (year - csyear)));
					Debug.println("netpop=" + totpop);

					rwsMaster.setLevelOfWaterSupply(String.valueOf(totalWaterSupply / totpop));
					waterSupply.add(rwsMaster);
				}
				rwsMaster.setHabWaterSupply(waterSupply);
				Debug.println("*22");
				stmt3 = conn.createStatement();
				query = " SELECT NVL(cont_type,''), NVL(cont_perc,0.0) " + " FROM rws_hab_contamination_tbl"
						+ " WHERE hab_code = '" + habCode + "'";
				Debug.println("contam query=" + query);
				rs3 = stmt3.executeQuery(query);
				Debug.println("*23");
				while (rs3.next()) {
					contaminationTypes = new ContaminationTypes();
					contaminationTypes.setContType(rs3.getString(1));
					contaminationTypes.setPercent(rs3.getDouble(2));
					contaminations.add(contaminationTypes);
					rwsMaster.setContamName(rs3.getString(1));
					rwsMaster.setPercent(rs3.getString(2));
				}
				Debug.println("*24");
				rwsMaster.setContaminations(contaminations);
			}
		} catch (Exception e) {
			Debug.println("The error in getHabSupplyStatus = " + e);
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (Exception e) {
					Debug.println("The error in rwsMasterData in closing rs " + e);
				}
				rs = null;
			}
			if (rs1 != null) {
				try {
					rs1.close();
				} catch (Exception e) {
					Debug.println("The error in rwsMasterData in closing rs " + e);
				}
				rs1 = null;
			}
			if (rs2 != null) {
				try {
					rs2.close();
				} catch (Exception e) {
					Debug.println("The error in rwsMasterData in closing rs " + e);
				}
				rs2 = null;
			}
			if (rs3 != null) {
				try {
					rs3.close();
				} catch (Exception e) {
					Debug.println("The error in rwsMasterData in closing rs " + e);
				}
				rs3 = null;
			}
			if (stmt != null) {
				try {
					stmt.close();
				} catch (Exception e) {
					Debug.println("The error in closing stmt=" + e);
				}
				stmt = null;
			}
			if (stmt1 != null) {
				try {
					stmt1.close();
				} catch (Exception e) {
					Debug.println("The error in closing stmt=" + e);
				}
				stmt1 = null;
			}
			if (stmt2 != null) {
				try {
					stmt2.close();
				} catch (Exception e) {
					Debug.println("The error in closing stmt=" + e);
				}
				stmt2 = null;
			}
			if (stmt3 != null) {
				try {
					stmt3.close();
				} catch (Exception e) {
					Debug.println("The error in closing stmt=" + e);
				}
				stmt3 = null;
			}
			if (conn != null) {
				try {
					conn.close();
				} catch (Exception e) {
					Debug.println("The error in closing conn=" + e);
				}
				conn = null;
			}
		}
		return rwsMaster;
	}

	public ArrayList getContamNames(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList contaminations = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			String query = "SELECT CONTAMINATION_NAME FROM RWS_CONTAMINATION_TBL";
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(query);
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setContamName(rwsMasterData.rs.getString("CONTAMINATION_NAME"));
				contaminations.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The error in getContaminations=" + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return contaminations;
	}


	public static ArrayList getContamNames(DataSource dataSource, String contiType) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList contaminations = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			String query = "SELECT CONTAMINATION_NAME FROM RWS_CONTAMINATION_TBL where CONTAMINATION_NAME =?";
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt.setString(1, contiType);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setContamName(rwsMasterData.rs.getString("CONTAMINATION_NAME"));
				contaminations.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The Exception in getContamNames in RwsMasterData : " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return contaminations;
	}

	public ArrayList getHabStatuss(String coc, String doc, String sdoc, String dcode, String mcode, String pcode,
			String vcode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList habstatuss = new ArrayList();

		try {
			Debug.println("in getHabStatuss");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			Debug.println("coc=" + coc + "doc=" + doc + "sdoc=" + sdoc + "dcode=" + dcode + "mcode=" + mcode + "pcode="
					+ pcode + "vcode=" + vcode);
			String query = "";

			if ((coc != null && !coc.equals("")) && (doc != null && !doc.equals(""))
					&& (sdoc != null && !sdoc.equals("")) && (dcode != null && !dcode.equals(""))
					&& (mcode != null && !mcode.equals("")) && (pcode == null || pcode.equals(""))
					&& (vcode == null || vcode.equals("")))
				query = " SELECT * FROM RWS_HABITATION_DIRECTORY_TBL " + " WHERE SUBSTR(hab_code,1,2) = '" + dcode + "'"
						+ " AND SUBSTR(hab_code,6,2) = '" + mcode + "'" + " AND CIRCLE_OFFICE_CODE = '" + coc + "'"
						+ " AND DIVISION_OFFICE_CODE  = '" + doc + "'" + " AND SUBDIVISION_OFFICE_CODE  = '" + sdoc
						+ "'" + " ORDER BY HAB_CODE ";
			else if ((coc != null && !coc.equals("")) && (doc != null && !doc.equals(""))
					&& (sdoc != null && !sdoc.equals("")) && (dcode != null && !dcode.equals(""))
					&& (mcode != null && !mcode.equals("")) && (pcode != null && !pcode.equals(""))
					&& (vcode == null || vcode.equals("")))
				query = " SELECT * FROM RWS_HABITATION_DIRECTORY_TBL " + " WHERE SUBSTR(hab_code,1,2) = '" + dcode + "'"
						+ " AND SUBSTR(hab_code,6,2) = '" + mcode + "'" + " AND SUBSTR(hab_code,13,2) = '" + pcode + "'"
						+ " AND CIRCLE_OFFICE_CODE = '" + coc + "'" + " AND DIVISION_OFFICE_CODE  = '" + doc + "'"
						+ " AND SUBDIVISION_OFFICE_CODE  = '" + sdoc + "'" + " ORDER BY HAB_CODE ";
			else if ((coc != null && !coc.equals("")) && (doc != null && !doc.equals(""))
					&& (sdoc != null && !sdoc.equals("")) && (dcode != null && !dcode.equals(""))
					&& (mcode != null && !mcode.equals("")) && (pcode != null && !pcode.equals(""))
					&& (vcode != null && !vcode.equals("")))
				query = " SELECT * FROM RWS_HABITATION_DIRECTORY_TBL " + " WHERE SUBSTR(hab_code,1,2) = '" + dcode + "'"
						+ " AND SUBSTR(hab_code,6,2) = '" + mcode + "'" + " AND SUBSTR(hab_code,8,3) = '" + vcode + "'"
						+ " AND SUBSTR(hab_code,13,2) = '" + pcode + "'" + " AND CIRCLE_OFFICE_CODE = '" + coc + "'"
						+ " AND DIVISION_OFFICE_CODE  = '" + doc + "'" + " AND SUBDIVISION_OFFICE_CODE  = '" + sdoc
						+ "'" + " ORDER BY HAB_CODE ";
			Debug.println(query);
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(query);
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setCoc(rwsMasterData.rs.getString(1));
				rwsMaster.setDoc(rwsMasterData.rs.getString(2));
				rwsMaster.setSdoc(rwsMasterData.rs.getString(3));
				rwsMaster.setHabCode(rwsMasterData.rs.getString(4));
				rwsMaster.setHabName(getHabName(rwsMasterData.rs.getString(4), rwsMasterData.conn));
				rwsMaster.setCensusYear(rwsMasterData.rs.getString(5));
				rwsMaster.setCensusPop(rwsMasterData.rs.getInt(6));
				rwsMaster.setCensusSc(rwsMasterData.rs.getInt(7));
				rwsMaster.setCensusSt(rwsMasterData.rs.getInt(8));
				rwsMaster.setTotalPop(
						rwsMasterData.rs.getInt(6) + rwsMasterData.rs.getInt(7) + rwsMasterData.rs.getInt(8));
				rwsMaster.setFloatPop(rwsMasterData.rs.getInt(9));
				rwsMaster.setNetPop(rwsMasterData.rs.getInt(6) + rwsMasterData.rs.getInt(7) + rwsMasterData.rs.getInt(8)
						+ rwsMasterData.rs.getInt(9));
				rwsMaster.setFloatReason(rwsMasterData.rs.getString(10));
				if (rwsMasterData.rs.getDate(11) != null) {
					rwsMaster.setHabYear(df.format(rwsMasterData.rs.getDate(11)));
				}
				rwsMaster.setPopCovered(rwsMasterData.rs.getInt(12));
				rwsMaster.setScCovered(rwsMasterData.rs.getInt(13));
				rwsMaster.setStCovered(rwsMasterData.rs.getInt(14));
				rwsMaster.setTotalCovered(
						rwsMasterData.rs.getInt(12) + rwsMasterData.rs.getInt(13) + rwsMasterData.rs.getInt(14));
				rwsMaster.setTotalWaterSupply(rwsMasterData.rs.getInt(15));
				rwsMaster.setExistWaterLevel(rwsMasterData.rs.getInt(16));
				rwsMaster.setCoveredStatus(rwsMasterData.rs.getString(17));
				rwsMaster.setNearWaterSource(rwsMasterData.rs.getInt(18));
				rwsMaster.setNearWaterGroundSource(rwsMasterData.rs.getInt(19));
				rwsMaster.setRemarks(rwsMasterData.rs.getString(20));

				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				if (rwsMasterData.rs.getString(22) == null)
					rwsMaster.setUpdateDate("");
				else
					rwsMaster.setUpdateDate(sdf.format(rwsMasterData.rs.getDate(22)));
				rwsMaster.setProposedFcYr(rwsMasterData.rs.getString(25));
				rwsMaster.setProposedFCAmt(rwsMasterData.rs.getInt(26));
				rwsMaster.setPrevYrStatus(rwsMasterData.rs.getString("PREVIOUS_YR_STATUS"));
				habstatuss.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The error in getHabStatuss=" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return habstatuss;
	}

	public int[] removeHabStatus(String habCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int[] updateCounts = new int[3];
		try {
			Debug.println("in removeHabStatus");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.conn.setAutoCommit(false);
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.stmt.addBatch("DELETE  FROM RWS_HAB_INSTITUTE_TBL WHERE HAB_CODE='" + habCode + "'");
			rwsMasterData.stmt.addBatch("DELETE  FROM RWS_HAB_COMPONENT_TBL WHERE HAB_CODE='" + habCode + "'");
			rwsMasterData.stmt.addBatch("DELETE  FROM RWS_HABITATION_DIRECTORY_TBL WHERE HAB_CODE='" + habCode + "'");
			updateCounts = rwsMasterData.stmt.executeBatch();
			rwsMasterData.conn.commit();
		} catch (Exception e) {
			Debug.println("The error in removeHabStatus= " + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return updateCounts;
	}

	public static int insertPriority(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("insert into RWS_PRIORITY_TBL values(?,?,?)");
			rwsMasterData.pstmt.setString(1, rwsMaster.getPriorityCode());
			rwsMasterData.pstmt.setString(2, rwsMaster.getPriorityDesc().toUpperCase());
			rwsMasterData.pstmt.setString(3, rwsMaster.getPriorityFrom().toUpperCase() );
			rowCount = rwsMasterData.pstmt.executeUpdate();
		} catch (Exception e) {
			Debug.println("Exception at insertPriority in RwsMasterData : " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return rowCount;
	}

	public static RwsMaster getPriority(String priorityCode, String priorityFrom, DataSource dataSource)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("select * from RWS_PRIORITY_TBL where priority_code=? and priority_from=?");
			rwsMasterData.pstmt.setString(1, priorityCode);
			rwsMasterData.pstmt.setString(2, priorityFrom);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setPriorityCode(rwsMasterData.rs.getString(1));
				rwsMaster.setPriorityDesc(rwsMasterData.rs.getString(2));
				rwsMaster.setPriorityFrom(rwsMasterData.rs.getString(3));
			}
		} catch (Exception e) {
			Debug.println("Exception at getPriority in RwsMasterData : " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return rwsMaster;
	}

	public static ArrayList getPrioritys(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList prioritys = new ArrayList();

		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("select * from RWS_PRIORITY_TBL order by to_number(priority_code)");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setPriorityCode(rwsMasterData.rs.getString(1));
				rwsMaster.setPriorityDesc(rwsMasterData.rs.getString(2));
				rwsMaster.setPriorityFrom(rwsMasterData.rs.getString(3));
				prioritys.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("Exception at  getPrioritys in RwsMasterData : " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return prioritys;
	}

	public static int removePriority(String priorityCode, String priorityFrom, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rcount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("delete  from RWS_PRIORITY_TBL where priority_code=? and priority_from=?");
			rwsMasterData.pstmt.setString(1, priorityCode);
			rwsMasterData.pstmt.setString(2, priorityFrom);
			rcount = rwsMasterData.pstmt.executeUpdate();
		} catch (Exception e) {
			Debug.println("Exceptio at  removePriority in RwsMasterData : " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return rcount;
	}

	public static void updatePriority(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("UPDATE  RWS_PRIORITY_TBL SET PRIORITY_FROM=?,PRIORITY_DESCRIPTION=? where priority_code=?");
			rwsMasterData.pstmt.setString(1,  rwsMaster.getPriorityFrom().toUpperCase());
			rwsMasterData.pstmt.setString(2,  rwsMaster.getPriorityDesc().toUpperCase());
			rwsMasterData.pstmt.setString(3,  rwsMaster.getPriorityCode());
			rwsMasterData.pstmt.executeUpdate();
		} catch (Exception e) {
			Debug.println("Exception at updatePriority in RwsMasterData : " + e);
		} finally {
			rwsMasterData.closeAll();
		}
	}

	public static String getPriorityCode(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String code = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("SELECT MAX(to_number(PRIORITY_CODE))+1 FROM RWS_PRIORITY_TBL");
			rwsMasterData.rs.next();
			code = rwsMasterData.rs.getString(1);
			if (code == null) {
				code = "01";
			} else if (code.length() == 1) {
				code = "0" + code;
			}
		} catch (Exception e) {
			Debug.println("Exception at  getPriorityCode in RwsMasterData : " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return code;
	}

	public static int insertWorkSpec(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			Debug.println("in insertWorkSpec");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rowCount = rwsMasterData.stmt.executeUpdate("insert into RWS_SPEC_SKILL_TBL values('"
					+ rwsMaster.getWorkSpecCode() + "','" + rwsMaster.getWorkSpecName().toUpperCase() + "')");
		} catch (SQLException sqle) {
			if (sqle.getErrorCode() == 1)
				errorMessage = "Record with this name exists.";
			Debug.println("The error in insertWorkSpec " + sqle);
		} catch (Exception e) {
			Debug.println("The error in insertWorkSpec" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static RwsMaster getWorkSpec(String skillCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		try {
			Debug.println("in getWorkSpec");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("select * from RWS_SPEC_SKILL_TBL where SKILL_CODE =" + skillCode);
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setWorkSpecCode(rwsMasterData.rs.getString(1));
				rwsMaster.setWorkSpecName(rwsMasterData.rs.getString(2));
			}
		} catch (Exception e) {
			Debug.println("The error in getWorkSpec" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rwsMaster;
	}

	public static ArrayList getWorkSpecs(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList workSpecs = new ArrayList();

		try {
			Debug.println("in getWorkSpecs");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery("select * from RWS_SPEC_SKILL_TBL order by SKILL_CODE");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setWorkSpecCode(rwsMasterData.rs.getString(1));
				rwsMaster.setWorkSpecName(rwsMasterData.rs.getString(2));

				rwsMaster.setAssetTypeNoName(rwsMasterData.rs.getString(1) + " - " + rwsMasterData.rs.getString(2));
				workSpecs.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The error in workspecs" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return workSpecs;
	}

	public static int removeWorkSpec(String skillCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rcount = 0;
		try {
			Debug.println("in removeWorkSpec");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rcount = rwsMasterData.stmt.executeUpdate("delete  from RWS_SPEC_SKILL_TBL where SKILL_CODE=" + skillCode);
		} catch (Exception e) {
			Debug.println("The error in removeWorkSpec" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rcount;
	}

	public static int updateWorkSpec(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int updateCount = 0;
		try {
			Debug.println("in updateWorkSpec");

			rwsMasterData.conn = RwsOffices.getConn();

			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			updateCount = rwsMasterData.stmt.executeUpdate("update  RWS_SPEC_SKILL_TBL set SKILL_DESCRIPTION='"
					+ rwsMaster.getWorkSpecName().toUpperCase() + "' where SKILL_CODE=" + rwsMaster.getWorkSpecCode());
		} catch (SQLException sqle) {
			if (sqle.getErrorCode() == 1)
				errorMessage = "Record with this name exists.";
			Debug.println("The error in updateHead " + sqle);
		} catch (Exception e) {
			Debug.println("The error in updateWorkSpec" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return updateCount;
	}

	public static String getWorkSpecialCode(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String code = null;
		try {
			Debug.println("in getWorkSpecialCode");

			rwsMasterData.conn = RwsOffices.getConn();

			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("SELECT MAX(to_number(SKILL_CODE))+1 FROM RWS_SPEC_SKILL_TBL");
			rwsMasterData.rs.next();
			code = rwsMasterData.rs.getString(1);
			if (code == null) {
				code = "1";
			}
		} catch (Exception e) {
			Debug.println("The error in getWorkSpecialCode" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return code;
	}

	// **********************************General Data
	// Methods*************************

	public static ArrayList getSourceAssets(String habCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList assets = new ArrayList();
		try {
			Debug.println("in getSourceAssets");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("select * from RWS_ASSET_TBL where HAB_CODE='" + habCode + "' order by asset_code");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				String code = rwsMasterData.rs.getString("ASSET_CODE");
				String name = rwsMasterData.rs.getString("ASSET_NAME");

				rwsMaster.setAssetTypeNoName(code + " - " + name);
				assets.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The error in getSourceAssets=" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return assets;
	}

	public static ArrayList getAssetHabs(DataSource dataSource, String dcode, String mcode) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster;
		ArrayList assethabs = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			/* query = "select panch_code,panch_name,(H.census_plain_popu + H.census_sc_popu + H.census_st_popu), H.coverage_status from RWS_PANCHAYAT_RAJ_TBL pr,
			 *  RWS_HABITATION_DIRECTORY_TBL H where pr.PANCH_CODE=H.HAB_CODE and h.coverage_status is not null and h.coverage_status<>'UI' and
			 *   pr.HAB_CODE in (SELECT hab_code FROM RWS_HABMAST_TBL WHERE DCODE='"
					+ dcode + "' and MCODE='" + mcode + "') order by panch_code";*/
			 String query = "select h.panch_code,h.panch_name,(Hd.census_plain_popu + Hd.census_sc_popu + Hd.census_st_popu), Hd.coverage_status from "
			 		+ "rws_district_tbl d,rws_mandal_tbl m,rws_panchayat_tbl p,rws_village_tbl v,rws_panchayat_raj_tbl h,rws_habitation_directory_tbl hd where "
			 		+ "d.dcode=m.dcode and m.dcode=p.dcode and m.mcode =p.mcode and p.dcode=v.dcode and p.mcode=v.mcode and p.pcode=v.pcode and "
			 		+ "substr (h.panch_code,1,2) = v.dcode and substr(h.panch_code,6,2) = v.mcode and substr(h.panch_code,13,2) = v.pcode and "
			 		+ "substr (h.panch_code,8,3) = v.vcode and h.panch_code=hd.hab_code and hd.coverage_status is not null and hd.coverage_status <> 'UI' and "
			 		+ "d.DCODE=? and m.MCODE=? order by h.panch_name";
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt.setString(1, dcode);
			rwsMasterData.pstmt.setString(2, mcode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setHabitation(rwsMasterData.rs.getString(1));
				rwsMaster.setHabCode(rwsMasterData.rs.getString(1));
				rwsMaster.setHabName(rwsMasterData.rs.getString(2));
				rwsMaster.setTotPopu(rwsMasterData.rs.getString(3));
				rwsMaster.setCovStatus(rwsMasterData.rs.getString(4));
				assethabs.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("Exception at  getAssetHabs in RwsMasterData : " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return assethabs;
	}

	public static ArrayList getAssetHabitations(String habCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster;
		ArrayList assethabs = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			String query = "select panch_code,panch_name from RWS_PANCHAYAT_RAJ_TBL where panch_code=?";
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt.setString(1, habCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setHabitation(rwsMasterData.rs.getString(1));
				rwsMaster.setHabCode(rwsMasterData.rs.getString(1));
				rwsMaster.setHabName(rwsMasterData.rs.getString(2));
				assethabs.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("Exception at getAssetHabs in RwsMasterData : " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return assethabs;
	}

	public static String getMandalName(String dcode, String mcode, DataSource dataSource, Connection conn)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String mname = null;
		Statement stmt = null;
		try {
			rwsMasterData.pstmt = conn.prepareStatement("select MNAME from RWS_MANDAL_TBL where MCODE=? and DCODE=?");
			rwsMasterData.pstmt .setString(1, mcode);
			rwsMasterData.pstmt .setString(2, dcode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				mname = rwsMasterData.rs.getString(1);
			}
		} catch (Exception e) {
			Debug.println("Exception at  getMandal Name in RwsMasterData : " + e);
		} finally {
			 rwsMasterData.pstmt.close();
			 rwsMasterData.rs.close();
		}
		return mname;
	}

	public static String getProgrammeCode(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String code = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn
					.prepareStatement("SELECT MAX(to_number(PROGRAMME_CODE))+1 FROM rws_programme_tbl");
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			rwsMasterData.rs.next();
			code = rwsMasterData.rs.getString(1);
			if (code == null) {
				code = "01";
			} else if (code.length() == 1) {
				code = "0" + code;
			}
		} catch (Exception e) {
			Debug.println("The error in getProgrammeCode in RwsMasterData  is " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return code;
	}

	public static int insertProgramme(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(
					"insert into rws_programme_tbl values(?,?,?,?,?,?,?,?,TO_DATE(?,'dd/mm/yyyy'),?,?,?)");
			rwsMasterData.pstmt.setString(1, rwsMaster.getPrgmCode());
			rwsMasterData.pstmt.setString(2, rwsMaster.getPrgmName().toUpperCase());
			rwsMasterData.pstmt.setString(3, rwsMaster.getPrgmStartYr());
			rwsMasterData.pstmt.setDouble(4, rwsMaster.getCentralShare());
			rwsMasterData.pstmt.setDouble(5, rwsMaster.getStateShare());
			rwsMasterData.pstmt.setDouble(6, rwsMaster.getPublicShare());
			rwsMasterData.pstmt.setDouble(7, rwsMaster.getOtherShare());
			rwsMasterData.pstmt.setString(8, rwsMaster.getStatus());
			rwsMasterData.pstmt.setString(9, rwsMaster.getPrgmEndDate());
			rwsMasterData.pstmt.setString(10, rwsMaster.getNrdwprelated());
			rwsMasterData.pstmt.setString(11, rwsMaster.getCmcoredb());
			rwsMasterData.pstmt.setString(12, rwsMaster.getProgBelongTo());
			rowCount = rwsMasterData.pstmt.executeUpdate();
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			if (sqle.getErrorCode() == 1)
				errorMessage = "Record with this name exists.";
			Debug.println("The error at insertProgramme in RwsMasterData " + sqle);
		} catch (Exception e) {
			System.out.println("Exception at insertProgramme in RwsMasterData " + e);
			e.printStackTrace();
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static RwsMaster getProgramme(String prgmCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		try {
			// Debug.println("in getProgramme");
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(
					"select PROGRAMME_CODE,PROGRAMME_NAME,PROGRAMME_START_YEAR,CENTRAL_SHARE,STATE_SHARE,PUBLIC_SHARE,OTHER_SHARE,FRESH_ONGOING,nvl(to_date(PROGRAMME_END_DATE,'dd/mm/yyyy'),'') as PROGRAMME_END_DATE,NRDWP_RELATED,cm_core_db,centre_state_district from RWS_PROGRAMME_TBL where PROGRAMME_CODE=?");
			rwsMasterData.pstmt.setString(1, prgmCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setPrgmCode(rwsMasterData.rs.getString("PROGRAMME_CODE"));
				rwsMaster.setPrgmName(rwsMasterData.rs.getString("PROGRAMME_NAME"));
				rwsMaster.setPrgmStartYr(rwsMasterData.rs.getString("PROGRAMME_START_YEAR"));
				rwsMaster.setCentralShare(rwsMasterData.rs.getDouble("CENTRAL_SHARE"));
				rwsMaster.setStateShare(rwsMasterData.rs.getDouble("STATE_SHARE"));
				rwsMaster.setPublicShare(rwsMasterData.rs.getDouble("PUBLIC_SHARE"));
				rwsMaster.setOtherShare(rwsMasterData.rs.getDouble("OTHER_SHARE"));
				rwsMaster.setStatus(rwsMasterData.rs.getString("FRESH_ONGOING"));
				if (rwsMasterData.rs.getDate("PROGRAMME_END_DATE") != null) {
					rwsMaster.setPrgmEndDate(df.format(rwsMasterData.rs.getDate("PROGRAMME_END_DATE")));
				}
				rwsMaster.setNrdwprelated(rwsMasterData.rs.getString("NRDWP_RELATED"));
				rwsMaster.setCmcoredb(rwsMasterData.rs.getString("cm_core_db"));
				rwsMaster.setProgBelongTo(rwsMasterData.rs.getString("centre_state_district"));
			}
		} catch (Exception e) {
			System.out.println("Exception at getProgramme In RwsMasterData " + e);// e.printStackTrace();
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return rwsMaster;
	}

	public static ArrayList getProgrammes(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList programmes = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(
							"select PROGRAMME_CODE,PROGRAMME_NAME,nvl(PROGRAMME_START_YEAR,'-'),nvl(CENTRAL_SHARE,'0'),nvl(STATE_SHARE,'0'),"
							+ "nvl(PUBLIC_SHARE,'0'),nvl(OTHER_SHARE,'0'),nvl(FRESH_ONGOING,'-'),nvl(to_date(PROGRAMME_END_DATE,'dd/mm/yyyy'),''),"
							+ "decode(NRDWP_RELATED,'Y','YES','N','NO'),decode(cm_core_db,'Y','YES','N','NO'),"
							+ "nvl(decode(centre_state_district,'C','Centre','S','State','D','District'),'--') as ProgBelongs  from "
							+ "RWS_PROGRAMME_TBL ORDER BY PROGRAMME_CODE");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setPrgmCode(rwsMasterData.rs.getString(1));
				rwsMaster.setPrgmName(rwsMasterData.rs.getString(2));
				rwsMaster.setPrgmStartYr(rwsMasterData.rs.getString(3));
				rwsMaster.setCentralShare(rwsMasterData.rs.getDouble(4));
				rwsMaster.setStateShare(rwsMasterData.rs.getDouble(5));
				rwsMaster.setPublicShare(rwsMasterData.rs.getDouble(6));
				rwsMaster.setOtherShare(rwsMasterData.rs.getDouble(7));
				if (rwsMasterData.rs.getString(8).equalsIgnoreCase("F"))
					rwsMaster.setStatus("FRESH");
				else
					rwsMaster.setStatus("ONGOING");

				if (rwsMasterData.rs.getDate(9) != null) {
					rwsMaster.setPrgmEndDate(df.format(rwsMasterData.rs.getDate(9)));
				}

				rwsMaster.setSubPrgDisplay(rwsMasterData.rs.getString(2));
				rwsMaster.setNrdwprelated(rwsMasterData.rs.getString(10));
				rwsMaster.setCmcoredb(rwsMasterData.rs.getString(11));
				rwsMaster.setProgBelongTo(rwsMasterData.rs.getString("ProgBelongs"));

				programmes.add(rwsMaster);
			}
		} catch (Exception e) {
			System.out.println("Exception at getProgrammes in RwsMasterData:  "+e);
		} finally {
			rwsMasterData.closeAll();
		}
		return programmes;
	}

	public static int removeProgramme(String prgmCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rcount = 0;
		try {
			// Debug.println("in removeProgramme");
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rcount = rwsMasterData.stmt
					.executeUpdate("delete  from RWS_PROGRAMME_TBL where PROGRAMME_CODE='" + prgmCode + "'");
		} catch (Exception e) {
			Debug.println("The error in removeProgramme is " + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rcount;
	}

	public static int updateProgramme(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int updateCount = 0;
		try {
			// Debug.println("in updateProgramme");
			//
			rwsMasterData.conn = RwsOffices.getConn();
			ps = rwsMasterData.conn.prepareStatement(
					"update  RWS_PROGRAMME_TBL set PROGRAMME_NAME=?,PROGRAMME_START_YEAR=?,CENTRAL_SHARE=?,STATE_SHARE=?,PUBLIC_SHARE=?,OTHER_SHARE=?,FRESH_ONGOING=?,PROGRAMME_END_DATE=TO_DATE(?,'dd/mm/yyyy'),NRDWP_RELATED=?,cm_core_db=?,centre_state_district=? where PROGRAMME_CODE=?");

			ps.setString(1, rwsMaster.getPrgmName().toUpperCase());
			ps.setString(2, rwsMaster.getPrgmStartYr());
			ps.setDouble(3, rwsMaster.getCentralShare());
			ps.setDouble(4, rwsMaster.getStateShare());
			ps.setDouble(5, rwsMaster.getPublicShare());
			ps.setDouble(6, rwsMaster.getOtherShare());
			ps.setString(7, rwsMaster.getStatus());
			ps.setString(8, rwsMaster.getPrgmEndDate());
			ps.setString(9, rwsMaster.getNrdwprelated());
			ps.setString(10, rwsMaster.getCmcoredb());
			ps.setString(11, rwsMaster.getProgBelongTo());
			ps.setString(12, rwsMaster.getPrgmCode());

			updateCount = ps.executeUpdate();
		} catch (SQLException sqle) {

			sqle.printStackTrace();
			if (sqle.getErrorCode() == 1)
				errorMessage = "Record with this name exists.";
			Debug.println("The error in updateHead " + sqle);
		} catch (Exception e) {
			System.out.println("Exception at updateProgramme in RwsMasterData is ");// e.printStackTrace();
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return updateCount;
	}

	// ***************************SubProgramme
	// Methods***************************************
	public static int insertSubProgramme(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(
					"insert into rws_subprogramme_tbl(PROGRAMME_CODE,SUBPROGRAMME_CODE,SUBPROGRAMME_NAME) values(?,?,?)");
			rwsMasterData.pstmt.setString(1, rwsMaster.getPrgmCode());
			rwsMasterData.pstmt.setString(2, rwsMaster.getSubprgmCode());
			rwsMasterData.pstmt.setString(3, rwsMaster.getSubprgmName().toUpperCase());
			rowCount = rwsMasterData.pstmt.executeUpdate();
		} catch (SQLException sqle) {
			Debug.println("The error at insertSubProgramme in RwsMasterData is  " + sqle);
			int errorCode = sqle.getErrorCode();
			if (errorCode == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			Debug.println("The error at insertSubProgramme in RwsMasterData is " + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static RwsMaster getSubProgramme(String prgmCode, String subprgmCode, DataSource dataSource)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;

		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(
					"select * from RWS_SUBPROGRAMME_TBL where SUBPROGRAMME_CODE=? and PROGRAMME_CODE=?");
			rwsMasterData.pstmt.setString(1, subprgmCode);
			rwsMasterData.pstmt.setString(2, prgmCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setPrgmCode(rwsMasterData.rs.getString(1));
				rwsMaster.setPrgmName(getPrgmName(rwsMasterData.rs.getString(1), rwsMasterData.conn));
				rwsMaster.setSubprgmCode(rwsMasterData.rs.getString(2));
				rwsMaster.setSubprgmName(rwsMasterData.rs.getString(3));
			}
		} catch (Exception e) {
			Debug.println("The error at getSubProgramme in RwsMasterData is " + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return rwsMaster;
	}

	public static ArrayList getSubProgrammes(String progCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList subprogrammes = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			if (progCode.equals(""))
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(
						"SELECT S.PROGRAMME_CODE,P.PROGRAMME_NAME,S.SUBPROGRAMME_CODE,S.SUBPROGRAMME_NAME FROM RWS_SUBPROGRAMME_TBL S,RWS_PROGRAMME_TBL P WHERE P.PROGRAMME_CODE=S.PROGRAMME_CODE ORDER BY P.PROGRAMME_CODE,S.SUBPROGRAMME_CODE");
			else {
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(
						"SELECT S.PROGRAMME_CODE,P.PROGRAMME_NAME,S.SUBPROGRAMME_CODE,S.SUBPROGRAMME_NAME FROM RWS_SUBPROGRAMME_TBL S,RWS_PROGRAMME_TBL P WHERE P.PROGRAMME_CODE=S.PROGRAMME_CODE AND P.PROGRAMME_CODE=?  ORDER BY P.PROGRAMME_CODE,S.SUBPROGRAMME_CODE");
				rwsMasterData.pstmt.setString(1, progCode);
			}
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setPrgmCode(rwsMasterData.rs.getString(1));
				rwsMaster.setPrgmName(rwsMasterData.rs.getString(2));
				rwsMaster.setSubprgmCode(rwsMasterData.rs.getString(3));
				rwsMaster.setSubprgmName(rwsMasterData.rs.getString(4));
				subprogrammes.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The error at getSubProgrammes In RwsMasterData is " + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return subprogrammes;
	}

	public static int removeSubProgramme(String prgmCode, String subprgmCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rcount = 0;
		try {
			// Debug.println("in removeSubProgramme");
			//
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rcount = rwsMasterData.stmt.executeUpdate("delete  from RWS_SUBPROGRAMME_TBL where SUBPROGRAMME_CODE='"
					+ subprgmCode + "' and PROGRAMME_CODE='" + prgmCode + "'");
		} catch (Exception e) {
			Debug.println("The error in removeSubProgramme is " + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rcount;
	}

	public static int updateSubProgramme(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int updateCount = 0;
		try {
			// Debug.println("in updateSubProgramme");
			//
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(
					"update  RWS_SUBPROGRAMME_TBL set SUBPROGRAMME_NAME=? where SUBPROGRAMME_CODE=? and PROGRAMME_CODE=?");
			rwsMasterData.pstmt.setString(1, rwsMaster.getSubprgmName().toUpperCase());
			rwsMasterData.pstmt.setString(2, rwsMaster.getSubprgmCode());
			rwsMasterData.pstmt.setString(3, rwsMaster.getPrgmCode());
			updateCount = rwsMasterData.pstmt.executeUpdate();
		} catch (SQLException sqle) {
			if (sqle.getErrorCode() == 1)
				errorMessage = "Record with this name exists.";
			Debug.println("The error at updateSubProgramme in RwsMasterData" + sqle);
		} catch (Exception e) {
			Debug.println("The error at updateSubProgramme in RwsMasterData " + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return updateCount;
	}

	public static String getSubProgrammeCode(String prgmCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String code = null;
		if (prgmCode != null) {
			try {
				rwsMasterData.conn = RwsOffices.getConn();
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(
						"SELECT MAX(to_number(SUBPROGRAMME_CODE))+1 FROM RWS_SUBPROGRAMME_TBL WHERE PROGRAMME_CODE=?");
				rwsMasterData.pstmt.setString(1, prgmCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				rwsMasterData.rs.next();
				code = rwsMasterData.rs.getString(1);
				if (code == null) {
					code = "01";
				} else if (code.length() == 1) {
					code = "0" + code;
				}
			} catch (Exception e) {
				Debug.println("The error in getSubProgrammeCode In RwsMasterData" + e);
			} finally {
				rwsMasterData.closeAll();
				// Debug.println("ConnCount after closing is " + connCount);
			}
		}
		return code;
	}

	public static ArrayList getSubProgrammeCodes(DataSource dataSource, String prgmCode) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList subprogrammes = new ArrayList();
		try {
			Debug.println("in getSubProgrammeCodes");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(
					"SELECT SUBPROGRAMME_CODE,SUBPROGRAMME_NAME FROM RWS_SUBPROGRAMME_TBL WHERE PROGRAMME_CODE='"
							+ prgmCode + "' ORDER BY SUBPROGRAMME_CODE");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setSubprgmCode(rwsMasterData.rs.getString(1));
				rwsMaster.setSubprgmName(rwsMasterData.rs.getString(2));

				subprogrammes.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The error in getSubProgrammeCodes in RwsMasterData is===" + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return subprogrammes;
	}
	
	public static int insertMajorHead(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("insert into rws_majorhead_tbl values (?,?)");
			rwsMasterData.pstmt.setString(1,  rwsMaster.getMajorHeadCode());
			rwsMasterData.pstmt.setString(2,  rwsMaster.getMajorHeadName().toUpperCase());
			rowCount = rwsMasterData.pstmt.executeUpdate();
		} catch (SQLException sqle) {
			int errorCode = sqle.getErrorCode();
			Debug.println("Error Code=" + errorCode + "message=" + sqle.getMessage());
			if (errorCode == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			Debug.println("The error in insertMajorHead in RwsMasterData " + e);
		} finally {
			rwsMasterData.closeAll();
			//Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static int insertAgency(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			// Debug.println("in insertMajorHead");
			//
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();

			rowCount = rwsMasterData.stmt.executeUpdate("insert into rws_agency_tbl(agency_name,agency_code) values('"
					+ rwsMaster.getAgencyName().toUpperCase() + "','" + rwsMaster.getAgencyCode() + "')");
		} catch (SQLException sqle) {
			int errorCode = sqle.getErrorCode();
			Debug.println("Error Code=" + errorCode + "message=" + sqle.getMessage());
			if (errorCode == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			Debug.println("The error in insertHead" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}

		return rowCount;
	}

	public static RwsMaster getMajorHead(String majorHeadCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;

		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("select * from rws_majorhead_tbl where major_head_code=?");
			rwsMasterData.pstmt.setString(1, majorHeadCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setMajorHeadCode(rwsMasterData.rs.getString(1));
				rwsMaster.setMajorHeadName(rwsMasterData.rs.getString(2));
			}
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		//	Debug.println("ConnCount after closing is " + connCount);
		}
		return rwsMaster;
	}

	public static RwsMaster getAgency(String agencycode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;

		try {
			// Debug.println("in getMajorHead");
			//
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("select * from rws_agency_tbl" + " where agency_code='" + agencycode + "'");
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setAgencyCode(rwsMasterData.rs.getString(2));
				rwsMaster.setAgencyName(rwsMasterData.rs.getString(1));
			}
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rwsMaster;
	}

	public static ArrayList getMajorHeads(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList majorheads = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("select * from rws_majorhead_tbl  order by major_head_code");
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setMajorHeadCode(rwsMasterData.rs.getString(1));
				rwsMaster.setMajorHeadName(rwsMasterData.rs.getString(2));
				rwsMaster.setCodeName(rwsMasterData.rs.getString(1) + " - " + rwsMasterData.rs.getString(2));
				majorheads.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The error is getMajorHeads in RwsMasterData " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		//	Debug.println("ConnCount after closing is " + connCount);
		}
		return majorheads;
	}

	public static ArrayList getAgencys(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList Agencys = new ArrayList();

		try {
			// Debug.println("in getMajorHeads");
			//
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("select * from rws_agency_tbl" + " order by agency_code");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setAgencyName(rwsMasterData.rs.getString(1));
				rwsMaster.setAgencyCode(rwsMasterData.rs.getString(2));

				rwsMaster.setCodeName(rwsMasterData.rs.getString(1) + " - " + rwsMasterData.rs.getString(2));
				Agencys.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The error is getAgencys= " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return Agencys;
	}

	public static int removeMajorHead(String majorHeadCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("delete  from rws_majorhead_tbl where major_head_code=?");
			rwsMasterData.pstmt.setString(1, majorHeadCode);
			rowCount = rwsMasterData.pstmt.executeUpdate();
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			//Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static int updateMajorHead(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int ans = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("update  rws_majorhead_tbl set major_head_name=? where major_head_code=?");
			rwsMasterData.pstmt.setString(1, rwsMaster.getMajorHeadName().toUpperCase());
			rwsMasterData.pstmt.setString(2, rwsMaster.getMajorHeadCode());
			ans = rwsMasterData.pstmt.executeUpdate();
		} catch (SQLException sqle) {
			if (sqle.getErrorCode() == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			Debug.println("the error in updateMajorHead " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			//Debug.println("ConnCount after closing is " + connCount);
		}
		return ans;
	}

	public static int updateAgency(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int ans = 0;
		try {
			// Debug.println("in Agency");
			//
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();

			ans = rwsMasterData.stmt
					.executeUpdate("update  rws_agency_tbl set agency_name='" + rwsMaster.getAgencyName().toUpperCase()
							+ "' where agency_code='" + rwsMaster.getAgencyCode() + "'");
		} catch (SQLException sqle) {
			if (sqle.getErrorCode() == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			Debug.println("the error in updateMajorHead= " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return ans;
	}

	// *************************************Sub Major Head
	// Methods****************************************
	public static int insertSubMajorHead(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("insert into rws_submajorhead_tbl values (?,?,?)");
			rwsMasterData.pstmt.setString(1, rwsMaster.getMajorHeadCode());
			rwsMasterData.pstmt.setString(2, rwsMaster.getSubmajorHeadCode() );
			rwsMasterData.pstmt.setString(3, rwsMaster.getSubmajorHeadName().toUpperCase());
			rowCount = rwsMasterData.pstmt.executeUpdate();
		} catch (SQLException sqle) {
			int errorCode = sqle.getErrorCode();
			if (errorCode == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			Debug.println("The error is insertSubMajorHead  " + e.getMessage());
		}
		finally {
			rwsMasterData.closeAll();			
		}
		return rowCount;
	}

	public static RwsMaster getSubMajorHead(String majorHeadCode, String submajorHeadCode, DataSource dataSource)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("select * from rws_submajorhead_tbl where submajor_head_code=? and major_head_code=?");
			rwsMasterData.pstmt.setString(1, submajorHeadCode);
			rwsMasterData.pstmt.setString(2, majorHeadCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setMajorHeadCode(rwsMasterData.rs.getString(1));
				rwsMaster.setMajorHeadName(getMajorHeadName(rwsMasterData.rs.getString(1), rwsMasterData.conn));
				rwsMaster.setSubmajorHeadCode(rwsMasterData.rs.getString(2));
				rwsMaster.setSubmajorHeadName(rwsMasterData.rs.getString(3));
			}
		} catch (Exception e) {
			Debug.println("the error is in getSubMajorHead " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			//Debug.println("ConnCount after closing is " + connCount);
		}
		return rwsMaster;
	}

	public static ArrayList getSubMajorHeads(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList submajorheads = new ArrayList();

		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();		
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery("select m.major_head_code,m.major_head_name,"
					+ "s.submajor_head_code,s.submajor_head_name from rws_majorhead_tbl m,rws_submajorhead_tbl s "
					+ "where m.major_head_code=s.major_head_code order by major_head_code,submajor_head_code");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setMajorHeadCode(rwsMasterData.rs.getString(1));
				rwsMaster.setMajorHeadName(rwsMasterData.rs.getString(2));
				rwsMaster.setSubmajorHeadCode(rwsMasterData.rs.getString(3));
				rwsMaster.setSubmajorHeadName(rwsMasterData.rs.getString(4));
				submajorheads.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			//Debug.println("ConnCount after closing is " + connCount);
		}
		return submajorheads;
	}

	public static int removeSubMajorHead(String majorHeadCode, String submajorHeadCode, DataSource dataSource)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("delete  from rws_submajorhead_tbl where submajor_head_code=?  and major_head_code=?");
			rwsMasterData.pstmt.setString(1, submajorHeadCode);
			rwsMasterData.pstmt.setString(2, majorHeadCode);
			rowCount = rwsMasterData.pstmt.executeUpdate();
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			//Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static int removeAgency(String agencycode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			// Debug.println("in remove agency"+agencycode);
			//
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rowCount = rwsMasterData.stmt
					.executeUpdate("delete from rws_agency_tbl where agency_code='" + agencycode + "'");
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static int updateSubMajorHead(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int ans = 0;
		try {			
			rwsMasterData.conn = RwsOffices.getConn();
			ps = rwsMasterData.conn.prepareStatement(	"update  rws_submajorhead_tbl set submajor_head_name=? where submajor_head_code=? and major_head_code=?");
			ps.setString(1, rwsMaster.getSubmajorHeadName().toUpperCase());
			ps.setString(2, rwsMaster.getSubmajorHeadCode());
			ps.setString(3, rwsMaster.getMajorHeadCode());
			ans = ps.executeUpdate();
		} catch (SQLException sqle) {
			if (sqle.getErrorCode() == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		//	Debug.println("ConnCount after closing is " + connCount);
		}
		return ans;
	}

	public static ArrayList getSubMajorHeadCodes(String majorHeadCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList submajorheads = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("select submajor_head_code,submajor_head_name from rws_submajorhead_tbl "
							+ "where major_head_code=? order by submajor_head_code");
			rwsMasterData.pstmt.setString(1, majorHeadCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {				
				rwsMaster = new RwsMaster();
				rwsMaster.setSubmajorHeadCode(rwsMasterData.rs.getString(1));
				rwsMaster.setSubmajorHeadName(rwsMasterData.rs.getString(2));
				rwsMaster.setCodeName(rwsMasterData.rs.getString(1) + " - " + rwsMasterData.rs.getString(2));
				submajorheads.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		//	Debug.println("ConnCount after closing is " + connCount);
		}
		return submajorheads;
	}

	public static int insertMinorHead(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("insert into rws_minorhead_tbl values (?,?,?,?)");
			rwsMasterData.pstmt.setString(1, rwsMaster.getMajorHeadCode());
			rwsMasterData.pstmt.setString(2, rwsMaster.getSubmajorHeadCode());
			rwsMasterData.pstmt.setString(3, rwsMaster.getMinorHeadCode());	
			rwsMasterData.pstmt.setString(4, rwsMaster.getMinorHeadName().toUpperCase());			
			rowCount = rwsMasterData.pstmt.executeUpdate();
		} catch (SQLException sqle) {
			int errorCode = sqle.getErrorCode();
			if (errorCode == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			Debug.println("The error in insertHead " + e);
		} finally {
			rwsMasterData.closeAll();
			//Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static RwsMaster getMinorHead(String majorHeadCode, String submajorHeadCode, String minorHeadCode,
			DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("select * from rws_minorhead_tbl "
					+ "where minor_head_code=? and major_head_code=? and submajor_head_code=? ");
			rwsMasterData.pstmt.setString(1, minorHeadCode);
			rwsMasterData.pstmt.setString(2, majorHeadCode);
			rwsMasterData.pstmt.setString(3, submajorHeadCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setMajorHeadCode(rwsMasterData.rs.getString(1));
				rwsMaster.setMajorHeadName(getMajorHeadName(rwsMasterData.rs.getString(1), rwsMasterData.conn));
				rwsMaster.setSubmajorHeadCode(rwsMasterData.rs.getString(2));
				rwsMaster.setSubmajorHeadName(getSubMajorHeadName(rwsMasterData.rs.getString(1),
						rwsMasterData.rs.getString(2), rwsMasterData.conn));
				rwsMaster.setMinorHeadCode(rwsMasterData.rs.getString(3));
				rwsMaster.setMinorHeadName(rwsMasterData.rs.getString(4));
			}
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rwsMaster;
	}

	public static ArrayList getMinorHeads(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList minorHeads = new ArrayList();

		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();		
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery("select mj.major_head_code,mj.major_head_name,"
					+ "s.submajor_head_code,s.submajor_head_name,mi.minor_head_code,mi.minor_head_name "
					+ "from rws_majorhead_tbl mj,rws_submajorhead_tbl s,"
					+ "rws_minorhead_tbl mi where mj.major_head_code=mi.major_head_code "
					+ "and s.submajor_head_code=mi.submajor_head_code and mj.major_head_code=s.major_head_code "
					+ "order by major_head_code,submajor_head_code,minor_head_code");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setMajorHeadCode(rwsMasterData.rs.getString(1));
				rwsMaster.setMajorHeadName(rwsMasterData.rs.getString(2));
				rwsMaster.setSubmajorHeadCode(rwsMasterData.rs.getString(3));
				rwsMaster.setSubmajorHeadName(rwsMasterData.rs.getString(4));
				rwsMaster.setMinorHeadCode(rwsMasterData.rs.getString(5));
				rwsMaster.setMinorHeadName(rwsMasterData.rs.getString(6));
				minorHeads.add(rwsMaster);
			}

		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();		
		}
		return minorHeads;
	}

	public static int removeMinorHead(String majorHeadCode, String submajorHeadCode, String minorHeadCode,
			DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("delete  from rws_minorhead_tbl  where minor_head_code=? and major_head_code=? and submajor_head_code=?");
			rwsMasterData.pstmt.setString(1, minorHeadCode);
			rwsMasterData.pstmt.setString(2, majorHeadCode);
			rwsMasterData.pstmt.setString(3, submajorHeadCode);
			rowCount = rwsMasterData.pstmt.executeUpdate();			
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			//Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static int updateMinorHead(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int ans = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			ps = rwsMasterData.conn.prepareStatement(	"update  rws_minorhead_tbl set minor_head_name=? where minor_head_code=? and submajor_head_code=? and major_head_code=?");
			ps.setString(1, rwsMaster.getMinorHeadName().toUpperCase());
			ps.setString(2, rwsMaster.getMinorHeadCode());
			ps.setString(3, rwsMaster.getSubmajorHeadCode());
			ps.setString(4, rwsMaster.getMajorHeadCode());
			ans = ps.executeUpdate();
		} catch (SQLException sqle) {
			if (sqle.getErrorCode() == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			//Debug.println("ConnCount after closing is " + connCount);
		}
		return ans;
	}

	public static ArrayList getMinorHeadCodes(String majorHeadCode, String submajorHeadCode, DataSource dataSource)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList minorHeads = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("select minor_head_code,minor_head_name from rws_minorhead_tbl where submajor_head_code=? and major_head_code=?");
			rwsMasterData.pstmt.setString(1, submajorHeadCode);
			rwsMasterData.pstmt.setString(2, majorHeadCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setMinorHeadCode(rwsMasterData.rs.getString(1));
				rwsMaster.setMinorHeadName(rwsMasterData.rs.getString(2));

				rwsMaster.setCodeName(rwsMasterData.rs.getString(1) + " - " + rwsMasterData.rs.getString(2));
				minorHeads.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			//Debug.println("ConnCount after closing is " + connCount);
		}
		return minorHeads;
	}
	
	public static int insertGrpSubHead(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {	
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("insert into rws_groupsubhead_tbl values(?,?,?,?,?)");
			rwsMasterData.pstmt.setString(1,  rwsMaster.getMajorHeadCode());
			rwsMasterData.pstmt.setString(2,  rwsMaster.getSubmajorHeadCode());
			rwsMasterData.pstmt.setString(3,  rwsMaster.getMinorHeadCode());
			rwsMasterData.pstmt.setString(4,  rwsMaster.getGrpSubHeadCode());
			rwsMasterData.pstmt.setString(5,  rwsMaster.getGrpSubHeadName().toUpperCase());						
			rowCount = rwsMasterData.pstmt.executeUpdate();
		} catch (SQLException sqle) {
			int errorCode = sqle.getErrorCode();
			if (errorCode == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			Debug.println("The error in insertGrpSubHead " + e);
		} finally {
			rwsMasterData.closeAll();
			//Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static RwsMaster getGrpSubHead(String majorHeadCode, String submajorHeadCode, String minorHeadCode,
			String grpSubHeadCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;

		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("select * from rws_groupsubhead_tbl where grp_subhead_code=? and "
					+ "major_head_code=? and submajor_head_code=? and minor_head_code=?");
			rwsMasterData.pstmt.setString(1, grpSubHeadCode);
			rwsMasterData.pstmt.setString(2, majorHeadCode);
			rwsMasterData.pstmt.setString(3, submajorHeadCode);
			rwsMasterData.pstmt.setString(4, minorHeadCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setMajorHeadCode(rwsMasterData.rs.getString("MAJOR_HEAD_CODE"));
				rwsMaster.setMajorHeadName(
						getMajorHeadName(rwsMasterData.rs.getString("MAJOR_HEAD_CODE"), rwsMasterData.conn));
				rwsMaster.setSubmajorHeadCode(rwsMasterData.rs.getString("SUBMAJOR_HEAD_CODE"));
				rwsMaster.setSubmajorHeadName(getSubMajorHeadName(rwsMasterData.rs.getString("MAJOR_HEAD_CODE"),
						rwsMasterData.rs.getString("SUBMAJOR_HEAD_CODE"), rwsMasterData.conn));
				rwsMaster.setMinorHeadCode(rwsMasterData.rs.getString("MINOR_HEAD_CODE"));
				rwsMaster.setMinorHeadName(getMinorHeadName(rwsMasterData.rs.getString("MAJOR_HEAD_CODE"),
						rwsMasterData.rs.getString("SUBMAJOR_HEAD_CODE"), rwsMasterData.rs.getString("MINOR_HEAD_CODE"),
						rwsMasterData.conn));
				rwsMaster.setGrpSubHeadCode(rwsMasterData.rs.getString("GRP_SUBHEAD_CODE"));
				rwsMaster.setGrpSubHeadName(rwsMasterData.rs.getString("GRPR_SUBHEAD_NAME"));
			}

		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			//Debug.println("ConnCount after closing is " + connCount);
		}
		return rwsMaster;
	}

	public static ArrayList getGrpSubHeads(DataSource dataSource, String plannonplan) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList grpSubHeads = new ArrayList();
		try {			
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			String groupsubheadquery = "";		
			if (plannonplan != null) {
				if (plannonplan.equals("1")) {
					groupsubheadquery = "SELECT MJ.MAJOR_HEAD_CODE,MJ.MAJOR_HEAD_NAME,S.SUBMAJOR_HEAD_CODE,S.SUBMAJOR_HEAD_NAME,M.MINOR_HEAD_CODE,M.MINOR_HEAD_NAME,G.GRP_SUBHEAD_CODE,G.GRPR_SUBHEAD_NAME FROM RWS_MAJORHEAD_TBL MJ,RWS_SUBMAJORHEAD_TBL S,RWS_MINORHEAD_TBL M,RWS_GROUPSUBHEAD_TBL G WHERE MJ.MAJOR_HEAD_CODE=G.MAJOR_HEAD_CODE AND S.MAJOR_HEAD_CODE=G.MAJOR_HEAD_CODE AND S.SUBMAJOR_HEAD_CODE=G.SUBMAJOR_HEAD_CODE AND M.MAJOR_HEAD_CODE=G.MAJOR_HEAD_CODE AND M.SUBMAJOR_HEAD_CODE=G.SUBMAJOR_HEAD_CODE AND M.MINOR_HEAD_CODE=G.MINOR_HEAD_CODE AND G.GRP_SUBHEAD_CODE!='000'";
				} else {
					groupsubheadquery = "SELECT MJ.MAJOR_HEAD_CODE,MJ.MAJOR_HEAD_NAME,S.SUBMAJOR_HEAD_CODE,S.SUBMAJOR_HEAD_NAME,M.MINOR_HEAD_CODE,M.MINOR_HEAD_NAME,G.GRP_SUBHEAD_CODE,G.GRPR_SUBHEAD_NAME FROM RWS_MAJORHEAD_TBL MJ,RWS_SUBMAJORHEAD_TBL S,RWS_MINORHEAD_TBL M,RWS_GROUPSUBHEAD_TBL G WHERE MJ.MAJOR_HEAD_CODE=G.MAJOR_HEAD_CODE AND S.MAJOR_HEAD_CODE=G.MAJOR_HEAD_CODE AND S.SUBMAJOR_HEAD_CODE=G.SUBMAJOR_HEAD_CODE AND M.MAJOR_HEAD_CODE=G.MAJOR_HEAD_CODE AND M.SUBMAJOR_HEAD_CODE=G.SUBMAJOR_HEAD_CODE AND M.MINOR_HEAD_CODE=G.MINOR_HEAD_CODE AND G.GRP_SUBHEAD_CODE='000'";
				}
			}
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(groupsubheadquery);
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setMajorHeadCode(rwsMasterData.rs.getString(1));
				rwsMaster.setMajorHeadName(rwsMasterData.rs.getString(2));
				rwsMaster.setSubmajorHeadCode(rwsMasterData.rs.getString(3));
				rwsMaster.setSubmajorHeadName(rwsMasterData.rs.getString(4));
				rwsMaster.setMinorHeadCode(rwsMasterData.rs.getString(5));
				rwsMaster.setMinorHeadName(rwsMasterData.rs.getString(6));
				rwsMaster.setGrpSubHeadCode(rwsMasterData.rs.getString(7));
				rwsMaster.setGrpSubHeadName(rwsMasterData.rs.getString(8));

				grpSubHeads.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("the error is in getGrpSubHeads= " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			//Debug.println("ConnCount after closing is " + connCount);
		}
		return grpSubHeads;
	}

	public static int removeGrpSubHead(String majorHeadCode, String submajorHeadCode, String minorHeadCode,
			String grpSubHeadCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("delete  from rws_groupsubhead_tbl where grp_subhead_code=?"
					+  " and major_head_code=? and submajor_head_code=? and minor_head_code=?");
			rwsMasterData.pstmt.setString(1, grpSubHeadCode);
			rwsMasterData.pstmt.setString(2, majorHeadCode);
			rwsMasterData.pstmt.setString(3, submajorHeadCode);
			rwsMasterData.pstmt.setString(4, minorHeadCode);
			rowCount = rwsMasterData.pstmt.executeUpdate();
		} catch (Exception e) {
			Debug.println("the error is in removeGrpSubHead()=" + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			//Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static int updateGrpSubHead(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int ans = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			ps = rwsMasterData.conn.prepareStatement(	"update rws_groupsubhead_tbl set grpr_subhead_name=? where grp_subhead_code=? and minor_head_code=? and submajor_head_code=? and major_head_code=?");
			ps.setString(1, rwsMaster.getGrpSubHeadName().toUpperCase());
			ps.setString(2, rwsMaster.getGrpSubHeadCode());
			ps.setString(3, rwsMaster.getMinorHeadCode());
			ps.setString(4, rwsMaster.getSubmajorHeadCode());
			ps.setString(5, rwsMaster.getMajorHeadCode());
			ans = ps.executeUpdate();
		} catch (SQLException sqle) {
			if (sqle.getErrorCode() == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			//Debug.println("ConnCount after closing is " + connCount);
		}
		return ans;
	}

	public static ArrayList getGrpSubHeadCodes(String majorHeadCode, String submajorHeadCode, String minorHeadCode,
			DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList grpSubHeads = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("select grp_subhead_code,grpr_subhead_name from RWS_GROUPSUBHEAD_TBL where "
					+ "submajor_head_code=? and major_head_code=? and minor_head_code=?");	
			rwsMasterData.pstmt.setString(1, submajorHeadCode);
			rwsMasterData.pstmt.setString(2, majorHeadCode);			
			rwsMasterData.pstmt.setString(3, minorHeadCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setGrpSubHeadCode(rwsMasterData.rs.getString(1));
				rwsMaster.setGrpSubHeadName(rwsMasterData.rs.getString(2));
				rwsMaster.setCodeName(rwsMasterData.rs.getString(1) + " - " + rwsMasterData.rs.getString(2));
				grpSubHeads.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		//	Debug.println("ConnCount after closing is " + connCount);
		}
		return grpSubHeads;
	}

	
	public static int insertSubHead(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("insert into rws_subhead_tbl values(?,?,?,?,?,?)");
			rwsMasterData.pstmt.setString(1,  rwsMaster.getMajorHeadCode());
			rwsMasterData.pstmt.setString(2,  rwsMaster.getSubmajorHeadCode());
			rwsMasterData.pstmt.setString(3,  rwsMaster.getMinorHeadCode());
			rwsMasterData.pstmt.setString(4,  rwsMaster.getGrpSubHeadCode());
			rwsMasterData.pstmt.setString(5,  rwsMaster.getSubHeadCode());		
			rwsMasterData.pstmt.setString(6,  rwsMaster.getSubHeadName().toUpperCase() );		
			rowCount = rwsMasterData.pstmt.executeUpdate();
		} catch (SQLException sqle) {
			int errorCode = sqle.getErrorCode();
			if (errorCode == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			Debug.println("The error in insertSubHead " + e);
		} finally {
			rwsMasterData.closeAll();
			//Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static RwsMaster getSubHead(String majorHeadCode, String submajorHeadCode, String minorHeadCode,
			String grpSubHeadCode, String subHeadCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("select * from rws_subhead_tbl where subhead_code=? and grp_subhead_code=?"
					+ " and major_head_code=? and submajor_head_code=? and minor_head_code=?");
			rwsMasterData.pstmt.setString(1, subHeadCode);
			rwsMasterData.pstmt.setString(2, grpSubHeadCode);
			rwsMasterData.pstmt.setString(3, majorHeadCode);
			rwsMasterData.pstmt.setString(4, submajorHeadCode);
			rwsMasterData.pstmt.setString(5, minorHeadCode);			
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery(	);
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setMajorHeadCode(rwsMasterData.rs.getString("MAJOR_HEAD_CODE"));
				rwsMaster.setMajorHeadName(
						getMajorHeadName(rwsMasterData.rs.getString("MAJOR_HEAD_CODE"), rwsMasterData.conn));
				rwsMaster.setSubmajorHeadCode(rwsMasterData.rs.getString("SUBMAJOR_HEAD_CODE"));
				rwsMaster.setSubmajorHeadName(getSubMajorHeadName(rwsMasterData.rs.getString("MAJOR_HEAD_CODE"),
						rwsMasterData.rs.getString("SUBMAJOR_HEAD_CODE"), rwsMasterData.conn));
				rwsMaster.setMinorHeadCode(rwsMasterData.rs.getString("MINOR_HEAD_CODE"));
				rwsMaster.setMinorHeadName(getMinorHeadName(rwsMasterData.rs.getString("MAJOR_HEAD_CODE"),
						rwsMasterData.rs.getString("SUBMAJOR_HEAD_CODE"), rwsMasterData.rs.getString("MINOR_HEAD_CODE"),
						rwsMasterData.conn));
				rwsMaster.setGrpSubHeadCode(rwsMasterData.rs.getString("GRP_SUBHEAD_CODE"));
				rwsMaster.setGrpSubHeadName(getGrpSubHeadName(rwsMasterData.rs.getString("MAJOR_HEAD_CODE"),
						rwsMasterData.rs.getString("SUBMAJOR_HEAD_CODE"), rwsMasterData.rs.getString("MINOR_HEAD_CODE"),
						rwsMasterData.rs.getString("GRP_SUBHEAD_CODE"), rwsMasterData.conn));
				rwsMaster.setSubHeadCode(rwsMasterData.rs.getString("SUBHEAD_CODE"));
				rwsMaster.setSubHeadName(rwsMasterData.rs.getString("SUBHEAD_NAME"));
			}
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			//Debug.println("ConnCount after closing is " + connCount);
		}
		return rwsMaster;
	}

	public static ArrayList getSubHeads(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList subHeads = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();

			rwsMasterData.rs = rwsMasterData.stmt.executeQuery("SELECT MJ.MAJOR_HEAD_CODE,MJ.MAJOR_HEAD_NAME,"
					+ "S.SUBMAJOR_HEAD_CODE,S.SUBMAJOR_HEAD_NAME," + "M.MINOR_HEAD_CODE,M.MINOR_HEAD_NAME,"
					+ "G.GRP_SUBHEAD_CODE,G.GRPR_SUBHEAD_NAME," + "SH.SUBHEAD_CODE,SH.SUBHEAD_NAME "
					+ "FROM RWS_MAJORHEAD_TBL MJ,RWS_SUBMAJORHEAD_TBL S,RWS_MINORHEAD_TBL M,RWS_GROUPSUBHEAD_TBL G,RWS_SUBHEAD_TBL SH WHERE MJ.MAJOR_HEAD_CODE=G.MAJOR_HEAD_CODE AND S.MAJOR_HEAD_CODE=G.MAJOR_HEAD_CODE AND S.SUBMAJOR_HEAD_CODE=G.SUBMAJOR_HEAD_CODE AND M.MAJOR_HEAD_CODE=G.MAJOR_HEAD_CODE AND M.SUBMAJOR_HEAD_CODE=G.SUBMAJOR_HEAD_CODE AND M.MINOR_HEAD_CODE=G.MINOR_HEAD_CODE AND G.MAJOR_HEAD_CODE=SH.MAJOR_HEAD_CODE AND G.SUBMAJOR_HEAD_CODE=SH.SUBMAJOR_HEAD_CODE AND G.MINOR_HEAD_CODE=SH.MINOR_HEAD_CODE AND G.GRP_SUBHEAD_CODE=SH.GRP_SUBHEAD_CODE");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setMajorHeadCode(rwsMasterData.rs.getString(1));
				rwsMaster.setMajorHeadName(rwsMasterData.rs.getString(2));
				rwsMaster.setSubmajorHeadCode(rwsMasterData.rs.getString(3));
				rwsMaster.setSubmajorHeadName(rwsMasterData.rs.getString(4));
				rwsMaster.setMinorHeadCode(rwsMasterData.rs.getString(5));
				rwsMaster.setMinorHeadName(rwsMasterData.rs.getString(6));
				rwsMaster.setGrpSubHeadCode(rwsMasterData.rs.getString(7));
				rwsMaster.setGrpSubHeadName(rwsMasterData.rs.getString(8));
				rwsMaster.setSubHeadCode(rwsMasterData.rs.getString(9));
				rwsMaster.setSubHeadName(rwsMasterData.rs.getString(10));

				subHeads.add(rwsMaster);
			}

		} catch (Exception e) {
			Debug.println("THE ERROR IS IN getSubHeads=" + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		//	Debug.println("ConnCount after closing is " + connCount);

		}
		return subHeads;
	}

	public static int removeSubHead(String majorHeadCode, String submajorHeadCode, String minorHeadCode,
			String grpSubHeadCode, String subHeadCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int count = 0;
		try {		

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(
					"SELECT * FROM rws_detailhead_tbl where subhead_code='" + subHeadCode + "' and grp_subhead_code='"
							+ grpSubHeadCode + "' and major_head_code='" + majorHeadCode + "' and submajor_head_code='"
							+ submajorHeadCode + "' and minor_head_code='" + minorHeadCode + "'");
			if (rwsMasterData.rs.next() == false) {
				count = rwsMasterData.stmt.executeUpdate("delete  from rws_subhead_tbl where subhead_code='"
						+ subHeadCode + "' and grp_subhead_code='" + grpSubHeadCode + "' and major_head_code='"
						+ majorHeadCode + "' and submajor_head_code='" + submajorHeadCode + "' and minor_head_code='"
						+ minorHeadCode + "'");
			}
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		//	Debug.println("ConnCount after closing is " + connCount);
		}
		return count;
	}

	public static int updateSubHead(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int ans = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			ps = rwsMasterData.conn.prepareStatement(
					"update  rws_subhead_tbl set subhead_name=? where subhead_code=? and grp_subhead_code=? and minor_head_code=? and submajor_head_code=? and major_head_code=?");
			ps.setString(1, rwsMaster.getSubHeadName().toUpperCase());
			ps.setString(2, rwsMaster.getSubHeadCode());
			ps.setString(3, rwsMaster.getGrpSubHeadCode());
			ps.setString(4, rwsMaster.getMinorHeadCode());
			ps.setString(5, rwsMaster.getSubmajorHeadCode());
			ps.setString(6, rwsMaster.getMajorHeadCode());
			ans = ps.executeUpdate();
		} catch (SQLException sqle) {
			if (sqle.getErrorCode() == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		//	Debug.println("ConnCount after closing is " + connCount);
		}
		return ans;
	}

	public static ArrayList getSubHeadCodes(String majorHeadCode, String submajorHeadCode, String minorHeadCode,
			String grpSubHeadCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList subHeads = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("select subhead_code,subhead_name from RWS_SUBHEAD_TBL where grp_subhead_code=?"
					+ " and submajor_head_code=? and major_head_code=? and minor_head_code=?");
			rwsMasterData.pstmt.setString(1, grpSubHeadCode);
			rwsMasterData.pstmt.setString(3, majorHeadCode);
			rwsMasterData.pstmt.setString(2, submajorHeadCode);
			rwsMasterData.pstmt.setString(4, minorHeadCode);			
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();			
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setSubHeadCode(rwsMasterData.rs.getString(1));
				rwsMaster.setSubHeadName(rwsMasterData.rs.getString(2));
				rwsMaster.setCodeName(rwsMasterData.rs.getString(1) + " - " + rwsMasterData.rs.getString(2));
				subHeads.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("the error is in getSubHeadCodes " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		//	Debug.println("ConnCount after closing is " + connCount);
		}
		return subHeads;
	}

	public static int insertDetailHead(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {		
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("insert into rws_detailhead_tbl values(?,?,?,?,?,?,?)");
			
			rwsMasterData.pstmt.setString(1,  rwsMaster.getMajorHeadCode());
			rwsMasterData.pstmt.setString(2,  rwsMaster.getSubmajorHeadCode());
			rwsMasterData.pstmt.setString(3,  rwsMaster.getMinorHeadCode());
			rwsMasterData.pstmt.setString(4,  rwsMaster.getGrpSubHeadCode());
			rwsMasterData.pstmt.setString(5,  rwsMaster.getSubHeadCode());		
			rwsMasterData.pstmt.setString(6,  rwsMaster.getDetailHeadCode());	
			rwsMasterData.pstmt.setString(7,  rwsMaster.getDetailHeadName().toUpperCase() );
			rowCount = rwsMasterData.pstmt.executeUpdate();
		} catch (SQLException sqle) {
			int errorCode = sqle.getErrorCode();
			if (errorCode == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			Debug.println("The Exception is in insertDetailHead " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		//	Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static RwsMaster getDetailHead(String majorHeadCode, String submajorHeadCode, String minorHeadCode,
			String grpSubHeadCode, String subHeadCode, String detailHeadCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;

		try {
		rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("select * from rws_detailhead_tbl where detail_head_code=? and subhead_code=? and "
					+ "grp_subhead_code=? and major_head_code=? and submajor_head_code=? and minor_head_code=?");
			rwsMasterData.pstmt.setString(1, detailHeadCode);		
			rwsMasterData.pstmt.setString(2, subHeadCode);	
			rwsMasterData.pstmt.setString(3, grpSubHeadCode);
			rwsMasterData.pstmt.setString(4, majorHeadCode);
			rwsMasterData.pstmt.setString(5, submajorHeadCode);
			rwsMasterData.pstmt.setString(6, minorHeadCode);		
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				
				rwsMaster.setMajorHeadCode(rwsMasterData.rs.getString(1));
				rwsMaster.setMajorHeadName(getMajorHeadName(rwsMasterData.rs.getString(1), rwsMasterData.conn));
				rwsMaster.setSubmajorHeadCode(rwsMasterData.rs.getString(2));
				rwsMaster.setSubmajorHeadName(getSubMajorHeadName(rwsMasterData.rs.getString(1),
						rwsMasterData.rs.getString(2), rwsMasterData.conn));
				rwsMaster.setMinorHeadCode(rwsMasterData.rs.getString(3));
				rwsMaster.setMinorHeadName(getMinorHeadName(rwsMasterData.rs.getString(1),
						rwsMasterData.rs.getString(2), rwsMasterData.rs.getString(3), rwsMasterData.conn));
				rwsMaster.setGrpSubHeadCode(rwsMasterData.rs.getString(4));
				rwsMaster.setGrpSubHeadName(
						getGrpSubHeadName(rwsMasterData.rs.getString(1), rwsMasterData.rs.getString(2),
								rwsMasterData.rs.getString(3), rwsMasterData.rs.getString(4), rwsMasterData.conn));
				rwsMaster.setSubHeadCode(rwsMasterData.rs.getString(5));
				rwsMaster.setSubHeadName(getSubHeadName(rwsMasterData.rs.getString(1), rwsMasterData.rs.getString(2),
						rwsMasterData.rs.getString(3), rwsMasterData.rs.getString(4), rwsMasterData.rs.getString(5),
						rwsMasterData.conn));
				rwsMaster.setDetailHeadCode(rwsMasterData.rs.getString(6));
				rwsMaster.setDetailHeadName(rwsMasterData.rs.getString(7));
			}
		} catch (Exception e) {
			Debug.println("the error is in getDetailHead " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			//Debug.println("ConnCount after closing is " + connCount);
		}
		return rwsMaster;
	}

	public static ArrayList getDetailHeads(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList detailHeads = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery("SELECT MJ.MAJOR_HEAD_CODE,MJ.MAJOR_HEAD_NAME,"
					+ "S.SUBMAJOR_HEAD_CODE,S.SUBMAJOR_HEAD_NAME," + "M.MINOR_HEAD_CODE,M.MINOR_HEAD_NAME,"
					+ "G.GRP_SUBHEAD_CODE,G.GRPR_SUBHEAD_NAME," + "SH.SUBHEAD_CODE,SH.SUBHEAD_NAME,"
					+ "D.DETAIL_HEAD_CODE,D.DETAIL_HEAD_NAME " + "FROM RWS_MAJORHEAD_TBL MJ,"
					+ "RWS_SUBMAJORHEAD_TBL S," + "RWS_MINORHEAD_TBL M," + "RWS_GROUPSUBHEAD_TBL G,"
					+ "RWS_SUBHEAD_TBL SH," + "RWS_DETAILHEAD_TBL D "
					+ "WHERE MJ.MAJOR_HEAD_CODE=G.MAJOR_HEAD_CODE AND " + "S.MAJOR_HEAD_CODE=G.MAJOR_HEAD_CODE AND "
					+ "S.SUBMAJOR_HEAD_CODE=G.SUBMAJOR_HEAD_CODE AND " + "M.MAJOR_HEAD_CODE=G.MAJOR_HEAD_CODE AND "
					+ "M.SUBMAJOR_HEAD_CODE=G.SUBMAJOR_HEAD_CODE AND " + "M.MINOR_HEAD_CODE=G.MINOR_HEAD_CODE AND "
					+ "G.MAJOR_HEAD_CODE=SH.MAJOR_HEAD_CODE AND " + "G.SUBMAJOR_HEAD_CODE=SH.SUBMAJOR_HEAD_CODE AND "
					+ "G.MINOR_HEAD_CODE=SH.MINOR_HEAD_CODE AND " + "G.GRP_SUBHEAD_CODE=SH.GRP_SUBHEAD_CODE AND "
					+ "SH.MAJOR_HEAD_CODE=D.MAJOR_HEAD_CODE AND " + "SH.SUBMAJOR_HEAD_CODE=D.SUBMAJOR_HEAD_CODE AND "
					+ "SH.MINOR_HEAD_CODE=D.MINOR_HEAD_CODE AND " + "SH.GRP_SUBHEAD_CODE=D.GRP_SUBHEAD_CODE AND "
					+ "SH.SUBHEAD_CODE=D.SUBHEAD_CODE");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setMajorHeadCode(rwsMasterData.rs.getString(1));
				rwsMaster.setMajorHeadName(rwsMasterData.rs.getString(2));
				rwsMaster.setSubmajorHeadCode(rwsMasterData.rs.getString(3));
				rwsMaster.setSubmajorHeadName(rwsMasterData.rs.getString(4));
				rwsMaster.setMinorHeadCode(rwsMasterData.rs.getString(5));
				rwsMaster.setMinorHeadName(rwsMasterData.rs.getString(6));
				rwsMaster.setGrpSubHeadCode(rwsMasterData.rs.getString(7));
				rwsMaster.setGrpSubHeadName(rwsMasterData.rs.getString(8));
				rwsMaster.setSubHeadCode(rwsMasterData.rs.getString(9));
				rwsMaster.setSubHeadName(rwsMasterData.rs.getString(10));
				rwsMaster.setDetailHeadCode(rwsMasterData.rs.getString(11));
				rwsMaster.setDetailHeadName(rwsMasterData.rs.getString(12));

				detailHeads.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("the error is in getDetailHeads " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			//Debug.println("ConnCount after closing is " + connCount);
		}
		return detailHeads;
	}

	public static int removeDetailHead(String majorHeadCode, String submajorHeadCode, String minorHeadCode,
			String grpSubHeadCode, String subHeadCode, String detailHeadCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int count = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("SELECT * FROM rws_subdetail_tbl where detail_head_code='" + detailHeadCode
							+ "' and subhead_code='" + subHeadCode + "' and grp_subhead_code='" + grpSubHeadCode
							+ "' and major_head_code='" + majorHeadCode + "' and submajor_head_code='"
							+ submajorHeadCode + "' and minor_head_code='" + minorHeadCode + "'");
			if (rwsMasterData.rs.next() == false) {
				count = rwsMasterData.stmt.executeUpdate("delete  from rws_detailhead_tbl where detail_head_code='"
						+ detailHeadCode + "' and subhead_code='" + subHeadCode + "' and grp_subhead_code='"
						+ grpSubHeadCode + "' and major_head_code='" + majorHeadCode + "' and submajor_head_code='"
						+ submajorHeadCode + "' and minor_head_code='" + minorHeadCode + "'");
			}
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			//Debug.println("ConnCount after closing is " + connCount);
		}
		return count;
	}

	public static int updateDetailHead(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int ans = 0;	
		try {
			rwsMasterData.conn = RwsOffices.getConn()		;
			String qryy = "update  rws_detailhead_tbl set detail_head_name=? where detail_head_code=? and subhead_code=?"
					+ " and grp_subhead_code=? and minor_head_code=? and submajor_head_code=? and major_head_code=?";
			ps = rwsMasterData.conn.prepareStatement(qryy);
			ps.setString(1, rwsMaster.getDetailHeadName().toUpperCase());
			ps.setString(2, rwsMaster.getDetailHeadCode());
			ps.setString(3, rwsMaster.getSubHeadCode());
			ps.setString(4, rwsMaster.getGrpSubHeadCode());
			ps.setString(5, rwsMaster.getMinorHeadCode());
			ps.setString(6, rwsMaster.getSubmajorHeadCode());
			ps.setString(7, rwsMaster.getMajorHeadCode());
			ans = ps.executeUpdate();
		} catch (SQLException sqle) {
			if (sqle.getErrorCode() == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			Debug.println("the error is in updateDetailHead " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		//	Debug.println("ConnCount after closing is " + connCount);
		}
		return ans;
	}

	public static ArrayList getDetailHeadCodes(String majorHeadCode, String submajorHeadCode, String minorHeadCode,
			String grpSubHeadCode, String subHeadCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList detailHeads = new ArrayList();
		try {		
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("select DETAIL_HEAD_CODE,DETAIL_HEAD_NAME from RWS_DETAILHEAD_TBL where subhead_code=?"
					+ " and grp_subhead_code=? and submajor_head_code=? and major_head_code=? and minor_head_code=?");	
			rwsMasterData.pstmt.setString(1, subHeadCode);	
			rwsMasterData.pstmt.setString(2, grpSubHeadCode);
			rwsMasterData.pstmt.setString(4, majorHeadCode);
			rwsMasterData.pstmt.setString(3, submajorHeadCode);
			rwsMasterData.pstmt.setString(5, minorHeadCode);	
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setDetailHeadCode(rwsMasterData.rs.getString(1));
				rwsMaster.setDetailHeadName(rwsMasterData.rs.getString(2));
				rwsMaster.setCodeName(rwsMasterData.rs.getString(1) + " - " + rwsMasterData.rs.getString(2));
				detailHeads.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			//Debug.println("ConnCount after closing is " + connCount);
		}
		return detailHeads;
	}

	// ********************************************************************************//

	public static int insertSubDetailHead(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {		
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("insert into rws_subdetail_tbl values(?,?,?,?,?,?,?,?)");
			rwsMasterData.pstmt.setString(1,  rwsMaster.getMajorHeadCode());
			rwsMasterData.pstmt.setString(2,  rwsMaster.getSubmajorHeadCode());
			rwsMasterData.pstmt.setString(3,  rwsMaster.getMinorHeadCode());
			rwsMasterData.pstmt.setString(4,  rwsMaster.getGrpSubHeadCode());
			rwsMasterData.pstmt.setString(5,  rwsMaster.getSubHeadCode());		
			rwsMasterData.pstmt.setString(6,  rwsMaster.getDetailHeadCode());	
			rwsMasterData.pstmt.setString(7,  rwsMaster.getSubDetailHeadCode());	
			rwsMasterData.pstmt.setString(8,  rwsMaster.getSubDetailHeadName().toUpperCase() );		
			rowCount = rwsMasterData.pstmt.executeUpdate();
		} catch (SQLException sqle) {
			int errorCode = sqle.getErrorCode();
			if (errorCode == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			Debug.println("The error in insertSubDetailHead " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			//Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static RwsMaster getSubDetailHead(String majorHeadCode, String submajorHeadCode, String minorHeadCode,
			String grpSubHeadCode, String subHeadCode, String detailHeadCode, String subDetailHeadCode,
			DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;

		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("select * from rws_subdetail_tbl where subdetail_head_code=? and detail_head_code=?"
					+ " and subhead_code=? and grp_subhead_code=? and major_head_code=? and submajor_head_code=? and minor_head_code=?");
			rwsMasterData.pstmt.setString(1, subDetailHeadCode);	
			rwsMasterData.pstmt.setString(2, detailHeadCode);		
			rwsMasterData.pstmt.setString(3, subHeadCode);	
			rwsMasterData.pstmt.setString(4, grpSubHeadCode);
			rwsMasterData.pstmt.setString(5, majorHeadCode);
			rwsMasterData.pstmt.setString(6, submajorHeadCode);
			rwsMasterData.pstmt.setString(7, minorHeadCode);	
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setMajorHeadCode(rwsMasterData.rs.getString(1));
				rwsMaster.setMajorHeadName(getMajorHeadName(rwsMasterData.rs.getString(1), rwsMasterData.conn));
				rwsMaster.setSubmajorHeadCode(rwsMasterData.rs.getString(2));
				rwsMaster.setSubmajorHeadName(getSubMajorHeadName(rwsMasterData.rs.getString(1),
						rwsMasterData.rs.getString(2), rwsMasterData.conn));
				rwsMaster.setMinorHeadCode(rwsMasterData.rs.getString(3));
				rwsMaster.setMinorHeadName(getMinorHeadName(rwsMasterData.rs.getString(1),
						rwsMasterData.rs.getString(2), rwsMasterData.rs.getString(3), rwsMasterData.conn));
				rwsMaster.setGrpSubHeadCode(rwsMasterData.rs.getString(4));
				rwsMaster.setGrpSubHeadName(
						getGrpSubHeadName(rwsMasterData.rs.getString(1), rwsMasterData.rs.getString(2),
								rwsMasterData.rs.getString(3), rwsMasterData.rs.getString(4), rwsMasterData.conn));
				rwsMaster.setSubHeadCode(rwsMasterData.rs.getString(5));
				rwsMaster.setSubHeadName(getSubHeadName(rwsMasterData.rs.getString(1), rwsMasterData.rs.getString(2),
						rwsMasterData.rs.getString(3), rwsMasterData.rs.getString(4), rwsMasterData.rs.getString(5),
						rwsMasterData.conn));
				rwsMaster.setDetailHeadCode(rwsMasterData.rs.getString(6));
				rwsMaster.setDetailHeadName(getDetailHeadName(rwsMasterData.rs.getString(1),
						rwsMasterData.rs.getString(2), rwsMasterData.rs.getString(3), rwsMasterData.rs.getString(4),
						rwsMasterData.rs.getString(5), rwsMasterData.rs.getString(6), rwsMasterData.conn));
				rwsMaster.setSubDetailHeadCode(rwsMasterData.rs.getString(7));
				rwsMaster.setSubDetailHeadName(rwsMasterData.rs.getString(8));
			}
		} catch (Exception e) {
			Debug.println("the error is in getSubDetailHead " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			//Debug.println("ConnCount after closing is " + connCount);
		}
		return rwsMaster;
	}

	public static ArrayList getSubDetailHeads(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList subDetailHeads = new ArrayList();
		try {

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery("SELECT MJ.MAJOR_HEAD_CODE,MJ.MAJOR_HEAD_NAME,"
					+ "S.SUBMAJOR_HEAD_CODE,S.SUBMAJOR_HEAD_NAME," + "M.MINOR_HEAD_CODE,M.MINOR_HEAD_NAME,"
					+ "G.GRP_SUBHEAD_CODE,G.GRPR_SUBHEAD_NAME," + "SH.SUBHEAD_CODE,SH.SUBHEAD_NAME"
					+ ",D.DETAIL_HEAD_CODE,D.DETAIL_HEAD_NAME"
					+ ",SD.SUBDETAIL_HEAD_CODE,SD.SUBDETAIL_HEAD_NAME FROM RWS_MAJORHEAD_TBL MJ,RWS_SUBMAJORHEAD_TBL S,RWS_MINORHEAD_TBL M,RWS_GROUPSUBHEAD_TBL G,RWS_SUBHEAD_TBL SH,RWS_DETAILHEAD_TBL D,RWS_SUBDETAIL_TBL SD WHERE MJ.MAJOR_HEAD_CODE=G.MAJOR_HEAD_CODE AND S.MAJOR_HEAD_CODE=G.MAJOR_HEAD_CODE AND S.SUBMAJOR_HEAD_CODE=G.SUBMAJOR_HEAD_CODE AND M.MAJOR_HEAD_CODE=G.MAJOR_HEAD_CODE AND M.SUBMAJOR_HEAD_CODE=G.SUBMAJOR_HEAD_CODE AND M.MINOR_HEAD_CODE=G.MINOR_HEAD_CODE AND G.MAJOR_HEAD_CODE=SH.MAJOR_HEAD_CODE AND G.SUBMAJOR_HEAD_CODE=SH.SUBMAJOR_HEAD_CODE AND G.MINOR_HEAD_CODE=SH.MINOR_HEAD_CODE AND G.GRP_SUBHEAD_CODE=SH.GRP_SUBHEAD_CODE AND SH.MAJOR_HEAD_CODE=D.MAJOR_HEAD_CODE AND SH.SUBMAJOR_HEAD_CODE=D.SUBMAJOR_HEAD_CODE AND SH.MINOR_HEAD_CODE=D.MINOR_HEAD_CODE AND SH.GRP_SUBHEAD_CODE=D.GRP_SUBHEAD_CODE AND SH.SUBHEAD_CODE=D.SUBHEAD_CODE AND D.MAJOR_HEAD_CODE=SD.MAJOR_HEAD_CODE AND D.SUBMAJOR_HEAD_CODE=SD.SUBMAJOR_HEAD_CODE AND D.MINOR_HEAD_CODE=SD.MINOR_HEAD_CODE AND D.GRP_SUBHEAD_CODE=SD.GRP_SUBHEAD_CODE AND D.SUBHEAD_CODE=SD.SUBHEAD_CODE AND D.DETAIL_HEAD_CODE=SD.DETAIL_HEAD_CODE");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setMajorHeadCode(rwsMasterData.rs.getString(1));
				rwsMaster.setMajorHeadName(rwsMasterData.rs.getString(2));
				rwsMaster.setSubmajorHeadCode(rwsMasterData.rs.getString(3));
				rwsMaster.setSubmajorHeadName(rwsMasterData.rs.getString(4));
				rwsMaster.setMinorHeadCode(rwsMasterData.rs.getString(5));
				rwsMaster.setMinorHeadName(rwsMasterData.rs.getString(6));
				rwsMaster.setGrpSubHeadCode(rwsMasterData.rs.getString(7));
				rwsMaster.setGrpSubHeadName(rwsMasterData.rs.getString(8));
				rwsMaster.setSubHeadCode(rwsMasterData.rs.getString(9));
				rwsMaster.setSubHeadName(rwsMasterData.rs.getString(10));
				rwsMaster.setDetailHeadCode(rwsMasterData.rs.getString(11));
				rwsMaster.setDetailHeadName(rwsMasterData.rs.getString(12));
				rwsMaster.setSubDetailHeadCode(rwsMasterData.rs.getString(13));
				rwsMaster.setSubDetailHeadName(rwsMasterData.rs.getString(14));
				subDetailHeads.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("THE ERROR IS IN getSubDetailHeads " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			//Debug.println("ConnCount after closing is " + connCount);
		}
		return subDetailHeads;
	}

	public static int removeSubDetailHead(String majorHeadCode, String submajorHeadCode, String minorHeadCode,
			String grpSubHeadCode, String subHeadCode, String detailHeadCode, String subDetailHeadCode,
			DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {	
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rowCount = rwsMasterData.stmt.executeUpdate("delete  from rws_subdetail_tbl where subdetail_head_code='"
					+ subDetailHeadCode + "' and detail_head_code='" + detailHeadCode + "' and subhead_code='"
					+ subHeadCode + "' and grp_subhead_code='" + grpSubHeadCode + "' and major_head_code='"
					+ majorHeadCode + "' and submajor_head_code='" + submajorHeadCode + "' and minor_head_code='"
					+ minorHeadCode + "'");
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		//	Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static int updateSubDetailHead(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int ans = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			ps = rwsMasterData.conn.prepareStatement(
					"update  rws_subdetail_tbl set subdetail_head_name=? where subdetail_head_code=? and detail_head_code=? and subhead_code=? and grp_subhead_code=? and minor_head_code=? and submajor_head_code=? and major_head_code=?");
			ps.setString(1, rwsMaster.getSubDetailHeadName().toUpperCase());
			ps.setString(2, rwsMaster.getSubDetailHeadCode());
			ps.setString(3, rwsMaster.getDetailHeadCode());
			ps.setString(4, rwsMaster.getSubHeadCode());
			ps.setString(5, rwsMaster.getGrpSubHeadCode());
			ps.setString(6, rwsMaster.getMinorHeadCode());
			ps.setString(7, rwsMaster.getSubmajorHeadCode());
			ps.setString(8, rwsMaster.getMajorHeadCode());

			ans = ps.executeUpdate();
		} catch (SQLException sqle) {
			Debug.println(sqle.getMessage() + "ans=" + ans);
			if (sqle.getErrorCode() == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			//Debug.println("ConnCount after closing is " + connCount);
		}
		return ans;
	}

	public static ArrayList getSubDetailHeadCodes(String majorHeadCode, String submajorHeadCode, String minorHeadCode,
			String grpSubHeadCode, String subHeadCode, String detailHeadCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList subDetailHeads = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("select subdetail_head_code,subdetail_head_name from RWS_SUBDETAILHEAD_TBL where "
					+ "subhead_code=? and grp_subhead_code=? and submajor_head_code=? and major_head_code=? and minor_head_code=? and detail_head_code=?");			
			rwsMasterData.pstmt.setString(6, detailHeadCode);		
			rwsMasterData.pstmt.setString(1, subHeadCode);	
			rwsMasterData.pstmt.setString(2, grpSubHeadCode);
			rwsMasterData.pstmt.setString(4, majorHeadCode);
			rwsMasterData.pstmt.setString(3, submajorHeadCode);
			rwsMasterData.pstmt.setString(5, minorHeadCode);	
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setSubDetailHeadCode(rwsMasterData.rs.getString(1));
				rwsMaster.setSubDetailHeadCode(rwsMasterData.rs.getString(2));
				rwsMaster.setCodeName(rwsMasterData.rs.getString(1) + " - " + rwsMasterData.rs.getString(2));
				subDetailHeads.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			//Debug.println("ConnCount after closing is " + connCount);
		}
		return subDetailHeads;
	}

	public static int insertPao(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			ps = rwsMasterData.conn.prepareStatement("insert into RWS_PAO_TBL values(?,?,?,?,?,?,?,?,?,?,?,?)");
			ps.setString(1, rwsMaster.getDistcode());
			ps.setString(2, rwsMaster.getPaocode());
			ps.setString(3, rwsMaster.getAddress1().toUpperCase());
			ps.setString(4, rwsMaster.getAddress2().toUpperCase());
			ps.setString(5, rwsMaster.getAddress3().toUpperCase());
			ps.setString(6, rwsMaster.getCity().toUpperCase());
			ps.setString(7, rwsMaster.getPin());
			ps.setString(8, rwsMaster.getPhone());
			ps.setString(9, rwsMaster.getEmail());
			ps.setString(10, rwsMaster.getFax());
			ps.setString(11, rwsMaster.getPaoName().toUpperCase());
			ps.setString(12, rwsMaster.getPaoapao().toUpperCase());
			rowCount = ps.executeUpdate();
		} catch (Exception e) {
			Debug.println("The error is " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return rowCount;
	}

	public static RwsMaster getPao(String paocode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("select * from RWS_PAO_TBL where PAO_CODE=? ");
			rwsMasterData.pstmt.setString(1, paocode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setDistcode(rwsMasterData.rs.getString("DCODE"));
				rwsMaster.setPaocode(rwsMasterData.rs.getString("PAO_CODE"));
				rwsMaster.setAddress1(rwsMasterData.rs.getString("PAO_ADDRESS1"));
				rwsMaster.setAddress2(rwsMasterData.rs.getString("PAO_ADDRESS2"));
				rwsMaster.setAddress3(rwsMasterData.rs.getString("PAO_ADDRESS3"));
				rwsMaster.setCity(rwsMasterData.rs.getString("PAO_CITY"));
				rwsMaster.setPin(rwsMasterData.rs.getString("PAO_PIN"));
				rwsMaster.setPhone(rwsMasterData.rs.getString("PAO_PHONE"));
				rwsMaster.setEmail(rwsMasterData.rs.getString("PAO_EMAIL"));
				rwsMaster.setFax(rwsMasterData.rs.getString("PAO_FAX"));
				rwsMaster.setPaoName(rwsMasterData.rs.getString("PAO_NAME"));
				rwsMaster.setPaoapao(rwsMasterData.rs.getString("PAO_APAO"));
			}
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return rwsMaster;
	}

	public static ArrayList getPaos(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList paos = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(
					"select p.*,d.dname from RWS_PAO_TBL p,rws_district_tbl d where d.dcode=p.dcode order by p.pao_code");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setDistcode(rwsMasterData.rs.getString("DCODE"));
				rwsMaster.setPaocode(rwsMasterData.rs.getString("PAO_CODE"));
				rwsMaster.setAddress1(rwsMasterData.rs.getString("PAO_ADDRESS1"));
				rwsMaster.setAddress2(rwsMasterData.rs.getString("PAO_ADDRESS2"));
				rwsMaster.setAddress3(rwsMasterData.rs.getString("PAO_ADDRESS3"));
				rwsMaster.setCity(rwsMasterData.rs.getString("PAO_CITY"));
				rwsMaster.setPin(rwsMasterData.rs.getString("PAO_PIN"));
				rwsMaster.setPhone(rwsMasterData.rs.getString("PAO_PHONE"));
				rwsMaster.setEmail(rwsMasterData.rs.getString("PAO_EMAIL"));
				rwsMaster.setFax(rwsMasterData.rs.getString("PAO_FAX"));
				rwsMaster.setPaoName(rwsMasterData.rs.getString("PAO_NAME"));
				rwsMaster.setDname(rwsMasterData.rs.getString("DNAME"));
				if (rwsMasterData.rs.getString("PAO_APAO").equals("P")) {
					rwsMaster.setPaoapao("PAO");
				} else if (rwsMasterData.rs.getString("PAO_APAO").equals("A")) {
					rwsMaster.setPaoapao("APAO");
				}
				paos.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return paos;
	}

	public static int getMaxPao(DataSource dataSource) throws Exception {
		int maxPao = 0;
		RwsMaster rwsMaster = null;
		RwsMasterData rwsMasterData = new RwsMasterData();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery("select pao_code from RWS_PAO_TBL order by pao_code");
			while (rwsMasterData.rs.next()) {
				maxPao = rwsMasterData.rs.getInt(1);
			}
			maxPao++;
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return maxPao;
	}

	public static int getMaxPao(DataSource dataSource, String distCode) throws Exception {
		int maxPao = 0;
		RwsMaster rwsMaster = null;
		RwsMasterData rwsMasterData = new RwsMasterData();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn
					.prepareStatement("select pao_code from RWS_PAO_TBL where DCODE =?  order by pao_code");
			rwsMasterData.pstmt.setString(1, distCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				maxPao = rwsMasterData.rs.getInt(1);
			}
			maxPao++;
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return maxPao;
	}

	public static void removePao(String paocode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement("delete  from RWS_PAO_TBL where PAO_CODE=?");
			rwsMasterData.pstmt.setString(1, paocode);
			rwsMasterData.pstmt.executeUpdate();
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
	}

	public static int updatePao(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		Statement stt = null;
		int update = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			if (rwsMasterData.conn != null)
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(
						"update  RWS_PAO_TBL set PAO_ADDRESS1=?,PAO_ADDRESS2=?,PAO_ADDRESS3=?,PAO_CITY=?,PAO_PIN=?,PAO_PHONE=?,PAO_EMAIL=?,"
								+ "PAO_FAX=?,PAO_NAME=?,PAO_APAO=? where PAO_CODE=?");
			rwsMasterData.pstmt.setString(11, rwsMaster.getPaocode());
			rwsMasterData.pstmt.setString(1, rwsMaster.getAddress1().toUpperCase());
			rwsMasterData.pstmt.setString(2, rwsMaster.getAddress2().toUpperCase());
			rwsMasterData.pstmt.setString(3, rwsMaster.getAddress3().toUpperCase());
			rwsMasterData.pstmt.setString(4, rwsMaster.getCity().toUpperCase());
			rwsMasterData.pstmt.setString(5, rwsMaster.getPin());
			rwsMasterData.pstmt.setString(6, rwsMaster.getPhone());
			rwsMasterData.pstmt.setString(7, rwsMaster.getEmail());
			rwsMasterData.pstmt.setString(8, rwsMaster.getFax());
			rwsMasterData.pstmt.setString(9, rwsMaster.getPaoName().toUpperCase());
			rwsMasterData.pstmt.setString(10, rwsMaster.getPaoapao().toUpperCase());
			update = rwsMasterData.pstmt.executeUpdate();
		} catch (Exception e) {
			Debug.println("error in updatePao in RwsMasterData " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return update;
	}

	public static int insertWaterTest(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {

			rwsMasterData.conn = RwsOffices.getConn();

			ps = rwsMasterData.conn.prepareStatement("insert into RWS_WATER_QUALITY_TEST_TBL values(?,?,?)");
			ps.setString(1, rwsMaster.getTestCode());
			ps.setString(2, rwsMaster.getTestName().toUpperCase());
			ps.setString(3, rwsMaster.getTestPeriod());

			rowCount = ps.executeUpdate();

		} catch (Exception e) {

			System.out.println("The error in insertWaterTest is " + e);
		} finally {
			rwsMasterData.closeAll();
			if (ps != null) {
				ps.close();
			}
		}
		return rowCount;
	}


	public static RwsMaster getWaterTest(String testCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;

		try {

			rwsMasterData.conn = RwsOffices.getConn();
			String query = "select * from RWS_WATER_QUALITY_TEST_TBL where TEST_CODE= ? ";

			ps = rwsMasterData.conn.prepareStatement(query);
			ps.setString(1, testCode);
			rwsMasterData.rs = ps.executeQuery();

			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setTestCode(rwsMasterData.rs.getString("TEST_CODE"));
				rwsMaster.setTestName(rwsMasterData.rs.getString("TEST_NAME"));
				rwsMaster.setTestPeriod(rwsMasterData.rs.getString("TEST_PERIODCITY"));
			}
		} catch (Exception e) {
			System.out.println("exception in getWaterTest -- " + e);
		} finally {
			rwsMasterData.closeAll();
			if (ps != null) {
				ps.close();
			}
		}
		return rwsMaster;
	}

	
	public static ArrayList getWaterTests(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList watertests = new ArrayList();

		try {

			rwsMasterData.conn = RwsOffices.getConn();

			String query = "SELECT TEST_CODE,TEST_NAME,DECODE(TEST_PERIODCITY ,'M','MONTHLY','Q','QUARTERLY','H',"
					+ "'HALFERLY','Y','YEARLY') FROM RWS_WATER_QUALITY_TEST_TBL";
			ps = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.rs = ps.executeQuery();

			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setTestCode(rwsMasterData.rs.getString(1));
				rwsMaster.setTestName(rwsMasterData.rs.getString(2));
				rwsMaster.setTestPeriod(rwsMasterData.rs.getString(3));
				rwsMaster.setTestCodeDisplay(rwsMasterData.rs.getString(1) + "-" + rwsMasterData.rs.getString(2));
				watertests.add(rwsMaster);
			}
		} catch (Exception e) {
			System.out.println("exception in getWaterTests -- " + e);
		} finally {
			rwsMasterData.closeAll();
			if (ps != null) {
				ps.close();
			}
		}
		return watertests;
	}

	
	public static int removeWaterTest(String testCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;

		try {

			rwsMasterData.conn = RwsOffices.getConn();
			ps = rwsMasterData.conn.prepareStatement("SELECT * FROM RWS_WQ_PARA_TEST_TBL where TEST_CODE=? ");
			ps.setString(1, testCode);
			rwsMasterData.rs = ps.executeQuery();

			if (rwsMasterData.rs.next() == false) {

				ps1 = rwsMasterData.conn.prepareStatement("delete  from RWS_WATER_QUALITY_TEST_TBL where TEST_CODE=? ");
				ps1.setString(1, testCode);
				rowCount = ps1.executeUpdate();

			}
		} catch (Exception e) {
			System.out.println("exception in removeWaterTest -- " + e);
		} finally {
			rwsMasterData.closeAll();
			if (ps != null) {
				ps.close();

			}
			if (ps1 != null) {
				ps1.close();
			}

		}
		return rowCount;
	}

	
	public static int updateWaterTest(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int ans = 0;
		try {

			rwsMasterData.conn = RwsOffices.getConn();

			ps = rwsMasterData.conn.prepareStatement(
					"update  RWS_WATER_QUALITY_TEST_TBL set TEST_NAME=?,TEST_PERIODCITY=? where TEST_CODE=?");

			ps.setString(1, rwsMaster.getTestName().toUpperCase());
			ps.setString(2, rwsMaster.getTestPeriod());
			ps.setString(3, rwsMaster.getTestCode());

			ans = ps.executeUpdate();

		} catch (Exception e) {
			System.out.println("exception in updateWaterTest -- " + e);
		} finally {
			rwsMasterData.closeAll();
			if (ps != null) {
				ps.close();
			}

		}
		return ans;
	}

	

	public static String getTestCode(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String code = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();

			ps = rwsMasterData.conn.prepareStatement("SELECT MAX(TEST_CODE)+1 FROM RWS_WATER_QUALITY_TEST_TBL");
			rwsMasterData.rs = ps.executeQuery();

			rwsMasterData.rs.next();
			code = rwsMasterData.rs.getString(1);
			if (code == null) {
				code = "1";
			}
		} catch (Exception e) {
			System.out.println("Ther error in getTestCode" + e);
		} finally {
			rwsMasterData.closeAll();
			if (ps != null) {
				ps.close();
			}
		}
		return code;
	}


	

	public static int insertWaterParameterTest(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			String qry = "insert into RWS_WQ_PARA_TEST_TBL(TEST_CODE,TESTING_PARAMETER_CODE ,TESTING_PARAMETER_NAME ,"
					+ "MIN_PERMISSIBLE_VALUE ,MAX_PERMISSIBLE_VALUE,UNDESIRE_EFFECT,UOM,UNIT_OF_CONTAMINATION,"
					+ "ORDER_PARA_CODE) values(?,?,?,?,?,?,'','','')";

			ps = rwsMasterData.conn.prepareStatement(qry);
			ps.setString(1, rwsMaster.getTestCode());
			ps.setString(2, rwsMaster.getTestPCode());
			ps.setString(3, rwsMaster.getTestPName().toUpperCase());
			ps.setString(4, rwsMaster.getMinPerVal());
			ps.setString(5, rwsMaster.getMaxPerVal());
			ps.setString(6, rwsMaster.getUndesirableEffect());

			rowCount = ps.executeUpdate();

		} catch (Exception e) {
			System.out.println("The exception in insertWaterParameterTest is" + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			ps.close();
		}
		return rowCount;
	}

	

	public static RwsMaster getWaterParameterTest(String testCode, String testPCode, DataSource dataSource)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		try {

			rwsMasterData.conn = RwsOffices.getConn();
			String query = "select * from RWS_WQ_PARA_TEST_TBL where TESTING_PARAMETER_CODE=? and TEST_CODE=? ";
			ps = rwsMasterData.conn.prepareStatement(query);
			ps.setString(1, testPCode);
			ps.setString(2, testCode.substring(0, 1));
			rwsMasterData.rs = ps.executeQuery();

			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setTestCode(rwsMasterData.rs.getString(1));
				rwsMaster.setTestName(getTestName(rwsMasterData.rs.getString(1), rwsMasterData.conn));
				rwsMaster.setTestPCode(rwsMasterData.rs.getString(2));
				rwsMaster.setTestPName(rwsMasterData.rs.getString(3));
				rwsMaster.setMinPerVal(rwsMasterData.rs.getString(4));
				rwsMaster.setMaxPerVal(rwsMasterData.rs.getString(5));
				rwsMaster.setUndesirableEffect(rwsMasterData.rs.getString(6));
			}
		} catch (Exception e) {
			System.out.println("exception in getWaterParameterTest -- " + e);
			// e.printStackTrace();
		} finally {
			rwsMasterData.closeAll();
			if (ps != null) {
				ps.close();
			}
		}
		return rwsMaster;
	}

	public static ArrayList getWaterParameterTests(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList waterptests = new ArrayList();
		try {
			Debug.println("in getWaterParameterTests");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(
					"SELECT P.TEST_CODE,T.TEST_NAME,P.TESTING_PARAMETER_CODE,P.TESTING_PARAMETER_NAME,MIN_PERMISSIBLE_VALUE,MAX_PERMISSIBLE_VALUE,P.UNDESIRE_EFFECT  FROM RWS_WQ_PARA_TEST_TBL P,RWS_WATER_QUALITY_TEST_TBL T WHERE T.TEST_CODE=P.TEST_CODE ORDER BY TEST_CODE,TESTING_PARAMETER_CODE");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setTestCode(rwsMasterData.rs.getString(1));
				rwsMaster.setTestName(rwsMasterData.rs.getString(2));
				rwsMaster.setTestPCode(rwsMasterData.rs.getString(3));
				rwsMaster.setTestPName(rwsMasterData.rs.getString(4));
				rwsMaster.setMinPerVal(rwsMasterData.rs.getString(5));
				rwsMaster.setMaxPerVal(rwsMasterData.rs.getString(6));
				rwsMaster.setUndesirableEffect(rwsMasterData.rs.getString("UNDESIRE_EFFECT"));

				waterptests.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return waterptests;
	}

	public static ArrayList getWaterParameterTests(DataSource dataSource, String testCode) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList waterptests = new ArrayList();
		try {
			String query = "";

			rwsMasterData.conn = RwsOffices.getConn();

			if (testCode != null && !testCode.equals("")) {

				query = "SELECT P.TEST_CODE,T.TEST_NAME,P.TESTING_PARAMETER_CODE,P.TESTING_PARAMETER_NAME,"
						+ "MIN_PERMISSIBLE_VALUE,MAX_PERMISSIBLE_VALUE,P.UNDESIRE_EFFECT  FROM "
						+ "RWS_WQ_PARA_TEST_TBL P,RWS_WATER_QUALITY_TEST_TBL T WHERE T.TEST_CODE=P.TEST_CODE AND"
						+ " T.TEST_CODE=? ORDER BY TEST_CODE,TESTING_PARAMETER_CODE ";
				ps = rwsMasterData.conn.prepareStatement(query);
				ps.setString(1, testCode);
			} else {

				query = "SELECT P.TEST_CODE,T.TEST_NAME,P.TESTING_PARAMETER_CODE,P.TESTING_PARAMETER_NAME,"
						+ "MIN_PERMISSIBLE_VALUE,MAX_PERMISSIBLE_VALUE,P.UNDESIRE_EFFECT  FROM "
						+ "RWS_WQ_PARA_TEST_TBL P,RWS_WATER_QUALITY_TEST_TBL T WHERE T.TEST_CODE=P.TEST_CODE "
						+ "ORDER BY TEST_CODE,TESTING_PARAMETER_CODE";
				ps = rwsMasterData.conn.prepareStatement(query);
			}
			rwsMasterData.rs = ps.executeQuery();

			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setTestCode(rwsMasterData.rs.getString(1));
				rwsMaster.setTestName(rwsMasterData.rs.getString(2));
				rwsMaster.setTestPCode(rwsMasterData.rs.getString(3));
				rwsMaster.setTestPName(rwsMasterData.rs.getString(4));
				rwsMaster.setMinPerVal(rwsMasterData.rs.getString(5));
				rwsMaster.setMaxPerVal(rwsMasterData.rs.getString(6));
				rwsMaster.setUndesirableEffect(rwsMasterData.rs.getString("UNDESIRE_EFFECT"));

				waterptests.add(rwsMaster);
			}
		} catch (Exception e) {
			System.out.println("exception in rwsmasterdata getWaterParameterTests -- " + e);
		} finally {
			rwsMasterData.closeAll();
			if (ps != null) {
				ps.close();
			}
		}
		return waterptests;
	}

	
	public static int removeWaterParameterTest(String testCode, String testPCode, DataSource dataSource)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rcount = 0;
		try {

			rwsMasterData.conn = RwsOffices.getConn();
			String query = "delete  from RWS_WQ_PARA_TEST_TBL where TESTING_PARAMETER_CODE=? and TEST_CODE=? ";

			ps = rwsMasterData.conn.prepareStatement(query);
			ps.setString(1, testPCode);
			ps.setString(2, testCode);
			rcount = ps.executeUpdate();

		} catch (Exception e) {
			System.out.println("exception in removeWaterParameterTest -- " + e);
		} finally {
			rwsMasterData.closeAll();
			if (ps != null) {
				ps.close();
			}
		}
		return rcount;
	}

	

	public static int updateWaterParameterTest(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int ans = 0;
		try {

			rwsMasterData.conn = RwsOffices.getConn();

			ps = rwsMasterData.conn.prepareStatement("update  " + "RWS_WQ_PARA_TEST_TBL set TESTING_PARAMETER_NAME=?,"
					+ "MIN_PERMISSIBLE_VALUE=?,MAX_PERMISSIBLE_VALUE=?, " + "UNDESIRE_EFFECT=?"
					+ "where TESTING_PARAMETER_CODE=? and TEST_CODE=?");

			ps.setString(1, rwsMaster.getTestPName().toUpperCase());
			ps.setString(2, rwsMaster.getMinPerVal());
			ps.setString(3, rwsMaster.getMaxPerVal());
			ps.setString(4, rwsMaster.getUndesirableEffect());
			ps.setString(5, rwsMaster.getTestPCode());
			ps.setString(6, rwsMaster.getTestCode().substring(0, rwsMaster.getTestCode().indexOf(" ")));

			ans = ps.executeUpdate();

		} catch (Exception e) {
			System.out.println("exception in rwsmassterdata updateWaterParameterTest -- " + e);
		} finally {
			rwsMasterData.closeAll();
			if (ps != null) {
				ps.close();
			}
		}
		return ans;
	}
	

	public static String getWQPTestCode(String testCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String code = null;
		if (testCode != null) {
			try {

				rwsMasterData.conn = RwsOffices.getConn();
				ps = rwsMasterData.conn.prepareStatement(
						"SELECT MAX(TESTING_PARAMETER_CODE)+1 FROM RWS_WQ_PARA_TEST_TBL WHERE TEST_CODE=? ");
				ps.setString(1, testCode);
				rwsMasterData.rs = ps.executeQuery();
				rwsMasterData.rs.next();
				code = rwsMasterData.rs.getString(1);
				if (code == null)
					code = "01";
				if (code.length() == 1)
					code = "0" + code;
			} catch (Exception e) {
				System.out.println("The error in getWQPTestCode" + e);
			} finally {
				rwsMasterData.closeAll();
				if (ps != null) {
					ps.close();
				}
			}
		}
		return code;
	}

	public static RwsMaster getContractorByName(String contractorName, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;

		try {
			Debug.println("in getContractor");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(
					"select * from RWS_CONTRACTOR_TBL where CONTRACTOR_NAME_COMPANY ='" + contractorName + "'");
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setContractorCode(rwsMasterData.rs.getString("CONTRACTOR_CODE"));
				if (rwsMasterData.rs.getString("CONTRACTOR_NAME_COMPANY") != null) {
					rwsMaster.setContractorName(rwsMasterData.rs.getString("CONTRACTOR_NAME_COMPANY").toUpperCase());
				}
				rwsMaster.setContractorClass(rwsMasterData.rs.getString("CONTRACTOR_CLASS"));
				rwsMaster.setContractorRating(rwsMasterData.rs.getString("CONTRACTOR_RATING"));
				rwsMaster.setContractorRegno(rwsMasterData.rs.getString("CONTRACTOR_REG_NO"));
				rwsMaster.setRegisterAt(rwsMasterData.rs.getString("REGISTERED_AT"));
				if (rwsMasterData.rs.getDate("REGISTRATION_DATE") != null) {
					rwsMaster.setRegistrationDate(df.format(rwsMasterData.rs.getDate("REGISTRATION_DATE")));
				}
				if (rwsMasterData.rs.getString("CONTRACTOR_ADDRESS1") != null) {
					rwsMaster.setStreet(rwsMasterData.rs.getString("CONTRACTOR_ADDRESS1").toUpperCase());
				}
				if (rwsMasterData.rs.getString("CONTRACTOR_ADDRESS2") != null) {
					rwsMaster.setArea(rwsMasterData.rs.getString("CONTRACTOR_ADDRESS2").toUpperCase());
				}
				if (rwsMasterData.rs.getString("CONTRACTOR_ADDRESS3") != null) {
					rwsMaster.setCity(rwsMasterData.rs.getString("CONTRACTOR_ADDRESS3").toUpperCase());
				}
				rwsMaster.setPin(rwsMasterData.rs.getString("CONTRACTOR_ADDRESS4"));
				rwsMaster.setPhone(rwsMasterData.rs.getString("CONTRACTOR_PHONE"));
				rwsMaster.setMobile(rwsMasterData.rs.getString("CONTRACTOR_MOBILE"));
				rwsMaster.setFax(rwsMasterData.rs.getString("CONTRACTOR_FAX"));
				rwsMaster.setEmail(rwsMasterData.rs.getString("CONTRACTOR_EMAIL"));
				rwsMaster.setPanNo(rwsMasterData.rs.getString("PAN_NO"));
				rwsMaster.setTinNo(rwsMasterData.rs.getString("TIN_NO"));
				if (rwsMasterData.rs.getDate("VALIDITY_FROM") != null) {
					rwsMaster.setValidFrom(df.format(rwsMasterData.rs.getDate("VALIDITY_FROM")));
				}
				if (rwsMasterData.rs.getDate("VALIDITY_TO") != null) {
					rwsMaster.setValidTo(df.format(rwsMasterData.rs.getDate("VALIDITY_TO")));
				}
				rwsMaster.setProjectsExecuted(rwsMasterData.rs.getString("PROJECTS_EXECUTED"));
				rwsMaster.setProjectsInhand(rwsMasterData.rs.getString("PROJECTS_INHAND"));
				rwsMaster.setProjectsCompletedLastYear(rwsMasterData.rs.getString("PROJECTS_COMPLETED_INLAST_5YRS"));
				rwsMaster.setProjectsCompletedInTime(rwsMasterData.rs.getString("PROJECTS_COMPLETED_INTIME"));
				rwsMaster.setProjectsAbandoned(rwsMasterData.rs.getString("PROJECTS_ABANDONED"));
				rwsMaster.setNoofEoat(rwsMasterData.rs.getString("NO_OF_EOAT"));
				rwsMaster.setNoofSupplentary(rwsMasterData.rs.getString("NO_OF_SUPPLEMENTARY"));
				rwsMaster.setNoofPenalised(rwsMasterData.rs.getString("NO_OF_PENALISED"));
				rwsMaster.setRemarks(rwsMasterData.rs.getString("REMARKS"));
				rwsMaster.setVatNo(rwsMasterData.rs.getString("VATNO"));
				if (rwsMasterData.rs.getString("SPECIALIZE") != null) {
					rwsMaster.setSpecialize(rwsMasterData.rs.getString("SPECIALIZE").toUpperCase());
				}

			}
		} catch (Exception e) {
			Debug.println("The error in getContractor is " + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rwsMaster;
	}

	public static int removeContractor(String contractorCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rcount = 0;
		try {

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement(
					"select * from rws_contractor_selection_tbl where contractor_code=? ");
			rwsMasterData.pstmt1.setString(1, contractorCode); 
		
			ResultSet rs = rwsMasterData.pstmt1.executeQuery();
			if (!rs.next()) {
				rwsMasterData.pstmt = rwsMasterData.conn
						.prepareStatement("delete  from RWS_CONTRACTOR_TBL where CONTRACTOR_CODE=? ");
				rwsMasterData.pstmt.setString(1, contractorCode); 
				rcount = rwsMasterData.pstmt.executeUpdate();
			}
		} catch (Exception e) {
			Debug.println("The error in removeContractor is " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return rcount;
	}

	

	public static String getContractorCode(DataSource dataSource) throws Exception {

		RwsMasterData rwsMasterData = new RwsMasterData();
		String code = null;
		try {

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn
					.prepareStatement("SELECT MAX(to_number(CONTRACTOR_CODE))+1 FROM RWS_CONTRACTOR_TBL");
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			rwsMasterData.rs.next();
			code = rwsMasterData.rs.getString(1);
			if (code == null)
				code = "1";
			else if (code.length() == 1)
				code = "000" + code;
			else if (code.length() == 2)
				code = "00" + code;
			else if (code.length() == 3)
				code = "0" + code;
		} catch (Exception e) {
			Debug.println("The error in getContractorCode" + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return code;
	}
	
	public static int insertStore(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			ps = rwsMasterData.conn.prepareStatement("insert into RWS_STORES_CURRENT_TBL values(?,?,?,?,?,?,?,TO_DATE('"
					+ rwsMaster.getPostheld() + "','dd/mm/yyyy'))");
			ps.setString(1, rwsMaster.getDistrict());
			ps.setString(2, rwsMaster.getMandal());
			ps.setString(3, rwsMaster.getSubdivision());
			ps.setString(4, rwsMaster.getStoreCode());
			ps.setString(5, rwsMaster.getLocation());
			ps.setString(6, rwsMaster.getStoreInCharge());
			ps.setString(7, rwsMaster.getEmpcode());

			rowCount = ps.executeUpdate();
		} catch (Exception e) {
			Debug.println("The error is" + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static RwsMaster getStore(String storeCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;

		try {
			Debug.println("in getStore");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("select * from RWS_STORES_CURRENT_TBL where STORE_CODE=" + storeCode);
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setDistrict(rwsMasterData.rs.getString("DCODE"));
				rwsMaster.setMandal(rwsMasterData.rs.getString("MCODE"));
				rwsMaster.setSubdivision(rwsMasterData.rs.getString("SUBDIVISION_OFFICE_CODE"));
				rwsMaster.setStoreCode(rwsMasterData.rs.getString("STORE_CODE"));
				rwsMaster.setLocation(rwsMasterData.rs.getString("STORE_LOCATION"));
				rwsMaster.setStoreInCharge(rwsMasterData.rs.getString("STORE_INCHARGE"));
				rwsMaster.setEmpcode(rwsMasterData.rs.getString("STORE_EMP_CODE"));
				if (rwsMasterData.rs.getDate("POST_HELD_SINCE") != null) {
					rwsMaster.setPostheld(df.format(rwsMasterData.rs.getDate("POST_HELD_SINCE")));
				}
			}
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rwsMaster;
	}

	public static ArrayList getStores(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList stores = new ArrayList();

		try {
			Debug.println("in getStores");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.stmt1 = rwsMasterData.conn.createStatement();
			rwsMasterData.stmt2 = rwsMasterData.conn.createStatement();
			rwsMasterData.stmt3 = rwsMasterData.conn.createStatement();
			Statement stmt4 = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery("select * from RWS_STORES_CURRENT_TBL");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				// rwsMaster.setDistrict(rwsMasterData.rs.getString("DCODE"));
				try {
					rwsMasterData.rs1 = rwsMasterData.stmt1
							.executeQuery("select * from RWS_DISTRICT_MASTER WHERE dcode ='"
									+ rwsMasterData.rs.getString("DCODE") + "'");
					rwsMasterData.rs1.next();
					rwsMaster.setDistrict(rwsMasterData.rs1.getString("dname"));
				} catch (Exception e) {
					Debug.println("dname=" + e.getMessage());
				}
				// rwsMaster.setMandal(rwsMasterData.rs.getString("MCODE"));
				try {
					ResultSet rs2 = rwsMasterData.stmt2.executeQuery(
							"select * from RWS_MANDAL_TBL WHERE mcode ='" + rwsMasterData.rs.getString("MCODE") + "'");
					rs2.next();
					rwsMaster.setMandal(rs2.getString("mname"));
				} catch (Exception e) {
					Debug.println("mname=" + e.getMessage());
				}
				// rwsMaster.setSubdivision(rwsMasterData.rs.getString("SUBDIVISION_OFFICE_CODE"));
				try {
					rwsMasterData.rs3 = rwsMasterData.stmt3
							.executeQuery("select * from RWS_SUBDIVISION_OFFICE_TBL WHERE SUBDIVISION_OFFICE_CODE ='"
									+ rwsMasterData.rs.getString("SUBDIVISION_OFFICE_CODE") + "'");
					rwsMasterData.rs3.next();
					rwsMaster.setSubdivision(rwsMasterData.rs3.getString("SUBDIVISION_OFFICE_NAME"));
				} catch (Exception e) {
					Debug.println("SUBDIVISION_OFFICE_NAME=" + e.getMessage());
				}
				rwsMaster.setStoreCode(rwsMasterData.rs.getString("STORE_CODE"));
				rwsMaster.setLocation(rwsMasterData.rs.getString("STORE_LOCATION"));
				rwsMaster.setStoreInCharge(rwsMasterData.rs.getString("STORE_INCHARGE"));
				// rwsMaster.setEmpcode(rwsMasterData.rs.getString("STORE_EMP_CODE"));
				try {
					ResultSet rs4 = stmt4
							.executeQuery("select EMPLOYEE_NAME from RWS_EMPLOYEE_TBL WHERE EMPLOYEE_CODE ='"
									+ rwsMasterData.rs.getString("STORE_EMP_CODE") + "'");
					rs4.next();
					rwsMaster.setEmpcode(rs4.getString("EMPLOYEE_NAME"));
				} catch (Exception e) {
					Debug.println("EMPLOYEE_NAME=" + e.getMessage());
				}
				if (rwsMasterData.rs.getDate("POST_HELD_SINCE") != null) {
					rwsMaster.setPostheld(df.format(rwsMasterData.rs.getDate("POST_HELD_SINCE")));
				}

				stores.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return stores;
	}

	public static void removeStore(String storeCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		try {
			Debug.println("in removeStore");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.stmt.executeUpdate("delete  from RWS_STORES_CURRENT_TBL where STORE_CODE=" + storeCode);
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
	}

	public static void updateStore(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		try {
			Debug.println("in updateStore");

			rwsMasterData.conn = RwsOffices.getConn();

			ps = rwsMasterData.conn.prepareStatement(
					"update RWS_STORES_CURRENT_TBL set DCODE=?,MCODE=?,SUBDIVISION_OFFICE_CODE=?,STORE_LOCATION=?,STORE_INCHARGE=?,STORE_EMP_CODE=?,POST_HELD_SINCE=TO_DATE('"
							+ rwsMaster.getPostheld() + "','dd/mm/yyyy') where STORE_CODE=?");

			ps.setString(1, rwsMaster.getDistrict());
			ps.setString(2, rwsMaster.getMandal());
			ps.setString(3, rwsMaster.getSubdivision());
			ps.setString(4, rwsMaster.getLocation());
			ps.setString(5, rwsMaster.getStoreInCharge());
			ps.setString(6, rwsMaster.getEmpcode());
			// ps.setString(7,rwsMaster.getPostheld());
			ps.setString(7, rwsMaster.getStoreCode());

			ps.executeUpdate();
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
	}

	public static String getStoreCode(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String code = null;
		try {
			Debug.println("in getStoreCode");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("SELECT MAX(to_number(STORE_CODE))+1 FROM RWS_STORES_CURRENT_TBL");
			rwsMasterData.rs.next();
			code = rwsMasterData.rs.getString(1);
			if (code == null) {
				code = "1";
			}
		} catch (Exception e) {
			Debug.println("Ther error in STORE_CODE" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return code;
	}

	// ******************************Supplier Methods*************************

	public static int insertSupplier(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			Debug.println("in insertSupplier");

			rwsMasterData.conn = RwsOffices.getConn();
			ps = rwsMasterData.conn.prepareStatement("insert into RWS_SUPPLIER_TBL values(?,?,?,?,?,?,?,?,?,?,?)");
			ps.setString(1, rwsMaster.getSupplierCode());
			ps.setString(2, rwsMaster.getSupplierName().toUpperCase());
			ps.setString(3, rwsMaster.getAddress().toUpperCase());
			ps.setString(4, rwsMaster.getArea().toUpperCase());
			ps.setString(5, rwsMaster.getLocation().toUpperCase());
			ps.setString(6, rwsMaster.getCity().toUpperCase());
			ps.setString(7, rwsMaster.getPin());
			ps.setString(8, rwsMaster.getPhone());
			ps.setString(9, rwsMaster.getFax());
			ps.setString(10, rwsMaster.getEmail());
			ps.setString(11, rwsMaster.getSupplierRegNo());

			rowCount = ps.executeUpdate();
		} catch (Exception e) {
			Debug.println("The error is" + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static RwsMaster getSupplier(String supplierCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;

		try {
			Debug.println("in getSupplier");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("select * from RWS_SUPPLIER_TBL where SUPPLIER_CODE=" + supplierCode);
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setSupplierCode(rwsMasterData.rs.getString("SUPPLIER_CODE"));
				rwsMaster.setSupplierName(rwsMasterData.rs.getString("SUPPLIER_NAME"));
				rwsMaster.setAddress(rwsMasterData.rs.getString("SUPPLIER_ADDRESS1"));
				rwsMaster.setArea(rwsMasterData.rs.getString("SUPPLIER_ADDRESS2"));
				rwsMaster.setLocation(rwsMasterData.rs.getString("SUPPLIER_ADDRESS3"));
				rwsMaster.setCity(rwsMasterData.rs.getString("SUPPLIER_CITY"));
				rwsMaster.setPin(rwsMasterData.rs.getString("SUPPLIER_PIN"));
				rwsMaster.setPhone(rwsMasterData.rs.getString("SUPPLIER_PHONE"));
				rwsMaster.setFax(rwsMasterData.rs.getString("SUPPLIER_FAX"));
				rwsMaster.setEmail(rwsMasterData.rs.getString("SUPPLIER_EMAIL"));
				rwsMaster.setSupplierRegNo(rwsMasterData.rs.getString("SUPPLIER_REG_NO"));
			}
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rwsMaster;
	}

	public static ArrayList getSuppliers(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList suppliers = new ArrayList();

		try {
			Debug.println("in getSuppliers");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery("select * from RWS_SUPPLIER_TBL");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setSupplierCode(rwsMasterData.rs.getString("SUPPLIER_CODE"));
				rwsMaster.setSupplierName(rwsMasterData.rs.getString("SUPPLIER_NAME"));
				rwsMaster.setAddress(rwsMasterData.rs.getString("SUPPLIER_ADDRESS1"));
				rwsMaster.setArea(rwsMasterData.rs.getString("SUPPLIER_ADDRESS2"));
				rwsMaster.setLocation(rwsMasterData.rs.getString("SUPPLIER_ADDRESS3"));
				rwsMaster.setCity(rwsMasterData.rs.getString("SUPPLIER_CITY"));
				rwsMaster.setPin(rwsMasterData.rs.getString("SUPPLIER_PIN"));
				rwsMaster.setPhone(rwsMasterData.rs.getString("SUPPLIER_PHONE"));
				rwsMaster.setFax(rwsMasterData.rs.getString("SUPPLIER_FAX"));
				rwsMaster.setEmail(rwsMasterData.rs.getString("SUPPLIER_EMAIL"));
				rwsMaster.setSupplierRegNo(rwsMasterData.rs.getString("SUPPLIER_REG_NO"));

				suppliers.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return suppliers;
	}

	public static void removeSupplier(String supplierCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		try {
			Debug.println("in removeSupplier");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.stmt.executeUpdate("delete  from RWS_SUPPLIER_TBL where SUPPLIER_CODE=" + supplierCode);
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
	}

	public static void updateSupplier(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		try {
			Debug.println("in updateSupplier");

			rwsMasterData.conn = RwsOffices.getConn();

			ps = rwsMasterData.conn.prepareStatement(
					"update RWS_SUPPLIER_TBL set SUPPLIER_NAME=?,SUPPLIER_ADDRESS1=?,SUPPLIER_ADDRESS2=?,SUPPLIER_ADDRESS3=?,SUPPLIER_CITY=?,SUPPLIER_PIN=?,SUPPLIER_PHONE=?,SUPPLIER_FAX=?,SUPPLIER_EMAIL=?,SUPPLIER_REG_NO=? where SUPPLIER_CODE=?");

			ps.setString(1, rwsMaster.getSupplierName().toUpperCase());
			ps.setString(2, rwsMaster.getAddress().toUpperCase());
			ps.setString(3, rwsMaster.getArea().toUpperCase());
			ps.setString(4, rwsMaster.getLocation().toUpperCase());
			ps.setString(5, rwsMaster.getCity().toUpperCase());
			ps.setString(6, rwsMaster.getPin());
			ps.setString(7, rwsMaster.getPhone());
			ps.setString(8, rwsMaster.getFax());
			ps.setString(9, rwsMaster.getEmail());
			ps.setString(10, rwsMaster.getSupplierRegNo());
			ps.setString(11, rwsMaster.getSupplierCode());

			ps.executeUpdate();
			Debug.println("hai in update Store");
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {

			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
	}

	public static String getSupplierCode(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String code = null;
		try {
			Debug.println("in getSupplierCode");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("SELECT MAX(to_number(SUPPLIER_CODE))+1 FROM RWS_SUPPLIER_TBL");
			rwsMasterData.rs.next();
			code = rwsMasterData.rs.getString(1);
			if (code == null) {
				code = "1";
			}
		} catch (Exception e) {
			Debug.println("Ther error in SUPPLIER_CODE" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return code;
	}

	// *******************************Item Master
	// Methods********************************************//
	public static int insertItem(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			Debug.println("in insertItem");

			rwsMasterData.conn = RwsOffices.getConn();
			ps = rwsMasterData.conn.prepareStatement("insert into rws_item_tbl values(?,?,?,?,?,?)");
			ps.setString(1, rwsMaster.getItemCode());
			ps.setString(2, rwsMaster.getItemName().toUpperCase());
			ps.setString(3, rwsMaster.getDistCode());
			ps.setString(4, rwsMaster.getFinyear());
			ps.setString(5, rwsMaster.getUnits());
			ps.setString(6, rwsMaster.getRate());

			rowCount = ps.executeUpdate();

		} catch (Exception e) {
			Debug.println("The error is" + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static RwsMaster getItem(String itemCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;

		try {
			Debug.println("in getItem");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("select * from rws_item_tbl where ITEM_CODE=" + itemCode);
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setItemCode(rwsMasterData.rs.getString("ITEM_CODE"));
				rwsMaster.setItemName(rwsMasterData.rs.getString("ITEM_NAME"));
				rwsMaster.setDistCode(rwsMasterData.rs.getString("DCODE"));
				rwsMaster.setFinyear(rwsMasterData.rs.getString("FIN_YEAR"));
				rwsMaster.setUnits(rwsMasterData.rs.getString("UNITS"));
				rwsMaster.setRate(rwsMasterData.rs.getString("RATE"));
			}
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rwsMaster;
	}

	public static ArrayList getItems(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList items = new ArrayList();

		try {
			Debug.println("in getItems");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.stmt1 = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery("select * from RWS_ITEM_TBL order by ITEM_CODE");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setItemCode(rwsMasterData.rs.getString("ITEM_CODE"));
				rwsMaster.setItemName(rwsMasterData.rs.getString("ITEM_NAME"));
				rwsMaster.setDistCode(rwsMasterData.rs.getString("DCODE"));
				rwsMasterData.rs1 = rwsMasterData.stmt1.executeQuery(
						"select * from RWS_DISTRICT_MASTER where dcode='" + rwsMasterData.rs.getString("DCODE") + "'");
				rwsMasterData.rs1.next();
				rwsMaster.setDname(rwsMasterData.rs1.getString("DNAME"));
				rwsMaster.setFinyear(rwsMasterData.rs.getString("FIN_YEAR"));
				rwsMaster.setUnits(rwsMasterData.rs.getString("UNITS"));
				rwsMaster.setRate(rwsMasterData.rs.getString("RATE"));
				items.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return items;
	}

	public static void removeItem(String itemCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		try {
			Debug.println("in removeItem");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.stmt.executeUpdate("delete  from RWS_ITEM_TBL where ITEM_CODE='" + itemCode + "'");
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
	}

	public static void updateItem(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		try {
			Debug.println("in updateItem");

			rwsMasterData.conn = RwsOffices.getConn();

			ps = rwsMasterData.conn.prepareStatement(
					"update  RWS_ITEM_TBL set ITEM_NAME=?,DCODE=?,FIN_YEAR=?,UNITS=?,RATE=? where ITEM_CODE=?");

			ps.setString(1, rwsMaster.getItemName());
			ps.setString(2, rwsMaster.getDistCode());
			ps.setString(3, rwsMaster.getFinyear());
			ps.setString(4, rwsMaster.getUnits());
			ps.setString(5, rwsMaster.getRate());
			ps.setString(6, rwsMaster.getItemCode());

			ps.executeUpdate();
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
	}

	public static String getItemCode(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String code = null;
		try {
			Debug.println("in getItemCode");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery("SELECT MAX(to_number(ITEM_CODE))+1 FROM RWS_ITEM_TBL");
			rwsMasterData.rs.next();
			code = rwsMasterData.rs.getString(1);
			if (code == null) {
				code = "1";
			}
		} catch (Exception e) {
			Debug.println("Ther error in ITEM_CODE" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return code;
	}

	public static ArrayList getEmpCodesOnSubDiv(String coc, String sdoc, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList empcodes = new ArrayList();

		try {
			Debug.println("in getEmpCodesOnSubDiv");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("SELECT * FROM RWS_EMPLOYEE_TBL WHERE  (SUBSTR(OFFICE_CODE, 2, 2) = '" + coc
							+ "')  AND (SUBSTR(OFFICE_CODE, 5, 2) = '" + sdoc + "') order by employee_code");

			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setEmpcode(rwsMasterData.rs.getString("employee_code"));
				rwsMaster.setEmpname(rwsMasterData.rs.getString("employee_name"));
				rwsMaster.setRoc(rwsMasterData.rs.getString("office_code"));
				String code = rwsMasterData.rs.getString("employee_code");
				String name = rwsMasterData.rs.getString("employee_name");
				rwsMaster.setDistNoName(code + " - " + name);
				empcodes.add(rwsMaster);

			}
		}

		catch (Exception e) {
			Debug.println("The error in getEmpCodesOnSubDiv" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return empcodes;
	}

	// *********************************Names on
	// Codes****************************************
	public static String getHeadOfficeName(String code, Connection conn) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;
		String name = null;
		try {
			rwsMasterData.pstmt1 = rwsMasterData.conn
					.prepareStatement("SELECT HEAD_OFFICE_NAME FROM RWS_HEAD_OFFICE_TBL WHERE HEAD_OFFICE_CODE=?");
			rwsMasterData.pstmt1.setString(1, code);
			rwsMasterData.rs1 = rwsMasterData.pstmt1.executeQuery();
			rwsMasterData.rs1.next();
			name = rwsMasterData.rs1.getString(1);
		} catch (Exception e) {
			Debug.println("Ther error in getHeadOfficeName In RwsMasterData " + e);
		} finally {
			rwsMasterData.pstmt1.close();
			rwsMasterData.rs1.close();
		}
		return name;
	}

	public static String getUrbanHeadOfficeName(String code, Connection conn) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;
		String name = null;
		rwsMasterData.stmt1 = null;
		rwsMasterData.rs1 = null;
		try {
			Debug.println("in getHeadOfficeName");

			rwsMasterData.stmt1 = rwsMasterData.conn.createStatement();
			rwsMasterData.rs1 = rwsMasterData.stmt1.executeQuery(
					"SELECT HEAD_OFFICE_NAME FROM UR_HEAD_OFFICE_TBL WHERE HEAD_OFFICE_CODE='" + code + "'");
			rwsMasterData.rs1.next();
			name = rwsMasterData.rs1.getString(1);
		} catch (Exception e) {
			Debug.println("Ther error in getHeadOfficeName=" + e);
		} finally {
			rwsMasterData.stmt1.close();

		}
		return name;
	}

	public static String getDistrictName(String dcode, Connection conn) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;
		String name = null;
		try {
			rwsMasterData.pstmt1 = rwsMasterData.conn
					.prepareStatement("SELECT DNAME FROM RWS_DISTRICT_TBL WHERE DCODE=?");
			rwsMasterData.pstmt.setString(1, dcode);
			rwsMasterData.rs1 = rwsMasterData.pstmt1.executeQuery();
			if (rwsMasterData.rs1.next())
				name = rwsMasterData.rs1.getString(1);
		} catch (Exception e) {
			Debug.println("Ther error in getDistrictName in RwsMasterData " + e);
		} finally {
			rwsMasterData.pstmt1.close();
			rwsMasterData.rs1.close();
		}
		return name;
	}

	public static String getCircleOfficeName(String hoc, String coc, Connection conn) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;
		String name = null;
		try {
			rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement(
					"SELECT CIRCLE_OFFICE_NAME FROM RWS_CIRCLE_OFFICE_TBL WHERE HEAD_OFFICE_CODE=? and CIRCLE_OFFICE_CODE=?");
			rwsMasterData.pstmt1.setString(1, hoc);
			rwsMasterData.pstmt1.setString(2, coc);
			rwsMasterData.rs1 = rwsMasterData.pstmt1.executeQuery();
			rwsMasterData.rs1.next();
			name = rwsMasterData.rs1.getString(1);
		} catch (Exception e) {
			Debug.println("Ther error in getCircleOfficeName in RwsMasterData " + e);
		} finally {
			rwsMasterData.pstmt1.close();
			rwsMasterData.rs1.close();
		}
		return name;
	}

	public static String getUrbanCircleOfficeName(String hoc, String coc, Connection conn) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;
		String name = null;
		rwsMasterData.stmt1 = null;
		rwsMasterData.rs1 = null;
		try {
			rwsMasterData.stmt1 = rwsMasterData.conn.createStatement();
			String q1 = "SELECT CIRCLE_OFFICE_NAME FROM UR_CIRCLE_OFFICE_TBL WHERE HEAD_OFFICE_CODE='" + hoc
					+ "' and CIRCLE_OFFICE_CODE='" + coc + "'";
			rwsMasterData.rs1 = rwsMasterData.stmt1.executeQuery(q1);
			rwsMasterData.rs1.next();
			name = rwsMasterData.rs1.getString(1);
		} catch (Exception e) {
			Debug.println("Ther error in getCircleOfficeName=" + e);
		} finally {
			rwsMasterData.stmt1.close();
		}
		return name;
	}

	public static String getDivisionOfficeName(String hoc, String coc, String doc, Connection conn) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;
		String name = null;
		try {
			String q1 = "SELECT DIVISION_OFFICE_NAME FROM RWS_DIVISION_OFFICE_TBL WHERE HEAD_OFFICE_CODE=? and CIRCLE_OFFICE_CODE=? and DIVISION_OFFICE_CODE=?";
			if (doc != null || !(doc.equals("0"))) {
				rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement(q1);
				rwsMasterData.pstmt1.setString(1, hoc);
				rwsMasterData.pstmt1.setString(2, coc);
				rwsMasterData.pstmt1.setString(3, doc);
				rwsMasterData.rs1 = rwsMasterData.pstmt1.executeQuery();
				rwsMasterData.rs1.next();
				name = rwsMasterData.rs1.getString(1);
			}
		} catch (Exception e) {
			Debug.println("Ther error in getDivisionOfficeName in RwsMasterData " + e);
		} finally {
			rwsMasterData.pstmt1.close();
			rwsMasterData.rs1.close();
		}
		return name;
	}

	public static String getUrbanDivisionOfficeName(String hoc, String coc, String doc, Connection conn)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;
		String name = null;
		rwsMasterData.stmt1 = null;
		rwsMasterData.rs1 = null;
		Debug.println("hoc=" + hoc + "  coc=" + coc + "   doc=" + doc);
		try {
			Debug.println("in getDivisionOfficeName");

			String q1 = "SELECT DIVISION_OFFICE_NAME FROM UR_DIVISION_OFFICE_TBL WHERE HEAD_OFFICE_CODE='" + hoc
					+ "' and CIRCLE_OFFICE_CODE='" + coc + "' and DIVISION_OFFICE_CODE='" + doc + "'";

			// System.out.println("sai parasad:" + q1);
			if (doc != null || !(doc.equals("0"))) {
				rwsMasterData.stmt1 = rwsMasterData.conn.createStatement();
				rwsMasterData.rs1 = rwsMasterData.stmt1.executeQuery(q1);
				rwsMasterData.rs1.next();
				name = rwsMasterData.rs1.getString(1);
			}
		} catch (Exception e) {
			Debug.println("Ther error in getDivisionOfficeName=" + e);
		} finally {
			rwsMasterData.stmt1.close();
		}
		return name;
	}

	public static String getSubDivisionOfficeName(String hoc, String coc, String doc, String sdoc, Connection conn)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		String name = null;
		try {
			rwsMasterData.conn = conn;
			if (doc != null || !(doc.equals("0"))) {
				rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement(
						"SELECT SUBDIVISION_OFFICE_NAME FROM RWS_SUBDIVISION_OFFICE_TBL WHERE HEAD_OFFICE_CODE=?"
								+ " and CIRCLE_OFFICE_CODE=? and DIVISION_OFFICE_CODE=? and SUBDIVISION_OFFICE_CODE=?");
				rwsMasterData.pstmt1.setString(1, hoc);
				rwsMasterData.pstmt1.setString(2, coc);
				rwsMasterData.pstmt1.setString(3, doc);
				rwsMasterData.pstmt1.setString(4, sdoc);
				rwsMasterData.rs1 = rwsMasterData.pstmt1.executeQuery();
				rwsMasterData.rs1.next();
				name = rwsMasterData.rs1.getString(1);
			}
		} catch (Exception e) {
			Debug.println("Ther error in getSubDivisionOfficeName in RwsMasterData " + e);
		} finally {
			rwsMasterData.pstmt1.close();
			rwsMasterData.rs1.close();
		}
		return name;
	}

	public static String getSectionOfficeName(String hoc, String coc, String doc, String sdoc, String soc,
			Connection conn) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;
		String name = null;
		rwsMasterData.stmt1 = null;
		rwsMasterData.rs1 = null;
		try {
			Debug.println("in getSectionOfficeName");

			rwsMasterData.stmt1 = rwsMasterData.conn.createStatement();
			rwsMasterData.rs1 = rwsMasterData.stmt1
					.executeQuery("SELECT SECTION_OFFICE_NAME FROM RWS_SECTION_OFFICE_TBL WHERE HEAD_OFFICE_CODE='"
							+ hoc + "' and CIRCLE_OFFICE_CODE='" + coc + "' and DIVISION_OFFICE_CODE='" + doc
							+ "' and SUBDIVISION_OFFICE_CODE='" + sdoc + "' and SECTION_OFFICE_CODE='" + soc + "'");
			rwsMasterData.rs1.next();
			name = rwsMasterData.rs1.getString(1);
		} catch (Exception e) {
			Debug.println("Ther error in getSectionOfficeName=" + e);
		} finally {
			rwsMasterData.stmt1.close();
		}
		return name;
	}

	public static String getMajorHeadName(String majorCode, Connection conn) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;
		String name = null;	
		try {
			rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement("SELECT MAJOR_HEAD_NAME FROM RWS_MAJORHEAD_TBL WHERE MAJOR_HEAD_CODE =?");
			rwsMasterData.pstmt1.setString(1, majorCode);
			rwsMasterData.rs1 = rwsMasterData.pstmt1.executeQuery();
			rwsMasterData.rs1.next();
			name = rwsMasterData.rs1.getString(1);
		} catch (Exception e) {
			Debug.println("Ther error in getMajorHeadName " + e);
		} finally {
			rwsMasterData.pstmt1.close();
			rwsMasterData.rs1.close();
		}
		return name;
	}

	public static String getSubMajorHeadName(String majorCode, String subMajorCode, Connection conn) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		String name = null;
		try {
			rwsMasterData.pstmt1 = conn.prepareStatement("SELECT SUBMAJOR_HEAD_NAME FROM RWS_SUBMAJORHEAD_TBL WHERE MAJOR_HEAD_CODE =?"
							+   " and SUBMAJOR_HEAD_CODE=?");
			rwsMasterData.pstmt1.setString(1, majorCode);
			rwsMasterData.pstmt1.setString(2, subMajorCode);
			rwsMasterData.rs1 = rwsMasterData.pstmt1.executeQuery();
			rwsMasterData.rs1.next();
			name = rwsMasterData.rs1.getString(1);
		} catch (Exception e) {
			Debug.println("Ther error in getSubMajorHeadName " + e);
		} finally {
			rwsMasterData.pstmt1.close();
			rwsMasterData.rs1.close();
		}
		return name;
	}

	public static String getMinorHeadName(String majorCode, String subMajorCode, String minorCode, Connection conn)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;
		String name = null;		
		try {
			rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement("SELECT MINOR_HEAD_NAME FROM RWS_MINORHEAD_TBL WHERE MAJOR_HEAD_CODE =?"
							+ " and SUBMAJOR_HEAD_CODE=? and MINOR_HEAD_CODE=?");			
			rwsMasterData.pstmt1.setString(1, majorCode);
			rwsMasterData.pstmt1.setString(2, subMajorCode);
			rwsMasterData.pstmt1.setString(3, minorCode);
			rwsMasterData.rs1=rwsMasterData.pstmt1.executeQuery();
			rwsMasterData.rs1.next();
			name = rwsMasterData.rs1.getString(1);
		} catch (Exception e) {
			Debug.println("Ther error in getMinorHeadName " + e);
			e.printStackTrace();
		} finally {
			rwsMasterData.pstmt1.close();
			rwsMasterData.rs1.close();
		}
		return name;
	}

	public static String getGrpSubHeadName(String majorCode, String subMajorCode, String minorCode, String grpSubCode,
			Connection conn) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;
		String name = null;		
		try {
			rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement("SELECT GRPR_SUBHEAD_NAME FROM RWS_GROUPSUBHEAD_TBL WHERE "
					+ "MAJOR_HEAD_CODE =? and SUBMAJOR_HEAD_CODE=? and MINOR_HEAD_CODE=? and GRP_SUBHEAD_CODE=?");			
			rwsMasterData.pstmt1.setString(1, majorCode);
			rwsMasterData.pstmt1.setString(2, subMajorCode);
			rwsMasterData.pstmt1.setString(3, minorCode);
			rwsMasterData.pstmt1.setString(4, grpSubCode);
			rwsMasterData.rs1 = rwsMasterData.pstmt1	.executeQuery();
			rwsMasterData.rs1.next();
			name = rwsMasterData.rs1.getString(1);
		} catch (Exception e) {
			Debug.println("The error in getGrpSubHeadName " + e);
		} finally {
			rwsMasterData.pstmt1.close();
			rwsMasterData.rs1.close();
		}
		return name;
	}

	public static String getSubHeadName(String majorCode, String subMajorCode, String minorCode, String grpSubCode,
			String subCode, Connection conn) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;
		String name = null;		
		try {
			rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement("SELECT SUBHEAD_NAME FROM RWS_SUBHEAD_TBL WHERE "
					+ "MAJOR_HEAD_CODE =? and SUBMAJOR_HEAD_CODE=? and MINOR_HEAD_CODE=? and GRP_SUBHEAD_CODE=? and SUBHEAD_CODE=?");
			rwsMasterData.pstmt1.setString(1, majorCode);
			rwsMasterData.pstmt1.setString(2, subMajorCode);
			rwsMasterData.pstmt1.setString(3, minorCode);
			rwsMasterData.pstmt1.setString(4, grpSubCode);
			rwsMasterData.pstmt1.setString(5, subCode);
			rwsMasterData.rs1 = rwsMasterData.pstmt1.executeQuery();
			rwsMasterData.rs1.next();
			name = rwsMasterData.rs1.getString(1);
		} catch (Exception e) {
			Debug.println("Ther error in getSubHeadName " + e);
		} finally {
			rwsMasterData.pstmt1.close();
			rwsMasterData.rs1.close();
		}
		return name;
	}

	public static String getDetailHeadName(String majorCode, String subMajorCode, String minorCode, String grpSubCode,
			String subCode, String detailCode, Connection conn) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;
		String name = null;		
		try {			
			rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement("SELECT DETAIL_HEAD_NAME  FROM RWS_DETAILHEAD_TBL WHERE "
					+ "MAJOR_HEAD_CODE =? and SUBMAJOR_HEAD_CODE=? and MINOR_HEAD_CODE=? and GRP_SUBHEAD_CODE=?"
					+ " and SUBHEAD_CODE=? and DETAIL_HEAD_CODE=?");
			rwsMasterData.pstmt1.setString(1, majorCode);
			rwsMasterData.pstmt1.setString(2, subMajorCode);
			rwsMasterData.pstmt1.setString(3, minorCode);
			rwsMasterData.pstmt1.setString(4, grpSubCode);
			rwsMasterData.pstmt1.setString(5, subCode);
			rwsMasterData.pstmt1.setString(6, detailCode);
			rwsMasterData.rs1 = rwsMasterData.pstmt1.executeQuery();
			rwsMasterData.rs1.next();
			name = rwsMasterData.rs1.getString(1);
		} catch (Exception e) {
			Debug.println("Ther error in getDetailHeadName " + e);
		} finally {
			rwsMasterData.pstmt1.close();
			rwsMasterData.rs1.close();
		}
		return name;
	}

	public static String getSubDetailHeadName(String majorCode, String subMajorCode, String minorCode,
			String grpSubCode, String subCode, String detailCode, String subDetailCode, Connection conn)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;
		String name = null;
		try {
			rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement("SELECT SUBDETAIL_HEAD_NAME FROM RWS_SUBDETAIL_TBL WHERE "
					+ "MAJOR_HEAD_CODE =? and SUBMAJOR_HEAD_CODE=? and MINOR_HEAD_CODE=? and GRP_SUBHEAD_CODE=?"
					+ " and SUBHEAD_CODE=? and DETAIL_HEAD_CODE=? and SUBDETAIL_HEAD_CODE=?");
			rwsMasterData.pstmt1.setString(1, majorCode);
			rwsMasterData.pstmt1.setString(2, subMajorCode);
			rwsMasterData.pstmt1.setString(3, minorCode);
			rwsMasterData.pstmt1.setString(4, grpSubCode);
			rwsMasterData.pstmt1.setString(5, subCode);
			rwsMasterData.pstmt1.setString(6, detailCode);
			rwsMasterData.rs1 = rwsMasterData.pstmt1	.executeQuery();
			rwsMasterData.rs1.next();
			name = rwsMasterData.rs1.getString(1);
		} catch (Exception e) {
			Debug.println("Ther error in getSubDetailHeadName " + e);
		} finally {
			rwsMasterData.pstmt1.close();
			rwsMasterData.rs1.close();
		}
		return name;
	}

	
	public static String getQualName(String code, Connection conn) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;
		String name = null;
		rwsMasterData.stmt1 = null;
		rwsMasterData.rs1 = null;
		try {
			if (code != null) {
				rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement("SELECT QUAL_NAME FROM rws_qualification_tbl WHERE QUAL_CODE =?" );
				rwsMasterData.pstmt1.setString(1, code);
				rwsMasterData.rs1 = rwsMasterData.pstmt1	.executeQuery();
				rwsMasterData.rs1.next();
				name = rwsMasterData.rs1.getString(1);
			}
		} catch (Exception e) {
			Debug.println("Ther error in getQualName " + e);
		} finally {
			rwsMasterData.pstmt1.close();
			rwsMasterData.rs1.close();
		}
		return name;
	}

	public static String getDesgnName(String code, Connection conn) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		String name = null;
		try {
			rwsMasterData.conn = conn;
			if (code != null) {
				rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement(
						"SELECT DESIGNATION_ACR,DESIGNATION_name FROM rws_designation_tbl WHERE designation_CODE =?");
				rwsMasterData.pstmt1.setString(1, code);
				rwsMasterData.rs1 = rwsMasterData.pstmt1.executeQuery();
				rwsMasterData.rs1.next();
				name = rwsMasterData.rs1.getString(1);
			} else
				name = "";
		} catch (Exception e) {
			Debug.println("Ther error in getDesgnName in RwsMasterData " + e);
		} finally {
			rwsMasterData.pstmt1.close();
			rwsMasterData.rs1.close();
		}
		return name;
	}

	public static String getAssetTypeName(DataSource dataSource, String code) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;		
		String name = null;		
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement("SELECT TYPE_OF_ASSET_NAME  FROM RWS_ASSET_TYPE_TBL WHERE TYPE_OF_ASSET_CODE  =?");
			rwsMasterData.pstmt1.setString(1, code);
			rwsMasterData.rs1 = rwsMasterData.pstmt1.executeQuery();
			rwsMasterData.rs1.next();
			name = rwsMasterData.rs1.getString(1);

		} catch (Exception e) {
			Debug.println("Ther error in getAssetTypeName " + e);
		} 
		return name;
	}

	public static String getAssetTypeName(String code, DataSource dataSource) throws Exception {		
		RwsMasterData rwsMasterData = new RwsMasterData();	
		String name = null;	
		try {		
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement("SELECT TYPE_OF_ASSET_NAME  FROM RWS_ASSET_TYPE_TBL WHERE TYPE_OF_ASSET_CODE  =?");
			rwsMasterData.pstmt1.setString(1, code);
			rwsMasterData.rs1 = rwsMasterData.pstmt1.executeQuery();
			rwsMasterData.rs1.next();
			name = rwsMasterData.rs1.getString(1);
		} catch (Exception e) {
			Debug.println("Exception at getAssetTypeName in RwsMasterData : " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return name;
	}

	public static ArrayList getMissingCodes(DataSource dataSource, String assetTypeCode, String habCode)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String codeSeries = null;
		ArrayList missingCodes = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			String query = "select code_series from rws_asset_type_tbl where type_of_asset_code=?";
			rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt1.setString(1, assetTypeCode);
			rwsMasterData.rs1 = rwsMasterData.pstmt1.executeQuery();
			while (rwsMasterData.rs1.next()) {
				codeSeries = rwsMasterData.rs1.getString(1);
			}
			// query to find missing codes
			// missing code is l.scheme_code+1
			query = "select l.scheme_code from rws_asset_scheme_tbl  l left outer join rws_asset_scheme_tbl  r on to_number(l.scheme_code) + 1 = to_number(r.scheme_code)"
			+ "where r.scheme_code is null  and substr(l.scheme_code,17,3) like ?  and substr(l.scheme_code,0,16)=? order by l.scheme_code";
			rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt1.setString(1, codeSeries.substring(0, 1)+"%");
			rwsMasterData.pstmt1.setString(2, habCode);
			rwsMasterData.rs1 = rwsMasterData.pstmt1.executeQuery();
			String missingCode = "";
			String code = "";
			while (rwsMasterData.rs1.next()) {
				code = rwsMasterData.rs1.getString(1);
				if (code.length() == 18)
					code = "0" + code;
				codeSeries = code.substring(16, 19);
				codeSeries = (Integer.parseInt(codeSeries) + 1) + "";
				if (codeSeries.length() == 1)
					codeSeries = "00" + codeSeries;
				if (codeSeries.length() == 2)
					codeSeries = "0" + codeSeries;
				missingCode = code.substring(0, 16) + codeSeries;
				missingCodes.add(missingCode.substring(16, 19));
			}
		} catch (Exception e) {
			Debug.println("Exception at getMissingCodes in RwsMasterData : " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return missingCodes;
	}

	public static String getAssetCompTypeName(String code, String code1, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		if (code1.equals("05") || code1.equals("06") || code1.equals("07") || code1.equals("08")) {
			connCount--;
			return "SOURCE";
		}
		String name = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt1 = rwsMasterData.conn
					.prepareStatement("SELECT ASSET_COMPONENT_NAME  FROM RWS_ASSET_COMPONENT_TYPE_TBL "
							+ "WHERE ASSET_COMPONENT_CODE  =? and type_of_asset_code=?");
			rwsMasterData.pstmt1.setString(1, code);
			rwsMasterData.pstmt1.setString(2, code1);
			rwsMasterData.rs1 = rwsMasterData.pstmt1.executeQuery();
			rwsMasterData.rs1.next();
			name = rwsMasterData.rs1.getString(1);
		} catch (Exception e) {
			Debug.println("Exception at  getAssetCompTypeName in RwsMasterData : " + e);
		} 
		return name;
	}

	public static String getAssetSubComponentName(String code, String code1, String code2, Connection conn)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();

		connCount--;
		rwsMasterData.conn = conn;
		if (code1.equals("05"))
			return "SHALLOW HAND PUMPS";
		if (code1.equals("06"))
			return "OPEN WELLS";
		if (code1.equals("07"))
			return "PONDS";
		if (code1.equals("08"))
			return "OTHERS";
		String name = null;
		rwsMasterData.stmt1 = null;
		rwsMasterData.rs1 = null;
		try {
			rwsMasterData.stmt1 = rwsMasterData.conn.createStatement();
			rwsMasterData.rs1 = rwsMasterData.stmt1.executeQuery(
					"SELECT ASSET_SUBCOMPONENT_NAME  FROM RWS_ASSET_SUBCOMPONENT_TBL WHERE ASSET_COMPONENT_CODE  ='"
							+ code + "' and type_of_asset_code='" + code1 + "' and asset_subcomponent_code='" + code2
							+ "'");
			rwsMasterData.rs1.next();
			name = rwsMasterData.rs1.getString(1);
		} catch (Exception e) {
			Debug.println("Ther error in getAssetCompTypeName=" + e);
		} finally {
			rwsMasterData.stmt1.close();
		}
		return name;
	}

	/*
	 * public static String getSourceName(String code, Connection conn) throws
	 * Exception { RwsMasterData rwsMasterData=new RwsMasterData();
	 * rwsMasterData.conn=conn; String name = null; rwsMasterData.stmt1 = null;
	 * rwsMasterData.rs1 = null; try { Debug.println("code=" + code);
	 * rwsMasterData.stmt1 = rwsMasterData.conn.createStatement(); if (code != null
	 * && !code.equals("null")) { rwsMasterData.rs1 = rwsMasterData.stmt1
	 * .executeQuery("SELECT SOURCE_NAME FROM RWS_SOURCE_TBL WHERE SOURCE_CODE=" +
	 * code); rwsMasterData.rs1.next(); name = rwsMasterData.rs1.getString(1); } }
	 * catch (Exception e) { Debug.println("Ther error in getSourceName=" + e); }
	 * finally { rwsMasterData.stmt1.close(); } return name; }
	 */

	public static String getSourceName(String sourceCode, Connection conn) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		SubCompMetaData subCompMetaData = new SubCompMetaData(sourceCode);
		rwsMasterData.conn = conn;
		String name = null;
		rwsMasterData.stmt1 = null;
		rwsMasterData.rs1 = null;
		try {
			// Debug.println("in getSourceName");

			// Debug.println("sourceCode=" + sourceCode);
			rwsMasterData.stmt1 = rwsMasterData.conn.createStatement();
			if (sourceCode != null && !sourceCode.equals("null")) {
				rwsMasterData.rs1 = rwsMasterData.stmt1
						.executeQuery("SELECT SOURCE_NAME FROM RWS_SOURCE_TBL WHERE SOURCE_CODE=" + sourceCode);
				rwsMasterData.rs1.next();
				name = rwsMasterData.rs1.getString(1);
			}

		} catch (Exception e) {
			Debug.println("Ther error in getSourceName=" + e);
		} finally {
			rwsMasterData.stmt1.close();
		}
		return name;
	}

	public static String getPrgmName(String code, Connection conn) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;
		String name = null;
		rwsMasterData.stmt1 = null;
		rwsMasterData.rs1 = null;
		try {
			// Debug.println("in getPrgmName");

			// Debug.println("getPrgmName=" + code);
			rwsMasterData.stmt1 = rwsMasterData.conn.createStatement();
			if (code != null && !code.equals("null")) {
				rwsMasterData.rs1 = rwsMasterData.stmt1.executeQuery(
						"SELECT PROGRAMME_NAME  FROM RWS_PROGRAMME_TBL WHERE PROGRAMME_CODE  ='" + code + "'");
				rwsMasterData.rs1.next();
				name = rwsMasterData.rs1.getString(1);
			} else
				name = "";
		} catch (Exception e) {
			Debug.println("Ther error in getPrgmName=" + e);
		} finally {
			rwsMasterData.stmt1.close();
		}
		return name;
	}

	public static String getSubprgmName(String code, String code1, Connection conn) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;
		String name = null;
		rwsMasterData.stmt1 = null;
		rwsMasterData.rs1 = null;
		try {
			// Debug.println("in getSubprgmName");

			rwsMasterData.stmt1 = rwsMasterData.conn.createStatement();
			if (code != null && !code.equals("null")) {
				rwsMasterData.rs1 = rwsMasterData.stmt1
						.executeQuery("SELECT SUBPROGRAMME_NAME  FROM rws_SUBPROGRAMME_tbl WHERE PROGRAMME_CODE  ='"
								+ code + "' and SUBPROGRAMME_CODE=" + code1);
				rwsMasterData.rs1.next();
				name = rwsMasterData.rs1.getString(1);
			} else
				name = "";
		} catch (Exception e) {
			Debug.println("Ther error in getSubprgm=" + e);
		} finally {
			rwsMasterData.stmt1.close();
		}
		return name;
	}

	public static String getSourceTypeName(String code, Connection conn) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;
		String name = "";
		try {
			String query = "SELECT SOURCE_TYPE_NAME  FROM rws_source_type_tbl WHERE SOURCE_TYPE_CODE  =?";
			rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt1.setString(1, code);
			rwsMasterData.rs1 = rwsMasterData.pstmt1.executeQuery();
			while (rwsMasterData.rs1.next())
				name = rwsMasterData.rs1.getString(1);
		} catch (Exception e) {
			Debug.println("Ther exception at getSourceTypeName in RwsMasterData : " + e);
		} finally {
			rwsMasterData.pstmt1.close();
		}
		return name;
	}

	public static String getSubSourceName(String code, String code1, Connection conn) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;
		String name = "";
		try {
			String query = "SELECT SUBSOURCE_TYPE_NAME  FROM rws_subsource_type_tbl WHERE SUBSOURCE_TYPE_CODE  =? and SOURCE_TYPE_CODE=?";
			rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt1.setString(1, code);
			rwsMasterData.pstmt1.setString(2, code1);
			rwsMasterData.rs1 = rwsMasterData.pstmt1.executeQuery();
			if (rwsMasterData.rs1.next())
				name = rwsMasterData.rs1.getString(1);
		} catch (Exception e) {
			Debug.println("Ther Exception at getSubSourceName in RwsMasterData : " + e);
		} finally {
			rwsMasterData.pstmt1.close();
			rwsMasterData.rs1.close();
		}
		return name;
	}

	public static String getMandalName(String dcode, String mcode, Connection conn) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;
		String name = null;
		rwsMasterData.stmt1 = null;
		rwsMasterData.rs1 = null;
		try {

			rwsMasterData.stmt1 = rwsMasterData.conn.createStatement();
			rwsMasterData.rs1 = rwsMasterData.stmt1.executeQuery(
					"select MNAME from RWS_MANDAL_TBL where DCODE='" + dcode + "' and mcode='" + mcode + "'");
			rwsMasterData.rs1.next();
			name = rwsMasterData.rs1.getString(1);
		} catch (Exception e) {
			Debug.println("Ther error in getMandalName=" + e);
		} finally {
			rwsMasterData.stmt1.close();
		}
		return name;
	}

	public static String getPanchayatName(String dcode, String mcode, String pcode, Connection conn) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;
		String name = null;
		rwsMasterData.stmt1 = null;
		rwsMasterData.rs1 = null;
		try {
			// Debug.println("in getPanchayatName");

			rwsMasterData.stmt1 = rwsMasterData.conn.createStatement();
			rwsMasterData.rs1 = rwsMasterData.stmt1.executeQuery("select PNAME from RWS_PANCHAYAT_TBL where DCODE='"
					+ dcode + "' and mcode='" + mcode + "' and PCODE='" + pcode + "'");
			rwsMasterData.rs1.next();
			name = rwsMasterData.rs1.getString(1);
		} catch (Exception e) {
			Debug.println("Ther error in getPanchayatName=" + e);
		} finally {
			rwsMasterData.stmt1.close();
		}
		return name;
	}

	public static String getVillageName(String dcode, String mcode, String pcode, String vcode, Connection conn)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;
		String name = null;
		rwsMasterData.stmt1 = null;
		rwsMasterData.rs1 = null;
		try {
			// Debug.println("in getVillageName");

			rwsMasterData.stmt1 = rwsMasterData.conn.createStatement();
			rwsMasterData.rs1 = rwsMasterData.stmt1.executeQuery("select VNAME from RWS_VILLAGE_TBL where DCODE='"
					+ dcode + "' and mcode='" + mcode + "' and PCODE='" + pcode + "' and vcode='" + vcode + "'");
			rwsMasterData.rs1.next();
			name = rwsMasterData.rs1.getString(1);
		} catch (Exception e) {
			Debug.println("Ther error in getPanchayatName=" + e);
		} finally {
			rwsMasterData.stmt1.close();
		}
		return name;
	}

	public static String getAssetSubCompCode(String assetTypeCode, String assetCompCode, String assetSubName,
			Connection conn) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		String code = null;
		try {
			rwsMasterData.conn = conn;
			rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement(	"SELECT ASSET_SUBCOMPONENT_CODE FROM RWS_ASSET_SUBCOMPONENT_TBL "
					+ "WHERE ASSET_SUBCOMPONENT_NAME=UPPER(?) AND TYPE_OF_ASSET_CODE=? AND ASSET_COMPONENT_CODE=?");
			rwsMasterData.pstmt1.setString(1, assetSubName);
			rwsMasterData.pstmt1.setString(2, assetTypeCode);
			rwsMasterData.pstmt1.setString(3, assetCompCode);
			rwsMasterData.rs1 = rwsMasterData.pstmt1.executeQuery();
			rwsMasterData.rs1.next();
			code = rwsMasterData.rs1.getString(1);
		} catch (Exception e) {
			Debug.println("The error in getAssetSubCompCode=" + e);
		} finally {
			rwsMasterData.pstmt1.close();
		}
		return code;
	}

	public static String getAssetSubCompTypeName(String assetSubComp, String assetComp, String assetType,
			Connection conn) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;
		String name = null;
		rwsMasterData.stmt1 = null;
		rwsMasterData.rs1 = null;
		try {

			rwsMasterData.stmt1 = rwsMasterData.conn.createStatement();
			rwsMasterData.rs1 = rwsMasterData.stmt1.executeQuery(
					"SELECT ASSET_SUBCOMPONENT_NAME FROM RWS_ASSET_SUBCOMPONENT_TBL where type_of_asset_code='"
							+ assetType + "' and asset_component_code='" + assetComp + "' and asset_subcomponent_code='"
							+ assetSubComp + "'");
			rwsMasterData.rs1.next();
			name = rwsMasterData.rs1.getString(1);
		} catch (Exception e) {
			Debug.println("The error in getAssetSubCompTypeName=" + e);
		} finally {
			rwsMasterData.stmt1.close();
		}
		return name;
	}

	public static int insertWQLab(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
				
			rwsMasterData.conn = RwsOffices.getConn();
            String code = "";
			
			String query = "SELECT (MAX(LAB_CODE))+1 FROM RWS_WATER_QUALITY_LAB_TBL order by LAB_CODE";

			ps = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.rs = ps.executeQuery();

			int big = 0, Lcode = 0;
			while (rwsMasterData.rs.next()) 
				{
					code = rwsMasterData.rs.getString(1);
				}
			//System.out.println("code :"+code);
			//System.out.println("rwsMaster.getLabCode() :"+rwsMaster.getLabCode());
			if(code.equals(rwsMaster.getLabCode()))
					{
						ps = rwsMasterData.conn.prepareStatement("insert into RWS_WATER_QUALITY_LAB_TBL values(?,?,?,?,?,?,?,?,?,?)");
						ps.setString(1, rwsMaster.getLabCode());
						ps.setString(2, rwsMaster.getLabName().toUpperCase());
						ps.setString(3, rwsMaster.getLocation().toUpperCase());
						ps.setString(4, rwsMaster.getHoc() + rwsMaster.getCoc() + rwsMaster.getDoc() + rwsMaster.getSubdivision());
						ps.setString(5, rwsMaster.getDesgnCode());
						ps.setString(6, rwsMaster.getlabEstablishedYear());
						ps.setString(7, rwsMaster.getcontactNum());
						ps.setString(8, rwsMaster.getlevelCode());
						ps.setString(9, rwsMaster.getMancode());
						ps.setString(10, rwsMaster.getDivStatus());
						rowCount = ps.executeUpdate();
					}
			else
			{
						rowCount = 0;
			}

		} catch (Exception e) {
			System.out.println("The error in insertWQLab is " + e);
		} finally {
			rwsMasterData.closeAll();
			if (ps != null) {
				ps.close();
			}
		}
		return rowCount;
	}

	

	public static RwsMaster getWQLab(String labCode, DataSource dataSource, HttpSession session) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;

		try {

			rwsMasterData.conn = RwsOffices.getConn();

			String query = "select * from RWS_WATER_QUALITY_LAB_TBL where LAB_CODE=? ";
			ps = rwsMasterData.conn.prepareStatement(query);
			ps.setString(1, labCode);
			rwsMasterData.rs = ps.executeQuery();
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setLabCode(rwsMasterData.rs.getString("LAB_CODE"));
				rwsMaster.setLabName(rwsMasterData.rs.getString("LAB_NAME"));
				rwsMaster.setLocation(rwsMasterData.rs.getString("LOCATION"));
				rwsMaster.setDesgnCode(rwsMasterData.rs.getString("OFFICE_HEAD_DESGN"));
				rwsMaster.setDivStatus(rwsMasterData.rs.getString("STATUS"));

				rwsMaster.setHoc(rwsMasterData.rs.getString(4).substring(0, 1));

				session.setAttribute("officeCode", rwsMasterData.rs.getString("OFFICE_CODE"));
				rwsMaster.setCoc(rwsMasterData.rs.getString(4).substring(1, 3));
				rwsMaster.setDoc(rwsMasterData.rs.getString(4).substring(3, 4));
				rwsMaster.setSdoc(rwsMasterData.rs.getString(4).substring(4, 6));
				rwsMaster.setSubdivision(rwsMasterData.rs.getString(4).substring(4, 6));
				rwsMaster.setlabEstablishedYear(rwsMasterData.rs.getString("LABESTABLISHEDYEAR"));
				rwsMaster.setcontactNum(rwsMasterData.rs.getString("CONTACTNUM"));
				rwsMaster.setlevelCode(rwsMasterData.rs.getString("LEVEL_CODE"));
				rwsMaster.setMancode(rwsMasterData.rs.getString("MCODE"));

			}
		} catch (Exception e) {
			System.out.println("Exception has occured in getWQLab in RwsMasterData " + e);
		} finally {
			rwsMasterData.closeAll();
			if (ps != null) {
				ps.close();
			}
		}
		return rwsMaster;
	}

	

	public static ArrayList getWQLabs(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList wqlabs = new ArrayList();
		try {

			rwsMasterData.conn = RwsOffices.getConn();

			String query = "select lab_code,lab_name,location,office_code,"
					+ "DESIGNATION_ACR ,LABESTABLISHEDYEAR,CONTACTNUM,LEVEL_CODE,MCODE,"
					+ "do. DIVISION_OFFICE_CODE ,do.DIVISION_OFFICE_NAME,c.circle_office_name"
					+ " from RWS_WATER_QUALITY_LAB_TBL wq, rws_designation_tbl d,"
					+ "RWS_DIVISION_OFFICE_TBL do,rws_circle_office_tbl c where wq.status <>'UI' AND  "
					+ "wq.office_head_desgn=d.designation_code and "
					+ "substr(wq.office_code,4,1) =do.DIVISION_OFFICE_CODE and "
					+ "substr(wq.office_code,2,2)=do.CIRCLE_OFFICE_CODE and "
					+ "substr (wq.office_code,2,2)=c.circle_office_code and "
					+ "substr(wq.office_code,0,1)=c.HEAD_OFFICE_CODE order by lab_code,substr(wq.office_code,2,2)";

			ps = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.rs = ps.executeQuery();

			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setLabCode(rwsMasterData.rs.getString(1));
				rwsMaster.setLabName(rwsMasterData.rs.getString(2));
				rwsMaster.setLocation(rwsMasterData.rs.getString(3));
				rwsMaster.setRoc(rwsMasterData.rs.getString(4));
				rwsMaster.setDesgnCode(rwsMasterData.rs.getString(5));

				rwsMaster.setlabEstablishedYear(rwsMasterData.rs.getString(6));
				rwsMaster.setcontactNum(rwsMasterData.rs.getString(7));

				String mc = (rwsMasterData.rs.getString(4).substring(1, 3));

				if (rwsMasterData.rs.getString(8) != null && rwsMasterData.rs.getString(8).equals("02")) {
					rwsMaster.setlevelCode("State");
				} else if (rwsMasterData.rs.getString(8) != null && rwsMasterData.rs.getString(8).equals("03")) {
					rwsMaster.setlevelCode("District");
				} else if (rwsMasterData.rs.getString(8) != null && rwsMasterData.rs.getString(8).equals("04")) {
					rwsMaster.setlevelCode("Division");
				} else if (rwsMasterData.rs.getString(8) != null && rwsMasterData.rs.getString(8).equals("05")) {
					rwsMaster.setlevelCode("Sub Division");
				} else {
					rwsMaster.setlevelCode(rwsMasterData.rs.getString(8));
				}
				rwsMaster.setMancode(getMandalName(mc, rwsMasterData.rs.getString(9), dataSource, rwsMasterData.conn));
				rwsMaster.setDoc(rwsMasterData.rs.getString(11));
				rwsMaster.setCoc(rwsMasterData.rs.getString(12));
				wqlabs.add(rwsMaster);
			}
		} catch (Exception e) {
			System.out.println("exception in getWQLabs of rwsmasterdata -- " + e);
		} finally {
			rwsMasterData.closeAll();
			if (ps != null) {
				ps.close();
			}
		}
		return wqlabs;
	}

	

	public static int removeWQLab(String labCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {

			rwsMasterData.conn = RwsOffices.getConn();
			String query = "delete FROM RWS_WATER_QUALITY_LAB_TBL where LAB_CODE=? ";

			ps = rwsMasterData.conn.prepareStatement(query);
			ps.setString(1, labCode);
			rowCount = ps.executeUpdate();

		} catch (Exception e) {
			System.out.println("exception in removeWQLab -- " + e);
		} finally {
			rwsMasterData.closeAll();
			if (ps != null) {
				ps.close();
			}
		}
		return rowCount;
	}

	
	public static void updateWQLab(RwsMaster rwsMaster, DataSource dataSource, HttpSession session,
			HttpServletRequest request) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		try {

			rwsMasterData.conn = RwsOffices.getConn();

			String office = (String) session.getAttribute("officeCode");
			String officeCode = office.substring(0, 4) + rwsMaster.getSubdivision();

			ps = rwsMasterData.conn
					.prepareStatement("update  RWS_WATER_QUALITY_LAB_TBL set LAB_NAME=?,LOCATION=?,OFFICE_HEAD_DESGN=?"
							+ ",LABESTABLISHEDYEAR =?,CONTACTNUM=?,LEVEL_CODE=?,MCODE=?,office_code=?,status=? where LAB_CODE=?");

			ps.setString(1, rwsMaster.getLabName().toUpperCase());
			ps.setString(2, rwsMaster.getLocation().toUpperCase());
			ps.setString(3, rwsMaster.getDesgnCode());
			ps.setString(4, rwsMaster.getlabEstablishedYear());
			ps.setString(5, rwsMaster.getcontactNum());
			ps.setString(6, rwsMaster.getlevelCode());
			ps.setString(7, rwsMaster.getMancode());
			ps.setString(8, officeCode);
			// System.out.println("Updateing" + rwsMaster.getDivStatus());
			ps.setString(9, rwsMaster.getDivStatus());

			ps.setString(10, rwsMaster.getLabCode());

			// System.out.println("Updatin subdivision with:"+ rwsMaster.getSubdivision());

			int rec = ps.executeUpdate();
			if (rec > 0) {
				request.setAttribute("message", "Updated Successfully");
			}
		} catch (Exception e) {
			request.setAttribute("message", "Failed Updation");
			System.out.println("exception in updateWQLab --" + e);
		} finally {
			rwsMasterData.closeAll();
			if (ps != null) {
				ps.close();
			}
		}
	}

	

	public static String getLabCode(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String code = null;
		try {

			rwsMasterData.conn = RwsOffices.getConn();
			String query = "SELECT LAB_CODE FROM RWS_WATER_QUALITY_LAB_TBL order by LAB_CODE";

			ps = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.rs = ps.executeQuery();

			int big = 0, Lcode = 0;
			while (rwsMasterData.rs.next()) {
				code = rwsMasterData.rs.getString(1);
				int labcode = Integer.parseInt(code);
						//System.out.println("labcode1 :"+labcode);
				if (labcode > big) {
					big = labcode;
				}
				//System.out.println("big1 :"+big);
				Lcode = big + 1;
				code = "" + Lcode;
			}
			if (code == null) {
				code = "01";
			} else if (code.length() == 1 || code.length() == 2) {
				code = "0" + code;
			}
		} catch (Exception e) {
			System.out.println("Ther error in getLabCode-- " + e);
		} finally {
			rwsMasterData.closeAll();
			if (ps != null) {
				ps.close();
			}
		}
		return code;
	}

	public static String getWaterTestName(String code, Connection conn) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;
		String name = null;
		rwsMasterData.stmt1 = null;
		rwsMasterData.rs1 = null;
		try {
			// Debug.println("in getWaterTestName");

			rwsMasterData.stmt1 = rwsMasterData.conn.createStatement();
			String query = "SELECT test_name FROM RWS_WATER_QUALITY_TEST_TBL WHERE test_code ='" + code + "'";
			/*
			 * Debug.println("query in getWaterTestName in RwsMasterData is " + query);
			 */
			rwsMasterData.rs1 = rwsMasterData.stmt1.executeQuery(query);
			rwsMasterData.rs1.next();
			name = rwsMasterData.rs1.getString(1);
		} catch (Exception e) {
			Debug.println("Ther error in getWaterTestName=" + e);
		} finally {
			rwsMasterData.stmt1.close();
		}
		return name;
	}

	public static String getEmpName(String code, Connection conn) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;
		String name = null;
		rwsMasterData.stmt1 = null;
		rwsMasterData.rs1 = null;
		try {
			// Debug.println("in getEmpName");

			// Debug.println("getEmpName=" + code);
			rwsMasterData.stmt1 = rwsMasterData.conn.createStatement();

			rwsMasterData.rs1 = rwsMasterData.stmt1
					.executeQuery("SELECT EMPLOYEE_NAME  FROM rws_EMPLOYEE_tbl WHERE EMPLOYEE_CODE  ='" + code + "'");
			rwsMasterData.rs1.next();
			name = rwsMasterData.rs1.getString(1);

		} catch (Exception e) {
			Debug.println("Ther error in getEmpName=" + e);
		} finally {
			rwsMasterData.stmt1.close();
		}
		return name;
	}

	public static String getTestName(String code, Connection conn) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;
		String name = null;
		rwsMasterData.rs1 = null;
		try {
			ps = rwsMasterData.conn
					.prepareStatement("SELECT TEST_NAME  FROM RWS_WATER_QUALITY_TEST_TBL WHERE TEST_CODE  =? ");
			ps.setString(1, code);
			rwsMasterData.rs1 = ps.executeQuery();
			rwsMasterData.rs1.next();
			name = rwsMasterData.rs1.getString(1);

		} catch (Exception e) {
			System.out.println("Ther Exception in getTestName= " + e);
		} finally {
			if (ps != null) {
				ps.close();
			}
		}
		return name;
	}

	public static String getLabName(String code, Connection conn) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;
		String name = null;
		rwsMasterData.stmt1 = null;
		rwsMasterData.rs1 = null;
		try {
			// Debug.println("in getLabName");

			// Debug.println("getLabName=" + code);
			rwsMasterData.stmt1 = rwsMasterData.conn.createStatement();

			rwsMasterData.rs1 = rwsMasterData.stmt1
					.executeQuery("SELECT LAB_NAME  FROM RWS_WATER_QUALITY_LAB_TBL WHERE LAB_CODE  ='" + code + "'");
			rwsMasterData.rs1.next();
			name = rwsMasterData.rs1.getString(1);

		} catch (Exception e) {
			Debug.println("Ther error in getLabName=" + e);
		} finally {
			rwsMasterData.stmt1.close();
		}
		return name;
	}

	public static ArrayList getAssetSubCompNames(String assetTypeCode, String assetCompCode, DataSource dataSource)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		ArrayList assetSubCompNames = new ArrayList();
		RwsMaster rwsMaster;
		try {
			// Debug.println("in getAssetSubCompNames");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt1 = rwsMasterData.conn.createStatement();
			rwsMasterData.rs1 = rwsMasterData.stmt1.executeQuery(
					"SELECT ASSET_SUBCOMPONENT_NAME  FROM RWS_ASSET_SUBCOMPONENT_TBL WHERE ASSET_COMPONENT_CODE  ='"
							+ assetCompCode + "' and type_of_asset_code='" + assetTypeCode + "'");
			while (rwsMasterData.rs1.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setAssetSubCompTypeName(rwsMasterData.rs1.getString(1));
				assetSubCompNames.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("Ther error in getAssetCompTypeName=" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);

		}
		return assetSubCompNames;
	}

	public static String getTestId(String test, String labCode, String yr, Connection conn) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;
		String name = null;
		rwsMasterData.stmt1 = null;
		rwsMasterData.rs1 = null;
		try {
			// Debug.println("in getTestId");

			// Debug.println(" year=" + yr);
			rwsMasterData.stmt1 = rwsMasterData.conn.createStatement();
			if (test.equals("sample")) {
				rwsMasterData.rs1 = rwsMasterData.stmt1.executeQuery(
						"select max(substr(test_id,4,2)),max(to_number(substr(test_id,5,6))) from rws_water_sample_collect_tbl where substr(test_id,1,3)='"
								+ labCode + "'");
			} else if (test.equals("test")) {
				rwsMasterData.rs1 = rwsMasterData.stmt1.executeQuery(
						"select max(substr(test_id,4,2)),max(to_number(substr(test_id,5,6))) from RWS_WQ_TEST_RESULTS_TBL where substr(test_id,1,3)='"
								+ labCode + "'");
			}
			rwsMasterData.rs1.next();
			if (rwsMasterData.rs1.getString(1) != null) {
				if (rwsMasterData.rs1.getString(1).equals(yr)) {
					if (rwsMasterData.rs1.getString(2).length() == 1) {
						name = "000" + (rwsMasterData.rs1.getInt(2) + 1);
					} else if (rwsMasterData.rs1.getString(2).length() == 2) {
						name = "00" + (rwsMasterData.rs1.getInt(2) + 1);
					} else if (rwsMasterData.rs1.getString(2).length() == 3) {
						name = "0" + (rwsMasterData.rs1.getInt(2) + 1);
					} else if (rwsMasterData.rs1.getString(2).length() == 4) {
						name = String.valueOf(rwsMasterData.rs1.getInt(2) + 1);
					}
				} else {
					name = "0001";
				}
			} else {
				name = "0001";
			}
		} catch (Exception e) {
			Debug.println("Ther error in getLabName=" + e);
		} finally {
			rwsMasterData.stmt1.close();
		}
		return (labCode + yr + name);
	}

	public static ArrayList getTestParameterCodes(DataSource dataSource, String testCode) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList parameters = new ArrayList();
		// Debug.println("The testCode is-----------------" + testCode);
		try {
			// Debug.println("in getTestParameterCodes");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(
					"SELECT * FROM RWS_WQ_PARA_TEST_TBL WHERE TEST_CODE in (select test_code from RWS_WATER_QUALITY_TEST_TBL where test_name='"
							+ testCode + "')");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setTestCode(rwsMasterData.rs.getString(1));
				rwsMaster.setTestPCode(rwsMasterData.rs.getString(2));
				rwsMaster.setTestPName(rwsMasterData.rs.getString(3));
				rwsMaster.setTestName(getWaterTestName(rwsMasterData.rs.getString(1), rwsMasterData.conn));
				rwsMaster.setMinPerVal(rwsMasterData.rs.getString(4));
				rwsMaster.setMaxPerVal(rwsMasterData.rs.getString(5));
				rwsMaster.setUndesirableEffect(rwsMasterData.rs.getString(6));

				parameters.add(rwsMaster);

			}

		} catch (Exception e) {
			Debug.println("Imam:  " + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return parameters;
	}

	public static ArrayList getHabitations(String dcode, String mcode, String pcode, String vcode,
			DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		ArrayList habs = new ArrayList();
		RwsMaster rwsMaster = null;
		try {
			// Debug.println("in getHabitations");
			rwsMasterData.conn = RwsOffices.getConn();
			/*
			 * rwsMasterData.rs = rwsMasterData.stmt .executeQuery("SELECT HAB_CODE,HNAME
			 * FROM RWS_HABMAST_TBL WHERE" + " SUBSTR(HAB_CODE,1,2)='" + dcode + "' AND
			 * SUBSTR(HAB_CODE,6,2)='" + mcode + "' AND " + "SUBSTR(HAB_CODE,13,2)='" +
			 * pcode + "' AND SUBSTR(HAB_CODE,8,3)='" + vcode+"'");
			 */
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(
					"SELECT p.PANCH_CODE,p.PANCH_NAME FROM rws_panchayat_raj_tbl p,rws_habitation_directory_tbl h,rws_complete_hab_view c  WHERE"
							+ " h.hab_code=c.PANCH_CODE and SUBSTR(p.PANCH_CODE,1,2)=? AND SUBSTR(p.PANCH_CODE,6,2)=? AND SUBSTR(p.PANCH_CODE,13,2)=? "
							+ " AND SUBSTR(p.PANCH_CODE,8,3)=? and p.PANCH_CODE=h.HAB_CODE and (h.COVERAGE_STATUS <> 'UI' or h.COVERAGE_STATUS is not null)");
			rwsMasterData.pstmt.setString(1, dcode);
			rwsMasterData.pstmt.setString(2, mcode);
			rwsMasterData.pstmt.setString(3, pcode);
			rwsMasterData.pstmt.setString(4, vcode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				// rwsLocation.setHabCode(rwsMasterData.rs.getString("HAB_CODE"));
				rwsMaster = new RwsMaster();
				rwsMaster.setHabCode(rwsMasterData.rs.getString(1));
				rwsMaster.setHabName(rwsMasterData.rs.getString(2));
				rwsMaster.setHabitationCode(rwsMasterData.rs.getString(1) + " - " + rwsMasterData.rs.getString(2));
				habs.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The error at getHabitations In RwsMasterData =" + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return habs;
	}

	public static ArrayList getPRHabitations(String habCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		ArrayList habs = new ArrayList();
		RwsMaster rwsMaster = null;
		try {
			// Debug.println("in getPRHabitations");
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(
					"SELECT PANCH_CODE,PANCH_NAME FROM RWS_PANCHAYAT_RAJ_TBL WHERE HAB_CODE=? order by panch_code");
			rwsMasterData.pstmt.setString(1, habCode);
			// Debug.println("habcode in getprhabs= " + habCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setHabitation(rwsMasterData.rs.getString(1));
				rwsMaster.setHabCode(rwsMasterData.rs.getString(1));
				rwsMaster.setHabName(rwsMasterData.rs.getString(2));
				habs.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The error in getPRHabitations rwsMasterData =" + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return habs;
	}

	public static String getMaxPrHab(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String code = null;
		try {
			// Debug.println("in getMaxPrHab");

			rwsMasterData.conn = RwsOffices.getConn();

			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("SELECT MAX(to_number(PANCH_CODE))+1 FROM RWS_PANCHAYAT_RAJ_TBL");
			rwsMasterData.rs.next();
			code = rwsMasterData.rs.getString(1);
		} catch (Exception e) {
			Debug.println("The error in getMaxPrHab" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return code;
	}

	// the following is modified by passing datasource instead of conn
	public static int getAssetSubCompCount(Connection conn, String tabName, String typeOfAssetName,
			String typeOfAssetCode, String habCode, String pumpCode) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;
		int count = 0;
		String query = "";
		try {
			/*
			 * Debug.println("in getAssetSubCompCount");
			 * 
			 * Debug.println("getassetsubcomp counnt    qeury   ");
			 */
			query = "select count(*) COUNT from rws_asset_mast_tbl a,rws_asset_scheme_tbl s," + tabName
					+ " h ,rws_asset_type_tbl t where a.asset_code=s.asset_code and a.asset_code=h.asset_code and "
					+ " substr(s.scheme_code,17,3)='" + pumpCode + "' and a.hab_code='" + habCode
					+ "' and a.type_of_asset_code=t.type_of_asset_code and t.type_of_asset_name='" + typeOfAssetName
					+ "' and a.type_of_asset_code='" + typeOfAssetCode + "'";

			/*
			 * Debug.println("getassetsubcompssssssssssss counnt    qeury   " + query);
			 */
			rwsMasterData.stmt1 = rwsMasterData.conn.createStatement();
			rwsMasterData.rs1 = rwsMasterData.stmt1.executeQuery(query);
			if (rwsMasterData.rs1.next()) {
				count = rwsMasterData.rs1.getInt("COUNT");
			}
		} catch (Exception e) {
			Debug.println("Error=" + e);
		} finally {
			rwsMasterData.stmt1.close();

		}
		return count;
	}

	public static int getAssetSubCompCount(DataSource dataSource, String tabName, String typeOfAssetName,
			String typeOfAssetCode, String habCode, String pumpCode) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
	
		int count = 0;
		String query = "";
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			query = "select count(*) COUNT from rws_asset_mast_tbl a,rws_asset_scheme_tbl s," + tabName
					+ " h ,rws_asset_type_tbl t where a.asset_code=s.asset_code and a.asset_code=h.asset_code and "
					+ " substr(s.scheme_code,17,3)=? and a.hab_code=? and a.type_of_asset_code=t.type_of_asset_code and "
					+ "t.type_of_asset_name=? and a.type_of_asset_code=?";

			rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt1.setString(1, pumpCode);
			rwsMasterData.pstmt1.setString(2, habCode);
			rwsMasterData.pstmt1.setString(3, typeOfAssetName);
			rwsMasterData.pstmt1.setString(4, typeOfAssetCode);
			rwsMasterData.rs1 = rwsMasterData.pstmt1.executeQuery();
			if (rwsMasterData.rs1.next()) {
				count = rwsMasterData.rs1.getInt("COUNT");
			}
		} catch (Exception e) {
			Debug.println("Exception at getAssetSubCompCount in RwsMasterData : " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return count;
	}

	public static int getAssetSubCompCountForSource(Connection conn, String tabName, String typeOfAssetName,
			String typeOfAssetCode, String typeOfSubCompName, String habCode, String pumpCode) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;
		int count = 0;
		String query = "";
		try {
		
			if (typeOfSubCompName.equals("SUBSURFACE SOURCE"))
				/*query = "select count(*) COUNT from rws_asset_mast_tbl a,rws_asset_scheme_tbl s,"+tabName+" h ,rws_asset_type_tbl t where a.asset_code=s.asset_code and "
						+ "a.hab_code=h.hab_code and a.asset_code=h.asset_code and  substr(s.scheme_code,17,3)=? and a.hab_code=? and a.type_of_asset_code=t.type_of_asset_code "
						+ "and t.type_of_asset_name=? and a.type_of_asset_code=? and SOURCE_TYPE_CODE=1";*/
				
				query = "select count(*) COUNT from rws_asset_mast_tbl a,rws_asset_scheme_tbl s,"+tabName+" h ,rws_asset_type_tbl t where a.asset_code=s.asset_code and "
						+ " a.asset_code=h.asset_code and  substr(s.scheme_code,17,3)=? and a.hab_code=? and a.type_of_asset_code=t.type_of_asset_code "
						+ "and t.type_of_asset_name=? and a.type_of_asset_code=? and SOURCE_TYPE_CODE=1";

			else if (typeOfSubCompName.equals("SURFACE SOURCE"))
				/*query = "select count(*) COUNT from rws_asset_mast_tbl a,rws_asset_scheme_tbl s,"+tabName+" h ,rws_asset_type_tbl t where a.asset_code=s.asset_code and "
						+ " a.hab_code=h.hab_code and a.asset_code=h.asset_code and  substr(s.scheme_code,17,3)=? and a.hab_code=? and a.type_of_asset_code=t.type_of_asset_code"
						+ " and t.type_of_asset_name=? and a.type_of_asset_code=? and SOURCE_TYPE_CODE=2";*/
				query = "select count(*) COUNT from rws_asset_mast_tbl a,rws_asset_scheme_tbl s,"+tabName+" h ,rws_asset_type_tbl t where a.asset_code=s.asset_code and "
						+ "  a.asset_code=h.asset_code and  substr(s.scheme_code,17,3)=? and a.hab_code=? and a.type_of_asset_code=t.type_of_asset_code"
						+ " and t.type_of_asset_name=? and a.type_of_asset_code=? and SOURCE_TYPE_CODE=2";

			rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt1.setString(1, pumpCode);
			rwsMasterData.pstmt1.setString(2, habCode);
			rwsMasterData.pstmt1.setString(3, typeOfAssetName);
			rwsMasterData.pstmt1.setString(4, typeOfAssetCode);
			rwsMasterData.rs1 = rwsMasterData.pstmt1.executeQuery();
			if (rwsMasterData.rs1.next()) {
				count = rwsMasterData.rs1.getInt("COUNT");
			}
			if (typeOfSubCompName.equals("SUBSURFACE SOURCE"))
				query="select count(*) as count from RWS_ASSET_SOURCE_LNK_TBL a,RWS_ASSET_MAST_TBL b,RWS_SOURCE_TBL c,"
						+ "rws_asset_scheme_tbl d where a.ASSET_CODE=b.ASSET_CODE and a.ASSET_CODE=d.ASSET_CODE"
						+ " and a.SOURCE_CODE=c.SOURCE_CODE and  substr(scheme_code,17,3)=? and b.hab_code=? and type_of_asset_code=?"
						+ " and SOURCE_TYPE_CODE=1";
				else if (typeOfSubCompName.equals("SURFACE SOURCE"))
					query="select count(*) as count from RWS_ASSET_SOURCE_LNK_TBL a,RWS_ASSET_MAST_TBL b,RWS_SOURCE_TBL c,"
							+ "rws_asset_scheme_tbl d where a.ASSET_CODE=b.ASSET_CODE and a.ASSET_CODE=d.ASSET_CODE"
							+ " and a.SOURCE_CODE=c.SOURCE_CODE and  substr(scheme_code,17,3)=? and b.hab_code=? and type_of_asset_code=?"
							+ " and SOURCE_TYPE_CODE=2";
				rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt1.setString(1, pumpCode);
				rwsMasterData.pstmt1.setString(2, habCode);
				rwsMasterData.pstmt1.setString(3, typeOfAssetCode);
				rwsMasterData.rs1 = rwsMasterData.pstmt1.executeQuery();
				if (rwsMasterData.rs1.next()) {
					count+= rwsMasterData.rs1.getInt("COUNT");
				}
		} catch (Exception e) {
			Debug.println("Exception in getAssetSubCompCountForSource in RwsMasterData : " + e);
		} finally {
			rwsMasterData.pstmt1.close();
		}
		return count;
	}

	public static int getAssetSubCompCountWTP(Connection conn, String tabName, String typeOfAssetName,
			String typeOfAssetCode, String habCode, String pumpCode, String wtp) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		int count = 0;
		String query = "";
		try {
			rwsMasterData.conn = conn;
			if (wtp.trim().equals("RS FILTER") || wtp.trim().equals("RS FILTERS")) {
				query = "select count(*) COUNT from rws_asset_mast_tbl a,rws_asset_scheme_tbl s," + tabName
						+ " h ,rws_asset_type_tbl t where a.asset_code=s.asset_code and a.asset_code=h.asset_code and "
						+ " substr(s.scheme_code,17,3)=? and a.hab_code=? and a.type_of_asset_code=t.type_of_asset_code and"
						+ " t.type_of_asset_name=? and a.type_of_asset_code=? AND WTP_TYPW ='RSF'";
			} else if (wtp.trim().equals("SS FILTER") || wtp.trim().equals("SS FILTERS")) {
				query = "select count(*)COUNT from rws_asset_mast_tbl a,rws_asset_scheme_tbl s," + tabName
						+ " h ,rws_asset_type_tbl t where a.asset_code=s.asset_code and a.asset_code=h.asset_code and "
						+ " substr(s.scheme_code,17,3)=? and a.hab_code=? and a.type_of_asset_code=t.type_of_asset_code "
						+ "and t.type_of_asset_name=? and a.type_of_asset_code=? AND WTP_TYPW ='SSF'";
			} else if (wtp.trim().equals("MICRO FILTER") || wtp.trim().equals("MICRO FILTERS")) {
				query = "select count(*)COUNT from rws_asset_mast_tbl a,rws_asset_scheme_tbl s," + tabName
						+ " h ,rws_asset_type_tbl t where a.asset_code=s.asset_code and a.asset_code=h.asset_code and "
						+ " substr(s.scheme_code,17,3)=? and a.hab_code=? and a.type_of_asset_code=t.type_of_asset_code and "
						+ "t.type_of_asset_name=? and a.type_of_asset_code=? AND WTP_TYPW ='MSF'";
			} else if (wtp.trim().equals("ROPLANTS") || wtp.trim().equals("ROPLANTS")) {
				query = "select count(*)COUNT from rws_asset_mast_tbl a,rws_asset_scheme_tbl s," + tabName
						+ " h ,rws_asset_type_tbl t where a.asset_code=s.asset_code and a.asset_code=h.asset_code and "
						+ " substr(s.scheme_code,17,3)=? and a.hab_code=? and a.type_of_asset_code=t.type_of_asset_code and "
						+ "t.type_of_asset_name=? and a.type_of_asset_code=? AND WTP_TYPW ='ROP'";
			}

			rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt1.setString(1, pumpCode);
			rwsMasterData.pstmt1.setString(2, habCode);
			rwsMasterData.pstmt1.setString(3, typeOfAssetName);
			rwsMasterData.pstmt1.setString(4, typeOfAssetCode);
			rwsMasterData.rs1 = rwsMasterData.pstmt1.executeQuery();
			if (rwsMasterData.rs1.next())
				count = rwsMasterData.rs1.getInt("COUNT");
		} catch (Exception e) {
			Debug.println("Exception in getAssetSubCompCountWTP in RwsMasterData : " + e.getMessage());
		} finally {
			rwsMasterData.pstmt1.close();
		}
		return count;
	}

	public static ArrayList getAssetSubComps(DataSource dataSource, String assetTypeCode, String assetTypeName,
			String assetComponentCode, String assetCompName, String habCode, String pumpCode, String opType)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		ArrayList assetSubComponents = new ArrayList();
		String assetSubCompName = "";	
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			if (!assetTypeCode.equals("05") && !assetTypeCode.equals("06") && !assetTypeCode.equals("07")
					&& !assetTypeCode.equals("08")) {
				String query = " SELECT asset_subcomponent_code, trim(asset_subcomponent_name) "
						+ " FROM rws_asset_subcomponent_tbl WHERE type_of_asset_code=? "
						+ " AND asset_component_code =? ORDER BY asset_subcomponent_code";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetTypeCode);
				rwsMasterData.pstmt.setString(2, assetComponentCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				while (rwsMasterData.rs.next()) {
					assetSubCompName = rwsMasterData.rs.getString(2);
					labelValueBean = new LabelValueBean();
					if ((assetTypeName.equals("PWS") || assetTypeName.equals("CPWS") || assetTypeName.equals("MPWS")
							|| assetTypeName.equals("DIRECT PUMPING")) && assetCompName.equals("SOURCE")
							&& assetSubCompName.equals("PUMPSETS")) {
						continue;
					}
					labelValueBean.setValue(rwsMasterData.rs.getString(1));

					labelValueBean.setLabel(assetSubCompName);

					if (opType.equals("Modify")) {
						String Tab_Prifix = "";
						if (assetTypeName.equals("PWS"))
							Tab_Prifix = "RWS_AST_";
						else if (assetTypeName.equals("MPWS"))
							Tab_Prifix = "RWS_AST_";
						else if (assetTypeName.equals("CPWS"))
							Tab_Prifix = "RWS_AST_";
						else if (assetTypeName.equals("DIRECT PUMPING"))
							Tab_Prifix = "RWS_AST_";

						if (assetTypeName.equals("HANDPUMPS") && assetCompName.equals("SOURCE")
								&& assetSubCompName.equals("BORE WELL"))
							labelValueBean.setCount(getAssetSubCompCount(rwsMasterData.conn, "RWS_HP_SUBCOMP_PARAM_TBL",
									assetTypeName, assetTypeCode, habCode, pumpCode));

						else if ((assetTypeName.equals("PWS") || assetTypeName.equals("CPWS")
								|| assetTypeName.equals("MPWS") || assetTypeName.equals("DIRECT PUMPING"))
								&& assetCompName.equals("SOURCE") && assetSubCompName.equals("SUBSURFACE SOURCE"))
							labelValueBean.setCount(getAssetSubCompCountForSource(rwsMasterData.conn, "RWS_SOURCE_TBL",
									assetTypeName, assetTypeCode, assetSubCompName, habCode, pumpCode));

						else if ((assetTypeName.equals("PWS") || assetTypeName.equals("CPWS")
								|| assetTypeName.equals("MPWS") || assetTypeName.equals("DIRECT PUMPING"))
								&& assetCompName.equals("PUMPING") && assetSubCompName.equals("PUMPSETS")) {
							labelValueBean.setCount(getAssetSubCompCount(rwsMasterData.conn,
									Tab_Prifix + "SUBCOMP_PARAM_TBL", assetTypeName, assetTypeCode, habCode, pumpCode));
						}

						else if ((assetTypeName.equals("PWS") || assetTypeName.equals("CPWS")
								|| assetTypeName.equals("MPWS") || assetTypeName.equals("DIRECT PUMPING"))
								&& assetCompName.equals("SOURCE") && assetSubCompName.equals("SURFACE SOURCE"))
							labelValueBean.setCount(getAssetSubCompCountForSource(rwsMasterData.conn, "RWS_SOURCE_TBL",
									assetTypeName, assetTypeCode, assetSubCompName, habCode, pumpCode));
						else if ((assetTypeName.equals("PWS") || assetTypeName.equals("CPWS")
								|| assetTypeName.equals("MPWS") || assetTypeName.equals("DIRECT PUMPING"))
								&& assetCompName.equals("OTHERS") && assetSubCompName.equals("MISCELLANEOUS"))
							labelValueBean.setCount(getAssetSubCompCount(rwsMasterData.conn,
									Tab_Prifix + "OTHERS_PARAM_TBL", assetTypeName, assetTypeCode, habCode, pumpCode));

						else if ((assetTypeName.equals("PWS") || assetTypeName.equals("CPWS")
								|| assetTypeName.equals("MPWS") || assetTypeName.equals("DIRECT PUMPING"))
								&& assetCompName.equals("HEADWORKS")
								&& assetSubCompName.equals("RAW WATER COLLECTION WELL"))
							labelValueBean.setCount(
									getAssetSubCompCount(rwsMasterData.conn, Tab_Prifix + "RW_COLLWELL_PARAM_TBL",
											assetTypeName, assetTypeCode, habCode, pumpCode));
						else if ((assetTypeName.equals("PWS") || assetTypeName.equals("CPWS")
								|| assetTypeName.equals("MPWS") || assetTypeName.equals("DIRECT PUMPING"))
								&& assetCompName.equals("HEADWORKS")
								&& (assetSubCompName.equals("SS TANK") || assetSubCompName.equals("SS TANKS")))
							labelValueBean.setCount(getAssetSubCompCount(rwsMasterData.conn,
									Tab_Prifix + "SS_SC_PARAM_TBL", assetTypeName, assetTypeCode, habCode, pumpCode));
						else if ((assetTypeName.equals("PWS") || assetTypeName.equals("CPWS")
								|| assetTypeName.equals("MPWS") || assetTypeName.equals("DIRECT PUMPING"))
								&& assetCompName.equals("HEADWORKS") && assetSubCompName.equals("SUMP"))
							labelValueBean.setCount(
									getAssetSubCompCount(rwsMasterData.conn, Tab_Prifix + "SUMP_M_SC_PARAM_TBL",
											assetTypeName, assetTypeCode, habCode, pumpCode));
						else if ((assetTypeName.equals("PWS") || assetTypeName.equals("CPWS")
								|| assetTypeName.equals("MPWS") || assetTypeName.equals("DIRECT PUMPING"))
								&& assetCompName.equals("HEADWORKS")
								&& (assetSubCompName.equals("SS FILTER") || assetSubCompName.equals("SS FILTERS")))
							labelValueBean.setCount(
									getAssetSubCompCountWTP(rwsMasterData.conn, Tab_Prifix + "WTP_SC_PARAM_TBL",
											assetTypeName, assetTypeCode, habCode, pumpCode, assetSubCompName));
						else if ((assetTypeName.equals("PWS") || assetTypeName.equals("CPWS")
								|| assetTypeName.equals("MPWS") || assetTypeName.equals("DIRECT PUMPING"))
								&& assetCompName.equals("HEADWORKS")
								&& (assetSubCompName.equals("RS FILTER") || assetSubCompName.equals("RS FILTERS"))) {
							labelValueBean.setCount(
									getAssetSubCompCountWTP(rwsMasterData.conn, Tab_Prifix + "WTP_SC_PARAM_TBL",
											assetTypeName, assetTypeCode, habCode, pumpCode, assetSubCompName));

						} else if ((assetTypeName.equals("PWS") || assetTypeName.equals("CPWS")
								|| assetTypeName.equals("MPWS") || assetTypeName.equals("DIRECT PUMPING"))
								&& assetCompName.equals("HEADWORKS") && (assetSubCompName.equals("MICRO FILTER")
										|| assetSubCompName.equals("MICRO FILTERS"))) {
							labelValueBean.setCount(
									getAssetSubCompCountWTP(rwsMasterData.conn, Tab_Prifix + "WTP_SC_PARAM_TBL",
											assetTypeName, assetTypeCode, habCode, pumpCode, assetSubCompName));

						} else if ((assetTypeName.equals("PWS") || assetTypeName.equals("CPWS")
								|| assetTypeName.equals("MPWS") || assetTypeName.equals("DIRECT PUMPING"))
								&& assetCompName.equals("HEADWORKS")
								&& (assetSubCompName.equals("ROPLANTS") || assetSubCompName.equals("ROPLANTS"))) {
							labelValueBean.setCount(
									getAssetSubCompCountWTP(rwsMasterData.conn, Tab_Prifix + "WTP_SC_PARAM_TBL",
											assetTypeName, assetTypeCode, habCode, pumpCode, assetSubCompName));

						} else if ((assetTypeName.equals("PWS") || assetTypeName.equals("CPWS")
								|| assetTypeName.equals("MPWS") || assetTypeName.equals("DIRECT PUMPING"))
								&& assetCompName.equals("HEADWORKS") && (assetSubCompName.equals("FOOT PATH BRIDGE")
										|| assetSubCompName.equals("FOOTPATH BRIDGE")))
							labelValueBean.setCount(
									getAssetSubCompCount(rwsMasterData.conn, Tab_Prifix + "FP_BRIDGE_PARAM_TBL",
											assetTypeName, assetTypeCode, habCode, pumpCode));
						else if ((assetTypeName.equals("PWS") || assetTypeName.equals("CPWS")
								|| assetTypeName.equals("MPWS") || assetTypeName.equals("DIRECT PUMPING"))
								&& assetCompName.equals("HEADWORKS") && assetSubCompName.equals("PUMP HOUSE"))
							labelValueBean.setCount(
									getAssetSubCompCount(rwsMasterData.conn, Tab_Prifix + "PUMPHOUSE_PARAM_TBL",
											assetTypeName, assetTypeCode, habCode, pumpCode));
						else if ((assetTypeName.equals("PWS") || assetTypeName.equals("CPWS")
								|| assetTypeName.equals("MPWS") || assetTypeName.equals("DIRECT PUMPING"))
								&& assetCompName.equals("HEADWORKS") && assetSubCompName.equals("WATCHMAN QUARTER"))
							labelValueBean.setCount(
									getAssetSubCompCount(rwsMasterData.conn, Tab_Prifix + "WATCHMAN_PARAM_TBL",
											assetTypeName, assetTypeCode, habCode, pumpCode));
						else if ((assetTypeName.equals("PWS") || assetTypeName.equals("CPWS")
								|| assetTypeName.equals("MPWS") || assetTypeName.equals("DIRECT PUMPING"))
								&& assetCompName.equals("HEADWORKS")
								&& assetSubCompName.equals("CLEAR WATER COLLECTION WELL"))
							labelValueBean.setCount(
									getAssetSubCompCount(rwsMasterData.conn, Tab_Prifix + "CW_COLLWELL_PARAM_TBL",
											assetTypeName, assetTypeCode, habCode, pumpCode));

						else if ((assetTypeName.equals("PWS") || assetTypeName.equals("CPWS")
								|| assetTypeName.equals("MPWS")) && assetCompName.equals("SR. RESERVOIRS")
								&& assetSubCompName.equals("GLSR"))
							labelValueBean.setCount(getAssetSubCompCount(rwsMasterData.conn,
									Tab_Prifix + "GLSR_SC_PARAM_TBL", assetTypeName, assetTypeCode, habCode, pumpCode));
						else if ((assetTypeName.equals("PWS") || assetTypeName.equals("CPWS")
								|| assetTypeName.equals("MPWS")) && assetCompName.equals("SR. RESERVOIRS")
								&& assetSubCompName.equals("OHSR"))
							labelValueBean.setCount(getAssetSubCompCount(rwsMasterData.conn,
									Tab_Prifix + "OHSR_SC_PARAM_TBL", assetTypeName, assetTypeCode, habCode, pumpCode));
						else if ((assetTypeName.equals("PWS") || assetTypeName.equals("CPWS")
								|| assetTypeName.equals("MPWS")) && assetCompName.equals("SR. RESERVOIRS")
								&& assetSubCompName.equals("CISTERNS"))
							labelValueBean.setCount(getAssetSubCompCount(rwsMasterData.conn,
									Tab_Prifix + "CIS_SC_PARAM_TBL", assetTypeName, assetTypeCode, habCode, pumpCode));
						else if ((assetTypeName.equals("PWS") || assetTypeName.equals("CPWS")
								|| assetTypeName.equals("MPWS")) && assetCompName.equals("SR. RESERVOIRS")
								&& assetSubCompName.equals("GLBR"))
							labelValueBean.setCount(getAssetSubCompCount(rwsMasterData.conn,
									Tab_Prifix + "GLBR_SC_PARAM_TBL", assetTypeName, assetTypeCode, habCode, pumpCode));
						else if ((assetTypeName.equals("PWS") || assetTypeName.equals("CPWS")
								|| assetTypeName.equals("MPWS")) && assetCompName.equals("SR. RESERVOIRS")
								&& assetSubCompName.equals("OHBR"))
							labelValueBean.setCount(getAssetSubCompCount(rwsMasterData.conn,
									Tab_Prifix + "OHBR_SC_PARAM_TBL", assetTypeName, assetTypeCode, habCode, pumpCode));
						else if ((assetTypeName.equals("PWS") || assetTypeName.equals("CPWS")
								|| assetTypeName.equals("MPWS")) && assetCompName.equals("SR. RESERVOIRS")
								&& assetSubCompName.equals("BPT"))
							labelValueBean.setCount(getAssetSubCompCount(rwsMasterData.conn,
									Tab_Prifix + "BPT_PARAM_TBL", assetTypeName, assetTypeCode, habCode, pumpCode));
						else if ((assetTypeName.equals("PWS") || assetTypeName.equals("CPWS")
								|| assetTypeName.equals("MPWS")) && assetCompName.equals("SR. RESERVOIRS")
								&& assetSubCompName.equals("CISTERNS"))
							labelValueBean.setCount(getAssetSubCompCount(rwsMasterData.conn,
									Tab_Prifix + "CIS_SC_PARAM_TBL", assetTypeName, assetTypeCode, habCode, pumpCode));
						else if ((assetTypeName.equals("PWS") || assetTypeName.equals("CPWS")
								|| assetTypeName.equals("MPWS")) && assetCompName.equals("SR. RESERVOIRS")
								&& assetSubCompName.equals("STAND POST"))
							labelValueBean.setCount(getAssetSubCompCount(rwsMasterData.conn,
									Tab_Prifix + "STANDPOST_TBL", assetTypeName, assetTypeCode, habCode, pumpCode));
						else if ((assetTypeName.equals("PWS") || assetTypeName.equals("CPWS")
								|| assetTypeName.equals("MPWS") || assetTypeName.equals("DIRECT PUMPING"))
								&& assetCompName.trim().equals("PIPELINE") && assetSubCompName.equals("PUMPING MAIN"))
							labelValueBean.setCount(getAssetSubCompCount(rwsMasterData.conn,
									Tab_Prifix + "PUMPINGMAIN_TBL", assetTypeName, assetTypeCode, habCode, pumpCode));

						else if ((assetTypeName.equals("PWS") || assetTypeName.equals("CPWS")
								|| assetTypeName.equals("MPWS") || assetTypeName.equals("DIRECT PUMPING"))
								&& assetCompName.equals("PIPELINE") && assetSubCompName.equals("GRAVITY MAIN"))
							labelValueBean.setCount(getAssetSubCompCount(rwsMasterData.conn,
									Tab_Prifix + "GRAVITYMAIN_TBL", assetTypeName, assetTypeCode, habCode, pumpCode));

						else if ((assetTypeName.equals("PWS") || assetTypeName.equals("CPWS")
								|| assetTypeName.equals("MPWS") || assetTypeName.equals("DIRECT PUMPING"))
								&& assetCompName.equals("PIPELINE") && assetSubCompName.equals("DISTRIBUTION"))
							labelValueBean.setCount(
									getAssetSubCompCount(rwsMasterData.conn, Tab_Prifix + "DISTRI_SC_PARAM_TBL",
											assetTypeName, assetTypeCode, habCode, pumpCode));

						else if ((assetTypeName.equals("PWS") || assetTypeName.equals("CPWS")
								|| assetTypeName.equals("MPWS") || assetTypeName.equals("DIRECT PUMPING"))
								&& assetCompName.equals("OTHERS") && assetSubCompName.equals("CHLORINATION"))
							labelValueBean.setCount(getAssetSubCompCount(rwsMasterData.conn,
									Tab_Prifix + "CHLORINATION_TBL", assetTypeName, assetTypeCode, habCode, pumpCode));

						else if ((assetTypeName.equals("PWS") || assetTypeName.equals("CPWS")
								|| assetTypeName.equals("MPWS") || assetTypeName.equals("DIRECT PUMPING"))
								&& assetCompName.equals("OTHERS") && assetSubCompName.equals("O AND M"))
							labelValueBean.setCount(getAssetSubCompCount(rwsMasterData.conn,
									Tab_Prifix + "OANDM_PARAM_TBL", assetTypeName, assetTypeCode, habCode, pumpCode));


						else
							labelValueBean.setCount(0);
						assetSubComponents.add(labelValueBean);
					} // end of modify if
				} // end of while

			} else {
				
				if (assetTypeCode.equals("05")) {
					labelValueBean = new LabelValueBean();
					labelValueBean.setValue("001");
					labelValueBean.setLabel("SHALLOW HANDPUMPS");
					labelValueBean.setCount(getAssetSubCompCount(dataSource, "RWS_SHALLOWHANDPUMPS_TBL", assetTypeName,
							assetTypeCode, habCode, pumpCode));
				}
				if (assetTypeCode.equals("06")) {
					labelValueBean = new LabelValueBean();
					labelValueBean.setValue("001");
					labelValueBean.setLabel("OPEN WELLS");
					labelValueBean.setCount(getAssetSubCompCount(dataSource, "RWS_OPEN_WELL_MAST_TBL", assetTypeName,
							assetTypeCode, habCode, pumpCode));
				}
				if (assetTypeCode.equals("07")) {
					assetSubCompName = "PONDS";
					labelValueBean = new LabelValueBean();
					labelValueBean.setValue("001");
					labelValueBean.setLabel("PONDS");
					labelValueBean.setCount(getAssetSubCompCount(dataSource, "RWS_OPENWELL_POND_TBL", assetTypeName,
							assetTypeCode, habCode, pumpCode));
				}
				if (assetTypeCode.equals("08")) {
					labelValueBean = new LabelValueBean();
					labelValueBean.setValue("001");
					labelValueBean.setLabel("OTHERS");
				}
				
				if (opType.equals("Modify")) {
					String Tab_Prifix = "";
					if (assetTypeName.equals("PWS"))
						Tab_Prifix = "RWS_AST_";
					else if (assetTypeName.equals("MPWS"))
						Tab_Prifix = "RWS_AST_";
					else if (assetTypeName.equals("CPWS"))
						Tab_Prifix = "RWS_AST_";
					else if (assetTypeName.equals("09"))
						Tab_Prifix = "RWS_AST_";

					if (assetTypeName.equals("PONDS") && assetCompName.equals("SOURCE")) {
						assetSubCompName = "PONDS";
						labelValueBean.setCount(getAssetSubCompCount(dataSource, "RWS_OPENWELL_POND_TBL", assetTypeName,
								assetTypeCode, habCode, pumpCode));
					}

					if (assetTypeName.equals("SHALLOW HAND PUMPS") && assetCompName.equals("SOURCE")
							&& assetSubCompName.equals("SHALLOW HAND PUMPS")) {
						labelValueBean.setCount(getAssetSubCompCount(dataSource, "RWS_SHALLOWHANDPUMPS_TBL",
								assetTypeName, assetTypeCode, habCode, pumpCode));
					}
					if (assetTypeName.equals("OPEN WELLS") && assetCompName.equals("SOURCE")
							&& assetSubCompName.equals("OPEN WELLS")) {
						labelValueBean.setCount(getAssetSubCompCount(dataSource, "RWS_OPEN_WELL_MAST_TBL",
								assetTypeName, assetTypeCode, habCode, pumpCode));

					}
					if (assetTypeName.equals("OTHERS") && assetCompName.equals("SOURCE")) {
						assetSubCompName = "OTHERS";
						labelValueBean.setCount(getAssetSubCompCount(dataSource, "RWS_AST_OTHERS_PARAM_TBL",
								assetTypeName, assetTypeCode, habCode, pumpCode));
					}
					assetSubComponents.add(labelValueBean);
					
					if (assetTypeCode.equals("08") && getAssetSubCompCount(dataSource, "RWS_AST_WTP_SC_PARAM_TBL",	assetTypeName, assetTypeCode, habCode, pumpCode)!=0 ) {
						labelValueBean = new LabelValueBean();
						labelValueBean.setValue("002");
						labelValueBean.setLabel("DONOR-TP");
						labelValueBean.setCount(getAssetSubCompCount(dataSource, "RWS_AST_WTP_SC_PARAM_TBL",
								assetTypeName, assetTypeCode, habCode, pumpCode));
						assetSubComponents.add(labelValueBean);
					}
				} 
			} 
		}catch (Exception e) {
			System.out.println("Exception at getAssetSubComps in RwsMasterData : "+e);
		}
		finally {
			rwsMasterData.closeAll();
		}
		return assetSubComponents;
	}

	public static ArrayList getAssetSubCompParams(DataSource dataSource, String assetCode, String assetTypeCode,
			String assetCompCode, String assetSubCompCode, String habCode, String pumpCode) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		Asset_Pumpset asset_pumpset = null;
		Asset_PipeLine asset_pipeline = null;
		Asset_Ponds asset_ponds = null;
		Asset_SHP asset_SHP = null;
		Asset_OpenWells asset_openWells = null;
		Asset_Others asset_others = null;
		Asset_Reservior asset_reservoir = null;
		ArrayList parameters = new ArrayList();
		String query = "";
		try {
			/*
			 * Asset Types
			 * 
			 * 01-PWS 02-MPWS 03-CPWS 04-HANDPUMPS 05-DIRECT PUMPING
			 * 
			 * Asset Component Types
			 * 
			 * Asset Type-PWS 01-SOURCE 03-PIPELINE 04-RESERVOIRS 05-PUMPSETS
			 * 
			 * Asset Type-CPWS 01-SOURCE 02-HEADWORKS 03-PIPELINE 04-SR.RESERVOIRS
			 * 05-PUMPSETS
			 * 
			 * Asset Type-HANDPUMPS 01-SOURCE
			 * 
			 * Asset Type-MPWS
			 * 
			 * 01-SOURCE 03-PIPELINE 04-RESERVOIRS 05-PUMPSETS
			 * 
			 * Asset SubComponents
			 * 
			 * Asset Type-04-HANDPUMPS Asset Component-01-SOURCE Asset
			 * SubComponent-001-BOREWElL
			 * 
			 * Asset Type-01-PWS Asset Component-01-SOURCE Asset SubComponent- 001-BORE WELL
			 * 
			 * Asset Type-01-PWS Asset Component-01-SOURCE Asset SubComponent- 002-WATCHMAN
			 * QUARTER
			 * 
			 * Asset Type- 01-PWS Asset Component-03-PIPELINE Asset
			 * SubComponent-001-DISTRIBUTION
			 * 
			 * ASSET TYPE=01-PWS ASSET COMPONENT-03-PIPELINE ASSET
			 * SUBCOMPONENT-002-STANDPOSTS
			 * 
			 * ASSET TYPE=01-PWS ASSET COMPONENT-03-PIPELINE ASSET SUBCOMPONENT-003-PUMPING
			 * MAIN
			 * 
			 * ASSET TYPE=01-PWS ASSET COMPONENT-04-RESERVOIRS ASSET SUBCOMPONENT-001-OHSR
			 * 
			 * ASSET TYPE=01-PWS ASSET COMPONENT-04-RESERVOIRS ASSET
			 * SUBCOMPONENT-002-CISTERNS
			 * 
			 * ASSET TYPE=01-PWS ASSET COMPONENT-04-RESERVOIRS ASSET SUBCOMPONENT-003-GLSR
			 * 
			 * ASSET TYPE=01-PWS ASSET COMPONENT-05-PUMPSETS ASSET SUBCOMPONENT-002-PUMP
			 * HOUSE
			 * 
			 * ASSET TYPE=01-PWS ASSET COMPONENT-05-PUMPSETS ASSET
			 * SUBCOMPONENT-003-CAPACITORS
			 * 
			 * ASSET TYPE=03-CPWS ASSET COMPONENT-01-SOURCE ASSET SUBCOMPONENT-001-BOREWELL
			 * 
			 * ASSET TYPE=03-CPWS ASSET COMPONENT-01-SOURCE ASSET SUBCOMPONENT-002-ROTARY
			 * BOREWELL
			 * 
			 * ASSET TYPE=03-CPWS ASSET COMPONENT- 01-SOURCE ASSET SUBCOMPONENT-003- INTAKE
			 * WELL
			 * 
			 * ASSET TYPE=03-CPWS ASSET COMPONENT-01-SOURCE ASSET
			 * SUBCOMPONENT-004-INFILTRATION WELL
			 * 
			 * ASSET TYPE=03-CPWS ASSET COMPONENT-01-SOURCE ASSET SUBCOMPONENT-005-SOURCE
			 * TYPE
			 * 
			 * ASSET TYPE=03-CPWS ASSET COMPONENT-02-HEAD WORKS ASSET SUBCOMPONENT-001-RAW
			 * WATER COLLECTION WELL
			 * 
			 * ASSET TYPE=03-CPWS ASSET COMPONENT-02-HEADWORKS ASSET SUBCOMPONENT-003-SS
			 * TANK
			 * 
			 * ASSET TYPE=03-CPWS ASSET COMPONENT-02-HEADWORKS ASSET SUBCOMPONENT-004-SS
			 * FILTERS
			 * 
			 * ASSET TYPE=03-CPWS ASSET COMPONENT-02-HEADWORKS ASSET
			 * SUBCOMPONENT-005-rwsMasterData.rs FILTERS
			 * 
			 * ASSET TYPE=03-CPWS ASSET COMPONENT-02-HEADWORKS ASSET SUBCOMPONENT-006-SUMP
			 * 
			 * ASSET TYPE=03-CPWS ASSET COMPONENT-02-HEADWORKS ASSET SUBCOMPONENT-009-FOOT
			 * PATH BRIDGE
			 * 
			 * ASSET TYPE=03-CPWS ASSET COMPONENT-02-HEADWORKS ASSET SUBCOMPONENT-010-PUMP
			 * HOUSE
			 * 
			 * ASSET TYPE=03-CPWS ASSET COMPONENT-02-HEADWORKS ASSET
			 * SUBCOMPONENT-011-WATCHMAN QUARTER
			 * 
			 * ASSET TYPE=03-CPWS ASSET COMPONENT-02-HEADWORKS ASSET SUBCOMPONENT-012-CLEAR
			 * WATER COLLECTION WELL
			 * 
			 * ASSET TYPE=03-CPWS ASSET COMPONENT-03-PIPELINE ASSET SUBCOMPONENT-001-PUMPING
			 * MAIN
			 * 
			 * ASSET TYPE=03-CPWS ASSET COMPONENT-03-PIPELINE ASSET SUBCOMPONENT-002-GRAVITY
			 * MAIN
			 * 
			 * ASSET TYPE=03-CPWS ASSET COMPONENT-03-PIPELINE ASSET
			 * SUBCOMPONENT-003-DISTRIBUTION
			 * 
			 * ASSET TYPE=03-CPWS ASSET COMPONENT-04-SR.RESERVOIRS ASSET
			 * SUBCOMPONENT-001-OHSR
			 * 
			 * ASSET TYPE=03-CPWS ASSET COMPONENT-04-SR.RESERVOIRS ASSET
			 * SUBCOMPONENT-002-OHBR
			 * 
			 * ASSET TYPE=03-CPWS ASSET COMPONENT-04-SR.RESERVOIRS ASSET
			 * SUBCOMPONENT-003-GLSR
			 * 
			 * ASSET TYPE=03-CPWS ASSET COMPONENT-04-SR.RESERVOIRS ASSET
			 * SUBCOMPONENT-004-GLBR
			 * 
			 * ASSET TYPE=03-CPWS ASSET COMPONENT-04-SR.RESERVOIRS ASSET
			 * SUBCOMPONENT-005-BPT
			 * 
			 * ASSET TYPE=03-CPWS ASSET COMPONENT-05-PUMPSETS ASSET SUBCOMPONENT-001-PUMP
			 * DETAILS
			 */
			rwsMasterData.conn = RwsOffices.getConn();
			String Tab_Prifix = "";
			if (assetTypeCode.equals("01"))
				Tab_Prifix = "RWS_AST_";
			else if (assetTypeCode.equals("02"))
				Tab_Prifix = "RWS_AST_";
			else if (assetTypeCode.equals("03"))
				Tab_Prifix = "RWS_AST_";
			else if (assetTypeCode.equals("09"))
				Tab_Prifix = "RWS_AST_";
			else if (assetTypeCode.equals("05"))
				Tab_Prifix = "RWS_SHALLOWHANDPUMPS_TBL";
			else if (assetTypeCode.equals("06"))
				Tab_Prifix = "RWS_OPEN_WELL_MAST_TBL";
			else if (assetTypeCode.equals("07"))
				Tab_Prifix = "RWS_OPENWELL_POND_TBL";
			else if (assetTypeCode.equals("08"))
				Tab_Prifix = " RWS_AST_OTHERS_PARAM_TBL";

			if (assetTypeCode.equals("05") && assetCompCode.equals("01") && assetSubCompCode.equals("001")) {
				query = "select * from " + Tab_Prifix + " OT, RWS_ASSET_MAST_TBL A where OT.ASSET_CODE=A.ASSET_CODE "
						+ " and OT.asset_code=?";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				if (rwsMasterData.rs == null)
					parameters.add(asset_SHP);
				else
					while (rwsMasterData.rs.next()) {
						asset_SHP = new Asset_SHP();
						asset_SHP.setAssetCode(rwsMasterData.rs.getString("ASSET_CODE"));
						asset_SHP.setHabCode(rwsMasterData.rs.getString("HAB_CODE"));
						asset_SHP.setHabitation(
								rwsMasterData.getHabName(rwsMasterData.rs.getString("HAB_CODE"), rwsMasterData.conn));
						asset_SHP.setShallowHandPumpCode(rwsMasterData.rs.getString("SHALLOWHP_CODE"));
						asset_SHP.setLocation(rwsMasterData.rs.getString("LOCATION"));
						asset_SHP.setDiameter(rwsMasterData.rs.getFloat("DIAMETER") + "");
						asset_SHP.setDepth(rwsMasterData.rs.getFloat("DEPTH") + "");
						asset_SHP.setHygiene(rwsMasterData.rs.getString("HYGIENE"));
						asset_SHP.setAvgNoOfHoursWorkingPerDay(rwsMasterData.rs.getFloat("AVERAGE_HOURS") + "");
						asset_SHP.setAvgTimeToFill(rwsMasterData.rs.getFloat("AVERAGE_TIME") + "");
						asset_SHP.setYeild(rwsMasterData.rs.getFloat("YIELD") + "");
						asset_SHP.setWaterQuality(rwsMasterData.rs.getString("WATER_QUALITY"));
						asset_SHP.setFloride(rwsMasterData.rs.getFloat("FLORIDE_PER") + "");
						asset_SHP.setBrakish(rwsMasterData.rs.getFloat("BRAKISH_PER") + "");
						asset_SHP.setIron(rwsMasterData.rs.getFloat("IRON_PER") + "");
						asset_SHP.setOthersType(format(rwsMasterData.rs.getString("OTHERS")) + "");
						asset_SHP.setOthers(rwsMasterData.rs.getFloat("OTHERS_PER") + "");
						String query2 = "select COMPO_LAT,COMPO_LON,COMPO_IMAGE from RWS_ASSET_COMPONENT_IMAGE_TBL where "
								+ "ASSET_CODE=? and ASSET_COMPONENT=?";
						rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement(query2);
						rwsMasterData.pstmt1.setString(1,  assetCode);
						rwsMasterData.pstmt1.setString(2,  rwsMasterData.rs.getString("SHALLOWHP_CODE"));
						rwsMasterData.rs2 = rwsMasterData.pstmt1.executeQuery();
						if (rwsMasterData.rs2.next()) {
							java.sql.Blob a = rwsMasterData.rs2.getBlob("COMPO_IMAGE");
							if (a == null) {
								asset_SHP.setImageStatus("No");
							} else {
								asset_SHP.setImageStatus("Yes");
							}
							asset_SHP.setLatitude(rwsMasterData.rs2.getString("COMPO_LAT"));
							asset_SHP.setLongitude(rwsMasterData.rs2.getString("COMPO_LON"));
						}
						asset_SHP.setElevation(rwsMasterData.rs.getString("elevation"));
						asset_SHP.setWaypoint(rwsMasterData.rs.getString("way_point"));
						parameters.add(asset_SHP);
					}
			}
			if (assetTypeCode.equals("06") && assetCompCode.equals("01") && assetSubCompCode.equals("001")) {
				query = "select * from " + Tab_Prifix + " OT, RWS_ASSET_MAST_TBL A where OT.ASSET_CODE=A.ASSET_CODE "
						+ " and OT.asset_code=?";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				if (rwsMasterData.rs == null)
					parameters.add(asset_openWells);
				else
					while (rwsMasterData.rs.next()) {

						asset_openWells = new Asset_OpenWells();
						asset_openWells.setAssetCode(rwsMasterData.rs.getString("ASSET_CODE"));
						asset_openWells.setHabCode(rwsMasterData.rs.getString("HABITATION_CODE"));
						asset_openWells.setHabitation(rwsMasterData
								.getHabName(rwsMasterData.rs.getString("HABITATION_CODE"), rwsMasterData.conn));
						asset_openWells.setOpenWellCode(rwsMasterData.rs.getString("OPENWELL_CODE"));
						asset_openWells.setLocation(rwsMasterData.rs.getString("LOCATION"));
						asset_openWells.setDiameter(rwsMasterData.rs.getFloat("DIAMETER") + "");
						asset_openWells.setDepth(rwsMasterData.rs.getFloat("DEPTH") + "");
						asset_openWells.setNormalWaterLevel(rwsMasterData.rs.getFloat("NORMAL_WATER_LEVEL") + "");
						asset_openWells.setMinimumWaterLevel(rwsMasterData.rs.getFloat("MIN_WATER_LEVEL") + "");
						asset_openWells.setMaximumWaterLevel(rwsMasterData.rs.getFloat("MAX_WATER_LEVEL") + "");
						asset_openWells.setPlatformExists(rwsMasterData.rs.getString("PLATFORM_EXISTS"));
						asset_openWells.setPlatformCondition(rwsMasterData.rs.getString("PLATFORM_CONDITION"));
						asset_openWells.setPurpose(rwsMasterData.rs.getString("PURPOSE"));
						asset_openWells.setWaterQuality(rwsMasterData.rs.getString("QUALITY"));
						asset_openWells.setFloride(rwsMasterData.rs.getFloat("FLOURIDE_PER") + "");
						asset_openWells.setBrakish(rwsMasterData.rs.getFloat("BRAKISH_PER") + "");
						asset_openWells.setIron(rwsMasterData.rs.getFloat("IRON_PER") + "");
						asset_openWells.setOthers(rwsMasterData.rs.getFloat("OTHER_PER") + "");
						asset_openWells.setOthersType(format(rwsMasterData.rs.getString("OTHER_TYPE")) + "");
						String query2 = "select COMPO_LAT,COMPO_LON,COMPO_IMAGE from RWS_ASSET_COMPONENT_IMAGE_TBL where"
								+ " ASSET_CODE=? and ASSET_COMPONENT=?";
						rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement(query2);
						rwsMasterData.pstmt1.setString(1,  assetCode);
						rwsMasterData.pstmt1.setString(2,  rwsMasterData.rs.getString("OPENWELL_CODE"));
						rwsMasterData.rs2 = rwsMasterData.pstmt1.executeQuery();
						if (rwsMasterData.rs2.next()) {
							java.sql.Blob a = rwsMasterData.rs2.getBlob("COMPO_IMAGE");
							if (a == null) {
								asset_openWells.setImageStatus("No");
							} else {
								asset_openWells.setImageStatus("Yes");
							}
							asset_openWells.setLatitude(rwsMasterData.rs2.getString("COMPO_LAT"));
							asset_openWells.setLongitude(rwsMasterData.rs2.getString("COMPO_LON"));
						}
						asset_openWells.setElevation(rwsMasterData.rs.getString("elevation"));
						asset_openWells.setWaypoint(rwsMasterData.rs.getString("way_point"));
						parameters.add(asset_openWells);
					}
			}

			if (assetTypeCode.equals("07") && assetCompCode.equals("01") && assetSubCompCode.equals("001")) {
				query = "select * from " + Tab_Prifix + " OT, RWS_ASSET_MAST_TBL A where OT.ASSET_CODE=A.ASSET_CODE "
						+ " and OT.asset_code=?";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				if (rwsMasterData.rs == null)
					parameters.add(asset_ponds);
				else
					while (rwsMasterData.rs.next()) {
						asset_ponds = new Asset_Ponds();
						asset_ponds.setPondCode(rwsMasterData.rs.getString("POND_CODE"));
						asset_ponds.setAssetCode(rwsMasterData.rs.getString("ASSET_CODE"));
						asset_ponds.setHabCode(rwsMasterData.rs.getString("HAB_CODE"));
						asset_ponds.setHabitation(
								rwsMasterData.getHabName(rwsMasterData.rs.getString("HAB_CODE"), rwsMasterData.conn));
						asset_ponds.setName(rwsMasterData.rs.getString("POND_NAME"));
						asset_ponds.setLocation(rwsMasterData.rs.getString("POND_LOCATION"));
						asset_ponds.setAreaSize(rwsMasterData.rs.getString("SIZE_AREA"));
						asset_ponds.setVolumeOfStorage(rwsMasterData.rs.getString("STORAGE_VOL"));
						asset_ponds.setHygeinity(rwsMasterData.rs.getString("HYGENITY"));
						asset_ponds.setPurpose(rwsMasterData.rs.getString("USAGE_PURPOSE"));
						asset_ponds.setFedBy(rwsMasterData.rs.getString("FED_BY"));
						asset_ponds.setFedName(rwsMasterData.rs.getString("FED_NAME"));
						asset_ponds.setFedOthersName(rwsMasterData.rs.getString("FED_OTHERS_NAME"));
						asset_ponds.setWaterQuality(rwsMasterData.rs.getString("WATER_QUALITY"));
						asset_ponds.setFloride(rwsMasterData.rs.getString("FLORIDE"));
						asset_ponds.setBrakish(rwsMasterData.rs.getString("BRAKISH"));
						asset_ponds.setIron(rwsMasterData.rs.getString("IRON"));
						asset_ponds.setOthersType(format(rwsMasterData.rs.getString("OTHER_TYPE")));
						asset_ponds.setOthers(rwsMasterData.rs.getString("OTHER_PER"));
						String query2 = "select COMPO_LAT,COMPO_LON,COMPO_IMAGE from RWS_ASSET_COMPONENT_IMAGE_TBL where"
								+ " ASSET_CODE=? and ASSET_COMPONENT=?";
						rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement(query2);
						rwsMasterData.pstmt1.setString(1,  assetCode);
						rwsMasterData.pstmt1.setString(2,  rwsMasterData.rs.getString("POND_CODE"));
						rwsMasterData.rs2 = rwsMasterData.pstmt1.executeQuery();
						if (rwsMasterData.rs2.next()) {
							java.sql.Blob a = rwsMasterData.rs2.getBlob("COMPO_IMAGE");
							if (a == null) {
								asset_ponds.setImageStatus("No");
							} else {
								asset_ponds.setImageStatus("Yes");
							}
							asset_ponds.setLatitude(rwsMasterData.rs2.getString("COMPO_LAT"));
							asset_ponds.setLongitude(rwsMasterData.rs2.getString("COMPO_LON"));

						}
						parameters.add(asset_ponds);
					}

			}

			if (assetTypeCode.equals("08") && assetCompCode.equals("01") && assetSubCompCode.equals("001")) {
				query = "select OT.OTHER_COMP_CODE,OT.ASSET_CODE,OT.COMP_NAME,OT.COMP_LOCATION,OT.REMARKS,OT.HAB_CODE,OT.SPECIAL_ASSET_TYPE,OT.YEILD,"
						+ "OT.COLLECTION_TANK,OT.COLLECTION_TANK_CAPACITY,OT.LATITUDE,OT.LONGITUDE,OT.ELEVATION,OT.WAY_POINT,OT.STATUS from "
						+ Tab_Prifix + " OT, RWS_ASSET_MAST_TBL A where OT.ASSET_CODE=A.ASSET_CODE "
						+ " and OT.asset_code=?";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				if (rwsMasterData.rs == null)
					parameters.add(asset_others);
				else
					while (rwsMasterData.rs.next()) {
						asset_others = new Asset_Others();
						asset_others.setAssetCode(rwsMasterData.rs.getString("ASSET_CODE"));
						asset_others.setHabCode(rwsMasterData.rs.getString("HAB_CODE"));
						asset_others.setGeneralCode(rwsMasterData.rs.getString("OTHER_COMP_CODE"));
						asset_others.setLocation(rwsMasterData.rs.getString("COMP_LOCATION"));
						asset_others.setComponentName(rwsMasterData.rs.getString("COMP_NAME"));
						asset_others.setRemarks(rwsMasterData.rs.getString("REMARKS"));
						asset_others.setSpecialAssetType(rwsMasterData.rs.getString("SPECIAL_ASSET_TYPE"));
						asset_others.setYield(rwsMasterData.rs.getString("YEILD"));
						asset_others.setCollectionTank(rwsMasterData.rs.getString("COLLECTION_TANK"));
						asset_others.setCollectionTankCapacity(rwsMasterData.rs.getString("COLLECTION_TANK_CAPACITY"));
						asset_others.setLatitude(rwsMasterData.rs.getString("LATITUDE"));
						asset_others.setLongitude(rwsMasterData.rs.getString("LONGITUDE"));
						asset_others.setElevation(rwsMasterData.rs.getString("ELEVATION"));
						asset_others.setWayPoint(rwsMasterData.rs.getString("WAY_POINT"));
						asset_others.setStatus(rwsMasterData.rs.getString("STATUS"));
						parameters.add(asset_others);
					}
			}
			if (assetTypeCode.equals("08") && assetCompCode.equals("01") && assetSubCompCode.equals("002")) {
				query = "select  SS.ASSET_CODE,WTPSC_CODE ,WTP_TYPW ,WTP_MLD,UNITS_NO,"
						+ "WTP_SIZE,UNITS_STANDBY,FREQ_SAND_SCRAP,PERFORMANCE, "
						+ "USE_CAPACITYMLD,EXTENTION_SCOPE,SS.LOCATION ,CHK_FILTER,"
						+ "nvl(RATE_OF_FILTRATION,0)RATE_OF_FILTRATION,SS.HAB_CODE,ss.SHELTER_EXISTING,ss.RWS_TANK_EXISTING,"
						+ "ss.PWS_TANK_EXISTING,ss.latitude,ss.longitude,ss.elevation,ss.way_point,nvl(AVE_CANS_SUPPLIED,0) as AVE_CANS_SUPPLIED"
						+ " from "
						+ "RWS_AST_WTP_SC_PARAM_TBL SS,RWS_ASSET_MAST_TBL A where SS.ASSET_CODE=A.ASSET_CODE "
						+ " and SS.asset_code=? and  SS.WTP_TYPW  in ('ROP','EDP','TFP','NTP','UFP','UVP') and SCHEME_DONOR is not null";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				while (rwsMasterData.rs.next()) {
					rwsMaster = new RwsMaster();
					rwsMaster.setAssetCode(rwsMasterData.rs.getString("ASSET_CODE"));
					rwsMaster.setWtpCode(rwsMasterData.rs.getString("WTPSC_CODE"));
					rwsMaster.setHabCode(rwsMasterData.rs.getString("HAB_CODE"));
					rwsMaster.setWtpType(rwsMasterData.rs.getString("WTP_TYPW"));
					rwsMaster.setWtpMld(rwsMasterData.rs.getString("WTP_MLD"));
					rwsMaster.setWtpUnits(rwsMasterData.rs.getString("UNITS_NO"));
					rwsMaster.setWtpRateOfFiltration(rwsMasterData.rs.getDouble("RATE_OF_FILTRATION"));
					rwsMaster.setWtpSize(rwsMasterData.rs.getString("WTP_SIZE"));
					rwsMaster.setWtpUnitsStandby(rwsMasterData.rs.getString("UNITS_STANDBY"));
					rwsMaster.setWtpPerformance(rwsMasterData.rs.getString("PERFORMANCE"));
					rwsMaster.setWtpShelter(rwsMasterData.rs.getInt("SHELTER_EXISTING"));
					rwsMaster.setWtpRawWater(rwsMasterData.rs.getString("RWS_TANK_EXISTING"));
					rwsMaster.setWtpProductWater(rwsMasterData.rs.getString("PWS_TANK_EXISTING"));
					try {
						rwsMaster.setWtpNoOfHoursOfUsage(
								Float.parseFloat(rwsMasterData.rs.getString("USE_CAPACITYMLD")));
					} catch (Exception e) {
						Debug.println("Exception is parsing to float " + e);
						rwsMaster.setWtpNoOfHoursOfUsage(0);
					}
					rwsMaster.setWtpExtentionScope(rwsMasterData.rs.getString("EXTENTION_SCOPE"));
					rwsMaster.setWtpLocation(rwsMasterData.rs.getString("LOCATION"));
					rwsMaster.setWtpFreqSandScrap(rwsMasterData.rs.getInt("FREQ_SAND_SCRAP"));
					String chkFilter = rwsMasterData.rs.getString("CHK_FILTER");
					if (chkFilter != null && chkFilter != "") {
						if (chkFilter.substring(0, 2).equals("01")) {
							rwsMaster.setWtpSedimentationTank(true);
							rwsMaster.setWtpHorizontalRoughingFilterValue("01");
						}
						if (chkFilter.substring(2, 4).equals("02")) {
							rwsMaster.setWtpHorizontalRoughingFilter(true);
							rwsMaster.setWtpHorizontalRoughingFilterValue("02");
						}
						if (chkFilter.substring(4, 6).equals("03")) {
							rwsMaster.setWtpVerticalRoughingFilterValue("03");
							rwsMaster.setWtpVerticalRoughingFilter(true);
						}
					}
					rwsMaster.setLatitude(rwsMasterData.rs.getString("latitude"));
					rwsMaster.setLongitude(rwsMasterData.rs.getString("longitude"));
					rwsMaster.setElevation(rwsMasterData.rs.getString("elevation"));
					rwsMaster.setWaypoint(rwsMasterData.rs.getString("way_point"));
					rwsMaster.setAveCansSupplied(rwsMasterData.rs.getString("AVE_CANS_SUPPLIED"));
					parameters.add(rwsMaster);
				}
			}
			if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) && assetCompCode.equals("01") && assetSubCompCode.equals("003")) {
				query = "select DT.ASSET_CODE,PUMP_CODE,PUMP_MAKE,PUMP_CPTY,PUMP_TYPE,"
						+ "YEAR_COMM,HR_RUN,USAGE,DESIGNED_LPM,DESIGNED_HEAD,"
						+ "decode(CONTROL_PANEL,'Y','YES','N','NO','YES','YES','NO','NO')"
						+ "control_panel,LOW_VOLT_PROB,POWER_AVAIL_PER_DAY,"
						+ "FEAS_URBAN_LINE,COST,URBAN_LINE_DISTANCE,SUGGESTIONS,"
						+ "DT.HAB_CODE,DT.LOCATION,FEEDER,GENERATOR_EXISTING,GENERATOR_CAPACITY,GENERATOR_WORKING,dt.latitude,"
						+ "dt.longitude,dt.elevation,dt.way_point  from "
						+ Tab_Prifix + "SUBCOMP_PARAM_TBL DT"
						+ ", RWS_ASSET_MAST_TBL A where DT.ASSET_CODE=A.ASSET_CODE "
						+ " and DT.asset_code=? order by PUMP_CODE";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				if (rwsMasterData.rs == null)
					parameters.add(rwsMaster);
				else
					while (rwsMasterData.rs.next()) {
						asset_pumpset = new Asset_Pumpset();
						asset_pumpset = getPumpsetsFromRs(dataSource, rwsMasterData.rs);
						parameters.add(asset_pumpset);
					}
			}
			if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) && assetCompCode.equals("06") && assetSubCompCode.equals("001")) {
				query = "select DT.ASSET_CODE,PUMP_CODE,PUMP_MAKE,PUMP_CPTY,PUMP_TYPE,"
						+ "YEAR_COMM,HR_RUN,USAGE,DESIGNED_LPM,DESIGNED_HEAD,"
						+ "decode(CONTROL_PANEL,'Y','YES','N','NO','YES','YES','NO','NO')"
						+ "control_panel,LOW_VOLT_PROB,POWER_AVAIL_PER_DAY,"
						+ "FEAS_URBAN_LINE,COST,URBAN_LINE_DISTANCE,SUGGESTIONS,"
						+ "DT.HAB_CODE,DT.LOCATION,FEEDER,GENERATOR_EXISTING,GENERATOR_CAPACITY,GENERATOR_WORKING,dt.latitude,"
						+ "dt.longitude,dt.elevation,dt.way_point from "
						+ Tab_Prifix + "SUBCOMP_PARAM_TBL DT"
						+ ", RWS_ASSET_MAST_TBL A where DT.ASSET_CODE=A.ASSET_CODE "
						+ " and DT.asset_code=? order by PUMP_CODE";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				if (rwsMasterData.rs == null)
					parameters.add(rwsMaster);
				else
					while (rwsMasterData.rs.next()) {
						asset_pumpset = new Asset_Pumpset();
						asset_pumpset = getPumpsetsFromRs(dataSource, rwsMasterData.rs);
						parameters.add(asset_pumpset);
					}
			}
			if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) && assetCompCode.equals("05") && assetSubCompCode.equals("001")) {
				query = "select OT.OTHER_COMP_CODE,OT.ASSET_CODE,OT.COMP_NAME,OT.COMP_LOCATION,OT.REMARKS,OT.HAB_CODE from "
						+ Tab_Prifix + "OTHERS_PARAM_TBL  OT, RWS_ASSET_MAST_TBL A where OT.ASSET_CODE=A.ASSET_CODE "
						+ " and OT.asset_code=?";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				if (rwsMasterData.rs == null)
					parameters.add(rwsMaster);
				else
					while (rwsMasterData.rs.next()) {
						asset_pumpset = new Asset_Pumpset();
						asset_pumpset.setOtherCompCode(rwsMasterData.rs.getString("OTHER_COMP_CODE"));
						asset_pumpset.setHabCode(rwsMasterData.rs.getString("HAB_CODE"));
						asset_pumpset.setAsssetCode(rwsMasterData.rs.getString("ASSET_CODE"));
						asset_pumpset.setCompName(rwsMasterData.rs.getString("COMP_NAME"));
						asset_pumpset.setCompLocation(rwsMasterData.rs.getString("COMP_LOCATION"));
						asset_pumpset.setRemarks(rwsMasterData.rs.getString("remarks"));
						parameters.add(asset_pumpset);
					}
			}
			if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) && assetCompCode.equals("05") && assetSubCompCode.equals("002")) {
				query = "select OT.*,a.asset_code from " + Tab_Prifix
						+ "CHLORINATION_TBL OT, RWS_ASSET_MAST_TBL A where OT.hab_CODE=A.HAB_CODE"
						+ " and OT.hab_code=? and ot.asset_code=a.asset_code and  ot.asset_code=?";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, habCode);
				rwsMasterData.pstmt.setString(2, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				if (rwsMasterData.rs == null)
					parameters.add(rwsMaster);
				else
					while (rwsMasterData.rs.next()) {
						asset_pumpset = new Asset_Pumpset();
						asset_pumpset.setAsssetCode(rwsMasterData.rs.getString("ASSET_CODE"));
						asset_pumpset.setOtherCompCode(rwsMasterData.rs.getString("CL_CODE"));
						asset_pumpset.setHabCode(rwsMasterData.rs.getString("HAB_CODE"));
						asset_pumpset.setWorkingOrNot(rwsMasterData.rs.getString("WORKING"));
						asset_pumpset.setCompLocation(rwsMasterData.rs.getString("LOCATION"));
						asset_pumpset.setBp(rwsMasterData.rs.getString("BLEACHING_WORKING"));
						asset_pumpset.setLc(rwsMasterData.rs.getString("LIQUID_CHILORINE_WORKING"));
						asset_pumpset.setGc(rwsMasterData.rs.getString("GAS_CHILORINE_WORKING"));
						asset_pumpset.setOd(rwsMasterData.rs.getString("ONLINE_DOSE_WORKING"));
						asset_pumpset.setRemarks(rwsMasterData.rs.getString("REMARKS"));
						parameters.add(asset_pumpset);
					}

			}
			if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) && assetCompCode.equals("05") && assetSubCompCode.equals("003")) {
				query = "select OT.*,a.asset_code from " + Tab_Prifix
						+ "oandm_param_TBL OT, RWS_ASSET_MAST_TBL A where OT.asset_code=A.asset_code"
						+ " and a.hab_code=? and a.asset_code=?";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, habCode);
				rwsMasterData.pstmt.setString(2, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				if (rwsMasterData.rs == null)
					parameters.add(rwsMaster);
				else
					rwsMasterData.stmt1 = rwsMasterData.conn.createStatement();
				while (rwsMasterData.rs.next()) {
					asset_pumpset = new Asset_Pumpset();
					int habCount = 0;
					String q1 = "select count(*) from RWS_OHGLCI_HAB_LINK_TBL where SUBCOMP_CODE =?";
					rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement(q1);
					rwsMasterData.pstmt1.setString(1, rwsMasterData.rs.getString(2));
					rwsMasterData.rs1 = rwsMasterData.pstmt1.executeQuery();
					if (rwsMasterData.rs1.next()) {
						habCount = rwsMasterData.rs1.getInt(1);
					}
					asset_pumpset.setOandmCode(rwsMasterData.rs.getString(2));
					asset_pumpset.setAssetCode(rwsMasterData.rs.getString("ASSET_CODE"));
					asset_pumpset.setAgencyCode(rwsMasterData.rs.getString("Agency_CODE"));
					asset_pumpset.setPowerCost(rwsMasterData.rs.getString("POWER_COST"));
					asset_pumpset.setConsumAnnum(rwsMasterData.rs.getString("CONSUM_ANNUM"));
					asset_pumpset.setWagesAnnum(rwsMasterData.rs.getString("WAGES_ANNUM"));
					asset_pumpset.setTotal3("" + WorksData1.round((rwsMasterData.rs.getDouble("POWER_COST")
							+ rwsMasterData.rs.getDouble("CONSUM_ANNUM") + rwsMasterData.rs.getDouble("WAGES_ANNUM")),
							2));
					asset_pumpset.setSourceFund(rwsMasterData.rs.getString("SOURCES_FUND"));
					asset_pumpset.setTariffMonth(rwsMasterData.rs.getString("TARIFF_MONTH"));
					asset_pumpset.setHouseConn(rwsMasterData.rs.getString("HOUSE_CONN"));
					asset_pumpset.setStandPosts(rwsMasterData.rs.getString("PUBLIC_STAND_POSTS"));
					asset_pumpset.setTotal2("" + WorksData1.round((rwsMasterData.rs.getDouble("TARIFF_MONTH")
							* rwsMasterData.rs.getDouble("HOUSE_CONN") * 12), 2));
					asset_pumpset.setNoOfHabs("" + habCount);
					parameters.add(asset_pumpset);
				}
			}
			else if (assetTypeCode.equals("04") && assetCompCode.equals("01") && assetSubCompCode.equals("001")) {
				query = "select  HP.LOCATION ,HP.PLATFORM_EXISTING,HP.DIAMETER ,HP.CASING ,HP.GEN_CONDITION ,HP.GI_NO ,HP.PAINTED,"
						+ "HP.STATIC_WL  ,HP.SUMMER_WL ,HP.P_COND ,HP.DRY_DURING,HP.SER_NO ,HP.SER_HRS ,HP.REPAIRS ,HP.PLATFORM_CONDITION ,"
						+ "HP.DRAIN ,HP.DRAIN_CONDITION ,HP.DRAIN_SD ,HP.DRAIN_LP ,HP.HYGIENE ,HP.AVG_TIME ,HP.P_YEILD ,HP.PYEILD_LOCAL ,HP.PERIOD ,"
						+ "HP.ASSET_CODE,HP.hp_code,HP.PIPE_LENGTH,HP.depth,HP.QUALITY_AFFECTED, HP.FLOURIDE,HP.BRAKISH ,HP.IRON,HP.cont_others_type,"
						+ "HP.CONT_OTHERS_PER,hp.latitude,hp.longitude,hp.elevation,hp.way_point  from "
						+ "RWS_HP_SUBCOMP_PARAM_TBL HP,RWS_ASSET_MAST_TBL A,RWS_ASSET_SCHEME_TBL S where HP.ASSET_CODE=A.ASSET_CODE "
						+ "AND A.HAB_CODE=? AND SUBSTR(S.SCHEME_CODE,17,3)=? AND A.ASSET_CODE=S.ASSET_CODE AND A.TYPE_OF_ASSET_CODE=? order by hp.hp_code";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, habCode);
				rwsMasterData.pstmt.setString(2, pumpCode);
				rwsMasterData.pstmt.setString(3, assetTypeCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				if (rwsMasterData.rs == null)
					parameters.add(rwsMaster);
				else
					while (rwsMasterData.rs.next()) {
						rwsMaster = new RwsMaster();
						rwsMaster.setLocation(rwsMasterData.rs.getString("LOCATION"));
						rwsMaster.setHabitation(rwsMasterData.getHabName(
								(rwsMasterData.rs.getString("HP_CODE")).substring(0, 16), rwsMasterData.conn));
						rwsMaster.setDiameter(rwsMasterData.rs.getString("DIAMETER"));
						rwsMaster.setCasing(rwsMasterData.rs.getString("CASING"));
						rwsMaster.setGenCondition(rwsMasterData.rs.getString("GEN_CONDITION"));
						rwsMaster.setGino(rwsMasterData.rs.getString("GI_NO"));
						rwsMaster.setPipeLength(rwsMasterData.rs.getString("PIPE_LENGTH"));
						rwsMaster.setPainted(rwsMasterData.rs.getString("PAINTED"));
						rwsMaster.setStaticWaterLevel(rwsMasterData.rs.getString("STATIC_WL"));
						rwsMaster.setSummerWaterLevel(rwsMasterData.rs.getString("SUMMER_WL"));
						rwsMaster.setPcond(rwsMasterData.rs.getString("PLATFORM_EXISTING"));
						rwsMaster.setSerno(rwsMasterData.rs.getString("SER_NO"));
						rwsMaster.setSerhrs(rwsMasterData.rs.getString("SER_HRS"));
						rwsMaster.setRepairs(rwsMasterData.rs.getString("REPAIRS"));
						rwsMaster.setPlatformCondition(rwsMasterData.rs.getString("PLATFORM_CONDITION"));
						rwsMaster.setDrain(rwsMasterData.rs.getString("DRAIN"));
						rwsMaster.setDrainCondition(rwsMasterData.rs.getString("DRAIN_CONDITION"));
						rwsMaster.setDrainsd(rwsMasterData.rs.getString("DRAIN_SD"));
						rwsMaster.setDrainlp(rwsMasterData.rs.getString("DRAIN_LP"));
						rwsMaster.setHygiene(rwsMasterData.rs.getString("HYGIENE"));
						rwsMaster.setAvgtime(rwsMasterData.rs.getString("AVG_TIME"));
						rwsMaster.setPyield(rwsMasterData.rs.getString("P_YEILD"));
						rwsMaster.setPyieldLocal(rwsMasterData.rs.getString("PYEILD_LOCAL"));
						rwsMaster.setPeriod(rwsMasterData.rs.getString("PERIOD"));
						rwsMaster.setAssetCode(rwsMasterData.rs.getString("ASSET_CODE"));
						rwsMaster.setHpCode(rwsMasterData.rs.getString("HP_CODE"));
						rwsMaster.setHabCode(rwsMaster.getHpCode().substring(0, 16));
						rwsMaster.setDepth(rwsMasterData.rs.getInt("DEPTH"));
						rwsMaster.setQualityAffected(rwsMasterData.rs.getString("QUALITY_AFFECTED"));
						rwsMaster.setFlouride(rwsMasterData.rs.getDouble("FLOURIDE"));
						rwsMaster.setBrakish(rwsMasterData.rs.getDouble("BRAKISH"));
						rwsMaster.setIron(rwsMasterData.rs.getDouble("IRON"));
						rwsMaster.setOthersType(format(rwsMasterData.rs.getString("cont_others_type")));
						rwsMaster.setOthers(rwsMasterData.rs.getString("CONT_OTHERS_PER"));
						String query2 = "select COMPO_LAT,COMPO_LON,COMPO_IMAGE from RWS_ASSET_COMPONENT_IMAGE_TBL where "
								+ "ASSET_CODE=? and ASSET_COMPONENT=?";
						rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement(query2);
						rwsMasterData.pstmt1.setString(1,  assetCode);
						rwsMasterData.pstmt1.setString(2,  rwsMasterData.rs.getString("HP_CODE"));
						rwsMasterData.rs2 = rwsMasterData.pstmt1.executeQuery();
						if (rwsMasterData.rs2.next()) {
							java.sql.Blob a = rwsMasterData.rs2.getBlob("COMPO_IMAGE");
							if (a == null) {
								rwsMaster.setImageStatus("No");
							} else {
								rwsMaster.setImageStatus("Yes");
							}
							rwsMaster.setLatitude(rwsMasterData.rs2.getString("COMPO_LAT"));
							rwsMaster.setLongitude(rwsMasterData.rs2.getString("COMPO_LON"));
						}
						rwsMaster.setElevation(rwsMasterData.rs.getString("elevation"));
						rwsMaster.setWaypoint(rwsMasterData.rs.getString("way_point"));
						parameters.add(rwsMaster);
					}
			} else if (assetTypeCode.equals("01") && assetCompCode.equals("01")
					&& (assetSubCompCode.equals("001") || assetSubCompCode.equals("007"))) {
				query = "select  PB.POP_DES as \"Population Description\","
						+ "PB.SOURCE  as \"Source\",PB.SOUR_QLTY  as \"Source Quality\","
						+ "PB.SOUR_YEILD as \"Source Yield\",PB.SOUR_DEPEN as \"Source Dependency\","
						+ "PB.SOUR_DEPTH as \"Source Depth\",PB.SOUR_DIAMETER as \"Source Diameter\","
						+ "PB.SOUR_COND as \"Source Condition\",PB.SOUR_SWL  as \"Source Summer Water Level\" "
						+ ",PB.SOUR_NWL  as \"Source NWL\",PB.PH_SIZE as \"PH Size\",PB.PH_COND as \"PH Condition\","
						+ "PB.PH_TYPE  as \"PH Type\",PB.PUMP_NAME as \"Pump Name\",PB.PUMP_CPTY as \"Pump Capacity\","
						+ "PB.PUMP_TYPE  as \"Pump Type\",PB.YEAR_PUR as \"Pursuing Year \",PB.HR_RUN as \"HR RUN\","
						+ "PB.HR_SIN as \"HR SIN\",PB.HR_MS  as \"HR MS\",PB.STA_EXE as \"STA EXE\","
						+ "PB.PUMP_DUTY_LPM as \"Pump Duty LPM\",PB.PUMP_DUTY_HEAD as \"Pump Duty Head\","
						+ "PB.ASSET_CODE as \"Asset Code\",PB.IF_NSS AS  \"IF NSS\",PB.PUMP_NO AS \"Pump Number \","
						+ "PB.STAND_BY_PUMP_CAPACITY  AS \"Stand By Pump Capacity \", PB.STAND_BY_PUMP_NO as \"Stand By Pump No \","
						+ " PB.PUMP_CODE AS \"Pump Code \" , NUMBERS, TOTAL_HP, STAND_BY_NUMBERS, STAND_BY_TOTAL_HP from "
						+ "RWS_AST_SUBCOMP_PARAM_TBL PB,RWS_ASSET_MAST_TBL A,RWS_ASSET_SCHEME_TBL S"
						+ " where PB.ASSET_CODE=A.ASSET_CODE AND A.HAB_CODE=? AND SUBSTR(S.SCHEME_CODE,17,3)=? "
						+ "AND A.ASSET_CODE=S.ASSET_CODE AND A.TYPE_OF_ASSET_CODE=? ";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, habCode);
				rwsMasterData.pstmt.setString(2, pumpCode);
				rwsMasterData.pstmt.setString(3, assetTypeCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				while (rwsMasterData.rs.next()) {
					rwsMaster = new RwsMaster();
					rwsMaster.setPopDes(rwsMasterData.rs.getString(1));
					rwsMaster.setSource(rwsMasterData.rs.getString(2));
					rwsMaster.setSourceQuality(rwsMasterData.rs.getString(3));
					rwsMaster.setSourceYield(rwsMasterData.rs.getString(4));
					rwsMaster.setSourceDepend(rwsMasterData.rs.getString(5));
					rwsMaster.setSourceDepth(rwsMasterData.rs.getString(6));
					rwsMaster.setSourceDiameter(rwsMasterData.rs.getString(7));
					rwsMaster.setSourceCondition(rwsMasterData.rs.getString(8));
					rwsMaster.setSourceSwl(rwsMasterData.rs.getString(9));
					rwsMaster.setSourceNwl(rwsMasterData.rs.getString(10));
					rwsMaster.setPhSize(rwsMasterData.rs.getString(11));
					rwsMaster.setPhCondition(rwsMasterData.rs.getString(12));
					rwsMaster.setPhType(rwsMasterData.rs.getString(13));
					rwsMaster.setPumpName(rwsMasterData.rs.getString(14));
					rwsMaster.setPumpCapacity(rwsMasterData.rs.getString(15));
					rwsMaster.setPumpType(rwsMasterData.rs.getString(16));
					rwsMaster.setPurYear(rwsMasterData.rs.getString(17));
					rwsMaster.setHrRun(rwsMasterData.rs.getString(18));
					rwsMaster.setHrSin(rwsMasterData.rs.getString(19));
					rwsMaster.setHrMs(rwsMasterData.rs.getString(20));
					rwsMaster.setStaExe(rwsMasterData.rs.getString(21));
					rwsMaster.setPumpDutyLpm(rwsMasterData.rs.getString(22));
					rwsMaster.setPumpDutyHead(rwsMasterData.rs.getString(23));
					rwsMaster.setAssetCode(rwsMasterData.rs.getString(24));
					rwsMaster.setIfNss(rwsMasterData.rs.getString(25));
					rwsMaster.setPumpNo(rwsMasterData.rs.getString(26));
					rwsMaster.setStandByPumpCapacity(rwsMasterData.rs.getString(27));
					rwsMaster.setStandByPumpNo(rwsMasterData.rs.getString(28));
					rwsMaster.setPmpCode(rwsMasterData.rs.getString(29));
					rwsMaster.setNumber(rwsMasterData.rs.getString(30));
					rwsMaster.setTotal_hp(rwsMasterData.rs.getString(31));
					rwsMaster.setStand_by_numbers(rwsMasterData.rs.getString(32));
					rwsMaster.setStandby_hp(rwsMasterData.rs.getString(33));
					parameters.add(rwsMaster);
				}
			}
			else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) && assetCompCode.equals("04") && assetSubCompCode.equals("001")) {
				query = "select OH.OHSR_CODE  as \"OHSR Code\",OH.OHSR_CAP_LTS  as \"OHSR  Capacity In Liters\",OH.OHSR_LOC  "
						+ "as \"OHSR Location \",OH.OHSR_SATGES  as \"OHSR Stages\",OH.OHSR_LWL  as \" OHSR LWL\",OH.OHSR_MWL as \" OHSR MWL \","
						+ "OH.OHSR_FILL_HR  as \"OHSR Fill in Hours\",OH.OHSR_EMPTY_HR  as \"OHSR Empty in Hours\",OH.ASSET_CODE as \"Asset Code\","
						+ "OH.OHSR_NO_OF_FILLING,OH.HAB_CODE,oh.water_qty,oh.latitude,oh.longitude,oh.elevation,oh.way_point from "
						+ Tab_Prifix + "OHSR_SC_PARAM_TBL OH,RWS_ASSET_MAST_TBL A where OH.ASSET_CODE=A.ASSET_CODE "
						+ " and OH.asset_code=?";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				int habCount = 0;
				while (rwsMasterData.rs.next()) {
					String q1 = "select count(*) from RWS_OHGLCI_HAB_LINK_TBL where SUBCOMP_CODE =?";
					rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement(q1);
					rwsMasterData.pstmt1.setString(1,  rwsMasterData.rs.getString(1));
					rwsMasterData.rs1 = rwsMasterData.pstmt1.executeQuery();
					if (rwsMasterData.rs1.next()) {
						habCount = rwsMasterData.rs1.getInt(1);
					}
					asset_reservoir = new Asset_Reservior();
					asset_reservoir.setHabCode(rwsMasterData.rs.getString(11));
					asset_reservoir.setOhsrCode(rwsMasterData.rs.getString(1));
					asset_reservoir.setOhsrCapacityLts(rwsMasterData.rs.getString(2));
					asset_reservoir.setOhsrLocation(rwsMasterData.rs.getString(3));
					asset_reservoir.setOhsrStages(rwsMasterData.rs.getString(4));
					asset_reservoir.setOhsrMwl(rwsMasterData.rs.getString(6));
					asset_reservoir.setOhsrFillHrs(rwsMasterData.rs.getString(7));
					asset_reservoir.setOhsrEmptyHrs(rwsMasterData.rs.getString(8));
					asset_reservoir.setAssetCode(rwsMasterData.rs.getString(9));
					asset_reservoir.setNoOfFillings(rwsMasterData.rs.getString(10));
					asset_reservoir.setOhsrLwl(rwsMasterData.rs.getString("water_qty"));
					String query2 = "select COMPO_LAT,COMPO_LON,COMPO_IMAGE from RWS_ASSET_COMPONENT_IMAGE_TBL where "
							+ "ASSET_CODE=? and ASSET_COMPONENT=?";
					rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement(query2);
					rwsMasterData.pstmt1.setString(1,  assetCode);
					rwsMasterData.pstmt1.setString(2,  rwsMasterData.rs.getString(1));
					rwsMasterData.rs2 = rwsMasterData.pstmt1.executeQuery();
					if (rwsMasterData.rs2.next()) {
						java.sql.Blob a = rwsMasterData.rs2.getBlob("COMPO_IMAGE");
						if (a == null) {
							asset_reservoir.setImageStatus("No");
						} else {
							asset_reservoir.setImageStatus("Yes");
						}
						asset_reservoir.setLatitude(rwsMasterData.rs2.getString("COMPO_LAT"));
						asset_reservoir.setLongitude(rwsMasterData.rs2.getString("COMPO_LON"));
					}
					asset_reservoir.setElevation(rwsMasterData.rs.getString("elevation"));
					asset_reservoir.setWaypoint(rwsMasterData.rs.getString("way_point"));
					asset_reservoir.setNoOfHab("" + habCount);
					parameters.add(asset_reservoir);
				}
			}
			else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) && assetCompCode.equals("04") && assetSubCompCode.equals("002")) {
				query = "select OH.OHBR_CODE   as \"OHBR Code\",OH.OHBR_CAP_LTS  as \"OHBR  Capacity In Liters\",OH.OHBR_LOC   as \"OHBR Location \","
						+ "OH.OHBR_SATGES   as \"OHBR Stages\",OH.OHBR_LWL  as \" OHBR LWL\",OH.OHBR_MWL as \" OHBR MWL \","
						+ "OH.OHBR_FILL_HR  as \"OHBR Fill in Hours\",OH.OHBR_EMPTY_HR   as \"OHBR Empty in Hours\",OH.ASSET_CODE as \"Asset Code\","
						+ "OH.HAB_CODE,oh.latitude,oh.longitude,oh.elevation,oh.way_point from  "
						+ Tab_Prifix + "OHBR_SC_PARAM_TBL OH,RWS_ASSET_MAST_TBL A where OH.ASSET_CODE=A.ASSET_CODE "
						+ " and OH.asset_code=?";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				while (rwsMasterData.rs.next()) {
					asset_reservoir = new Asset_Reservior();
					asset_reservoir.setHabCode(rwsMasterData.rs.getString("HAB_CODE"));
					asset_reservoir.setOhbrCode(rwsMasterData.rs.getString(1));
					asset_reservoir.setOhbrCapacityLts(rwsMasterData.rs.getString(2));
					asset_reservoir.setOhbrLocation(rwsMasterData.rs.getString(3));
					asset_reservoir.setOhbrStages(rwsMasterData.rs.getString(4));
					asset_reservoir.setOhbrLwl(rwsMasterData.rs.getString(5));
					asset_reservoir.setOhbrMwl(rwsMasterData.rs.getString(6));
					asset_reservoir.setOhbrFillHrs(rwsMasterData.rs.getString(7));
					asset_reservoir.setOhbrEmptyHrs(rwsMasterData.rs.getString(8));
					asset_reservoir.setAssetCode(rwsMasterData.rs.getString(9));
					String query2 = "select COMPO_LAT,COMPO_LON,COMPO_IMAGE from RWS_ASSET_COMPONENT_IMAGE_TBL where"
							+ " ASSET_CODE=? and ASSET_COMPONENT=?";
					rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement(query2);
					rwsMasterData.pstmt1.setString(1,  assetCode);
					rwsMasterData.pstmt1.setString(2,  rwsMasterData.rs.getString(1));
					rwsMasterData.rs2 = rwsMasterData.pstmt1.executeQuery();
					if (rwsMasterData.rs2.next()) {
						java.sql.Blob a = rwsMasterData.rs2.getBlob("COMPO_IMAGE");
						if (a == null) {
							asset_reservoir.setImageStatus("No");
						} else {
							asset_reservoir.setImageStatus("Yes");
						}
						asset_reservoir.setLatitude(rwsMasterData.rs2.getString("COMPO_LAT"));
						asset_reservoir.setLongitude(rwsMasterData.rs2.getString("COMPO_LON"));
					}
					asset_reservoir.setElevation(rwsMasterData.rs.getString("elevation"));
					asset_reservoir.setWaypoint(rwsMasterData.rs.getString("way_point"));
					parameters.add(asset_reservoir);
				}

			} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) && assetCompCode.equals("04") && assetSubCompCode.equals("003")) {
				query = "select GL.GLSR_CODE ,GL.GLSR_CAP_LTS," + "GL.GLSR_LOC,GL.GLSR_SATGES,GL.GLSR_LWL,"
						+ "GL.GLSR_MWL,GL.GLSR_FILL_HR,GL.GLSR_EMPTY_HR,"
						+ "GL.ASSET_CODE,GL.GLSR_NO_OF_FILLING,GL.HAB_CODE,water_qty,gl.latitude,gl.longitude,gl.elevation,gl.way_point "
						+ "   from  " + Tab_Prifix + "GLSR_SC_PARAM_TBL GL,RWS_ASSET_MAST_TBL A"
						+ " where GL.ASSET_CODE=A.ASSET_CODE "
						+ " and GL.asset_code=?";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				while (rwsMasterData.rs.next()) {
					String q1 = "select count(*) from RWS_OHGLCI_HAB_LINK_TBL where SUBCOMP_CODE =?";
					rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement(q1);
					rwsMasterData.pstmt1.setString(1,  rwsMasterData.rs.getString(1));
					rwsMasterData.rs1 = rwsMasterData.pstmt1.executeQuery();
					int habCount = 0;
					if (rwsMasterData.rs1.next()) {
						habCount = rwsMasterData.rs1.getInt(1);
					}
					asset_reservoir = new Asset_Reservior();
					asset_reservoir.setHabCode(rwsMasterData.rs.getString("HAB_CODE"));
					asset_reservoir.setGlsrCode(rwsMasterData.rs.getString("GLSR_CODE"));
					asset_reservoir.setGlsrCapacityInLts(rwsMasterData.rs.getString("GLSR_CAP_LTS"));
					asset_reservoir.setGlsrLocation(rwsMasterData.rs.getString("GLSR_LOC"));
					asset_reservoir.setGlsrStages(rwsMasterData.rs.getString("GLSR_SATGES"));
					asset_reservoir.setGlsrLwl(rwsMasterData.rs.getString("GLSR_LWL"));
					asset_reservoir.setGlsrMwl(rwsMasterData.rs.getString("GLSR_MWL"));
					asset_reservoir.setGlsrFillHrs(rwsMasterData.rs.getString("GLSR_FILL_HR"));
					asset_reservoir.setGlsrEmptyHrs(rwsMasterData.rs.getString("GLSR_EMPTY_HR"));
					asset_reservoir.setAssetCode(rwsMasterData.rs.getString("ASSET_CODE"));
					asset_reservoir.setGlsrNoOfFillings(rwsMasterData.rs.getString("GLSR_NO_OF_FILLING"));
					asset_reservoir.setGlsrLwl(rwsMasterData.rs.getString("water_qty"));
					asset_reservoir.setNoOfHab("" + habCount);
					String query2 = "select COMPO_LAT,COMPO_LON,COMPO_IMAGE from RWS_ASSET_COMPONENT_IMAGE_TBL where"
							+ " ASSET_CODE=? and ASSET_COMPONENT=?";
					rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement(query2);
					rwsMasterData.pstmt1.setString(1,  assetCode);
					rwsMasterData.pstmt1.setString(2,  rwsMasterData.rs.getString(1));
					rwsMasterData.rs2 = rwsMasterData.pstmt1.executeQuery();
					if (rwsMasterData.rs2.next()) {
						java.sql.Blob a = rwsMasterData.rs2.getBlob("COMPO_IMAGE");
						if (a == null) {
							asset_reservoir.setImageStatus("No");
						} else {
							asset_reservoir.setImageStatus("Yes");
						}
						asset_reservoir.setLatitude(rwsMasterData.rs2.getString("COMPO_LAT"));
						asset_reservoir.setLongitude(rwsMasterData.rs2.getString("COMPO_LON"));
					}
					asset_reservoir.setElevation(rwsMasterData.rs.getString("elevation"));
					asset_reservoir.setWaypoint(rwsMasterData.rs.getString("way_point"));
					parameters.add(asset_reservoir);
				}
			} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) && assetCompCode.equals("04") && assetSubCompCode.equals("004")) {
				query = "select GL.GLBR_CODE   ,GL.GLBR_CAP_LTS  ,GL.GLBR_LOC   ,GL.GLBR_LWL  ,GL.GLBR_MWL  ,GL.GLBR_FILL_HR  ,GL.GLBR_EMPTY_HR  ,GL.ASSET_CODE,GL.HAB_CODE,gl.latitude,gl.longitude,gl.elevation,gl.way_point  from  "
						+ Tab_Prifix + "GLBR_SC_PARAM_TBL GL,RWS_ASSET_MAST_TBL A where GL.ASSET_CODE=A.ASSET_CODE "
						+ " and GL.asset_code=?";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				while (rwsMasterData.rs.next()) {
					asset_reservoir = new Asset_Reservior();
					asset_reservoir.setHabCode(rwsMasterData.rs.getString("HAB_CODE"));
					asset_reservoir.setGlbrCode(rwsMasterData.rs.getString(1));
					asset_reservoir.setGlbrCapacityInLts(rwsMasterData.rs.getString(2));
					asset_reservoir.setGlbrLocation(rwsMasterData.rs.getString(3));
					asset_reservoir.setGlbrLwl(rwsMasterData.rs.getString(4));
					asset_reservoir.setGlbrMwl(rwsMasterData.rs.getString(5));
					asset_reservoir.setGlbrFillHrs(rwsMasterData.rs.getString(6));
					asset_reservoir.setGlbrEmptyHrs(rwsMasterData.rs.getString(7));
					asset_reservoir.setAssetCode(rwsMasterData.rs.getString(8));
					String query2 = "select COMPO_LAT,COMPO_LON,COMPO_IMAGE from RWS_ASSET_COMPONENT_IMAGE_TBL where"
							+ " ASSET_CODE=? and ASSET_COMPONENT=?";
					rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement(query2);
					rwsMasterData.pstmt1.setString(1,  assetCode);
					rwsMasterData.pstmt1.setString(2,  rwsMasterData.rs.getString(1));
					rwsMasterData.rs2 = rwsMasterData.pstmt1.executeQuery();
					if (rwsMasterData.rs2.next()) {
						java.sql.Blob a = rwsMasterData.rs2.getBlob("COMPO_IMAGE");
						if (a == null) {
							asset_reservoir.setImageStatus("No");
						} else {
							asset_reservoir.setImageStatus("Yes");
						}
						asset_reservoir.setLatitude(rwsMasterData.rs2.getString("COMPO_LAT"));
						asset_reservoir.setLongitude(rwsMasterData.rs2.getString("COMPO_LON"));
					}
					asset_reservoir.setElevation(rwsMasterData.rs.getString("elevation"));
					asset_reservoir.setWaypoint(rwsMasterData.rs.getString("way_point"));
					parameters.add(asset_reservoir);
				}
			} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) && assetCompCode.equals("04") && assetSubCompCode.equals("005")) {
				query = "select * from  " + Tab_Prifix
						+ "BPT_PARAM_TBL bpt,RWS_ASSET_MAST_TBL A where bpt.ASSET_CODE=A.ASSET_CODE "
						+ " and bpt.asset_code=?";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				while (rwsMasterData.rs.next()) {
					asset_reservoir = new Asset_Reservior();
					asset_reservoir.setHabCode(rwsMasterData.rs.getString("HAB_CODE"));
					asset_reservoir.setBptCode(rwsMasterData.rs.getString("BPT_CODE"));
					asset_reservoir.setBptCapacity(rwsMasterData.rs.getString("CAPACITY"));
					asset_reservoir.setBptStaging(rwsMasterData.rs.getString("STAGING"));
					asset_reservoir.setBptMaxwl(rwsMasterData.rs.getString("BPT_MWL"));
					asset_reservoir.setBptMinwl(rwsMasterData.rs.getString("BPT_LWL"));
					asset_reservoir.setBptLocation(rwsMasterData.rs.getString("LOCATION"));
					asset_reservoir.setAssetCode(rwsMasterData.rs.getString("ASSET_CODE"));
					parameters.add(asset_reservoir);
				}
			} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) && assetCompCode.equals("04") && assetSubCompCode.equals("006")) {
				query = "select cis.ASSET_CODE ,CIS_NO,CIS_LOC,CIS_CAP_LTS ,CIS_COND,CIS_FILL,CIS_MOD_FILL ,CIS_USE,CIS_PF,CIS_PF_CON ,CIS_DRAIN,CIS_TAP,CIS_TAP_COND,CIS_HR,CIS_HR_ONE,CIS_HR_ALL,CISSC_CODE,cis.HAB_CODE,WATER_QTY ,cis.LATITUDE ,cis.LONGITUDE,cis.ELEVATION ,cis.WAY_POINT from  "
						+ Tab_Prifix + "CIS_SC_PARAM_TBL CIS,RWS_ASSET_MAST_TBL A where CIS.ASSET_CODE=A.ASSET_CODE "
						+ " and CIS.asset_code=?";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				while (rwsMasterData.rs.next()) {
					String q1 = "select count(*) from RWS_OHGLCI_HAB_LINK_TBL where SUBCOMP_CODE =?";
					rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement(q1);
					rwsMasterData.pstmt1.setString(1,  rwsMasterData.rs.getString("CISSC_CODE"));
					rwsMasterData.rs1 = rwsMasterData.pstmt1.executeQuery();
					int habCount = 0;
					if (rwsMasterData.rs1.next()) {
						habCount = rwsMasterData.rs1.getInt(1);
					}
					asset_reservoir = new Asset_Reservior();
					asset_reservoir.setHabCode(rwsMasterData.rs.getString("HAB_CODE"));
					asset_reservoir.setAssetCode(rwsMasterData.rs.getString("ASSET_CODE"));
					asset_reservoir.setCisCode(rwsMasterData.rs.getString("CISSC_CODE"));
					asset_reservoir.setCisLocation(rwsMasterData.rs.getString("CIS_LOC"));
					asset_reservoir.setCisCapLts(rwsMasterData.rs.getString("CIS_CAP_LTS"));
					asset_reservoir.setCisCond(rwsMasterData.rs.getString("CIS_COND"));
					asset_reservoir.setCisPf(rwsMasterData.rs.getString("CIS_PF"));
					asset_reservoir.setCisPfCond(rwsMasterData.rs.getString("CIS_PF_CON"));
					asset_reservoir.setCisDrain(rwsMasterData.rs.getString("CIS_DRAIN"));
					asset_reservoir.setCisTap(rwsMasterData.rs.getString("CIS_TAP"));
					asset_reservoir.setCisTapCond(rwsMasterData.rs.getString("CIS_TAP_COND"));
					asset_reservoir.setCisHr(rwsMasterData.rs.getString("CIS_HR"));
					asset_reservoir.setCisNoOfTaps(rwsMasterData.rs.getString("WATER_QTY"));
					asset_reservoir.setLatitude(rwsMasterData.rs.getString("latitude"));
					asset_reservoir.setLongitude(rwsMasterData.rs.getString("longitude"));
					asset_reservoir.setElevation(rwsMasterData.rs.getString("elevation"));
					asset_reservoir.setWaypoint(rwsMasterData.rs.getString("way_point"));
					asset_reservoir.setNoOfHab("" + habCount);
					parameters.add(asset_reservoir);
				}
			} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) && assetCompCode.equals("04") && assetSubCompCode.equals("007")) {
				query = "select SP.ASSET_CODE,SP.STANDPOST_CODE,SP.NAME,SP.LOCATION,SP.REMARKS,SP.UPDATE_DATE from  "
						+ Tab_Prifix + "STANDPOST_TBL SP,RWS_ASSET_MAST_TBL A where SP.ASSET_CODE=A.ASSET_CODE "
						+ " and SP.asset_code=?";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				while (rwsMasterData.rs.next()) {
					String q1 = "select count(*) from RWS_OHGLCI_HAB_LINK_TBL where SUBCOMP_CODE =?";
					rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement(q1);
					rwsMasterData.pstmt1.setString(1,  rwsMasterData.rs.getString("STANDPOST_CODE"));
					rwsMasterData.rs1 = rwsMasterData.pstmt1.executeQuery();
					int habCount = 0;
					if (rwsMasterData.rs1.next()) {
						habCount = rwsMasterData.rs1.getInt(1);
					}
					asset_reservoir = new Asset_Reservior();
					asset_reservoir.setHabCode(rwsMasterData.rs.getString("STANDPOST_CODE").substring(0, 16));
					asset_reservoir.setStandPostName(rwsMasterData.rs.getString("NAME"));
					asset_reservoir.setAssetCode(rwsMasterData.rs.getString("ASSET_CODE"));
					asset_reservoir.setStandPostCode(rwsMasterData.rs.getString("STANDPOST_CODE"));
					asset_reservoir.setSpLocation(rwsMasterData.rs.getString("LOCATION"));
					asset_reservoir.setAssetCode(rwsMasterData.rs.getString("ASSET_CODE"));
					asset_reservoir.setSpRemarks(rwsMasterData.rs.getString("REMARKS"));
					String query2 = "select COMPO_LAT,COMPO_LON,COMPO_IMAGE from RWS_ASSET_COMPONENT_IMAGE_TBL where"
							+ " ASSET_CODE=? and ASSET_COMPONENT=?";
					rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement(query2);
					rwsMasterData.pstmt1.setString(1,  assetCode);
					rwsMasterData.pstmt1.setString(2,  rwsMasterData.rs.getString(1));
					rwsMasterData.rs2 = rwsMasterData.pstmt1.executeQuery();
					if (rwsMasterData.rs2.next()) {
						java.sql.Blob a = rwsMasterData.rs2.getBlob("COMPO_IMAGE");
						if (a == null) {
							asset_reservoir.setImageStatus("No");
						} else {
							asset_reservoir.setImageStatus("Yes");
						}
						asset_reservoir.setLatitude(rwsMasterData.rs2.getString("COMPO_LAT"));
						asset_reservoir.setLongitude(rwsMasterData.rs2.getString("COMPO_LON"));
					}
					parameters.add(asset_reservoir);
				}
			} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) && assetCompCode.equals("02") && assetSubCompCode.equals("001")) {
				query = "select * from " + Tab_Prifix
						+ "RW_COLLWELL_PARAM_TBL RW,RWS_ASSET_MAST_TBL A where RW.ASSET_CODE=A.ASSET_CODE "
						+ " and RW.asset_code=?";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				rwsMaster = new RwsMaster();
				while (rwsMasterData.rs.next()) {
					rwsMaster = new RwsMaster();
					rwsMaster.setCollectionWellCode(rwsMasterData.rs.getString("RW_COLLWELL_CODE"));
					rwsMaster.setHabCode(rwsMasterData.rs.getString("HAB_CODE"));
					rwsMaster.setRwDiameter(rwsMasterData.rs.getString("DIAMETER"));
					rwsMaster.setRwDepth(rwsMasterData.rs.getString("DEPTH"));
					rwsMaster.setRwTypeOfFlooring(rwsMasterData.rs.getString("TYPE_OF_FLOORING"));
					rwsMaster.setAssetCode(rwsMasterData.rs.getString("ASSET_CODE"));
					rwsMaster.setRwCapacity(rwsMasterData.rs.getString("CAPACITY"));
					rwsMaster.setRwLocation(rwsMasterData.rs.getString("LOCATION"));
					parameters.add(rwsMaster);
				}
			} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) && assetCompCode.equals("02") && (assetSubCompCode.equals("002"))) {
				query = "select ss.ASSET_CODE,SSSC_CODE  ,SS_SIZE,CAPACITY_DAYS,CAPACITY_MCUM,TANK_ADEQACY,ss.LOCATION,POWER_CON,POWER_HRS,DEPTH,OTHERS,ss.HAB_CODE,ss.LATITUDE,ss.LONGITUDE,ss.ELEVATION,ss.WAY_POINT from "
						+ Tab_Prifix + "SS_SC_PARAM_TBL SS,RWS_ASSET_MAST_TBL A where SS.ASSET_CODE=A.ASSET_CODE "
						+ " and SS.asset_code=?";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				while (rwsMasterData.rs.next()) {
					rwsMaster = new RwsMaster();
					rwsMaster.setAssetCode(rwsMasterData.rs.getString("ASSET_CODE"));
					rwsMaster.setSsTankCode(rwsMasterData.rs.getString("SSSC_CODE"));
					rwsMaster.setHabCode(rwsMasterData.rs.getString("HAB_CODE"));
					rwsMaster.setSsSize(rwsMasterData.rs.getString("SS_SIZE"));
					rwsMaster.setSsCapacityDays(rwsMasterData.rs.getString("CAPACITY_DAYS"));
					rwsMaster.setSsCapacityMcum(rwsMasterData.rs.getString("CAPACITY_MCUM"));
					rwsMaster.setSsTankAdeq(rwsMasterData.rs.getString("TANK_ADEQACY"));
					rwsMaster.setSsTankLocation(rwsMasterData.rs.getString("LOCATION"));
					rwsMaster.setSsDepth(rwsMasterData.rs.getFloat("DEPTH"));
					// rwsMaster.setSsTankYield(rwsMasterData.rs.getString("YIELD_CUM"));
					/*
					 * if (rwsMasterData.rs.getString("YIELD_TEST_DT") != null)
					 * rwsMaster.setSsTankYieldDate(df.format(rwsMasterData.rs.getString(
					 * "YIELD_TEST_DT")));
					 */
					// rwsMaster.setSsTankYieldDate(rwsMasterData.rs.getString("YIELD_TEST_DT"));
					rwsMaster.setPowerConn(rwsMasterData.rs.getString("POWER_CON"));
					rwsMaster.setPowerConnOthers(rwsMasterData.rs.getString("OTHERS"));
					rwsMaster.setPowerHours(rwsMasterData.rs.getString("POWER_HRS"));
					rwsMaster.setLatitude(rwsMasterData.rs.getString("latitude"));
					rwsMaster.setLongitude(rwsMasterData.rs.getString("longitude"));
					rwsMaster.setElevation(rwsMasterData.rs.getString("elevation"));
					rwsMaster.setWaypoint(rwsMasterData.rs.getString("way_point"));
					parameters.add(rwsMaster);
				}
			} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) && assetCompCode.equals("02") && assetSubCompCode.equals("003")) {
				query = "select  SS.ASSET_CODE,WTPSC_CODE ,WTP_TYPW ,WTP_MLD,UNITS_NO,"
						+ "WTP_SIZE,UNITS_STANDBY,FREQ_SAND_SCRAP,PERFORMANCE, "
						+ "USE_CAPACITYMLD,EXTENTION_SCOPE,SS.LOCATION ,CHK_FILTER,"
						+ "nvl(RATE_OF_FILTRATION,0)RATE_OF_FILTRATION,SS.HAB_CODE,ss.latitude,ss.longitude,ss.elevation,ss.way_point   "
						+ " from " + Tab_Prifix
						+ "WTP_SC_PARAM_TBL SS,RWS_ASSET_MAST_TBL A where SS.ASSET_CODE=A.ASSET_CODE "
						+ " and SS.asset_code=? and SS.WTP_TYPW='SSF'";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				while (rwsMasterData.rs.next()) {
					rwsMaster = new RwsMaster();
					rwsMaster.setAssetCode(rwsMasterData.rs.getString("ASSET_CODE"));
					rwsMaster.setWtpCode(rwsMasterData.rs.getString("WTPSC_CODE"));
					rwsMaster.setHabCode(rwsMasterData.rs.getString("HAB_CODE"));
					rwsMaster.setWtpType(rwsMasterData.rs.getString("WTP_TYPW"));
					rwsMaster.setWtpMld(rwsMasterData.rs.getString("WTP_MLD"));
					rwsMaster.setWtpUnits(rwsMasterData.rs.getString("UNITS_NO"));
					rwsMaster.setWtpRateOfFiltration(rwsMasterData.rs.getDouble("RATE_OF_FILTRATION"));
					rwsMaster.setWtpSize(rwsMasterData.rs.getString("WTP_SIZE"));
					rwsMaster.setWtpUnitsStandby(rwsMasterData.rs.getString("UNITS_STANDBY"));
					rwsMaster.setWtpPerformance(rwsMasterData.rs.getString("PERFORMANCE"));
					try {
						rwsMaster.setWtpNoOfHoursOfUsage(
								Float.parseFloat(rwsMasterData.rs.getString("USE_CAPACITYMLD")));
					} catch (Exception e) {
						rwsMaster.setWtpNoOfHoursOfUsage(0);
					}
					rwsMaster.setWtpExtentionScope(rwsMasterData.rs.getString("EXTENTION_SCOPE"));
					rwsMaster.setWtpLocation(rwsMasterData.rs.getString("LOCATION"));
					rwsMaster.setWtpFreqSandScrap(rwsMasterData.rs.getInt("FREQ_SAND_SCRAP"));
					String chkFilter = rwsMasterData.rs.getString("CHK_FILTER");
					rwsMaster.setLatitude(rwsMasterData.rs.getString("latitude"));
					rwsMaster.setLongitude(rwsMasterData.rs.getString("longitude"));
					rwsMaster.setElevation(rwsMasterData.rs.getString("elevation"));
					rwsMaster.setWaypoint(rwsMasterData.rs.getString("way_point"));
					if (chkFilter.substring(0, 2).equals("01")) {
						rwsMaster.setWtpSedimentationTank(true);
						rwsMaster.setWtpHorizontalRoughingFilterValue("01");
					}
					if (chkFilter.substring(2, 4).equals("02")) {
						rwsMaster.setWtpHorizontalRoughingFilter(true);
						rwsMaster.setWtpHorizontalRoughingFilterValue("02");
					}
					if (chkFilter.substring(4, 6).equals("03")) {
						rwsMaster.setWtpVerticalRoughingFilterValue("03");
						rwsMaster.setWtpVerticalRoughingFilter(true);
					}
					parameters.add(rwsMaster);
				}
			}

			else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) && assetCompCode.equals("02") && assetSubCompCode.equals("004")) {
				query = "select * from " + Tab_Prifix
						+ "WTP_SC_PARAM_TBL SS,RWS_ASSET_MAST_TBL A where SS.ASSET_CODE=A.ASSET_CODE "
						+ " and SS.asset_code=? and SS.WTP_TYPW='RSF'";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				while (rwsMasterData.rs.next()) {
					rwsMaster = new RwsMaster();
					rwsMaster.setAssetCode(rwsMasterData.rs.getString("ASSET_CODE"));
					rwsMaster.setWtpCode(rwsMasterData.rs.getString("WTPSC_CODE"));
					rwsMaster.setHabCode(rwsMasterData.rs.getString("HAB_CODE"));
					rwsMaster.setWtpType(rwsMasterData.rs.getString("WTP_TYPW"));
					rwsMaster.setWtpMld(rwsMasterData.rs.getString("WTP_MLD"));
					rwsMaster.setWtpUnits(rwsMasterData.rs.getString("UNITS_NO"));
					rwsMaster.setWtpRateOfFiltration(rwsMasterData.rs.getDouble("RATE_OF_FILTRATION"));
					rwsMaster.setWtpSize(rwsMasterData.rs.getString("WTP_SIZE"));
					rwsMaster.setWtpUnitsStandby(rwsMasterData.rs.getString("UNITS_STANDBY"));
					rwsMaster.setWtpBackwashFreq(rwsMasterData.rs.getString("BACKWASH_FEQ"));
					rwsMaster.setWtpPerformance(rwsMasterData.rs.getString("PERFORMANCE"));
					rwsMaster.setLatitude(rwsMasterData.rs.getString("latitude"));
					rwsMaster.setLongitude(rwsMasterData.rs.getString("longitude"));
					rwsMaster.setElevation(rwsMasterData.rs.getString("elevation"));
					rwsMaster.setWaypoint(rwsMasterData.rs.getString("way_point"));
					try {
						rwsMaster.setWtpNoOfHoursOfUsage(
								Float.parseFloat(rwsMasterData.rs.getString("USE_CAPACITYMLD")));
					} catch (Exception e) {
						Debug.println("Exception is parsing to Float " + e);
						rwsMaster.setWtpNoOfHoursOfUsage(0);
					}
					rwsMaster.setWtpExtentionScope(rwsMasterData.rs.getString("EXTENTION_SCOPE"));
					rwsMaster.setWtpLocation(rwsMasterData.rs.getString("LOCATION"));
					String chkFilter = rwsMasterData.rs.getString("CHK_FILTER");
					if (chkFilter.substring(0, 2).equals("01")) {
						rwsMaster.setWtpClarifloculatorValue("01");
						rwsMaster.setWtpClarifloculator(true);
					}
					parameters.add(rwsMaster);
				}
			} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) && assetCompCode.equals("02") && assetSubCompCode.equals("005")) {
				query = "select * from " + Tab_Prifix
						+ "SUMP_M_SC_PARAM_TBL SP,RWS_ASSET_MAST_TBL A where SP.ASSET_CODE=A.ASSET_CODE "
						+ " and SP.asset_code=?";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				while (rwsMasterData.rs.next()) {
					rwsMaster = new RwsMaster();
					rwsMaster.setAssetCode(rwsMasterData.rs.getString("ASSET_CODE"));
					rwsMaster.setSumpCode(rwsMasterData.rs.getString("SUMPCODE"));
					rwsMaster.setHabCode(rwsMasterData.rs.getString("HAB_CODE"));
					rwsMaster.setSumpType(rwsMasterData.rs.getString("SUMP_TYPE"));
					rwsMaster.setSumpCapacity(rwsMasterData.rs.getString("SUMP_CAPACITY"));
					rwsMaster.setSumpFillHr(rwsMasterData.rs.getString("FILLING_HR"));
					rwsMaster.setSumpEmptyHr(rwsMasterData.rs.getString("EMPTY_TIME_HR"));
					rwsMaster.setSumpCondition(rwsMasterData.rs.getString("SUMP_CONDITION"));
					rwsMaster.setSumpLocation(rwsMasterData.rs.getString("LOCATION"));
					rwsMaster.setSumpMadeOf(rwsMasterData.rs.getString("SUMP_MADE_OF"));
					rwsMaster.setSumpDiameter(rwsMasterData.rs.getFloat("SUMP_DIAMETER"));
					rwsMaster.setSumpDepth(rwsMasterData.rs.getFloat("SUMP_DEPTH"));
					parameters.add(rwsMaster);
				}
			} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) && assetCompCode.equals("02") && assetSubCompCode.equals("006")) {
				query = "select * from " + Tab_Prifix
						+ "FP_BRIDGE_PARAM_TBL FP,RWS_ASSET_MAST_TBL A where FP.ASSET_CODE=A.ASSET_CODE "
						+ " and FP.asset_code=?";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				while (rwsMasterData.rs.next()) {
					rwsMaster = new RwsMaster();
					rwsMaster.setBridgeCode(rwsMasterData.rs.getString("BRIDGE_CODE"));
					rwsMaster.setHabCode(rwsMasterData.rs.getString("HAB_CODE"));
					rwsMaster.setBridgeLength(rwsMasterData.rs.getString("BRIDGE_LENGTH"));
					rwsMaster.setBridgeWidth(rwsMasterData.rs.getString("BRIDGE_WIDTH"));
					rwsMaster.setBridgeLocation(rwsMasterData.rs.getString("LOCATION"));
					rwsMaster.setAssetCode(rwsMasterData.rs.getString("ASSET_CODE"));
					parameters.add(rwsMaster);
				}
			} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) && assetCompCode.equals("02") && assetSubCompCode.equals("007")) {
				query = "select * from " + Tab_Prifix
						+ "PUMPHOUSE_PARAM_TBL  PH,RWS_ASSET_MAST_TBL A where PH.ASSET_CODE=A.ASSET_CODE "
						+ " and PH.asset_code=?";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				while (rwsMasterData.rs.next()) {
					rwsMaster = new RwsMaster();
					rwsMaster.setHabCode(rwsMasterData.rs.getString("HAB_CODE"));
					rwsMaster.setPumpHouseType(rwsMasterData.rs.getString("TYPE"));
					rwsMaster.setPumpHouseArea(rwsMasterData.rs.getString("AREA"));
					rwsMaster.setPumpHouseHeight(rwsMasterData.rs.getString("HEIGHT"));
					rwsMaster.setAssetCode(rwsMasterData.rs.getString("ASSET_CODE"));
					rwsMaster.setPumpHouseCode(rwsMasterData.rs.getString("PUMPHOUSE_CODE"));
					rwsMaster.setPumpHouseLocation(rwsMasterData.rs.getString("LOCATION"));
					parameters.add(rwsMaster);
				}
			} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) && assetCompCode.equals("02") && assetSubCompCode.equals("008")) {
				query = "select * from " + Tab_Prifix
						+ "WATCHMAN_PARAM_TBL WQ,RWS_ASSET_MAST_TBL A where WQ.ASSET_CODE=A.ASSET_CODE "
						+ " and WQ.asset_code=?";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				while (rwsMasterData.rs.next()) {
					rwsMaster = new RwsMaster();
					rwsMaster.setHabCode(rwsMasterData.rs.getString("HAB_CODE"));
					rwsMaster.setWatchManLocation(format(rwsMasterData.rs.getString("LOCATION")));
					rwsMaster.setWatchManType(rwsMasterData.rs.getString("TYPE"));
					rwsMaster.setWatchManArea(rwsMasterData.rs.getString("AREA"));
					rwsMaster.setWatchManNoOfQuarters(rwsMasterData.rs.getString("NO_OF_QTRS"));
					rwsMaster.setAssetCode(rwsMasterData.rs.getString("ASSET_CODE"));
					rwsMaster.setWatchManCode(rwsMasterData.rs.getString("WATCHMAN_CODE"));
					parameters.add(rwsMaster);
				}
			} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) && assetCompCode.equals("02") && assetSubCompCode.equals("009")) {
				query = "select * from " + Tab_Prifix
						+ "CW_COLLWELL_PARAM_TBL CW,RWS_ASSET_MAST_TBL A where CW.ASSET_CODE=A.ASSET_CODE "
						+ " and CW.asset_code=?";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				while (rwsMasterData.rs.next()) {
					rwsMaster = new RwsMaster();
					rwsMaster.setCollectionWellCode(rwsMasterData.rs.getString("CW_COLLWELL_CODE"));
					rwsMaster.setHabCode(rwsMasterData.rs.getString("HAB_CODE"));
					rwsMaster.setRwLocation(rwsMasterData.rs.getString("LOCATION"));
					rwsMaster.setRwCapacity(rwsMasterData.rs.getString("CAPACITY"));
					rwsMaster.setRwDiameter(rwsMasterData.rs.getString("DIAMETER"));
					rwsMaster.setRwDepth(rwsMasterData.rs.getString("DEPTH"));
					rwsMaster.setRwTypeOfFlooring(rwsMasterData.rs.getString("TYPE_OF_FLOORING"));
					rwsMaster.setAssetCode(rwsMasterData.rs.getString("ASSET_CODE"));
					parameters.add(rwsMaster);
				}
			} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) && assetCompCode.equals("02") && assetSubCompCode.equals("010")) {
				query = "select  SS.ASSET_CODE,WTPSC_CODE ,WTP_TYPW ,WTP_MLD,UNITS_NO,"
						+ "WTP_SIZE,UNITS_STANDBY,FREQ_SAND_SCRAP,PERFORMANCE, "
						+ "USE_CAPACITYMLD,EXTENTION_SCOPE,SS.LOCATION ,CHK_FILTER,"
						+ "nvl(RATE_OF_FILTRATION,0)RATE_OF_FILTRATION,SS.HAB_CODE,ss.latitude,ss.longitude,ss.elevation,ss.way_point "
						+ " from " + Tab_Prifix
						+ "WTP_SC_PARAM_TBL SS,RWS_ASSET_MAST_TBL A where SS.ASSET_CODE=A.ASSET_CODE "
						+ " and SS.asset_code=? and SS.WTP_TYPW='MSF'";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				while (rwsMasterData.rs.next()) {
					rwsMaster = new RwsMaster();
					rwsMaster.setAssetCode(rwsMasterData.rs.getString("ASSET_CODE"));
					rwsMaster.setWtpCode(rwsMasterData.rs.getString("WTPSC_CODE"));
					rwsMaster.setHabCode(rwsMasterData.rs.getString("HAB_CODE"));
					rwsMaster.setWtpType(rwsMasterData.rs.getString("WTP_TYPW"));
					rwsMaster.setWtpMld(rwsMasterData.rs.getString("WTP_MLD"));
					rwsMaster.setWtpUnits(rwsMasterData.rs.getString("UNITS_NO"));
					rwsMaster.setWtpRateOfFiltration(rwsMasterData.rs.getDouble("RATE_OF_FILTRATION"));
					rwsMaster.setWtpSize(rwsMasterData.rs.getString("WTP_SIZE"));
					rwsMaster.setWtpUnitsStandby(rwsMasterData.rs.getString("UNITS_STANDBY"));
					// rwsMaster.setWtpBackwashFreq(rwsMasterData.rs.getString("BACKWASH_FEQ"));
					rwsMaster.setWtpPerformance(rwsMasterData.rs.getString("PERFORMANCE"));
					// rwsMaster.setWtpCapacityUse(rwsMasterData.rs.getString("USE_CAPACITYMLD"));
					try {
						rwsMaster.setWtpNoOfHoursOfUsage(
								Float.parseFloat(rwsMasterData.rs.getString("USE_CAPACITYMLD")));
					} catch (Exception e) {
						Debug.println("Exception is parsing to float " + e);
						rwsMaster.setWtpNoOfHoursOfUsage(0);
					}
					rwsMaster.setWtpExtentionScope(rwsMasterData.rs.getString("EXTENTION_SCOPE"));
					rwsMaster.setWtpLocation(rwsMasterData.rs.getString("LOCATION"));
					rwsMaster.setWtpFreqSandScrap(rwsMasterData.rs.getInt("FREQ_SAND_SCRAP"));
					String chkFilter = rwsMasterData.rs.getString("CHK_FILTER");

					if (chkFilter.substring(0, 2).equals("01")) {
						rwsMaster.setWtpSedimentationTank(true);
						rwsMaster.setWtpHorizontalRoughingFilterValue("01");
					}
					if (chkFilter.substring(2, 4).equals("02")) {
						rwsMaster.setWtpHorizontalRoughingFilter(true);
						rwsMaster.setWtpHorizontalRoughingFilterValue("02");
					}
					if (chkFilter.substring(4, 6).equals("03")) {
						rwsMaster.setWtpVerticalRoughingFilterValue("03");
						rwsMaster.setWtpVerticalRoughingFilter(true);
					}
					rwsMaster.setLatitude(rwsMasterData.rs.getString("latitude"));
					rwsMaster.setLongitude(rwsMasterData.rs.getString("longitude"));
					rwsMaster.setElevation(rwsMasterData.rs.getString("elevation"));
					rwsMaster.setWaypoint(rwsMasterData.rs.getString("way_point"));
					parameters.add(rwsMaster);
				}
			} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) && assetCompCode.equals("02") && assetSubCompCode.equals("011")) {
				query = "select  SS.ASSET_CODE,WTPSC_CODE ,WTP_TYPW ,WTP_MLD,UNITS_NO,"
						+ "WTP_SIZE,UNITS_STANDBY,FREQ_SAND_SCRAP,PERFORMANCE, "
						+ "USE_CAPACITYMLD,EXTENTION_SCOPE,SS.LOCATION ,CHK_FILTER,"
						+ "nvl(RATE_OF_FILTRATION,0)RATE_OF_FILTRATION,SS.HAB_CODE,ss.SHELTER_EXISTING,ss.RWS_TANK_EXISTING,ss.PWS_TANK_EXISTING,ss.latitude,ss.longitude,ss.elevation,ss.way_point"
						+ " from " + Tab_Prifix
						+ "WTP_SC_PARAM_TBL SS,RWS_ASSET_MAST_TBL A where SS.ASSET_CODE=A.ASSET_CODE "
						+ " and SS.asset_code=? and SS.WTP_TYPW='ROP'";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				while (rwsMasterData.rs.next()) {
					rwsMaster = new RwsMaster();
					rwsMaster.setAssetCode(rwsMasterData.rs.getString("ASSET_CODE"));
					rwsMaster.setWtpCode(rwsMasterData.rs.getString("WTPSC_CODE"));
					rwsMaster.setHabCode(rwsMasterData.rs.getString("HAB_CODE"));
					rwsMaster.setWtpType(rwsMasterData.rs.getString("WTP_TYPW"));
					rwsMaster.setWtpMld(rwsMasterData.rs.getString("WTP_MLD"));
					rwsMaster.setWtpUnits(rwsMasterData.rs.getString("UNITS_NO"));
					rwsMaster.setWtpRateOfFiltration(rwsMasterData.rs.getDouble("RATE_OF_FILTRATION"));
					rwsMaster.setWtpSize(rwsMasterData.rs.getString("WTP_SIZE"));
					rwsMaster.setWtpUnitsStandby(rwsMasterData.rs.getString("UNITS_STANDBY"));
					// rwsMaster.setWtpBackwashFreq(rwsMasterData.rs.getString("BACKWASH_FEQ"));
					rwsMaster.setWtpPerformance(rwsMasterData.rs.getString("PERFORMANCE"));
					// rwsMaster.setWtpCapacityUse(rwsMasterData.rs.getString("USE_CAPACITYMLD"));
					rwsMaster.setWtpShelter(rwsMasterData.rs.getInt("SHELTER_EXISTING"));
					rwsMaster.setWtpRawWater(rwsMasterData.rs.getString("RWS_TANK_EXISTING"));
					rwsMaster.setWtpProductWater(rwsMasterData.rs.getString("PWS_TANK_EXISTING"));
					try {
						rwsMaster.setWtpNoOfHoursOfUsage(
								Float.parseFloat(rwsMasterData.rs.getString("USE_CAPACITYMLD")));
					} catch (Exception e) {
						Debug.println("Exception is parsing to float " + e);
						rwsMaster.setWtpNoOfHoursOfUsage(0);
					}
					rwsMaster.setWtpExtentionScope(rwsMasterData.rs.getString("EXTENTION_SCOPE"));
					rwsMaster.setWtpLocation(rwsMasterData.rs.getString("LOCATION"));
					rwsMaster.setWtpFreqSandScrap(rwsMasterData.rs.getInt("FREQ_SAND_SCRAP"));
					String chkFilter = rwsMasterData.rs.getString("CHK_FILTER");

					if (chkFilter.substring(0, 2).equals("01")) {
						rwsMaster.setWtpSedimentationTank(true);
						rwsMaster.setWtpHorizontalRoughingFilterValue("01");
					}
					if (chkFilter.substring(2, 4).equals("02")) {
						rwsMaster.setWtpHorizontalRoughingFilter(true);
						rwsMaster.setWtpHorizontalRoughingFilterValue("02");
					}
					if (chkFilter.substring(4, 6).equals("03")) {
						rwsMaster.setWtpVerticalRoughingFilterValue("03");
						rwsMaster.setWtpVerticalRoughingFilter(true);
					}
					rwsMaster.setLatitude(rwsMasterData.rs.getString("latitude"));
					rwsMaster.setLongitude(rwsMasterData.rs.getString("longitude"));
					rwsMaster.setElevation(rwsMasterData.rs.getString("elevation"));
					rwsMaster.setWaypoint(rwsMasterData.rs.getString("way_point"));
					parameters.add(rwsMaster);
				}
			}
			else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) && assetCompCode.equals("03") && assetSubCompCode.equals("001")) {
				query = "select * from  " + Tab_Prifix
						+ "PUMPINGMAIN_TBL CP,RWS_ASSET_MAST_TBL A where CP.ASSET_CODE=A.ASSET_CODE AND A.HAB_CODE='"
						+ habCode + "'  and CP.asset_code=? order by PUMPINGMAIN_CODE";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				while (rwsMasterData.rs.next()) {
					rwsMaster = new RwsMaster();
					rwsMaster.setAssetCode(rwsMasterData.rs.getString("ASSET_CODE"));
					rwsMaster.setPmCode(rwsMasterData.rs.getString("PUMPINGMAIN_CODE"));
					rwsMaster.setHabCode(rwsMasterData.rs.getString("HAB_CODE"));
					rwsMaster.setPmLen(rwsMasterData.rs.getString("LENGTH"));
					rwsMaster.setPmAvNo(rwsMasterData.rs.getString("AIRVALVE_NO"));
					rwsMaster.setPmScrvNo(rwsMasterData.rs.getString("SCOUREVALVE"));
					rwsMaster.setPmRvNo(rwsMasterData.rs.getString("REFLEXVALVE"));
					rwsMaster.setPmSvNo(rwsMasterData.rs.getString("SLUICEVALVE"));
					rwsMaster.setNoOfPipes(
							getNoOfPipeTypes(dataSource, "01", "001", rwsMasterData.rs.getString("PUMPINGMAIN_CODE"))
									+ "");
					rwsMaster.setPmZeroVelocityValve(rwsMasterData.rs.getString("ZERO_VELOCITY_VALVE"));
					rwsMaster.setPmAirCusionValve(rwsMasterData.rs.getString("AIR_CUSHION_VALVE"));
					rwsMaster.setPmNonReturnValve(rwsMasterData.rs.getString("NON_RETURN_VALVE"));
					rwsMaster.setPmLocation(rwsMasterData.rs.getString("LOCATION"));
					parameters.add(rwsMaster);
				}
			} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) && assetCompCode.equals("03") && assetSubCompCode.equals("002")) {
				query = "select * from  " + Tab_Prifix
						+ "GRAVITYMAIN_TBL GM,RWS_ASSET_MAST_TBL A where GM.ASSET_CODE=A.ASSET_CODE "
						+ " and GM.asset_code=? order by GRAVITYMAIN_CODE";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				while (rwsMasterData.rs.next()) {
					rwsMaster = new RwsMaster();
					rwsMaster.setAssetCode(rwsMasterData.rs.getString("ASSET_CODE"));
					rwsMaster.setGravitymain_code(rwsMasterData.rs.getString("GRAVITYMAIN_CODE"));
					// rwsMaster.setLengths(rwsMasterData.rs.getString("LENGTH"));
					// rwsMaster.setMet_type(rwsMasterData.rs.getString("MET_TYPE"));
					rwsMaster.setHabCode(rwsMasterData.rs.getString("hab_code"));
					rwsMaster.setAirvalve_no(rwsMasterData.rs.getString("AIRVALVE_NO"));
					rwsMaster.setNoOfPipes(getNoOfPipeTypes(dataSource, "01", "002", rwsMasterData.rs.getString("GRAVITYMAIN_CODE"))+ "");
					rwsMaster.setScourevalve(rwsMasterData.rs.getString("SCOUREVALVE"));
					rwsMaster.setReflexvalve(rwsMasterData.rs.getString("REFLEXVALVE"));
					rwsMaster.setSluicevalve(rwsMasterData.rs.getString("SLUICEVALVE"));
					rwsMaster.setZeroVelocityValve(rwsMasterData.rs.getString("ZERO_VELOCITY_VALVE"));
					rwsMaster.setAirCushionValve(rwsMasterData.rs.getString("AIR_CUSHION_VALVE"));
					rwsMaster.setNonReturnValve(rwsMasterData.rs.getString("NON_RETURN_VALVE"));
					rwsMaster.setGravitymain_location(rwsMasterData.rs.getString("LOCATION"));
					rwsMaster.setLengths(rwsMasterData.rs.getString("LENGTH"));
					parameters.add(rwsMaster);
				}
			} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) && assetCompCode.equals("03") && assetSubCompCode.equals("003")) {
				query = "select * from  " + Tab_Prifix
						+ "DISTRI_SC_PARAM_TBL DIS,RWS_ASSET_MAST_TBL A where DIS.ASSET_CODE=A.ASSET_CODE "
						+ " and DIS.asset_code=? order by DISTRISC_CODE";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				while (rwsMasterData.rs.next()) {
					asset_pipeline = new Asset_PipeLine();
					asset_pipeline.setAssetCode(rwsMasterData.rs.getString("ASSET_CODE"));
					asset_pipeline.setHabCode(rwsMasterData.rs.getString("HAB_CODE"));
					asset_pipeline.setNoOfPipes(	getNoOfPipeTypes(dataSource, "01", "003", rwsMasterData.rs.getString("DISTRISC_CODE"))+ "");
					asset_pipeline.setDisLengths(rwsMasterData.rs.getInt("DIS_LEN") + "");
					asset_pipeline.setDisFullVillagesCovered(rwsMasterData.rs.getString("DIS_COVE"));
					asset_pipeline.setDisTotalLengthNeeded(rwsMasterData.rs.getFloat("DIS_LN") + "");
					asset_pipeline.setDisTotalLengthProvided(rwsMasterData.rs.getFloat("DIS_TLC") + "");
					asset_pipeline.setDisBalanceNeeded(rwsMasterData.rs.getFloat("DIS_BN") + "");
					asset_pipeline.setDisCode(rwsMasterData.rs.getString("DISTRISC_CODE"));
					asset_pipeline.setDisMaterialCode(rwsMasterData.rs.getString("DIS_MAT_CODE"));
					asset_pipeline.setDisNoOfPipes(rwsMasterData.rs.getInt("NO_OF_PIPES") + "");
					asset_pipeline.setDisNoOfAirValves(rwsMasterData.rs.getInt("NO_AIRVALVES") + "");
					asset_pipeline.setDisNoOfScourValves(rwsMasterData.rs.getInt("NO_SCOURVALVES") + "");
					asset_pipeline.setDisNoOfSluiceValves(rwsMasterData.rs.getInt("NO_SLUICEVALVES") + "");
					asset_pipeline.setDisNoOfPrivateHouseConnections(rwsMasterData.rs.getInt("NO_PR_HC") + "");
					asset_pipeline.setDisLocation(rwsMasterData.rs.getString("LOCATION"));
					asset_pipeline.setDisNoOfStandPosts(rwsMasterData.rs.getInt("NO_STANDPOSTS") + "");
					parameters.add(asset_pipeline);
				}
			}
		} catch (Exception e) {
			Debug.println("Exception at  getAssetSubCompParams in RwsMasterdata:  " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return parameters;
	}
	
	public static int insertMandalSubDivision(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			if (getMandalSubDivisionCount(rwsMaster.getCoc(), rwsMaster.getDoc(), rwsMaster.getSdoc(),
					rwsMaster.getDistrict(), rwsMaster.getMandal(), "", rwsMasterData.conn) != 1) {
				rwsMasterData.stmt = rwsMasterData.conn.createStatement();
				rowCount = rwsMasterData.stmt.executeUpdate("insert into rws_mandal_subdivision_tbl values(" + "'"
						+ rwsMaster.getCoc() + "'," + "'" + rwsMaster.getDoc() + "'," + "'" + rwsMaster.getSdoc() + "',"
						+ "'" + rwsMaster.getDistrict() + "'," + "'" + rwsMaster.getMandal() + "')");
			} else
				errorMessage = "This Mandal Already Mapped To Another Sub Division";
		} catch (Exception e) {
			Debug.println("The Exception in insertMandalSubDivision" + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return rowCount;
	}
	
	public static int insertUpdateMandalSubDivision(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			Debug.println("in insertMandalSubDivision");

			rwsMasterData.conn = RwsOffices.getConn();
			if (getMandalSubDivisionCount(rwsMaster.getCoc(), rwsMaster.getDoc(), rwsMaster.getSdoc(),
					rwsMaster.getDistrict(), rwsMaster.getMandal(), "", rwsMasterData.conn) != 1) {
				rwsMasterData.stmt = rwsMasterData.conn.createStatement();
				rowCount = rwsMasterData.stmt.executeUpdate("insert into urban_mandal_subdivision_tbl values(" + "'"
						+ rwsMaster.getCoc() + "'," + "'" + rwsMaster.getDoc() + "'," + "'" + rwsMaster.getSdoc() + "',"
						+ "'" + rwsMaster.getDistrict() + "'," + "'" + rwsMaster.getMandal() + "')");
			} else
				errorMessage = "This Mandal Already Mapped To Another Sub Division";
		} catch (Exception e) {
			Debug.println("The error in insertMandalSubDivision" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		Debug.println("row count in save=" + rowCount);
		return rowCount;
	}

	public static ArrayList getMandalSubDivisions(DataSource dataSource, String dcode) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList mandalSubdivisions = new ArrayList();
		String qry = "";
		try {
			// Debug.println("in getMandalSubDivisions");
			rwsMasterData.conn = RwsOffices.getConn();
			if (dcode == null) {
				qry = "SELECT CO.CIRCLE_OFFICE_CODE,CO.CIRCLE_OFFICE_NAME,DO.DIVISION_OFFICE_CODE,"
						+ "DO.DIVISION_OFFICE_NAME,SDO.SUBDIVISION_OFFICE_CODE,SDO.SUBDIVISION_OFFICE_NAME,"
						+ "D.DCODE,D.DNAME,M.MCODE,M.MNAME FROM RWS_CIRCLE_OFFICE_TBL CO,RWS_DIVISION_OFFICE_TBL DO,"
						+ "RWS_SUBDIVISION_OFFICE_TBL SDO,RWS_DISTRICT_TBL D,RWS_MANDAL_TBL M,RWS_MANDAL_SUBDIVISION_TBL MS WHERE CO.CIRCLE_OFFICE_CODE=MS.CIRCLE_OFFICE_CODE AND CO.HEAD_OFFICE_CODE=1 AND DO.DIVISION_OFFICE_CODE=MS.DIVISION_OFFICE_CODE AND DO.CIRCLE_OFFICE_CODE=MS.CIRCLE_OFFICE_CODE AND SDO.SUBDIVISION_OFFICE_CODE=MS.SUBDIVISION_OFFICE_CODE AND SDO.CIRCLE_OFFICE_CODE=MS.CIRCLE_OFFICE_CODE AND SDO.DIVISION_OFFICE_CODE=MS.DIVISION_OFFICE_CODE AND D.DCODE=MS.DCODE AND M.MCODE=MS.MCODE AND M.DCODE=MS.DCODE ORDER BY MS.CIRCLE_OFFICE_CODE";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(qry);
			} else {
				qry = "SELECT CO.CIRCLE_OFFICE_CODE,CO.CIRCLE_OFFICE_NAME,DO.DIVISION_OFFICE_CODE,"
						+ "DO.DIVISION_OFFICE_NAME,SDO.SUBDIVISION_OFFICE_CODE,SDO.SUBDIVISION_OFFICE_NAME,"
						+ "D.DCODE,D.DNAME,M.MCODE,M.MNAME FROM RWS_CIRCLE_OFFICE_TBL CO,RWS_DIVISION_OFFICE_TBL DO,"
						+ "RWS_SUBDIVISION_OFFICE_TBL SDO,RWS_DISTRICT_TBL D,RWS_MANDAL_TBL M,RWS_MANDAL_SUBDIVISION_TBL MS WHERE MS.DCODE=?"
						+ " and CO.CIRCLE_OFFICE_CODE=MS.CIRCLE_OFFICE_CODE AND CO.HEAD_OFFICE_CODE=1 AND DO.DIVISION_OFFICE_CODE=MS.DIVISION_OFFICE_CODE AND DO.CIRCLE_OFFICE_CODE=MS.CIRCLE_OFFICE_CODE AND SDO.SUBDIVISION_OFFICE_CODE=MS.SUBDIVISION_OFFICE_CODE AND SDO.CIRCLE_OFFICE_CODE=MS.CIRCLE_OFFICE_CODE AND SDO.DIVISION_OFFICE_CODE=MS.DIVISION_OFFICE_CODE AND D.DCODE=MS.DCODE AND M.MCODE=MS.MCODE AND M.DCODE=MS.DCODE ORDER BY MS.CIRCLE_OFFICE_CODE";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(qry);
				rwsMasterData.pstmt.setString(1, dcode);
			}
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setCoc(rwsMasterData.rs.getString(1));
				rwsMaster.setCon(rwsMasterData.rs.getString(2));
				rwsMaster.setDoc(rwsMasterData.rs.getString(3));
				rwsMaster.setDon(rwsMasterData.rs.getString(4));
				rwsMaster.setSdoc(rwsMasterData.rs.getString(5));
				rwsMaster.setSdon(rwsMasterData.rs.getString(6));
				rwsMaster.setDcode(rwsMasterData.rs.getString(7));
				rwsMaster.setDname(rwsMasterData.rs.getString(8));
				rwsMaster.setMandalCode(rwsMasterData.rs.getString(9));
				rwsMaster.setMandalName(rwsMasterData.rs.getString(10));
				mandalSubdivisions.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("THE ERROR at getMandalSubDivisions in RwsMasterData=" + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return mandalSubdivisions;
	}

	public static ArrayList getUpdateMandalSubDivisions(DataSource dataSource, String dcode) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList mandalSubdivisions = new ArrayList();

		try {
			// Debug.println("in getMandalSubDivisions");

			rwsMasterData.conn = RwsOffices.getConn();
			String query = "";
			if (dcode == null) {
				query = "SELECT CO.CIRCLE_OFFICE_CODE,CO.CIRCLE_OFFICE_NAME,DO.DIVISION_OFFICE_CODE,"
						+ "DO.DIVISION_OFFICE_NAME,SDO.SUBDIVISION_OFFICE_CODE,SDO.SUBDIVISION_OFFICE_NAME,"
						+ "D.DCODE,D.DNAME,M.MCODE,M.MNAME FROM UR_CIRCLE_OFFICE_TBL CO,UR_DIVISION_OFFICE_TBL DO,"
						+ "UR_SUBDIVISION_OFFICE_TBL SDO,URBAN_DISTRICT_TBL D,URBAN_MANDAL_TBL M,URBAN_MANDAL_SUBDIVISION_TBL MS WHERE CO.CIRCLE_OFFICE_CODE=MS.CIRCLE_OFFICE_CODE AND CO.HEAD_OFFICE_CODE=2 AND DO.DIVISION_OFFICE_CODE=MS.DIVISION_OFFICE_CODE AND DO.CIRCLE_OFFICE_CODE=MS.CIRCLE_OFFICE_CODE AND SDO.SUBDIVISION_OFFICE_CODE=MS.SUBDIVISION_OFFICE_CODE AND SDO.CIRCLE_OFFICE_CODE=MS.CIRCLE_OFFICE_CODE AND SDO.DIVISION_OFFICE_CODE=MS.DIVISION_OFFICE_CODE AND D.DCODE=MS.DCODE AND M.MCODE=MS.MCODE AND M.DCODE=MS.DCODE ORDER BY MS.CIRCLE_OFFICE_CODE";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
			} else {
				query = "SELECT CO.CIRCLE_OFFICE_CODE,CO.CIRCLE_OFFICE_NAME,DO.DIVISION_OFFICE_CODE,"
						+ "DO.DIVISION_OFFICE_NAME,SDO.SUBDIVISION_OFFICE_CODE,SDO.SUBDIVISION_OFFICE_NAME,"
						+ "D.DCODE,D.DNAME,M.MCODE,M.MNAME FROM UR_CIRCLE_OFFICE_TBL CO,UR_DIVISION_OFFICE_TBL DO,"
						+ "UR_SUBDIVISION_OFFICE_TBL SDO,URBAN_DISTRICT_TBL D,URBAN_MANDAL_TBL M,URBAN_MANDAL_SUBDIVISION_TBL MS WHERE MS.DCODE='"
						+ dcode
						+ "' and CO.CIRCLE_OFFICE_CODE=MS.CIRCLE_OFFICE_CODE AND CO.HEAD_OFFICE_CODE=2 AND DO.DIVISION_OFFICE_CODE=MS.DIVISION_OFFICE_CODE AND DO.CIRCLE_OFFICE_CODE=MS.CIRCLE_OFFICE_CODE AND SDO.SUBDIVISION_OFFICE_CODE=MS.SUBDIVISION_OFFICE_CODE AND SDO.CIRCLE_OFFICE_CODE=MS.CIRCLE_OFFICE_CODE AND SDO.DIVISION_OFFICE_CODE=MS.DIVISION_OFFICE_CODE AND D.DCODE=MS.DCODE AND M.MCODE=MS.MCODE AND M.DCODE=MS.DCODE ORDER BY MS.CIRCLE_OFFICE_CODE";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, dcode);
			}
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery(query);

			// System.out.println(query);
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setCoc(rwsMasterData.rs.getString(1));
				rwsMaster.setCon(rwsMasterData.rs.getString(2));
				rwsMaster.setDoc(rwsMasterData.rs.getString(3));
				rwsMaster.setDon(rwsMasterData.rs.getString(4));
				rwsMaster.setSdoc(rwsMasterData.rs.getString(5));
				rwsMaster.setSdon(rwsMasterData.rs.getString(6));
				rwsMaster.setDcode(rwsMasterData.rs.getString(7));
				rwsMaster.setDname(rwsMasterData.rs.getString(8));
				rwsMaster.setMandalCode(rwsMasterData.rs.getString(9));
				rwsMaster.setMandalName(rwsMasterData.rs.getString(10));
				mandalSubdivisions.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("THE ERROR at getUpdateMandalSubDivisions in RwsMasterData=" + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return mandalSubdivisions;
	}

	public static RwsMaster getMandalSubdivision(String coc, String doc, String sdoc, String dcode, String mcode,
			DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		String query = null;
		try {
			// Debug.println("in getMandalSubdivision");
			rwsMasterData.conn = RwsOffices.getConn();
			// rwsMasterData.stmt = rwsMasterData.conn.createStatement();

			query = "SELECT CO.CIRCLE_OFFICE_CODE,CO.CIRCLE_OFFICE_NAME,DO.DIVISION_OFFICE_CODE,"
					+ "DO.DIVISION_OFFICE_NAME,SDO.SUBDIVISION_OFFICE_CODE,SDO.SUBDIVISION_OFFICE_NAME,"
					+ "D.DCODE,D.DNAME,M.MCODE,M.MNAME FROM RWS_CIRCLE_OFFICE_TBL CO,RWS_DIVISION_OFFICE_TBL DO,"
					+ "RWS_SUBDIVISION_OFFICE_TBL SDO,RWS_DISTRICT_TBL D,RWS_MANDAL_TBL M,"
					+ "RWS_MANDAL_SUBDIVISION_TBL MS WHERE CO.CIRCLE_OFFICE_CODE=?"
					+ " AND CO.HEAD_OFFICE_CODE=1 AND DO.DIVISION_OFFICE_CODE=? AND DO.CIRCLE_OFFICE_CODE=? "
					+ "AND SDO.SUBDIVISION_OFFICE_CODE=? AND SDO.CIRCLE_OFFICE_CODE=? AND "
					+ "SDO.DIVISION_OFFICE_CODE=? AND D.DCODE=? AND M.MCODE=? AND M.DCODE=?";
			ps = rwsMasterData.conn.prepareStatement(query);
			ps.setString(1, coc);
			ps.setString(2, doc);
			ps.setString(3, coc);
			ps.setString(4, sdoc);
			ps.setString(5, coc);
			ps.setString(6, doc);
			ps.setString(7, dcode);
			ps.setString(8, mcode);
			ps.setString(9, dcode);
			// Debug.println("query is " + query);

			rwsMasterData.rs = ps.executeQuery();
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setCoc(rwsMasterData.rs.getString(1));
				rwsMaster.setCon(rwsMasterData.rs.getString(2));
				rwsMaster.setDoc(rwsMasterData.rs.getString(3));
				rwsMaster.setDon(rwsMasterData.rs.getString(4));
				rwsMaster.setSdoc(rwsMasterData.rs.getString(5));
				rwsMaster.setSdon(rwsMasterData.rs.getString(6));
				rwsMaster.setDcode(rwsMasterData.rs.getString(7));
				rwsMaster.setDname(rwsMasterData.rs.getString(8));
				rwsMaster.setMandalCode(rwsMasterData.rs.getString(9));
				rwsMaster.setMandalName(rwsMasterData.rs.getString(10));
			}
		} catch (Exception e) {
			Debug.println("the error is at getMandalSubdivision in RwsMasterData=" + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return rwsMaster;
	}

	public static RwsMaster getUrbanMandalSubdivision(String coc, String doc, String sdoc, String dcode, String mcode,
			DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		String query = null;
		try {
			// Debug.println("in getMandalSubdivision");

			rwsMasterData.conn = RwsOffices.getConn();
			// rwsMasterData.stmt = rwsMasterData.conn.createStatement();

			query = "SELECT CO.CIRCLE_OFFICE_CODE,CO.CIRCLE_OFFICE_NAME,DO.DIVISION_OFFICE_CODE,"
					+ "DO.DIVISION_OFFICE_NAME,SDO.SUBDIVISION_OFFICE_CODE,SDO.SUBDIVISION_OFFICE_NAME,"
					+ "D.DCODE,D.DNAME,M.MCODE,M.MNAME FROM UR_CIRCLE_OFFICE_TBL CO,UR_DIVISION_OFFICE_TBL DO,"
					+ "UR_SUBDIVISION_OFFICE_TBL SDO,URBAN_DISTRICT_TBL D,URBAN_MANDAL_TBL M,"
					+ "URBAN_MANDAL_SUBDIVISION_TBL MS WHERE CO.CIRCLE_OFFICE_CODE=?"
					+ " AND CO.HEAD_OFFICE_CODE=2 AND DO.DIVISION_OFFICE_CODE=? AND DO.CIRCLE_OFFICE_CODE=? "
					+ "AND SDO.SUBDIVISION_OFFICE_CODE=? AND SDO.CIRCLE_OFFICE_CODE=? AND "
					+ "SDO.DIVISION_OFFICE_CODE=? AND D.DCODE=? AND M.MCODE=? AND M.DCODE=?";

			ps = rwsMasterData.conn.prepareStatement(query);
			ps.setString(1, coc);
			ps.setString(2, doc);
			ps.setString(3, coc);
			ps.setString(4, sdoc);
			ps.setString(5, coc);
			ps.setString(6, doc);
			ps.setString(7, dcode);
			ps.setString(8, mcode);
			ps.setString(9, dcode);
			Debug.println("query is  " + query);

			rwsMasterData.rs = ps.executeQuery();
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setCoc(rwsMasterData.rs.getString(1));
				rwsMaster.setCon(rwsMasterData.rs.getString(2));
				rwsMaster.setDoc(rwsMasterData.rs.getString(3));
				rwsMaster.setDon(rwsMasterData.rs.getString(4));
				rwsMaster.setSdoc(rwsMasterData.rs.getString(5));
				rwsMaster.setSdon(rwsMasterData.rs.getString(6));
				rwsMaster.setDcode(rwsMasterData.rs.getString(7));
				rwsMaster.setDname(rwsMasterData.rs.getString(8));
				rwsMaster.setMandalCode(rwsMasterData.rs.getString(9));
				rwsMaster.setMandalName(rwsMasterData.rs.getString(10));
			}
		} catch (Exception e) {
			Debug.println("the error is in getSubDetailHead=" + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rwsMaster;
	}

	public static ArrayList getsubdivisionmandals(String coc, String doc, String sdoc, DataSource dataSource)
			throws Exception {
		RwsMasterData rwsMasterData=new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList mandalsub = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
		
			String query = "select M.MCODE,M.MNAME FROM RWS_MANDAL_SUBDIVISION_TBL MS,RWS_MANDAL_TBL M WHERE MS.CIRCLE_OFFICE_CODE=?"
					+ " AND MS.DCODE=? AND MS.DIVISION_OFFICE_CODE=? AND MS.SUBDIVISION_OFFICE_CODE=? AND M.MCODE=MS.MCODE AND "
					+ "M.DCODE=? ORDER BY M.MNAME";
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt.setString(1,coc);
			rwsMasterData.pstmt.setString(2,coc);
			rwsMasterData.pstmt.setString(3,doc);
			rwsMasterData.pstmt.setString(4,sdoc);
			rwsMasterData.pstmt.setString(5,coc);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setMandalCode(rwsMasterData.rs.getString(1));
				rwsMaster.setMandalName(rwsMasterData.rs.getString(2));
				mandalsub.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("Exception  is in getsubdivisionmandal in RwsMasterData : " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return mandalsub;
	}

	public static int updateMandalSubDivision(String mcode, String sdoc, String doc, String coc, RwsMaster rwsMaster,
			DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int ans = 0;
		/*
		 * Debug.println("old mcode=" + mcode + "new mcode=" + rwsMaster.getMandalCode()
		 * + "dcode=" + rwsMaster.getDistrict() + "new sdoc=" + rwsMaster.getSdoc() +
		 * "old sdoc=" + sdoc + "doc=" + rwsMaster.getDoc() + "old doc=" + doc + "coc="
		 * + rwsMaster.getCoc() + "old coc=" + coc + "docde=" + rwsMaster.getDistrict()
		 * + "oldcode=" + coc);
		 */
		try {
			// Debug.println("in updateMandalSubDivision");
			rwsMasterData.conn = RwsOffices.getConn();
			if (getMandalSubDivisionCount(rwsMaster.getCoc(), rwsMaster.getDoc(), rwsMaster.getSdoc(),
					rwsMaster.getDistrict(), rwsMaster.getMandalCode(), mcode, rwsMasterData.conn) != 1) {
				if (mcode.equals(rwsMaster.getMandalCode())) {
					ps = rwsMasterData.conn.prepareStatement(
							"update RWS_MANDAL_SUBDIVISION_TBL set SUBDIVISION_OFFICE_CODE =? where MCODE =? and DCODE=?  and SUBDIVISION_OFFICE_CODE =? and DIVISION_OFFICE_CODE=? and CIRCLE_OFFICE_CODE=?");
					ps.setString(1, rwsMaster.getSdoc());
					ps.setString(2, mcode);
					ps.setString(3, rwsMaster.getDistrict());
					ps.setString(4, sdoc);
					ps.setString(5, rwsMaster.getDoc());
					ps.setString(6, rwsMaster.getCoc());
				} else {
					ps = rwsMasterData.conn.prepareStatement(
							"update  RWS_MANDAL_SUBDIVISION_TBL set SUBDIVISION_OFFICE_CODE =?,MCODE =?,DIVISION_OFFICE_CODE=?,CIRCLE_OFFICE_CODE=?,DCODE=? where MCODE =? and DCODE=?  and SUBDIVISION_OFFICE_CODE =? and DIVISION_OFFICE_CODE=? and CIRCLE_OFFICE_CODE=?");
					ps.setString(1, rwsMaster.getSdoc());
					ps.setString(2, rwsMaster.getMandalCode());
					ps.setString(3, rwsMaster.getDoc());
					ps.setString(4, rwsMaster.getCoc());
					ps.setString(5, rwsMaster.getDistrict());
					ps.setString(6, mcode);
					ps.setString(7, coc);
					ps.setString(8, sdoc);
					ps.setString(9, doc);
					ps.setString(10, coc);
				}
				ans = ps.executeUpdate();
				// Debug.println("ans=" + ans);
			} else
				errorMessage = "This Mandal Already Mapped To Another Sub Division";
		} catch (SQLException sqle) {
			Debug.println("Exception at updateMandalSubDivision in RwsMasterDta is:" + sqle.getMessage());
			// sqle.printStackTrace();
			if (sqle.getErrorCode() == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			Debug.println("Exception at updateMandalSubDivision in RwsMasterDta is:" + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		// Debug.println("ans=" + ans);
		return ans;
	}

	public static int updateUrbanMandalSubDivision(String mcode, String sdoc, String doc, String coc,
			RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int ans = 0;
		Debug.println("old mcode=" + mcode + "new mcode=" + rwsMaster.getMandalCode() + "dcode="
				+ rwsMaster.getDistrict() + "new sdoc=" + rwsMaster.getSdoc() + "old sdoc=" + sdoc + "doc="
				+ rwsMaster.getDoc() + "old doc=" + doc + "coc=" + rwsMaster.getCoc() + "old coc=" + coc + "docde="
				+ rwsMaster.getDistrict() + "oldcode=" + coc);
		try {
			// Debug.println("in updateMandalSubDivision");
			//
			rwsMasterData.conn = RwsOffices.getConn();
			if (getUrbanMandalSubDivisionCount(rwsMaster.getCoc(), rwsMaster.getDoc(), rwsMaster.getSdoc(),
					rwsMaster.getDistrict(), rwsMaster.getMandalCode(), mcode, rwsMasterData.conn) != 1) {
				if (mcode.equals(rwsMaster.getMandalCode())) {
					ps = rwsMasterData.conn.prepareStatement(
							"update URBAN_MANDAL_SUBDIVISION_TBL set SUBDIVISION_OFFICE_CODE =? where MCODE =? and DCODE=?  and SUBDIVISION_OFFICE_CODE =? and DIVISION_OFFICE_CODE=? and CIRCLE_OFFICE_CODE=?");
					ps.setString(1, rwsMaster.getSdoc());
					ps.setString(2, mcode);
					ps.setString(3, rwsMaster.getDistrict());
					ps.setString(4, sdoc);
					ps.setString(5, rwsMaster.getDoc());
					ps.setString(6, rwsMaster.getCoc());
				} else {
					ps = rwsMasterData.conn.prepareStatement(
							"update  URBAN_MANDAL_SUBDIVISION_TBL set SUBDIVISION_OFFICE_CODE =?,MCODE =?,DIVISION_OFFICE_CODE=?,CIRCLE_OFFICE_CODE=?,DCODE=? where MCODE =? and DCODE=?  and SUBDIVISION_OFFICE_CODE =? and DIVISION_OFFICE_CODE=? and CIRCLE_OFFICE_CODE=?");
					ps.setString(1, rwsMaster.getSdoc());
					ps.setString(2, rwsMaster.getMandalCode());
					ps.setString(3, rwsMaster.getDoc());
					ps.setString(4, rwsMaster.getCoc());
					ps.setString(5, rwsMaster.getDistrict());
					ps.setString(6, mcode);
					ps.setString(7, coc);
					ps.setString(8, sdoc);
					ps.setString(9, doc);
					ps.setString(10, coc);
				}
				ans = ps.executeUpdate();
				Debug.println("ans=" + ans);
			} else
				errorMessage = "This Muncipality Already Mapped To Another Sub Division";
		} catch (SQLException sqle) {
			Debug.println("Exception is:" + sqle.getMessage());
			if (sqle.getErrorCode() == 1)
				errorMessage = "Record with this name exists.";
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		Debug.println("ans=" + ans);
		return ans;
	}

	// method added by pranavi
	public static ArrayList getMandals(DataSource dataSource, String circlecode) throws Exception {
		Debug.println("trying to get the mandals.....");
		RwsMasterData rwsMasterData = new RwsMasterData();
		rwsMasterData.conn = RwsOffices.getConn();
		rwsMasterData.stmt = rwsMasterData.conn.createStatement();
		ArrayList mandalsDist = null;
		String query = null;
		try {

			query = "SELECT DISTINCT DCODE,MCODE,MNAME FROM RWS_MANDAL_TBL WHERE" + " DCODE='" + circlecode
					+ "'ORDER BY MNAME";
			Debug.println("query" + query);
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(query);

			RwsMaster rwsMaster = null;
			mandalsDist = new ArrayList();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setMandalCode(rwsMasterData.rs.getString(2));
				rwsMaster.setMandalName(rwsMasterData.rs.getString(3));
				mandalsDist.add(rwsMaster);
			}

		} catch (Exception e) {
			// System.out.println("The error in getMandals()=== RwsLocations
			// "+e);
		} finally {
			rwsMasterData.rs.close();
			rwsMasterData.stmt.close();
			rwsMasterData.conn.close();
		}
		return mandalsDist;
	}

	public static int getMandalSubDivisionCount(String coc, String doc, String sdoc, String dcode, String mcode,
			String mandal, Connection conn) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;
		int c = 0;
		try {
			if (mcode.equals(mandal))
				return c;
			else {
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(
						"select count(SUBDIVISION_OFFICE_CODE) from RWS_MANDAL_SUBDIVISION_TBL where CIRCLE_OFFICE_CODE=?"
								+ " and DIVISION_OFFICE_CODE=? and DCODE=? and MCODE=?");
				rwsMasterData.pstmt.setString(1, coc);
				rwsMasterData.pstmt.setString(2, doc);
				rwsMasterData.pstmt.setString(3, dcode);
				rwsMasterData.pstmt.setString(4, mcode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				rwsMasterData.rs.next();
				c = rwsMasterData.rs.getInt(1);
			}
		} catch (Exception e) {
			Debug.println("Exception at getmandalsubdivision count in RwsMasterData=" + e.getMessage());

		} finally {
			try {
				rwsMasterData.pstmt.close();
				rwsMasterData.rs.close();
			} catch (Exception e) {
				System.out
						.println("Exception at finally block of getMandalSubDivisionCount " + e);// e.printStackTrace();
			}
		}
		return c;
	}

	public static int getUrbanMandalSubDivisionCount(String coc, String doc, String sdoc, String dcode, String mcode,
			String mandal, Connection conn) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;

		int c = 0;
		try {
			Debug.println("in getMandalSubDivisionCount");

			if (mcode.equals(mandal))
				return c;
			else {
				rwsMasterData.stmt = rwsMasterData.conn.createStatement();
				rwsMasterData.rs = rwsMasterData.stmt.executeQuery(
						"select count(SUBDIVISION_OFFICE_CODE) from URBAN_MANDAL_SUBDIVISION_TBL where CIRCLE_OFFICE_CODE='"
								+ coc + "' and DIVISION_OFFICE_CODE='" + doc + "' and DCODE='" + dcode + "' and MCODE='"
								+ mcode + "'");
				rwsMasterData.rs.next();
				c = rwsMasterData.rs.getInt(1);
			}
		} catch (Exception e) {
			Debug.println("Exception in getmandalsubdivision count=" + e.getMessage());

		} finally {
			rwsMasterData.stmt.close();
		}
		Debug.println("count=" + c);
		return c;
	}

	public static int removeMandalSubDivision(String coc, String doc, String sdoc, String dcode, String mcode,
			DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			// Debug.println("in removeMandalSubDivision");
			rwsMasterData.conn = RwsOffices.getConn();
			String query = "delete  from RWS_MANDAL_SUBDIVISION_TBL  where CIRCLE_OFFICE_CODE=? and DIVISION_OFFICE_CODE= ?"
					+ " and SUBDIVISION_OFFICE_CODE=?  and DCODE=?  and MCODE=?";
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt.setString(1, coc);
			rwsMasterData.pstmt.setString(2, doc);
			rwsMasterData.pstmt.setString(3, sdoc);
			rwsMasterData.pstmt.setString(4, dcode);
			rwsMasterData.pstmt.setString(5, mcode);
			rowCount = rwsMasterData.pstmt.executeUpdate();
			/*
			 * System.out.println(
			 * "delete  from RWS_MANDAL_SUBDIVISION_TBL  where CIRCLE_OFFICE_CODE='" + coc +
			 * "' and DIVISION_OFFICE_CODE='" + doc + "' and SUBDIVISION_OFFICE_CODE='" +
			 * sdoc + "' and DCODE='" + dcode + "' and MCODE='" + mcode + "'");
			 */
		} catch (Exception e) {
			System.out.println("Exception at removeMandalSubDivision " + e);
			// e.printStackTrace();
		} finally {
			rwsMasterData.closeAll();
		}
		return rowCount;
	}

	public static int removeUrbanMandalSubDivision(String coc, String doc, String sdoc, String dcode, String mcode,
			DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		try {
			Debug.println("in removeMandalSubDivision");

			rwsMasterData.conn = RwsOffices.getConn();
			// rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			String query = "delete  from URBAN_MANDAL_SUBDIVISION_TBL  where CIRCLE_OFFICE_CODE=? and DIVISION_OFFICE_CODE= ?"
					+ " and SUBDIVISION_OFFICE_CODE=?  and DCODE=?  and MCODE=?";
			rowCount = rwsMasterData.stmt
					.executeUpdate("delete  from URBAN_MANDAL_SUBDIVISION_TBL  where CIRCLE_OFFICE_CODE='" + coc
							+ "' and DIVISION_OFFICE_CODE='" + doc + "' and SUBDIVISION_OFFICE_CODE='" + sdoc
							+ "' and DCODE='" + dcode + "' and MCODE='" + mcode + "'");
			ps = rwsMasterData.conn.prepareStatement(query);
			ps.setString(1, coc);
			ps.setString(2, doc);
			ps.setString(3, sdoc);
			ps.setString(4, dcode);
			ps.setString(5, mcode);
			rowCount = ps.executeUpdate();
		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public int getAssetCount(String tabName, String typeOfAssetCode, String habCode, String assetCode)
			throws Exception {

		int count = 0;
		String query = "";
		try {
			Debug.println("in getAssetCount****check whether connection is closed");

			query = "SELECT count(*)COUNT FROM rws_asset_mast_tbl A,rws_asset_scheme_tbl S ," + tabName
					+ " g WHERE A.asset_code = S.asset_code  AND type_of_asset_code='" + typeOfAssetCode + "'"
					+ " and g.asset_code=A.asset_code and g.asset_code='" + assetCode + "'";
			Debug.println("query in counts of " + query);
			stmt = conn.createStatement();
			rs1 = stmt.executeQuery(query);
			if (rs1.next()) {
				count = rs1.getInt("COUNT");
				Debug.println("count is " + count);
			}
		} catch (Exception e) {
			Debug.println("Error=" + e);
		} finally {
			// closeAll();

		}
		return count;

	}

	public int getAssetCount(String tabName, String typeOfAssetCode, String habCode) throws Exception {

		int count = 0;
		String query = "";
		try {
			Debug.println("in getAssetCount****check whether connection is closed");

			query = "SELECT count(*)COUNT FROM rws_asset_mast_tbl A,rws_asset_scheme_tbl S ," + tabName
					+ " g WHERE A.asset_code = S.asset_code  AND type_of_asset_code='" + typeOfAssetCode + "'"
					+ " and g.asset_code=A.asset_code and g.asset_code='";

			Debug.println("query in counts of " + query);
			stmt = conn.createStatement();
			rs1 = stmt.executeQuery(query);
			if (rs1.next())
				count = rs1.getInt("COUNT");
		} catch (Exception e) {
			Debug.println("Error=" + e);
		} finally {
			// closeAll();
		}
		return count;

	}

	// code modified
	public ArrayList getComponentDetails(String typeOfAssetCode, String habCode, DataSource dataSource) {
		ArrayList assets = new ArrayList();
		try {
			Debug.println("in getComponentDetails used local connection");

			conn = RwsOffices.getConn();
			Statement stmt1 = conn.createStatement();
			String query = "";
			if (typeOfAssetCode.equals("04"))
				query = " SELECT A.asset_code, S.scheme_code, asset_name, A.location, date_creation, "
						+ " DECODE(asset_status, '1', 'WORKING', '2', 'NOT WORKING', '3', 'DRIED', '4','CONDEMNED', '5', 'SEASONAL') AS ASSET_STATUS, "
						+ " asset_cost, start_year, end_year, h.P_YEILD, DECODE(H.QUALITY_AFFECTED,'Y','NSS','N','SAFE SOURCE')AS WATER_QUALITY,"
						+ " H.FLOURIDE AS FLOURIDE_PER,H.BRAKISH AS BRAKISH_PER,H.IRON AS IRON_PER,CONT_OTHERS_TYPE AS OTHERS,CONT_OTHERS_PER AS OTHERS_PER"
						+ " FROM RWS_HP_SUBCOMP_PARAM_TBL h,rws_asset_mast_tbl A, rws_asset_scheme_tbl S"
						+ " WHERE A.asset_code = S.asset_code AND a.asset_code=h.asset_code"
						+ " AND type_of_asset_code='" + typeOfAssetCode + "' " + " AND hab_code = '" + habCode + "'";
			else if (typeOfAssetCode.equals("05"))
				query = " SELECT * from RWS_SHALLOWHANDPUMPS_TBL   p,RWS_HABITATION_DIRECTORY_TBL h,  "
						+ " RWS_ASSET_MAST_TBL A, rws_asset_scheme_tbl S where a.asset_code=s.asset_code and a.asset_code=p.asset_code and  h.hab_code=p.hab_code AND substr(s.scheme_code,1,16) = '"
						+ habCode + "'";
			else if (typeOfAssetCode.equals("06"))
				query = " SELECT * from RWS_OPEN_WELL_MAST_TBL   p,RWS_HABITATION_DIRECTORY_TBL h,  "
						+ "RWS_ASSET_MAST_TBL A  , rws_asset_scheme_tbl S where a.asset_code=s.asset_code and a.asset_code=p.asset_code and h.hab_code=p.HABITATION_CODE  AND p.HABITATION_CODE  = '"
						+ habCode + "'";
			else if (typeOfAssetCode.equals("07"))
				query = " SELECT * from RWS_OPENWELL_POND_TBL  p,RWS_HABITATION_DIRECTORY_TBL h , "
						+ "RWS_ASSET_MAST_TBL A  , rws_asset_scheme_tbl S where a.asset_code=s.asset_code and a.asset_code=p.asset_code and  h.hab_code=p.hab_code AND p.hab_code = '"
						+ habCode + "'";
			/*
			 * else if (typeOfAssetCode.equals("07")) query = " SELECT * from
			 * RWS_DWTANK_MST_TBL d,RWS_HABITATION_DIRECTORY_TBL h " + " where
			 * h.hab_code=d.hab_code AND d.hab_code = '" + habCode + "'";
			 */
			else if (typeOfAssetCode.equals("08"))
				query = " SELECT o.hab_code,o.habname,o.OW_CODE,o.LOCATION,o.DIA,o.DEPTH,o.MINWL,o.MAXWL from RWS_OPEN_WELL_MAST_TBL o,RWS_HABITATION_DIRECTORY_TBL h  "
						+ "  where h.hab_code=o.hab_code AND o.hab_code = '" + habCode + "'";
			else
				query = " SELECT A.asset_code, S.scheme_code, asset_name, location, to_char(date_creation,'dd/mm/yy')date_creation, "
						+ " DECODE(asset_status, '1', 'WORKING', '2', 'NOT WORKING', '3', 'DRIED', '4','CONDEMNED', '5', 'SEASONAL') AS ASSET_STATUS, "
						+ " asset_cost, start_year, end_year FROM rws_asset_mast_tbl A, rws_asset_scheme_tbl S"
						+ " WHERE A.asset_code = S.asset_code" + " AND type_of_asset_code='" + typeOfAssetCode + "' "
						+ " AND hab_code = '" + habCode + "'";
			Debug.println("query=" + query);
			// rwsMaster.setPmCode(rs.getString(31));
			rs = stmt1.executeQuery(query);
			RwsMaster rwsMaster = null;
			String assetCode = "";
			while (rs.next()) {
				rwsMaster = new RwsMaster();

				assetCode = rs.getString("ASSET_CODE");
				rwsMaster.setAssetCode(rs.getString("ASSET_CODE"));
				rwsMaster.setSchemeCode(rs.getString("SCHEME_CODE"));
				rwsMaster.setAssetName(rs.getString("ASSET_NAME"));
				rwsMaster.setLocation(rs.getString("LOCATION"));
				rwsMaster.setDateofCreation(rs.getString("DATE_CREATION"));
				rwsMaster.setAssetStatus(rs.getString("ASSET_STATUS"));
				rwsMaster.setAssetCost(rs.getString("ASSET_COST"));
				rwsMaster.setStartYear(rs.getString("START_YEAR"));
				rwsMaster.setEndYear(rs.getString("END_YEAR"));

				if (typeOfAssetCode.equals("01")) {
					Debug.println("executing glsr");
					rwsMaster.setGlsrCount(
							getAssetCount("RWS_AST_GLSR_SC_PARAM_TBL", typeOfAssetCode, habCode, assetCode));
					Debug.println("executed");
					Debug.println("glsr count is " + rwsMaster.getGlsrCount());
					rwsMaster.setOhsrCount(
							getAssetCount("RWS_AST_OHSR_SC_PARAM_TBL", typeOfAssetCode, habCode, assetCode));
				}

				else if (typeOfAssetCode.equals("02")) {
					rwsMaster.setGlsrCount(
							getAssetCount("RWS_AST_GLSR_SC_PARAM_TBL", typeOfAssetCode, habCode, assetCode));
					Debug.println("glsr count is " + rwsMaster.getGlsrCount());
					rwsMaster.setOhsrCount(
							getAssetCount("RWS_AST_OHSR_SC_PARAM_TBL", typeOfAssetCode, habCode, assetCode));
				}

				else if (typeOfAssetCode.equals("03")) {
					Debug.println("in cpws");
					rwsMaster.setGlsrCount(
							getAssetCount("RWS_AST_GLSR_SC_PARAM_TBL", typeOfAssetCode, habCode, assetCode));
					Debug.println("1");
					rwsMaster.setOhsrCount(
							getAssetCount("RWS_AST_OHSR_SC_PARAM_TBL", typeOfAssetCode, habCode, assetCode));
					Debug.println("2");
					rwsMaster.setGlbrCount(
							getAssetCount("RWS_AST_GLBR_SC_PARAM_TBL", typeOfAssetCode, habCode, assetCode));
					Debug.println("3");
					rwsMaster.setOhbrCount(
							getAssetCount("RWS_AST_OHBR_SC_PARAM_TBL", typeOfAssetCode, habCode, assetCode));
					Debug.println("4");
				} else if (typeOfAssetCode.equals("04")) {

					rwsMaster.setPyield(rs.getString("P_YEILD"));
					rwsMaster.setWaterQuality(rs.getString("WATER_QUALITY"));
					rwsMaster.setFlouride(rs.getDouble("FLOURIDE_PER"));
					rwsMaster.setBrakish(rs.getDouble("BRAKISH_PER"));
					rwsMaster.setIron(rs.getDouble("IRON_PER"));
					rwsMaster.setOthersType(rs.getString("OTHERS"));
					rwsMaster.setOthers(rs.getString("OTHERS_PER"));
				} else if (typeOfAssetCode.equals("05")) {
					rwsMaster.setHabCode(rs.getString("HAB_CODE"));
					// rwsMaster.setHabName(rs.getString(2));
					rwsMaster.setShpCode(rs.getString("SHALLOWHP_CODE"));
					rwsMaster.setShpLocation(rs.getString("LOCATION"));
					rwsMaster.setShpDiameter(rs.getString("DIAMETER"));
					rwsMaster.setShpDepth(rs.getString("DEPTH"));

					rwsMaster.setWaterQuality(rs.getString("WATER_QUALITY"));
					rwsMaster.setFlouride(rs.getDouble("FLORIDE_PER"));
					rwsMaster.setBrakish(rs.getDouble("BRAKISH_PER"));
					rwsMaster.setIron(rs.getDouble("IRON_PER"));
					rwsMaster.setOthersType(rs.getString("OTHERS"));
					rwsMaster.setOthers(rs.getString("OTHERS_PER"));

				} else if (typeOfAssetCode.equals("06")) {
					rwsMaster.setHabCode(rs.getString("HABITATION_CODE"));
					// rwsMaster.setHabName(rs.getString(2));
					rwsMaster.setOwCode(rs.getString("OPENWELL_CODE"));
					rwsMaster.setOwLocation(rs.getString("LOCATION"));
					rwsMaster.setOwDiameter(rs.getString("DIAMETER"));
					rwsMaster.setOwDepth(rs.getString("DEPTH"));
					rwsMaster.setOwMinwl(rs.getString("MIN_WATER_LEVEL"));
					rwsMaster.setOwMaxwl(rs.getString("MAX_WATER_LEVEL"));

					rwsMaster.setWaterQuality(rs.getString("QUALITY"));
					rwsMaster.setFlouride(rs.getDouble("FLOURIDE_PER"));
					rwsMaster.setBrakish(rs.getDouble("BRAKISH_PER"));
					rwsMaster.setIron(rs.getDouble("IRON_PER"));
					rwsMaster.setOthersType(format(rs.getString("OTHER_TYPE")));
					rwsMaster.setOthers(format(rs.getString("OTHER_PER")));

					// rwsMaster.setPondServiceMonths(rs.getString(11));

				} else if (typeOfAssetCode.equals("07")) {
					rwsMaster.setHabCode(rs.getString("HAB_CODE"));
					// rwsMaster.setHabName(rs.getString(2));
					rwsMaster.setPondCode(rs.getString("POND_CODE"));
					rwsMaster.setPondName(rs.getString("POND_NAME"));
					rwsMaster.setLocation(rs.getString("POND_LOCATION"));
					rwsMaster.setPondSize(rs.getString("SIZE_AREA"));
					rwsMaster.setPondVolume(rs.getString("STORAGE_VOL"));

					rwsMaster.setWaterQuality(rs.getString("WATER_QUALITY"));
					rwsMaster.setFlouride(rs.getDouble("FLORIDE"));
					rwsMaster.setBrakish(rs.getDouble("BRAKISH"));
					rwsMaster.setIron(rs.getDouble("IRON"));
					rwsMaster.setOthersType(format(rs.getString("OTHER_TYPE")));
					rwsMaster.setOthers(format(rs.getString("OTHER_PER")));
					// rwsMaster.setPondServiceMonths(rs.getString(11));

				} else if (typeOfAssetCode.equals("08")) {
					rwsMaster.setHabCode(rs.getString(1));
					rwsMaster.setHabName(rs.getString(2));
					rwsMaster.setOwCode(rs.getString(3));
					rwsMaster.setLocation(rs.getString(4));
					rwsMaster.setOwDiameter(rs.getString(5));
					rwsMaster.setOwDepth(rs.getString(6));
					rwsMaster.setOwMaxwl(rs.getString(7));
					rwsMaster.setOwMinwl(rs.getString(8));

				} else {
					assetCode = rs.getString(1);
					rwsMaster.setAssetCode(assetCode);
					rwsMaster.setSchemeCode(rs.getString(2));
					rwsMaster.setAssetName(rs.getString(3));
					rwsMaster.setLocation(rs.getString(4));
					if (rs.getString(5) == null)
						rwsMaster.setDateofCreation(rs.getString(5));
					else
						rwsMaster.setDateofCreation(df.format(rs.getDate(5)));
					rwsMaster.setAssetStatus(rs.getString(6));
					rwsMaster.setAssetCost(rs.getString(7));
					rwsMaster.setStartYear(rs.getString(8));
					rwsMaster.setEndYear(rs.getString(9));

				}
				assets.add(rwsMaster);

			}
		} catch (Exception e) {
			Debug.println("Excpetion in getComponentDetails : " + e);

		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException sqle) {
				}
			}

			if (stmt != null) {
				try {
					stmt.close();
				} catch (SQLException sqle) {
				}
			}

			if (conn != null) {
				try {
					conn.close();
					Debug.println("conn closed");
				} catch (SQLException sqle) {
				}
			}
		}
		return assets;
	} // end of code modified

	public static RwsMaster getAssetDetails(String habCode, String assetTypeCode, String pumpCode,
			DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		String schemeCode = habCode + pumpCode;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			String query = "select a.ASSET_CODE,a.ASSET_NAME,a.LOCATION,a.DATE_CREATION,a.ASSET_COST,a.START_YEAR,a.END_YEAR,a.asset_status,"
					+ "nvl(a.DEFUNCT_REASON,'') as DEFUNCT_REASON,DIVISION_OFFICE_CODE,SUBDIVISION_OFFICE_CODE,HAB_CODE,"
					+ "nvl(a.POPU_BENEFITED,0) as POPU_BENEFITED,nvl(remarks,'') as remarks,nvl(direct_pumping_yield,'0') as dpYield,latitude,longitude,elevation,"
					+ "way_point,to_char(LAST_REPAIRED_DATE,'dd/mm/yyyy') as LAST_REPAIRED_DATE from rws_asset_mast_tbl a,rws_asset_scheme_tbl s where "
					+ "a.type_of_asset_code=? and a.hab_code=? and a.asset_code=s.asset_code and s.scheme_code=?";
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt.setString(1, assetTypeCode);
			rwsMasterData.pstmt.setString(2, habCode);
			rwsMasterData.pstmt.setString(3, schemeCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setAssetCode(rwsMasterData.rs.getString(1));
				rwsMaster.setAssetName(rwsMasterData.rs.getString(2));
				rwsMaster.setLocation(rwsMasterData.rs.getString(3));
				if (rwsMasterData.rs.getString(4) != null)
					rwsMaster.setDateofCreation(df.format(rwsMasterData.rs.getDate(4)));
				rwsMaster.setAssetCost(rwsMasterData.rs.getString(5));
				rwsMaster.setStartYear(rwsMasterData.rs.getString(6));
				rwsMaster.setEndYear(rwsMasterData.rs.getString(7));
				rwsMaster.setAssetStatus(rwsMasterData.rs.getString(8));
				rwsMaster.setDefunctReasons(rwsMasterData.rs.getString("DEFUNCT_REASON"));
				rwsMaster.setTotPopBenfit(rwsMasterData.rs.getInt("POPU_BENEFITED"));
				rwsMaster.setLatitude(rwsMasterData.rs.getString("latitude"));
				rwsMaster.setLongitude(rwsMasterData.rs.getString("longitude"));
				rwsMaster.setElevation(rwsMasterData.rs.getString("elevation"));
				rwsMaster.setWaypoint(rwsMasterData.rs.getString("way_point"));
				rwsMaster.setRemarks(rwsMasterData.rs.getString("remarks"));
				rwsMaster.setDpYield(rwsMasterData.rs.getString("dpYield"));
				rwsMaster.setDivisionOfficeCode(rwsMasterData.rs.getString("DIVISION_OFFICE_CODE"));
				rwsMaster.setSubdivisionOfficeCode(rwsMasterData.rs.getString("SUBDIVISION_OFFICE_CODE"));
				rwsMaster.setMandalCode(rwsMasterData.rs.getString("HAB_CODE").substring(5, 7));
				rwsMaster.setHabCode(rwsMasterData.rs.getString("HAB_CODE"));
				rwsMaster.setLastRepairedDate(rwsMasterData.rs.getString("LAST_REPAIRED_DATE"));
			
			if (assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) {
				try {
					query = "select count(h.hab_code),Sum(d.census_plain_popu + d.census_sc_popu + d.census_st_popu + d.FLOAT_POP) from rws_asset_mast_tbl a,"
							+ " rws_asset_hab_tbl h, rws_habitation_directory_tbl d where d.hab_code=h.hab_code and h.asset_code= a.asset_code and a.asset_code=?";
					rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
					rwsMasterData.pstmt.setString(1, rwsMaster.getAssetCode());
					rwsMasterData.rs1 = rwsMasterData.pstmt.executeQuery();
					if (rwsMasterData.rs1.next()) {
						rwsMaster.setTotHabs(rwsMasterData.rs1.getInt(1));
						rwsMaster.setTotPopBenfit(rwsMasterData.rs1.getInt(2));
					}
				} catch (Exception e) {
					Debug.println("Exception  in population: " + e);
				}
			} else {
				if (rwsMaster != null) {
					rwsMaster.setTotHabs(1);
				}
				rwsMaster.setTotPopBenfit(rwsMasterData.rs.getInt("POPU_BENEFITED"));
			}
			}
		} catch (Exception e) {
			Debug.println("Exception  in getAssetDetails in RwsMasterData : " + e.getMessage());
			e.printStackTrace();
		} finally {
			rwsMasterData.closeAll();
		}
		return rwsMaster;
	}

	public static RwsMaster getAssetDetails(String assetCode) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			String query = "select asset_code,DIVISION_OFFICE_CODE,SUBDIVISION_OFFICE_CODE,HAB_CODE,TYPE_OF_ASSET_CODE from "
					+ "rws_asset_mast_tbl where asset_code=?";
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt.setString(1, assetCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setAssetCode(rwsMasterData.rs.getString(1));
				rwsMaster.setDivisionOfficeCode(rwsMasterData.rs.getString(2));
				rwsMaster.setSubdivisionOfficeCode(rwsMasterData.rs.getString(3));
				rwsMaster.setHabCode(rwsMasterData.rs.getString(4));
				rwsMaster.setAssetTypeCode(rwsMasterData.rs.getString(5));
				rwsMaster.setMandalCode(rwsMasterData.rs.getString(4).substring(5, 7));
			}
		} catch (Exception e) {
			Debug.println("Exception at  getAssetDetails in RwsMasterData : " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}
		return rwsMaster;
	}

	public static RwsMaster PopuCountInHab(String AssetCodes, DataSource dataSource) throws Exception {
		RwsMaster rwsMaster = null;
		RwsMasterData rwsMasterData = new RwsMasterData();
		rwsMasterData.conn = RwsOffices.getConn();
		rwsMasterData.stmt = rwsMasterData.conn.createStatement();
		try {
			Debug.println("in PopuCountInHab");

			String query = "select count(h.hab_code),Sum(d.census_plain_popu + d.census_st_popu + d.census_st_popu + d.FLOAT_POP) from rws_asset_mast_tbl a, rws_asset_hab_tbl h, rws_habitation_directory_tbl d where d.hab_code=h.hab_code and h.asset_code= a.asset_code and a.asset_code='"
					+ AssetCodes + "'";
			Debug.println("details of population query  " + query);
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(query);
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setTotHabs(rwsMasterData.rs.getInt(1));
				rwsMaster.setTotPopBenfit(rwsMasterData.rs.getInt(2));
			}
		} catch (Exception e) {
			Debug.println("Error in population" + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rwsMaster;
	}

	public static int UpdateHoffice(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String query;
		int rowcount = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn
					.prepareStatement("update RWS_HEAD_OF_OFFICE_TBL set designation_code=? where office=?");
			rwsMasterData.pstmt.setString(1, rwsMaster.getDesignation());
			rwsMasterData.pstmt.setString(2, rwsMaster.getOffice());
			rowcount = rwsMasterData.pstmt.executeUpdate();
		} catch (Exception e) {
			Debug.println("The Error in UpdateHoffice in RwsMasterData  " + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return rowcount;
	}

	public static ArrayList getHOData(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		ArrayList datas = null;

		try {
			datas = new ArrayList();
			RwsMaster rwsMaster = null;
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(
					"select t.office,d.designation_acr from rws_head_of_office_tbl t,rws_designation_tbl d where d.designation_code=t.designation_code");
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setOffice(rwsMasterData.rs.getString(1));
				rwsMaster.setDesignation(rwsMasterData.rs.getString(2));
				datas.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("Error in getHOData in RwsMasterData  " + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return datas;
	}

	public static ArrayList getHoffice(DataSource datasource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		ArrayList office = null;
		try {
			office = new ArrayList();
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn
					.prepareStatement("select distinct office from rws_head_of_office_tbl");
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			RwsMaster rwsMaster = null;
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setOffice(rwsMasterData.rs.getString(1));
				office.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("error in getOffice in RwsMasterData  " + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return office;
	}

	public static ArrayList getHoffices(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList hoffices = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(
					"select h.office,d.designation_acr from rws_head_of_office_tbl h,rws_designation_tbl d where h.designation_code=d.designation_code");
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setOffice(rwsMasterData.rs.getString(1));
				rwsMaster.setDesignation(rwsMasterData.rs.getString(2));
				hoffices.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The error in getHoffices in RwsMasterData  " + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return hoffices;
	}

	public static int updateTslimit(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		String office = rwsMaster.getOffice();
		String designation = rwsMaster.getDesignation();
		// int designation=Integer.parseInt(rwsMaster.getDesignation());

		String lowerLimit = rwsMaster.getLowerLimit();
		String upperLimit = rwsMaster.getUpperLimit();
		String query;
		try {
			// Debug.println("in updateTslimit");
			rwsMasterData.conn = RwsOffices.getConn();
			// Debug.println("before query");

			query = "update rws_est_ts_work_value_tbl set cost_lower_limit=?,cost_upper_limit=? where designation_code=(select designation_code from rws_designation_tbl where designation_acr=?)";
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt.setString(1, lowerLimit);
			rwsMasterData.pstmt.setString(2, upperLimit);
			rwsMasterData.pstmt.setString(3, designation);
			rowCount = rwsMasterData.pstmt.executeUpdate();
			// Debug.println("after query execution,rowcount:" + rowCount);
		} catch (Exception e) {
			Debug.println("The Error In UpdateTslimit In RwsMasterData:" + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;
	}

	public static ArrayList getDesignation(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		ArrayList designation = null;
		try {
			designation = new ArrayList();
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(
					"SELECT designation_code, DESIGNATION_ACR FROM RWS_DESIGNATION_TBL ORDER BY DESIGNATION_NAME");
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			RwsMaster rwsMaster = null;
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setDesgnCode(rwsMasterData.rs.getString(1));
				rwsMaster.setDesgnName(rwsMasterData.rs.getString(2));
				designation.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The error at getDesignation in RwsMasterData=" + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return designation;
	}

	public static ArrayList getTSData(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		ArrayList datas = null;
		try {
			datas = new ArrayList();
			RwsMaster rwsMaster = null;
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(
					"select t.office,d.designation_acr,t.cost_lower_limit,t.cost_upper_limit from rws_est_ts_work_value_tbl t,rws_designation_tbl d where d.designation_code=t.designation_code");
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setOffice(rwsMasterData.rs.getString(1));
				rwsMaster.setDesignation(rwsMasterData.rs.getString(2));
				rwsMaster.setLowerLimit(rwsMasterData.rs.getString(3));
				rwsMaster.setUpperLimit(rwsMasterData.rs.getString(4));
				datas.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("Error at getTSData in RwsMasterData" + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return datas;
	}

	public static ArrayList getOffice(DataSource datasource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		ArrayList office = null;
		try {
			office = new ArrayList();
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn
					.prepareStatement("select distinct office from rws_est_ts_work_value_tbl");
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			RwsMaster rwsMaster = null;
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setOffice(rwsMasterData.rs.getString(1));
				office.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("error at getOffice in RwsMasterData=" + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return office;
	}

	public static ArrayList getLowerLimit(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		ArrayList lowerLimit = null;
		try {
			Debug.println("in getLowerLimit");

			lowerLimit = new ArrayList();
			RwsMaster rwsMaster = null;
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("select cost_lower_limit from rws_est_ts_work_value_tbl");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setLowerLimit(rwsMasterData.rs.getString(1));
				lowerLimit.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("Error in getLowerLimit" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return lowerLimit;
	}

	public static ArrayList getUpperLimit(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		ArrayList upperLimit = null;
		try {
			Debug.println("in getUpperLimit");

			upperLimit = new ArrayList();
			RwsMaster rwsMaster = null;
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("select cost_upper_limit from rws_est_ts_work_value_tbl");
			rwsMaster = new RwsMaster();
			while (rwsMasterData.rs.next()) {
				rwsMaster.setUpperLimit(rwsMasterData.rs.getString(1));
				upperLimit.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("Exception in getUpperLimit" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return upperLimit;
	}

	public static ArrayList getFromDates(String usr, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String query;
		ArrayList fromDate = new ArrayList();
		try {
			Debug.println("in getFromDates");

			if (usr == null || usr.equals("00")) {

				query = "select distinct to_char(access_date,'DD/MM/yy') as a1 from rws_log_tbl  order by substr(a1,7,8) desc,substr(a1,4,2) desc,substr(a1,1,2) desc";
			}
			// query = "select distinct to_char(access_date,'DD/MM/yy') from
			// rws_log_tbl order by to_char(access_date,'DD/MM/yy') desc";
			else {
				query = "select distinct to_char(access_date,'DD/MM/yy') as a1 from rws_log_tbl where user_id='" + usr
						+ "' order by substr(a1,7,8) desc,substr(a1,4,2) desc,substr(a1,1,2) desc";
			}
			Debug.println("query is " + query);
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(query);
			RwsMaster rwsMaster = null;
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setFromDate(rwsMasterData.rs.getString(1));
				Debug.println("RwsMaster fromDate" + rwsMaster.getFromDate());
				fromDate.add(rwsMaster);
			}

		} catch (Exception e) {
			Debug.println("Exception in GetDate in RwsMaster :" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}

		return fromDate;
	}

	public static ArrayList getToDates(String usr, String fromDate, DataSource dataSource) throws Exception {
		String query;
		ArrayList toDate = new ArrayList();
		RwsMasterData rwsMasterData = new RwsMasterData();
		Debug.println("started getToDates in RwsMasterData before try");
		try {
			Debug.println("in getToDates");

			Debug.println("started getToDates in RwsMasterData try started");

			// query = //"select distinct to_char(access_date,'DD/MM/yy') from
			// rws_log_tbl where to_date(ACCESS_DATE,'dd/mm/yy') >= to_Date('"
			// + fromDate + "','dd/mm/yy') order by
			// to_char(access_date,'DD/MM/yy') desc";
			if (fromDate != null && usr != null && usr.equals("00")) {
				query = "select distinct to_char(access_date,'DD/MM/yy') as a1 from rws_log_tbl where to_date(ACCESS_DATE,'dd/mm/yy') >= to_Date('"
						+ fromDate
						+ "','dd/mm/yy')  order by substr(a1,7,8) desc,substr(a1,4,2) desc,substr(a1,1,2) desc";
			} else {
				query = "select distinct to_char(access_date,'DD/MM/yy') as a1 from rws_log_tbl where to_date(ACCESS_DATE,'dd/mm/yy') >= to_Date('"
						+ fromDate + "','dd/mm/yy') and user_id='" + usr
						+ "' order by substr(a1,7,8) desc,substr(a1,4,2) desc,substr(a1,1,2) desc";
			}
			Debug.println("query is " + query);
			/*
			 * query="select unique(to_char(access_date,'dd/mm/yyyy')) from rws_log_tbl
			 * where to_date(ACCESS_DATE,'dd/mon/yyyy') >=
			 * to_Date('"+fromDate+"','dd/mm/yyyy')";
			 */

			/*
			 * query="select unique(to_Char(access_date,'dd/mm/yy')) from rws_log_tbl where
			 * to_Date(ACCESS_DATE,'dd/mon/yyyy') >= to_Date('"+fromDate+"','dd/mm/yyyy')";
			 */

			Debug.println("rwsMasterData.conn: " + rwsMasterData.conn);
			rwsMasterData.conn = RwsOffices.getConn();
			Debug.println("rwsMasterData.conn" + rwsMasterData.conn);
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(query);
			RwsMaster rwsMaster = null;
			// Debug.println("rwsMasterData.rs.next()
			// :"+rwsMasterData.rs.next());

			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setToDate(rwsMasterData.rs.getString(1));
				Debug.println("RwsMaster toDate" + rwsMaster.getToDate());
				toDate.add(rwsMaster);
			}

		} catch (Exception e) {
			Debug.println("Exception in getToDates in RwsMasterData :" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);

		}
		return toDate;
	}

	public static ArrayList getUserAudit(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		Debug.println("started getUserAudit in RwsMasterData before try");
		String toDate;
		String fromDate;
		String query = null;
		String user;
		ArrayList uaudit = new ArrayList();

		try {
			// String query;
			Debug.println("in getUserAudit");

			Debug.println("started getUserAudit in RwsMasterData try started");
			toDate = rwsMaster.getToDate();
			fromDate = rwsMaster.getFromDate();
			user = rwsMaster.getUserid();
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			if (user != null && !user.equals("00")) {

				if (fromDate.equals(toDate)) {
					query = "select distinct access_date,user_id,auth_type,access_time,module,page,address,host,browser from rws_log_tbl where to_date(access_date,'dd/mm/yy')=to_Date('"
							+ fromDate + "','dd/mm/yy') and substr(user_id,2,2) like substr('" + user
							+ "',2,2) order by access_date asc";
				} else {

					query = "select distinct access_date,user_id,auth_type,access_time,module,page,address,host,browser from rws_log_tbl where to_date(access_date,'dd/mm/yy') >= to_Date('"
							+ fromDate + "','dd/mm/yy') and to_date(access_date,'dd/mm/yy') <=to_Date('" + toDate
							+ "','dd/mm/yy')  and substr(user_id,2,2) like substr('" + user
							+ "',2,2) order by access_date asc";

				}
			} else if (user != null && user.equals("00")) {

				if (fromDate.equals(toDate)) {
					query = "select distinct access_date,user_id,auth_type,access_time,module,page,address,host,browser from rws_log_tbl where to_date(access_date,'dd/mm/yy')=to_Date('"
							+ fromDate + "','dd/mm/yy')  order by access_date asc";
				} else {

					query = "select distinct access_date,user_id,auth_type,access_time,module,page,address,host,browser from rws_log_tbl where to_date(access_date,'dd/mm/yy') >= to_Date('"
							+ fromDate + "','dd/mm/yy') and to_date(access_date,'dd/mm/yy') <=to_Date('" + toDate
							+ "','dd/mm/yy')  order by access_date asc";

				}
			}
			Debug.println("query is " + query);
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(query);

			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				// rwsMaster.setUserId(rwsMasterData.rs.getString("USER_ID"));
				/*
				 * Debug.println("RwsMaster setUserId" + rwsMaster.getUserId());
				 */
				rwsMaster.setUserId(rwsMasterData.rs.getString("user_id"));
				rwsMaster.setAuthType(rwsMasterData.rs.getString("AUTH_TYPE"));
				// rwsMaster.setAccessDate(rwsMasterData.rs.getString("ACCESS_DATE"));
				rwsMaster.setAccessDate(df.format(rwsMasterData.rs.getDate("ACCESS_DATE")));
				Debug.println("AccessDate" + rwsMaster.getAccessDate());
				rwsMaster.setAccessTime(rwsMasterData.rs.getString("ACCESS_TIME"));
				rwsMaster.setModule(rwsMasterData.rs.getString("MODULE"));
				rwsMaster.setPage(rwsMasterData.rs.getString("PAGE"));
				rwsMaster.setAddress(nic.watersoft.commons.Mask_IP_Address.FinalmaskString(rwsMasterData.rs.getString("ADDRESS")));
				//rwsMaster.setAddress(rwsMasterData.rs.getString("ADDRESS"));
				//rwsMaster.setHost(rwsMasterData.rs.getString("HOST"));
				rwsMaster.setHost(nic.watersoft.commons.Mask_IP_Address.FinalmaskString(rwsMasterData.rs.getString("HOST")));
				rwsMaster.setBrowser(rwsMasterData.rs.getString("BROWSER"));
				Debug.println("RwsMaster setBrowser" + rwsMaster.getBrowser());
				uaudit.add(rwsMaster);
			}

		} catch (Exception e) {
			Debug.println("Error in getUserAudit in RwsMasterData :" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}

		return uaudit;
	}

	public static int removeAssetSubCompPipeTypes(DataSource dataSource, ArrayList subComps, String code)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		Asset_PipeLine assetPipeline = new Asset_PipeLine();
		String query1 = "";
		String query = "";
		Statement stm = null;
//		Debug.println("subComps size=" + subComps.size());
		SubCompMetaData subCompMetaData = new SubCompMetaData(code);
		String subCompCode = subCompMetaData.getAssetSubCompTypeCode();
		try {
			String tabPrifix = "";
			String colName = "";
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			for (int i = 0; i < subComps.size(); i++) {
				assetPipeline = (Asset_PipeLine) subComps.get(i);
				if (subCompCode.equals("001"))
					query1 = "delete from rws_pumpingmain_pipes_tbl where pm_code='" + code + "' and pm_mat='"
							+ assetPipeline.getMaterial() + "' and pm_cla='" + assetPipeline.getPclass()
							+ "' and pm_dia=" + assetPipeline.getDiameter();

				if (subCompCode.equals("002"))
					query1 = "delete from rws_gravitymain_pipes_tbl where gm_code='" + code + "' and pm_mat='"
							+ assetPipeline.getMaterial() + "' and pm_cla='" + assetPipeline.getPclass()
							+ "' and pm_dia=" + assetPipeline.getDiameter();

				if (subCompCode.equals("003"))
					query1 = "delete from rws_distribution_pipes_tbl where distrisc_code='" + code + "' and dis_mat='"
							+ assetPipeline.getMaterial() + "' and dis_cla='" + assetPipeline.getPclass()
							+ "' and dis_dia=" + assetPipeline.getDiameter();

				rwsMasterData.stmt.addBatch(query1);
			}
			int[] updateCounts = rwsMasterData.stmt.executeBatch();
//			for (int j = 0; j < updateCounts.length; j++) {
//				System.err.print(j + "recode iS DELETED  ");
//			}
			rowCount = updateCounts.length;
			rwsMasterData.conn.commit();
		} catch (Exception e) {
			Debug.println("exception in removeAssetSubCompPipeTypes " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return rowCount;
	}

	public static int removeAssetSubComp(DataSource dataSource, String assetCode, String assetCompTypeCode,
			String assetSubCompTypeCode, String assetTypeCode, String opType, ArrayList subComps, String compType)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0;
		Asset_SubComponent assetSources = new Asset_SubComponent();
		Asset_HeadWorks assetHeadworks = new Asset_HeadWorks();
		Asset_PipeLine assetPipeline = new Asset_PipeLine();
		Asset_Reservior assetReservior = new Asset_Reservior();
		Asset_Pumpset assetPumpset = new Asset_Pumpset();
		String query1 = "";
		String query = "";
		Statement stm = null;
		try {
			String Tab_Prifix = "";
			if (assetTypeCode.equals("01"))
				Tab_Prifix = "RWS_AST_";
			else if (assetTypeCode.equals("02"))
				Tab_Prifix = "RWS_AST_";
			else if (assetTypeCode.equals("03"))
				Tab_Prifix = "RWS_AST_";
			else if (assetTypeCode.equals("09"))
				Tab_Prifix = "RWS_AST_";
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			stm = rwsMasterData.conn.createStatement();
			if (compType.equals("PumpSets")) {
				if (subComps != null) {
					if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
							|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("05")
							&& assetSubCompTypeCode.equals("001")) {
						for (int i = 0; i < subComps.size(); i++) {
							assetPumpset = (Asset_Pumpset) subComps.get(i);
							query1 = "delete from " + Tab_Prifix + "OTHERS_PARAM_TBL  where  OTHER_COMP_CODE  ='"
									+ assetPumpset.getOtherCompCode() + "'";
							rwsMasterData.stmt.addBatch(query1);
							query1 = "delete from RWS_ASSET_COMPONENT_IMAGE_TBL  where  ASSET_COMPONENT  ='"
									+ assetPumpset.getOtherCompCode() + "'";
							rwsMasterData.stmt.addBatch(query1);
						}

						int[] updateCounts = rwsMasterData.stmt.executeBatch();
//						for (int j = 0; j < updateCounts.length; j++) {
//							System.err.print(updateCounts[j] + " iS DELETED  ");
//						}
						rowCount = updateCounts.length;
						rwsMasterData.conn.commit();
						return rowCount;
					}

					if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
							|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("05")
							&& assetSubCompTypeCode.equals("002")) {
						for (int i = 0; i < subComps.size(); i++) {
							assetPumpset = (Asset_Pumpset) subComps.get(i);
							query1 = "delete from " + Tab_Prifix + "CHLORINATION_TBL where  CL_CODE  ='"
									+ assetPumpset.getOtherCompCode() + "'";
							rwsMasterData.stmt.addBatch(query1);
						}

						int[] updateCounts = rwsMasterData.stmt.executeBatch();
//						for (int j = 0; j < updateCounts.length; j++) {
//							System.err.print(updateCounts[j] + " iS DELETED  ");
//						}
						rowCount = updateCounts.length;
						rwsMasterData.conn.commit();
						return rowCount;
					}

					if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
							|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("05")
							&& assetSubCompTypeCode.equals("003")) {
						for (int i = 0; i < subComps.size(); i++) {
							assetPumpset = (Asset_Pumpset) subComps.get(i);
							query1 = "delete from " + Tab_Prifix + "OANDM_PARAM_TBL where  asset_code  ='" + assetCode
									+ "'";
							rwsMasterData.stmt.addBatch(query1);
							query1 = "delete from RWS_OHGLCI_HAB_LINK_TBL  where  SUBCOMP_CODE ='"
									+ assetPumpset.getOandmCode() + "'";
							rwsMasterData.stmt.addBatch(query1);
						}

						int[] updateCounts = rwsMasterData.stmt.executeBatch();
//						for (int j = 0; j < updateCounts.length; j++) {
//							System.err.print(updateCounts[j] + " iS DELETED  ");
//						}
						rowCount = updateCounts.length;
						rwsMasterData.conn.commit();
						return rowCount;
					}

					if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
							|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("01")
							&& assetSubCompTypeCode.equals("003")) {
						for (int i = 0; i < subComps.size(); i++) {
							assetPumpset = (Asset_Pumpset) subComps.get(i);
							query1 = "delete from " + Tab_Prifix + "SUBCOMP_PARAM_TBL  where  PUMP_CODE='"
									+ assetPumpset.getPumpCode() + "' AND ASSET_CODE='" + assetPumpset.getAssetCode()
									+ "'";
							rowCount = rwsMasterData.stmt.executeUpdate(query1);
						}
					}
					if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
							|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("06")
							&& assetSubCompTypeCode.equals("001")) {
						for (int i = 0; i < subComps.size(); i++) {
							assetPumpset = (Asset_Pumpset) subComps.get(i);
							query1 = "delete from " + Tab_Prifix + "SUBCOMP_PARAM_TBL  where  PUMP_CODE='"
									+ assetPumpset.getPumpCode() + "' AND ASSET_CODE='" + assetPumpset.getAssetCode()
									+ "'";
							rowCount = rwsMasterData.stmt.executeUpdate(query1);
						}
					}
				}
			}
			if (assetTypeCode.equals("04") && assetCompTypeCode.equals("01") && assetSubCompTypeCode.equals("001")) {
				assetSources = (Asset_SubComponent) subComps.get(0);
				query1 = "DELETE FROM RWS_HP_SUBCOMP_PARAM_TBL   where ASSET_CODE='" + assetCode + "' and HP_CODE ='"
						+ assetSources.getHpCode() + "'";
				rowCount = rwsMasterData.stmt.executeUpdate(query1);
				rwsMasterData.conn.commit();
				query1 = "delete from RWS_ASSET_COMPONENT_IMAGE_TBL  where  ASSET_COMPONENT  ='"
						+ assetSources.getHpCode() + "'";
				rwsMasterData.stmt.addBatch(query1);
				rowCount = rwsMasterData.stmt.executeUpdate(query1);
				rwsMasterData.conn.commit();

			}
			if (compType.equals("Headworks")) {
				if (subComps != null) {
					if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
							|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("02")
							&& assetSubCompTypeCode.equals("001")) {
						for (int i = 0; i < subComps.size(); i++) {
							assetHeadworks = (Asset_HeadWorks) subComps.get(i);
							query1 = "delete from " + Tab_Prifix + "RW_COLLWELL_PARAM_TBL  " + "where "
									+ " RW_COLLWELL_CODE  ='" + assetHeadworks.getCollectionWellCode() + "'";
							rwsMasterData.stmt.addBatch(query1);
						}
					} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
							|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("02")
							&& assetSubCompTypeCode.equals("002")) {
						for (int i = 0; i < subComps.size(); i++) {
							assetHeadworks = (Asset_HeadWorks) subComps.get(i);
							query1 = "delete from " + Tab_Prifix + "SS_SC_PARAM_TBL  where " + "asset_code='"
									+ assetHeadworks.getAssetCode() + "' and" + " sssc_code ='"
									+ assetHeadworks.getSsTankCode() + "'";
							rwsMasterData.stmt.addBatch(query1);
						}
					} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
							|| assetTypeCode.equals("09"))
							&& (assetSubCompTypeCode.equals("003") || assetSubCompTypeCode.equals("004")
									|| assetSubCompTypeCode.equals("010") || assetSubCompTypeCode.equals("011"))) {
						for (int i = 0; i < subComps.size(); i++) {
							assetHeadworks = (Asset_HeadWorks) subComps.get(i);
							query1 = "delete from " + Tab_Prifix + "WTP_SC_PARAM_TBL   where  " + "WTPSC_CODE ='"
									+ assetHeadworks.getWtpCode() + "'";
							rwsMasterData.stmt.addBatch(query1);
						}
					} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
							|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("02")
							&& assetSubCompTypeCode.equals("005")) {
						for (int i = 0; i < subComps.size(); i++) {
							assetHeadworks = (Asset_HeadWorks) subComps.get(i);
							query1 = "delete from " + Tab_Prifix + "SUMP_M_SC_PARAM_TBL   where "
									+ " SUMPCODE ='" + assetHeadworks.getSumpCode() + "'";
							rwsMasterData.stmt.addBatch(query1);
						}
					} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
							|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("02")
							&& assetSubCompTypeCode.equals("006")) {
						for (int i = 0; i < subComps.size(); i++) {
							assetHeadworks = (Asset_HeadWorks) subComps.get(i);
							query1 = "delete from " + Tab_Prifix + "FP_BRIDGE_PARAM_TBL   where "
									+ " BRIDGE_CODE  ='" + assetHeadworks.getBridgeCode() + "'";
							rwsMasterData.stmt.addBatch(query1);
						}
					} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
							|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("02")
							&& assetSubCompTypeCode.equals("007")) {
						for (int i = 0; i < subComps.size(); i++) {
							assetHeadworks = (Asset_HeadWorks) subComps.get(i);
							query1 = "delete from " + Tab_Prifix + "PUMPHOUSE_PARAM_TBL  where "
									+ " PUMPHOUSE_CODE  ='" + assetHeadworks.getPumpHouseCode() + "'";
							rwsMasterData.stmt.addBatch(query1);
						}
					} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
							|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("02")
							&& assetSubCompTypeCode.equals("008")) {
						for (int i = 0; i < subComps.size(); i++) {
							assetHeadworks = (Asset_HeadWorks) subComps.get(i);
							query1 = "delete from " + Tab_Prifix + "WATCHMAN_PARAM_TBL where "
									+ " WATCHMAN_CODE ='" + assetHeadworks.getWatchManCode() + "'";
							rwsMasterData.stmt.addBatch(query1);
						}
					} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
							|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("02")
							&& assetSubCompTypeCode.equals("009")) {
						for (int i = 0; i < subComps.size(); i++) {
							assetHeadworks = (Asset_HeadWorks) subComps.get(i);
							query1 = "delete from " + Tab_Prifix + "CW_COLLWELL_PARAM_TBL where "
									+ " CW_COLLWELL_CODE  ='" + assetHeadworks.getCollectionWellCode() + "'";
							rwsMasterData.stmt.addBatch(query1);
						}

					}

					int[] updateCounts = rwsMasterData.stmt.executeBatch();
//					for (int j = 0; j < updateCounts.length; j++) {
//						System.err.print(j + "recode iS DELETED  ");
//					}
					rowCount = updateCounts.length;
					rwsMasterData.conn.commit();
				}
			}
			if (compType.equals("Reservoirs")) {
				if (subComps != null) {
					if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
							|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("04")
							&& assetSubCompTypeCode.equals("001")) {
						for (int i = 0; i < subComps.size(); i++) {
							assetReservior = (Asset_Reservior) subComps.get(i);
							query1 = "delete from  " + Tab_Prifix + "Ohsr_SC_PARAM_TBL  where "
									+ " Ohsr_code ='" + assetReservior.getOhsrCode() + "'";
							rwsMasterData.stmt.addBatch(query1);

							query1 = "delete from  RWS_OHGLCI_HAB_LINK_TBL   where "
									+ " SUBCOMP_CODE ='" + assetReservior.getOhsrCode() + "'";
							rwsMasterData.stmt.addBatch(query1);
							query1 = "delete from RWS_ASSET_COMPONENT_IMAGE_TBL  where  ASSET_COMPONENT  ='"
									+ assetReservior.getOhsrCode() + "'";
							rwsMasterData.stmt.addBatch(query1);
						}

					} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
							|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("04")
							&& assetSubCompTypeCode.equals("002")) {
						for (int i = 0; i < subComps.size(); i++) {
							assetReservior = (Asset_Reservior) subComps.get(i);
							query1 = "delete from  " + Tab_Prifix + "Ohbr_SC_PARAM_TBL  where "
									+ " Ohbr_code ='" + assetReservior.getOhbrCode() + "'";
							rwsMasterData.stmt.addBatch(query1);
							query1 = "delete from RWS_ASSET_COMPONENT_IMAGE_TBL  where  ASSET_COMPONENT  ='"
									+ assetReservior.getOhbrCode() + "'";
							rwsMasterData.stmt.addBatch(query1);

						}
					}
					if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
							|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("04")
							&& assetSubCompTypeCode.equals("003")) {
						for (int i = 0; i < subComps.size(); i++) {
							assetReservior = (Asset_Reservior) subComps.get(i);
							query1 = "delete from  " + Tab_Prifix + "GLSR_SC_PARAM_TBL  where "
									+ " glsr_code ='" + assetReservior.getGlsrCode() + "'";
							rwsMasterData.stmt.addBatch(query1);

							query1 = "delete from  RWS_OHGLCI_HAB_LINK_TBL   where "
									+ " SUBCOMP_CODE ='" + assetReservior.getGlsrCode() + "'";
							rwsMasterData.stmt.addBatch(query1);
							query1 = "delete from RWS_ASSET_COMPONENT_IMAGE_TBL  where  ASSET_COMPONENT  ='"
									+ assetReservior.getGlsrCode() + "'";
							rwsMasterData.stmt.addBatch(query1);

						}
					} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
							|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("04")
							&& assetSubCompTypeCode.equals("004")) {
						for (int i = 0; i < subComps.size(); i++) {
							assetReservior = (Asset_Reservior) subComps.get(i);
							query1 = "delete from  " + Tab_Prifix + "Glbr_SC_PARAM_TBL  where "
									+ " Glbr_code ='" + assetReservior.getGlbrCode() + "'";
							rwsMasterData.stmt.addBatch(query1);
							query1 = "delete from RWS_ASSET_COMPONENT_IMAGE_TBL  where  ASSET_COMPONENT  ='"
									+ assetReservior.getGlbrCode() + "'";
							rwsMasterData.stmt.addBatch(query1);
						}
					} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
							|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("04")
							&& assetSubCompTypeCode.equals("005")) {
						for (int i = 0; i < subComps.size(); i++) {
							assetReservior = (Asset_Reservior) subComps.get(i);
							query1 = "delete from " + Tab_Prifix + "BPT_PARAM_TBL   where "
									+ " BPT_CODE   ='" + assetReservior.getBptCode() + "'";
							rwsMasterData.stmt.addBatch(query1);
						}
					} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
							|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("04")
							&& assetSubCompTypeCode.equals("006")) {
						for (int i = 0; i < subComps.size(); i++) {
							assetReservior = (Asset_Reservior) subComps.get(i);
							query1 = "delete from " + Tab_Prifix + "CIS_SC_PARAM_TBL  where "
									+ " CISSC_CODE    ='" + assetReservior.getCisCode() + "'";
							rwsMasterData.stmt.addBatch(query1);

							query1 = "delete from  RWS_OHGLCI_HAB_LINK_TBL   where "
									+ " SUBCOMP_CODE ='" + assetReservior.getCisCode() + "'";
							rwsMasterData.stmt.addBatch(query1);
							query1 = "delete from RWS_ASSET_COMPONENT_IMAGE_TBL  where  ASSET_COMPONENT  ='"
									+ assetReservior.getCisCode() + "'";
							rwsMasterData.stmt.addBatch(query1);
						}
					} else if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
							|| assetTypeCode.equals("09")) && assetCompTypeCode.equals("04")
							&& assetSubCompTypeCode.equals("007")) {
						for (int i = 0; i < subComps.size(); i++) {
							assetReservior = (Asset_Reservior) subComps.get(i);
							query1 = "delete from " + Tab_Prifix + "STANDPOST_TBL  where "
									+ " STANDPOST_CODE    ='" + assetReservior.getStandPostCode() + "'";
							rwsMasterData.stmt.addBatch(query1);
							query1 = "delete from RWS_ASSET_COMPONENT_IMAGE_TBL  where  ASSET_COMPONENT  ='"
									+ assetReservior.getStandPostCode() + "'";
							rwsMasterData.stmt.addBatch(query1);
						}
					}

					int[] updateCounts = rwsMasterData.stmt.executeBatch();
					rowCount = updateCounts.length;
					rwsMasterData.conn.commit();

				}

			}
		} catch (Exception e) {
			Debug.println("Exception at removeAssetSubComp in RwsMasterData : " + e.getMessage());
		} finally {
			rwsMasterData.closeAll();
		}

		return rowCount;
	}

	public static RwsMaster insertAssetSubCompPipeTypeParams(DataSource dataSource, String code, ArrayList subComps) {
		Asset_PipeLine assetPipeline = new Asset_PipeLine();
		String query1 = "";
		String query = "";
		int rowCount = 0;
		Statement stm = null;
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = new RwsMaster();
		String message = "";
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			stm = rwsMasterData.conn.createStatement();
			rwsMasterData.conn.setAutoCommit(false);
			// Debug.println("entering for");
			SubCompMetaData subCompMetaData = new SubCompMetaData(code);
			String subCompCode = subCompMetaData.getAssetSubCompTypeCode();
			for (int i = 0; i < subComps.size(); i++) {
				assetPipeline = (Asset_PipeLine) subComps.get(i);
				String pipeClass = assetPipeline.getPclass();
				String pipeMaterial = assetPipeline.getMaterial();
				String rowId = assetPipeline.getRowId();
				float pipeDiameter = Float.parseFloat(formatString(assetPipeline.getDiameter()));
				float pipeLength = Float.parseFloat(formatString(assetPipeline.getLength()));
				String selectQuery = null;
				if (rowId == null || rowId.equals("")) {
					if (subCompCode.equals("001"))
						query = "insert into rws_pumpingmain_pipes_tbl(pm_code,pm_mat,pm_cla,pm_len,pm_dia)"
								+ " values('" + code + "','" + pipeMaterial + "','" + pipeClass + "',nvl('" + pipeLength
								+ "',0)," + pipeDiameter + ")";
					else if (subCompCode.equals("002"))
						query = "insert into rws_gravitymain_pipes_tbl(gm_code,pm_mat,pm_cla,pm_len,pm_dia)"
								+ " values('" + code + "','" + pipeMaterial + "','" + pipeClass + "',nvl('" + pipeLength
								+ "',0)," + pipeDiameter + ")";
					else if (subCompCode.equals("003"))
						query = "insert into rws_distribution_pipes_tbl(distrisc_code,dis_mat,dis_cla,dis_len,dis_dia)"
								+ " values('" + code + "','" + pipeMaterial + "','" + pipeClass + "',nvl('" + pipeLength
								+ "',0)," + pipeDiameter + ")";
					rwsMasterData.stmt.addBatch(query);
					rwsMaster.setMessage("inserted");
				} else {
					if (subCompCode.equals("001"))
						query = "update  rws_pumpingmain_pipes_tbl set pm_code='" + code + "',pm_mat='" + pipeMaterial
								+ "',pm_cla='" + pipeClass + "',pm_len=" + "nvl('" + pipeLength + "',0),pm_dia="
								+ pipeDiameter + " where rowid='" + rowId + "'";
					else if (subCompCode.equals("002"))
						query = "update  rws_gravitymain_pipes_tbl set gm_code='" + code + "',pm_mat='" + pipeMaterial
								+ "',pm_cla='" + pipeClass + "',pm_len=" + "nvl('" + pipeLength + "',0),pm_dia="
								+ pipeDiameter + " where rowid='" + rowId + "'";
					else if (subCompCode.equals("003"))
						query = "update  rws_distribution_pipes_tbl set distrisc_code='" + code + "',dis_mat='"
								+ pipeMaterial + "',dis_cla='" + pipeClass + "',dis_len=" + "nvl('" + pipeLength
								+ "',0),dis_dia=" + pipeDiameter + " where rowid='" + rowId + "'";
					rwsMasterData.stmt.addBatch(query);
					rwsMaster.setMessage("updated");

				}
			}
			int[] updateCounts = rwsMasterData.stmt.executeBatch();
			rowCount = updateCounts.length;
			if (rowCount > 0)
				rwsMasterData.conn.commit();
		} catch (Exception e) {
			Debug.println("Exception in insertAssetSubCompPipeTypeParams " + e);
		} finally {
			try {
				rwsMasterData.closeAll();
			} catch (Exception e) {
				Debug.println("Exception in closing connections in insertAssetSubCompParams :" + e);
			}
		}
		rwsMaster.setNoOfRecords(rowCount + "");
		return rwsMaster;

	}

	public static ArrayList getPipeMaterialList(DataSource dataSource, String code) throws Exception {
		ArrayList subcompParams = new ArrayList();
		RwsMasterData rwsMasterData = new RwsMasterData();
		String query = "";
		rwsMasterData.stmt = null;
		SubCompMetaData subCompMetaData = new SubCompMetaData(code);
		String subCompCode = subCompMetaData.getAssetSubCompTypeCode();
		try {
			CommonLists commonLists = new CommonLists();
			Asset_PipeLine assetPipeline;
			rwsMasterData.conn = RwsOffices.getConn();
			if (subCompCode.equals("001")) {
				query = "select p.*,rowid from rws_pumpingmain_pipes_tbl p where PM_CODE=?";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, code); 
			}else if (subCompCode.equals("002")) {
				query = "select p.*,rowid from rws_gravitymain_pipes_tbl p where GM_CODE=?";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, code); 
			}else if (subCompCode.equals("003")) {
				query = "select p.*,rowid from rws_distribution_pipes_tbl p where DISTRISC_CODE=?";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, code); 
			}
			if (subCompCode.equals("001") || subCompCode.equals("002")) {
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				while (rwsMasterData.rs.next()) {
					assetPipeline = new Asset_PipeLine();
					assetPipeline.setMaterial(rwsMasterData.rs.getString("pm_mat"));
					assetPipeline.setPclass(rwsMasterData.rs.getString("pm_cla"));
					assetPipeline.setDiameter(rwsMasterData.rs.getInt("pm_dia") + "");
					assetPipeline.setLength(rwsMasterData.rs.getInt("pm_len") + "");
					assetPipeline.setRowId(rwsMasterData.rs.getString("rowid"));
					subcompParams.add(assetPipeline);
				}
			}
			if (subCompCode.equals("003")) {
				// Debug.println("query in getPipeMaterialList is " + query);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				while (rwsMasterData.rs.next()) {
					assetPipeline = new Asset_PipeLine();
					assetPipeline.setMaterial(rwsMasterData.rs.getString("dis_mat"));
					assetPipeline.setPclass(rwsMasterData.rs.getString("dis_cla"));
					assetPipeline.setDiameter(rwsMasterData.rs.getInt("dis_dia") + "");
					assetPipeline.setLength(rwsMasterData.rs.getInt("dis_len") + "");
					assetPipeline.setRowId(rwsMasterData.rs.getString("rowid"));
					subcompParams.add(assetPipeline);
				}
			}
		} catch (Exception e) {
			Debug.println("Excetion at getPipeMaterialList in RwsMasterData : " + e);
		//	e.printStackTrace();
		} finally {
			rwsMasterData.closeAll();
		}
		return subcompParams;
	}

	public static int deletePipeLineSubComp(DataSource dataSource, String code, String assetTypeCode,
			String assetCompTypeCode, String assetSubCompTypeCode) throws Exception {
		int rowCount = 0;
		String TabPrifix = "";
		String colName = "";
		String pipesTbl = "";
		String pipesTblColName = "";
		RwsMasterData rwsMasterData = new RwsMasterData();
		if (assetTypeCode.equals("01"))
			TabPrifix = "RWS_AST_";
		else if (assetTypeCode.equals("02"))
			TabPrifix = "RWS_AST_";
		else if (assetTypeCode.equals("03"))
			TabPrifix = "RWS_AST_";
		else if (assetTypeCode.equals("09"))
			TabPrifix = "RWS_AST_";
		if (assetCompTypeCode.equals("03") && assetSubCompTypeCode.equals("001")) {
			TabPrifix = TabPrifix + "PUMPINGMAIN_TBL";
			colName = "PUMPINGMAIN_CODE";
			pipesTbl = "rws_pumpingmain_pipes_tbl";
			pipesTblColName = "PM_CODE";
		} else if (assetCompTypeCode.equals("03") && assetSubCompTypeCode.equals("002")) {
			TabPrifix = TabPrifix + "GRAVITYMAIN_TBL";
			colName = "GRAVITYMAIN_CODE";
			pipesTbl = "rws_gravitymain_pipes_tbl";
			pipesTblColName = "GM_CODE";
		} else if (assetCompTypeCode.equals("03") && assetSubCompTypeCode.equals("003")) {
			TabPrifix = TabPrifix + "DISTRI_SC_PARAM_TBL ";
			colName = "DISTRISC_CODE";
			pipesTbl = "rws_distribution_pipes_tbl";
			pipesTblColName = "DISTRISC_CODE";
		}

		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			Asset_PipeLine assetPipeline;
			rwsMasterData.conn.setAutoCommit(false);
			// Debug.println("entering for");

			String deleteQuery = "delete from " + TabPrifix + " where " + colName + "='" + code + "'";
			// Debug.println("select query is " + deleteQuery);
			rwsMasterData.stmt.addBatch(deleteQuery);

			deleteQuery = "DELETE FROM " + pipesTbl + " where " + pipesTblColName + "='" + code + "'";

			// Debug.println("query1123=" + deleteQuery);
			rwsMasterData.stmt.addBatch(deleteQuery);

			int[] updateCounts = rwsMasterData.stmt.executeBatch();
			rowCount = updateCounts.length;
			if (rowCount > 0)
				rwsMasterData.conn.commit();
		} catch (Exception e) {
			Debug.println("Exception in deletePipeLineSubComp in RwsMasterData :  " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return rowCount;
	}

	
	public static ArrayList getAssetNextSubCompBwParams(DataSource dataSource, String assetCode, String assetTypeCode,
			String assetCompCode, String assetSubCompCode, String habCode, String pumpCode, String opType)throws Exception{
		RwsMasterData rwsMasterData = new RwsMasterData();
		rwsMasterData.conn = null;
		rwsMasterData.stmt = null;
		rwsMasterData.rs = null;
		ArrayList parameters = new ArrayList();
		Asset_PipeLine asset_pipeline = new Asset_PipeLine();
		String query = "select HP.LOCATION ,HP.PLATFORM_EXISTING,HP.DIAMETER ,HP.CASING ,HP.GEN_CONDITION ,HP.GI_NO ,HP.PAINTED,HP.STATIC_WL  ,"
				+ "HP.SUMMER_WL ,HP.P_COND ,HP.DRY_DURING,HP.SER_NO ,HP.SER_HRS ,HP.REPAIRS ,HP.PLATFORM_CONDITION ,HP.DRAIN ,"
				+ "HP.DRAIN_CONDITION ,HP.DRAIN_SD ,HP.DRAIN_LP ,HP.HYGIENE ,HP.AVG_TIME ,HP.P_YEILD ,HP.PYEILD_LOCAL ,HP.PERIOD ,"
				+ "HP.ASSET_CODE,HP.hp_code,HP.PIPE_LENGTH,HP.depth,HP.QUALITY_AFFECTED, HP.FLOURIDE,HP.BRAKISH ,HP.IRON,HP.cont_others_type,"
				+ "HP.CONT_OTHERS_PER  from  RWS_HP_SUBCOMP_PARAM_TBL HP,RWS_ASSET_MAST_TBL A where HP.ASSET_CODE=A.ASSET_CODE   and "
				+ "HP.asset_code=? order by HP_CODE";
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query, ResultSet.TYPE_SCROLL_INSENSITIVE,
					ResultSet.CONCUR_UPDATABLE);
			rwsMasterData.pstmt.setString(1, assetCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			RwsMaster rwsMaster = null;
			asset_pipeline = null;
			rwsMasterData.rs.last();
			int rowCount = rwsMasterData.rs.getRow();
			rwsMasterData.rs.beforeFirst();
			if (opType.equalsIgnoreCase("first")) {
				if (rwsMasterData.rs.first()) {
					rwsMaster = getBorewellFromRs(dataSource, rwsMasterData.rs);
					rwsMaster.setRowCount(rowCount);
					rwsMaster.setCurrentRow(rwsMasterData.rs.getRow());
					if (rwsMasterData.rs.next())
						rwsMaster.setIsLast("false");
					else
						rwsMaster.setIsLast("true");
					parameters.add(rwsMaster);
				}
			}
			if (opType.equalsIgnoreCase("last")) {
				if (rwsMasterData.rs.last()) {
					rwsMaster = null;
					rwsMaster = getBorewellFromRs(dataSource, rwsMasterData.rs);
					rwsMaster.setRowCount(rowCount);
					rwsMaster.setCurrentRow(rwsMasterData.rs.getRow());
					rwsMaster.setIsLast("true");
					parameters.add(rwsMaster);
				}

			}
			if (opType.equalsIgnoreCase("previous") || opType.equalsIgnoreCase("next")) {
				while (rwsMasterData.rs.next()) {
					String code = rwsMasterData.rs.getString("HP_CODE");
					if (code.equals(pumpCode))
						break;
				}
			}
			if (opType.equalsIgnoreCase("previous")) {
				if (rwsMasterData.rs.previous()) {
					rwsMaster = null;
					rwsMaster = getBorewellFromRs(dataSource, rwsMasterData.rs);
					rwsMaster.setRowCount(rowCount);
					rwsMaster.setCurrentRow(rwsMasterData.rs.getRow());
					rwsMaster.setIsLast("false");
					parameters.add(rwsMaster);
					if (rwsMasterData.rs.previous()) {
						rwsMaster.setIsLast("false");
					} else {
						rwsMaster.setIsLast("true");
					}
				} else {
					asset_pipeline.setIsLast("true");
				}
			}

			if (opType.equalsIgnoreCase("next")) {
				if (rwsMasterData.rs.next()) {
					rwsMaster = null;
					rwsMaster = getBorewellFromRs(dataSource, rwsMasterData.rs);
					rwsMaster.setCurrentRow(rwsMasterData.rs.getRow());
					rwsMaster.setRowCount(rowCount);
					if (rwsMasterData.rs.next()) {
						rwsMaster.setIsLast("false");
					} else {
						rwsMaster.setIsLast("true");
					}
					parameters.add(rwsMaster);
				} else {
					rwsMaster = new RwsMaster();
					rwsMaster.setCurrentRow(rwsMasterData.rs.getRow());
					rwsMaster.setRowCount(rowCount);
					rwsMaster.setIsLast("true");
				}
			}
		} catch (Exception e) {
			Debug.println("Exception in Next of 009 :" + e);
		} finally {
				rwsMasterData.closeAll();
		}

		return parameters;
	}

	public static ArrayList getAssetNextSubCompParams(DataSource dataSource, String assetCode, String assetTypeCode,
			String assetCompCode, String assetSubCompCode, String habCode, String pumpCode, String opType) throws Exception{
		RwsMasterData rwsMasterData = new RwsMasterData();
		rwsMasterData.conn = null;
		rwsMasterData.stmt = null;
		rwsMasterData.rs = null;
		ArrayList parameters = new ArrayList();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			String query = "";
			String Tab_Prifix = "";
			if (assetTypeCode.equals("01"))
				Tab_Prifix = "RWS_AST_";
			else if (assetTypeCode.equals("02"))
				Tab_Prifix = "RWS_AST_";
			else if (assetTypeCode.equals("03"))
				Tab_Prifix = "RWS_AST_";
			else if (assetTypeCode.equals("09"))
				Tab_Prifix = "RWS_AST_";
			if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) && assetCompCode.equals("06") && assetSubCompCode.equals("001")) {
				Asset_Pumpset asset_pumpset = new Asset_Pumpset();

				query = "select DT.ASSET_CODE,PUMP_CODE,PUMP_MAKE,PUMP_CPTY,PUMP_TYPE,"
						+ "YEAR_COMM,HR_RUN,USAGE,DESIGNED_LPM,DESIGNED_HEAD,"
						+ "decode(CONTROL_PANEL,'Y','YES','N','NO','YES','YES','NO','NO')"
						+ "control_panel,LOW_VOLT_PROB,POWER_AVAIL_PER_DAY,"
						+ "FEAS_URBAN_LINE,COST,URBAN_LINE_DISTANCE,SUGGESTIONS,"
						+ "DT.HAB_CODE,DT.LOCATION,FEEDER,GENERATOR_EXISTING,GENERATOR_CAPACITY,GENERATOR_WORKING,dt.latitude,"
						+ "dt.longitude,dt.elevation,dt.way_point from "
						+ Tab_Prifix + "SUBCOMP_PARAM_TBL DT"
						+ ", RWS_ASSET_MAST_TBL A where DT.ASSET_CODE=A.ASSET_CODE "
						+ " and DT.asset_code=? order by PUMP_CODE";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query,ResultSet.TYPE_SCROLL_INSENSITIVE,
						ResultSet.CONCUR_UPDATABLE);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				rwsMasterData.rs.last();
				int rowCount = rwsMasterData.rs.getRow();
				rwsMasterData.rs.beforeFirst();
				if (opType.equalsIgnoreCase("first")) {
					if (rwsMasterData.rs.first()) {
						asset_pumpset = new Asset_Pumpset();
						asset_pumpset = getPumpsetsFromRs(dataSource, rwsMasterData.rs);
						asset_pumpset.setRowCount(rowCount);
						asset_pumpset.setCurrentRow(rwsMasterData.rs.getRow());
						asset_pumpset.setIsLast("false");
						parameters.add(asset_pumpset);
					} 
				}
				if (opType.equalsIgnoreCase("last")) {
					if (rwsMasterData.rs.last()) {
						asset_pumpset = new Asset_Pumpset();
						asset_pumpset = getPumpsetsFromRs(dataSource, rwsMasterData.rs);
						asset_pumpset.setIsLast("true");
						asset_pumpset.setRowCount(rowCount);
						asset_pumpset.setCurrentRow(rwsMasterData.rs.getRow());
						parameters.add(asset_pumpset);
					}
				}
				if (opType.equalsIgnoreCase("previous") || opType.equalsIgnoreCase("next")) {
					while (rwsMasterData.rs.next()) {
						String code = rwsMasterData.rs.getString("PUMP_CODE");
						if (code.equals(pumpCode))
							break;
					}
				}
				if (opType.equalsIgnoreCase("previous")) {
					if (rwsMasterData.rs.previous()) {
						asset_pumpset = new Asset_Pumpset();
						asset_pumpset = getPumpsetsFromRs(dataSource, rwsMasterData.rs);
						asset_pumpset.setIsLast("false");
						parameters.add(asset_pumpset);
						asset_pumpset.setRowCount(rowCount);
						asset_pumpset.setCurrentRow(rwsMasterData.rs.getRow());
						if (rwsMasterData.rs.previous()) {
							asset_pumpset.setIsLast("false");
						} else {
							asset_pumpset.setIsLast("true");
						}
					} else {
						asset_pumpset.setIsLast("true");
					}
				}
				if (opType.equalsIgnoreCase("next")) {
					if (rwsMasterData.rs.next()) {
						asset_pumpset = new Asset_Pumpset();
						asset_pumpset = getPumpsetsFromRs(dataSource, rwsMasterData.rs);
						asset_pumpset.setRowCount(rowCount);
						asset_pumpset.setCurrentRow(rwsMasterData.rs.getRow());
						if (rwsMasterData.rs.next())
							asset_pumpset.setIsLast("false");
						else {
							asset_pumpset.setIsLast("true");
						}
						parameters.add(asset_pumpset);
					} else {
						asset_pumpset = new Asset_Pumpset();
						asset_pumpset.setIsLast("true");
					}
				}
			}
			if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) && assetCompCode.equals("03") && assetSubCompCode.equals("001")) {
				Asset_PipeLine asset_pipeline = new Asset_PipeLine();
				query = "select * from  " + Tab_Prifix + "PUMPINGMAIN_TBL CP,"
						+ "RWS_ASSET_MAST_TBL A where CP.ASSET_CODE=A.ASSET_CODE "
						+ "  and CP.asset_code=? order by PUMPINGMAIN_CODE";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query,ResultSet.TYPE_SCROLL_INSENSITIVE,
						ResultSet.CONCUR_UPDATABLE);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				asset_pipeline = null;
				rwsMasterData.rs.last();
				int rowCount = rwsMasterData.rs.getRow();
				rwsMasterData.rs.beforeFirst();
				if (opType.equalsIgnoreCase("first")) {
					if (rwsMasterData.rs.first()) {
						asset_pipeline = getPumpingMainFromRs(dataSource, rwsMasterData.rs);
						asset_pipeline.setRowCount(rowCount);
						asset_pipeline.setCurrentRow(rwsMasterData.rs.getRow());

						if (rwsMasterData.rs.next())
							asset_pipeline.setIsLast("false");
						else
							asset_pipeline.setIsLast("true");
						parameters.add(asset_pipeline);
					}
				}
				if (opType.equalsIgnoreCase("last")) {

					if (rwsMasterData.rs.last()) {
						asset_pipeline = null;
						asset_pipeline = getPumpingMainFromRs(dataSource, rwsMasterData.rs);
						asset_pipeline.setRowCount(rowCount);
						asset_pipeline.setCurrentRow(rwsMasterData.rs.getRow());
						asset_pipeline.setIsLast("true");
						parameters.add(asset_pipeline);
					}
				}
				if (opType.equalsIgnoreCase("previous") || opType.equalsIgnoreCase("next")) {
					while (rwsMasterData.rs.next()) {
						String code = rwsMasterData.rs.getString("PUMPINGMAIN_CODE");
						if (code.equals(pumpCode))
							break;
					}
				}
				if (opType.equalsIgnoreCase("previous")) {
					if (rwsMasterData.rs.previous()) {
						asset_pipeline = null;
						asset_pipeline = getPumpingMainFromRs(dataSource, rwsMasterData.rs);
						asset_pipeline.setRowCount(rowCount);
						asset_pipeline.setCurrentRow(rwsMasterData.rs.getRow());
						asset_pipeline.setIsLast("false");
						parameters.add(asset_pipeline);
						if (rwsMasterData.rs.previous()) {
							asset_pipeline.setIsLast("false");
						} else {
							asset_pipeline.setIsLast("true");
						}
					} else {
						asset_pipeline.setIsLast("true");
					}
				}

				if (opType.equalsIgnoreCase("next")) {
					if (rwsMasterData.rs.next()) {
						asset_pipeline = null;
						asset_pipeline = getPumpingMainFromRs(dataSource, rwsMasterData.rs);
						asset_pipeline.setCurrentRow(rwsMasterData.rs.getRow());
						asset_pipeline.setRowCount(rowCount);
						if (rwsMasterData.rs.next()) {
							asset_pipeline.setIsLast("false");
						} else {
							asset_pipeline.setIsLast("true");
						}
						parameters.add(asset_pipeline);

					} else {
						asset_pipeline = new Asset_PipeLine();
						asset_pipeline.setCurrentRow(rwsMasterData.rs.getRow());
						asset_pipeline.setRowCount(rowCount);
						asset_pipeline.setIsLast("true");
					}
				}
			}
			if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) && assetCompCode.equals("03") && assetSubCompCode.equals("002")) {
				Asset_PipeLine asset_pipeline = new Asset_PipeLine();
				query = "select * from  " + Tab_Prifix + "GRAVITYMAIN_TBL CP,"
						+ "RWS_ASSET_MAST_TBL A where CP.ASSET_CODE=A.ASSET_CODE "
						+ "  and CP.asset_code=? order by GRAVITYMAIN_CODE";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query,ResultSet.TYPE_SCROLL_INSENSITIVE,
						ResultSet.CONCUR_UPDATABLE);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				rwsMasterData.rs.last();
				int rowCount = rwsMasterData.rs.getRow();
				rwsMasterData.rs.beforeFirst();
				asset_pipeline = null;
				if (opType.equalsIgnoreCase("first") && rwsMasterData.rs.first()) {
					asset_pipeline = getGravityMainFromRs(dataSource, rwsMasterData.rs);
					asset_pipeline.setRowCount(rowCount);
					asset_pipeline.setCurrentRow(rwsMasterData.rs.getRow());
					parameters.add(asset_pipeline);
					if (rwsMasterData.rs.next())
						asset_pipeline.setIsLast("false");
					else
						asset_pipeline.setIsLast("true");

				}
				if (opType.equalsIgnoreCase("last") && rwsMasterData.rs.last()) {
					asset_pipeline = getGravityMainFromRs(dataSource, rwsMasterData.rs);
					asset_pipeline.setRowCount(rowCount);
					asset_pipeline.setCurrentRow(rwsMasterData.rs.getRow());
					parameters.add(asset_pipeline);
					asset_pipeline.setIsLast("true");
				}
				if (opType.equalsIgnoreCase("previous") || opType.equalsIgnoreCase("next")) {
					while (rwsMasterData.rs.next()) {
						String code = rwsMasterData.rs.getString("GRAVITYMAIN_CODE");
						if (code.equals(pumpCode))
							break;
					}
				}
				if (opType.equalsIgnoreCase("previous")) {
					if (rwsMasterData.rs.previous()) {
						asset_pipeline = null;
						asset_pipeline = getGravityMainFromRs(dataSource, rwsMasterData.rs);
						asset_pipeline.setRowCount(rowCount);
						asset_pipeline.setCurrentRow(rwsMasterData.rs.getRow());
						asset_pipeline.setIsLast("false");
						parameters.add(asset_pipeline);
						if (rwsMasterData.rs.previous()) {
							asset_pipeline.setIsLast("false");
						} else {
							asset_pipeline.setIsLast("true");
						}
					} else {
						asset_pipeline.setIsLast("true");
					}
				}

				if (opType.equalsIgnoreCase("next")) {
					if (rwsMasterData.rs.next()) {
						asset_pipeline = null;
						asset_pipeline = getGravityMainFromRs(dataSource, rwsMasterData.rs);
						asset_pipeline.setRowCount(rowCount);
						asset_pipeline.setCurrentRow(rwsMasterData.rs.getRow());
						if (rwsMasterData.rs.next())
							asset_pipeline.setIsLast("false");
						else {
							asset_pipeline.setIsLast("true");
						}
						parameters.add(asset_pipeline);
					} else {
						asset_pipeline = new Asset_PipeLine();
						asset_pipeline.setIsLast("true");
					}
				}
			}
			if ((assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) && assetCompCode.equals("03") && assetSubCompCode.equals("003")) {
				Asset_PipeLine asset_pipeline = new Asset_PipeLine();
				query = "select * from  " + Tab_Prifix
						+ "DISTRI_SC_PARAM_TBL DIS,RWS_ASSET_MAST_TBL A where DIS.ASSET_CODE=A.ASSET_CODE "
						+ " and DIS.asset_code=? order by DISTRISC_CODE";
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query,ResultSet.TYPE_SCROLL_INSENSITIVE,
						ResultSet.CONCUR_UPDATABLE);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				rwsMasterData.rs.last();
				int rowCount = rwsMasterData.rs.getRow();
				rwsMasterData.rs.beforeFirst();
				asset_pipeline = null;
				if (opType.equalsIgnoreCase("first")) {
					if (rwsMasterData.rs.first()) {
						asset_pipeline = null;
						asset_pipeline = getDistributionFromRs(dataSource, rwsMasterData.rs);
						asset_pipeline.setRowCount(rowCount);
						asset_pipeline.setCurrentRow(rwsMasterData.rs.getRow());
						if (rwsMasterData.rs.next())
							asset_pipeline.setIsLast("false");
						else
							asset_pipeline.setIsLast("true");
						parameters.add(asset_pipeline);
					} 
				}
				if (opType.equalsIgnoreCase("last")) {
					if (rwsMasterData.rs.last()) {
						asset_pipeline = null;
						asset_pipeline = getDistributionFromRs(dataSource, rwsMasterData.rs);
						asset_pipeline.setRowCount(rowCount);
						asset_pipeline.setCurrentRow(rwsMasterData.rs.getRow());
						asset_pipeline.setIsLast("true");
						parameters.add(asset_pipeline);
					} 
				}
				if (opType.equalsIgnoreCase("previous") || opType.equalsIgnoreCase("next")) {
					while (rwsMasterData.rs.next()) {
						String code = rwsMasterData.rs.getString("DISTRISC_CODE");
						if (code.equals(pumpCode))
							break;
					}
				}
				if (opType.equalsIgnoreCase("previous")) {
					if (rwsMasterData.rs.previous()) {
						asset_pipeline = null;
						asset_pipeline = getDistributionFromRs(dataSource, rwsMasterData.rs);
						asset_pipeline.setRowCount(rowCount);
						asset_pipeline.setCurrentRow(rwsMasterData.rs.getRow());
						asset_pipeline.setIsLast("false");
						parameters.add(asset_pipeline);
						if (rwsMasterData.rs.previous()) {
							asset_pipeline.setIsLast("false");
						} else {
							asset_pipeline.setIsLast("true");
						}
					} else {
						asset_pipeline.setIsLast("true");
					}
				}
				if (opType.equalsIgnoreCase("next")) {
					if (rwsMasterData.rs.next()) {
						asset_pipeline = null;
						asset_pipeline = getDistributionFromRs(dataSource, rwsMasterData.rs);
						asset_pipeline.setRowCount(rowCount);
						asset_pipeline.setCurrentRow(rwsMasterData.rs.getRow());
						if (rwsMasterData.rs.next())
							asset_pipeline.setIsLast("false");
						else {
							asset_pipeline.setIsLast("true");
						}
						parameters.add(asset_pipeline);
					} else {
						asset_pipeline = new Asset_PipeLine();
						asset_pipeline.setIsLast("true");
					}
				}
			}
		} catch (Exception e) {
			Debug.println("Exception in Next of 009 :" + e);
		} finally {
				rwsMasterData.closeAll();
		}
		return parameters;
	}

	public static Asset_PipeLine getPumpingMainFromRs(DataSource dataSource, ResultSet rs) throws Exception {
		Asset_PipeLine asset_pipeline = new Asset_PipeLine();
		asset_pipeline.setAssetCode(rs.getString("ASSET_CODE"));
		asset_pipeline.setPmCode(rs.getString("PUMPINGMAIN_CODE"));
		asset_pipeline.setHabCode(rs.getString("HAB_CODE"));
		asset_pipeline.setPmLen(rs.getString("LENGTH"));
		asset_pipeline.setPmAvNo(rs.getString("AIRVALVE_NO"));
		asset_pipeline.setPmScrvNo(rs.getString("SCOUREVALVE"));
		asset_pipeline.setPmRvNo(rs.getString("REFLEXVALVE"));
		asset_pipeline.setPmSvNo(rs.getString("SLUICEVALVE"));
		asset_pipeline.setNoOfPipes(getNoOfPipeTypes(dataSource, "01", "001", rs.getString("PUMPINGMAIN_CODE")) + "");
		asset_pipeline.setPmZeroVelocityValve(rs.getString("ZERO_VELOCITY_VALVE"));
		asset_pipeline.setPmAirCusionValve(rs.getString("AIR_CUSHION_VALVE"));
		asset_pipeline.setPmNonReturnValve(rs.getString("NON_RETURN_VALVE"));
		asset_pipeline.setPmLocation(rs.getString("LOCATION"));
		return asset_pipeline;
	}

	public static RwsMaster getBorewellFromRs(DataSource dataSource, ResultSet rs) throws Exception {
		RwsMaster rwsMaster = new RwsMaster();
		try {
			rwsMaster.setLocation(rs.getString("LOCATION"));
			rwsMaster.setDiameter(rs.getString("DIAMETER"));
			rwsMaster.setCasing(rs.getString("CASING"));
			rwsMaster.setGenCondition(rs.getString("GEN_CONDITION"));
			rwsMaster.setGino(rs.getString("GI_NO"));
			rwsMaster.setPipeLength(rs.getString("PIPE_LENGTH"));
			rwsMaster.setPainted(rs.getString("PAINTED"));
			rwsMaster.setStaticWaterLevel(rs.getString("STATIC_WL"));
			rwsMaster.setSummerWaterLevel(rs.getString("SUMMER_WL"));
			rwsMaster.setPcond(rs.getString("PLATFORM_EXISTING"));
			rwsMaster.setSerno(rs.getString("SER_NO"));
			rwsMaster.setSerhrs(rs.getString("SER_HRS"));
			rwsMaster.setRepairs(rs.getString("REPAIRS"));
			rwsMaster.setPlatformCondition(rs.getString("PLATFORM_CONDITION"));
			rwsMaster.setDrain(rs.getString("DRAIN"));
			rwsMaster.setDrainCondition(rs.getString("DRAIN_CONDITION"));
			rwsMaster.setDrainsd(rs.getString("DRAIN_SD"));
			rwsMaster.setDrainlp(rs.getString("DRAIN_LP"));
			rwsMaster.setHygiene(rs.getString("HYGIENE"));
			rwsMaster.setAvgtime(rs.getString("AVG_TIME"));
			rwsMaster.setPyield(rs.getString("P_YEILD"));
			rwsMaster.setPyieldLocal(rs.getString("PYEILD_LOCAL"));
			rwsMaster.setPeriod(rs.getString("PERIOD"));
			rwsMaster.setAssetCode(rs.getString("ASSET_CODE"));
			rwsMaster.setHpCode(rs.getString("HP_CODE"));
			rwsMaster.setHabCode(rwsMaster.getHpCode().substring(0, 16));
			rwsMaster.setDepth(rs.getInt("DEPTH"));
			rwsMaster.setQualityAffected(rs.getString("QUALITY_AFFECTED"));
			rwsMaster.setFlouride(rs.getDouble("FLOURIDE"));
			rwsMaster.setBrakish(rs.getDouble("BRAKISH"));
			rwsMaster.setIron(rs.getDouble("IRON"));
			rwsMaster.setOthersType(format(rs.getString("cont_others_type")));
			rwsMaster.setOthers(rs.getString("CONT_OTHERS_PER"));
		} catch (Exception e) {
			Debug.println("Exception in getBorewellFromRs: " + e.getMessage());
		}
		return rwsMaster;
	}

	public static Asset_PipeLine getGravityMainFromRs(DataSource dataSource, ResultSet rs) throws Exception {
		Asset_PipeLine asset_pipeline = new Asset_PipeLine();
		asset_pipeline.setAssetCode(rs.getString("ASSET_CODE"));
		asset_pipeline.setGravitymain_code(rs.getString("GRAVITYMAIN_CODE"));
		asset_pipeline.setHabCode(rs.getString("HAB_CODE"));
		asset_pipeline.setLengths(rs.getString("LENGTH"));
		asset_pipeline.setAirvalve_no(rs.getString("AIRVALVE_NO"));
		asset_pipeline.setNoOfPipes(getNoOfPipeTypes(dataSource, "01", "002", rs.getString("GRAVITYMAIN_CODE")) + "");
		asset_pipeline.setGravitymain_location(rs.getString("LOCATION"));
		asset_pipeline.setScourevalve(rs.getString("SCOUREVALVE"));
		asset_pipeline.setReflexvalve(rs.getString("REFLEXVALVE"));
		asset_pipeline.setSluicevalve(rs.getString("SLUICEVALVE"));
		return asset_pipeline;
	}

	public static Asset_PipeLine getDistributionFromRs(DataSource dataSource, ResultSet rs) throws Exception {
		Asset_PipeLine asset_pipeline = new Asset_PipeLine();
		asset_pipeline.setAssetCode(rs.getString("ASSET_CODE"));
		asset_pipeline.setHabCode(rs.getString("HAB_CODE"));
		asset_pipeline.setNoOfPipes(getNoOfPipeTypes(dataSource, "01", "003", rs.getString("DISTRISC_CODE")) + "");
		asset_pipeline.setDisLengths(rs.getInt("DIS_LEN") + "");
		asset_pipeline.setDisFullVillagesCovered(rs.getString("DIS_COVE"));
		asset_pipeline.setDisTotalLengthNeeded(rs.getFloat("DIS_LN") + "");
		asset_pipeline.setDisTotalLengthProvided(rs.getFloat("DIS_TLC") + "");
		asset_pipeline.setDisBalanceNeeded(rs.getFloat("DIS_BN") + "");
		asset_pipeline.setDisCode(rs.getString("DISTRISC_CODE"));
		asset_pipeline.setDisMaterialCode(rs.getString("DIS_MAT_CODE"));
		asset_pipeline.setDisNoOfPipes(rs.getInt("NO_OF_PIPES") + "");
		asset_pipeline.setDisHabCode(rs.getString("HAB_CODE"));
		asset_pipeline.setDisNoOfAirValves(rs.getInt("NO_AIRVALVES") + "");
		asset_pipeline.setDisNoOfScourValves(rs.getInt("NO_SCOURVALVES") + "");
		asset_pipeline.setDisNoOfSluiceValves(rs.getInt("NO_SLUICEVALVES") + "");
		asset_pipeline.setDisNoOfPrivateHouseConnections(rs.getInt("NO_PR_HC") + "");
		asset_pipeline.setDisLocation(rs.getString("LOCATION"));
		asset_pipeline.setDisNoOfStandPosts(rs.getInt("NO_STANDPOSTS") + "");
		return asset_pipeline;
	}

	public static Asset_Pumpset getPumpsetsFromRs(DataSource dataSource, ResultSet rs) throws Exception {
		Asset_Pumpset asset_pumpset = new Asset_Pumpset();
		asset_pumpset.setAssetCode(rs.getString("ASSET_CODE"));
		asset_pumpset.setPumpCode(rs.getString("PUMP_CODE"));
		asset_pumpset.setPumpMake(rs.getString("PUMP_MAKE"));
		asset_pumpset.setPumpCapacity(rs.getString("PUMP_CPTY"));
		asset_pumpset.setPumpType(rs.getString("PUMP_TYPE"));
		asset_pumpset.setPumpYearOfCommissioning(rs.getString("YEAR_COMM"));
		asset_pumpset.setPumpHoursRunningPerDay(rs.getString("HR_RUN"));
		asset_pumpset.setPumpUsage(rs.getString("USAGE"));
		asset_pumpset.setPumpDesignedLpm(rs.getString("DESIGNED_LPM"));
		asset_pumpset.setPumpDesignedHead(rs.getString("DESIGNED_HEAD"));
		asset_pumpset.setPumpControlPanel(rs.getString("CONTROL_PANEL"));
		asset_pumpset.setPumpLowVoltageProblems(rs.getString("LOW_VOLT_PROB"));
		asset_pumpset.setPumpHoursOfPowerAvailability(rs.getString("POWER_AVAIL_PER_DAY"));
		asset_pumpset.setPumpFeasiblityOfGettingUrbanLine(rs.getString("FEAS_URBAN_LINE"));
		asset_pumpset.setPumpAppCostOfUrbanFeeder(rs.getString("COST"));
		asset_pumpset.setPumpDistanceFromWhereUrbanLineCanBeHad(rs.getString("URBAN_LINE_DISTANCE"));
		asset_pumpset.setPumpSuggestions(rs.getString("SUGGESTIONS"));
		asset_pumpset.setGeneratorExisting(rs.getString("GENERATOR_EXISTING"));
		asset_pumpset.setGeneratorCapacity(rs.getString("GENERATOR_CAPACITY"));
		asset_pumpset.setGeneratorWorking(rs.getString("GENERATOR_WORKING"));
		asset_pumpset.setHabCode(format(rs.getString("HAB_CODE")));
		asset_pumpset.setPumpLocation(rs.getString("LOCATION"));
		asset_pumpset.setPumpFeeder(rs.getString("FEEDER"));
		asset_pumpset.setLatitude(rs.getString("latitude"));
		asset_pumpset.setLongitude(rs.getString("longitude"));
		asset_pumpset.setElevation(rs.getString("elevation"));
		asset_pumpset.setWaypoint(rs.getString("way_point"));
		return asset_pumpset;
	}

	public static String formatString(String str) {
		if (str == null || str.equals("")) {
			str = "0";
		}
		return str;
	}

	public static int getNoOfPipeTypes(DataSource dataSource, String compCode, String subCompCode, String code) throws Exception{
		int count = 0;
		RwsMasterData rwsMasterData = new RwsMasterData();
		String tabPrifix = "";
		String colName = "";
		rwsMasterData.stmt = null;
		rwsMasterData.rs = null;
		if ((compCode.equals("01") || compCode.equals("02") || compCode.equals("03")) && subCompCode.equals("001")) {
			tabPrifix = "RWS_PUMPINGMAIN_PIPES_TBL";
			colName = "PM_CODE";
		}
		if ((compCode.equals("01") || compCode.equals("02") || compCode.equals("03")) && subCompCode.equals("002")) {
			tabPrifix = "RWS_GRAVITYMAIN_PIPES_TBL";
			colName = "GM_CODE";
		}
		if ((compCode.equals("01") || compCode.equals("02") || compCode.equals("03")) && subCompCode.equals("003")) {
			tabPrifix = "RWS_DISTRIBUTION_PIPES_TBL";
			colName = "DISTRISC_CODE";
		}
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			String query = "select count(*)count from " + tabPrifix + " where " + colName + "=?";
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query,ResultSet.TYPE_SCROLL_INSENSITIVE,
					ResultSet.CONCUR_UPDATABLE);
			rwsMasterData.pstmt.setString(1,code);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			if (rwsMasterData.rs.next())
				count = rwsMasterData.rs.getInt("count");
		} catch (Exception e) {
			Debug.println("Exception in getNoOfPipeTypes" + e);
		} finally {
				rwsMasterData.closeAll();
		}

		return count;
	}

	static public String getNextNewSlNo(DataSource dataSource, String tableName, String schemeCodeField, String habCode,
			String shortSchemeCode) {
		String slNo = null;
		String code = null;
		RwsMasterData rwsMasterData = new RwsMasterData();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			String query = "SELECT MAX(to_number(substr(" + schemeCodeField + ",22,3)))+1 FROM " + tableName
					+ " where substr(" + schemeCodeField + ",1,16)=? and substr(" + schemeCodeField
					+ ",17,3)=?";
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt.setString(1, habCode);
			rwsMasterData.pstmt.setString(2, shortSchemeCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			if (rwsMasterData.rs.next())
				slNo = rwsMasterData.rs.getInt(1) + "";
			if (slNo == null || slNo.equals("0") || slNo.equals("")) {
				slNo = "001";
			} else if (slNo.length() == 1) {
				slNo = "00" + slNo;
			} else if (slNo.length() == 2) {
				slNo = "0" + slNo;
			}
		} catch (Exception e) {
			Debug.println("Exception in getNextNewSlNo" + e);
		} finally {
			try {
				rwsMasterData.closeAll();
			}catch (Exception e) {
				// TODO: handle exception
			}
		}
		return slNo;
	}

	static public int insertNextSchemeCode(DataSource dataSource, String tableName, String schemeCodeField,
			String nextSchemeCode, String assetCode) {
		int count = 0;
		String query;
		RwsMasterData rwsMasterData = new RwsMasterData();
		try {
			// Debug.println("in insertNextSchemeCode");
			//
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			query = "insert into " + tableName + "(" + schemeCodeField + ",asset_code,hab_code) values('"
					+ nextSchemeCode + "','" + assetCode + "','" + nextSchemeCode.substring(0, 16) + "')";
			// Debug.println("query is " + query);
			count = rwsMasterData.stmt.executeUpdate(query);
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
			return count;

		} catch (Exception e) {
			Debug.println("Exception in insertNextSchemeCode in RwsMasterData " + e);
		}

		return count;

	}

	static public boolean isDataAlreadyExists(DataSource dataSource, String tableName, String schemeCodeField,
		String schemeCode, String assetCode) throws Exception{
		int count = 0;
		String query;
		RwsMasterData rwsMasterData = new RwsMasterData();
		boolean recordExists = false;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			query = "select count(*) from  " + tableName + " where " + schemeCodeField + "=?";
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt.setString(1, schemeCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				count = rwsMasterData.rs.getInt(1);
			}
			if (count > 0)
				recordExists = true;
			return recordExists;
		} catch (Exception e) {
			recordExists = false;
			Debug.println("Exception at isDataAlreadyExists in RwsMAsterData: "+e);
		}finally {
			rwsMasterData.closeAll();
		}
		return recordExists;
	}

	public static String format(String val) {
		if (val == null || val.equals("null"))
			val = "";
		return val;
	}

	public static String format(int val) {
		String rValue = "";
		if (val == 0)
			rValue = "";
		else
			rValue = val + "";
		return rValue;
	}

	public static String format(float val) {
		String rValue = "";
		if (val == 0)
			rValue = "";
		else
			rValue = val + "";
		return rValue;
	}

	static public boolean insertHabLink2(DataSource dataSource, String habLinkTable, ArrayList checkedHabs,
			String schemeCode) throws Exception {
		String query = null;
		int[] rowCount;
		boolean isInserted = true;
		RwsMasterData rwsMasterData = new RwsMasterData();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.conn.setAutoCommit(false);
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			if (checkedHabs != null) {
				query = "DELETE FROM  " + habLinkTable + " where SUBCOMP_CODE='" + schemeCode + "'";
				rwsMasterData.stmt.addBatch(query);
				for (int i = 0; i < checkedHabs.size(); i++) {
					HabSourceBean habSourceBean = (HabSourceBean) checkedHabs.get(i);
					if (habSourceBean.getIsChecked().equals("true")) {
						query = " INSERT INTO " + habLinkTable + "(SUBCOMP_CODE,HAB_CODE)  VALUES(" + "'" + schemeCode
								+ "','" + habSourceBean.getPanchRajCode().substring(0, 16) + "')";
						rwsMasterData.stmt.addBatch(query);
					} // end of if
				} // end of for
			} // end of if
			rowCount = rwsMasterData.stmt.executeBatch();
			for (int j = 0; j < rowCount.length; j++) {
				if (rowCount[j] == 0)
					isInserted = false;
			}
			if (isInserted)
				rwsMasterData.conn.commit();
			rwsMasterData.conn.setAutoCommit(true);
		} catch (Exception e) {
			Debug.println("Exception at insertHabLink2 in RwsMasterData :  " + e);
			isInserted = false;
		} finally {
			rwsMasterData.closeAll();
		}
		return isInserted;
	}

	public static String getHabName(DataSource dataSource, String habCode) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String name = "";
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			String query = "SELECT PANCH_NAME FROM rws_panchayat_raj_tbl WHERE panch_code =?";
			rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt1.setString(1, habCode);
			rwsMasterData.rs1 = rwsMasterData.pstmt1.executeQuery();
			while (rwsMasterData.rs1.next()) {
				name = rwsMasterData.rs1.getString(1);
			}
		} catch (Exception e) {
			Debug.println("The error in getHabName=" + e);
			
		} finally {
			rwsMasterData.closeAll();
		}
		return name;
	}

	public static String getDcode(DataSource dataSource, String dname) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String name = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			String query = "select dcode from rws_district_tbl where dname=?";
			rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt1.setString(1, dname);
			rwsMasterData.rs1 = rwsMasterData.pstmt1.executeQuery();
			while (rwsMasterData.rs1.next()) {
				name = rwsMasterData.rs1.getString(1);
			}
		} catch (Exception e) {
			Debug.println("Exception at getDcode in RwsMasterData : " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return name;
	}

	public static int getSourceHabitationsCount(Connection conn, String sourceCode) throws Exception {
		int count = 0;
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;
		try {
			String query = "select count(SOURCE_CODE) from RWS_SOURCE_HABITATION_TBL where SOURCE_CODE=?";
			rwsMasterData.pstmt1 = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt1.setString(1, sourceCode);
			rwsMasterData.rs1 = rwsMasterData.pstmt1.executeQuery();
			if (rwsMasterData.rs1.next()) {
				count = rwsMasterData.rs1.getInt(1);
			}
		} catch (Exception e) {
			Debug.println("Exception in getSourceHabitaionsCount is " + e);
		}
		return count;
	}

	public static ArrayList getSources(DataSource dataSource) {
		ArrayList sources = new ArrayList();

		RwsMaster rwsMaster = new RwsMaster();
		rwsMaster.setSourceCode("0101001");
		rwsMaster.setCodeName("PWS SUBSURFACE SOURCE");
		sources.add(rwsMaster);

		rwsMaster = new RwsMaster();
		rwsMaster.setSourceCode("0101002");
		rwsMaster.setCodeName("PWS SURFACE SOURCE");
		sources.add(rwsMaster);

		rwsMaster = new RwsMaster();
		rwsMaster.setSourceCode("0101003");
		rwsMaster.setCodeName("PWS PUMPSETS");
		sources.add(rwsMaster);

		rwsMaster = new RwsMaster();
		rwsMaster.setSourceCode("0201001");
		rwsMaster.setCodeName("MPWS SUBSURFACE SOURCE");
		sources.add(rwsMaster);

		rwsMaster = new RwsMaster();
		rwsMaster.setSourceCode("0201002");
		rwsMaster.setCodeName("MPWS SURFACE SOURCE");
		sources.add(rwsMaster);
		//
		rwsMaster = new RwsMaster();
		rwsMaster.setSourceCode("0901001");
		rwsMaster.setCodeName("DIRECT PUMPING SUBSURFACE SOURCE");
		sources.add(rwsMaster);

		rwsMaster = new RwsMaster();
		rwsMaster.setSourceCode("0901002");
		rwsMaster.setCodeName("DIRECT PUMPING SURFACE SOURCE");
		sources.add(rwsMaster);
		//

		rwsMaster = new RwsMaster();
		rwsMaster.setSourceCode("0201003");
		rwsMaster.setCodeName("MPWS PUMPSETS");
		sources.add(rwsMaster);

		rwsMaster = new RwsMaster();
		rwsMaster.setSourceCode("0301001");
		rwsMaster.setCodeName("CPWS SUBSURFACE SOURCE");
		sources.add(rwsMaster);

		rwsMaster = new RwsMaster();
		rwsMaster.setSourceCode("0301002");
		rwsMaster.setCodeName("CPWS SURFACE SOURCE");
		sources.add(rwsMaster);

		rwsMaster = new RwsMaster();
		rwsMaster.setSourceCode("0301003");
		rwsMaster.setCodeName("CPWS PUMPSETS");
		sources.add(rwsMaster);

		rwsMaster = new RwsMaster();
		rwsMaster.setSourceCode("0401001");
		rwsMaster.setCodeName("HANDPUMPS BOREWELL");
		sources.add(rwsMaster);

		rwsMaster = new RwsMaster();
		rwsMaster.setSourceCode("0501001");
		rwsMaster.setCodeName("SHALLOW HANDPUMPS");
		sources.add(rwsMaster);

		rwsMaster = new RwsMaster();
		rwsMaster.setSourceCode("0601001");
		rwsMaster.setCodeName("OPEN WELLS");
		sources.add(rwsMaster);

		rwsMaster = new RwsMaster();
		rwsMaster.setSourceCode("0701001");
		rwsMaster.setCodeName("PONDS");
		sources.add(rwsMaster);

		rwsMaster = new RwsMaster();
		rwsMaster.setSourceCode("0801001");
		rwsMaster.setCodeName("OTHERS");
		sources.add(rwsMaster);
		rwsMaster = new RwsMaster();
		rwsMaster.setSourceCode("0104003");
		rwsMaster.setCodeName("PWS GLSR");
		sources.add(rwsMaster);
		rwsMaster = new RwsMaster();
		rwsMaster.setSourceCode("0204003");
		rwsMaster.setCodeName("MPWS GLSR");
		sources.add(rwsMaster);
		rwsMaster = new RwsMaster();
		rwsMaster.setSourceCode("0304003");
		rwsMaster.setCodeName("CPWS GLSR");
		sources.add(rwsMaster);
		rwsMaster = new RwsMaster();
		rwsMaster.setSourceCode("0104004");
		rwsMaster.setCodeName("PWS GLBR");
		sources.add(rwsMaster);
		rwsMaster = new RwsMaster();
		rwsMaster.setSourceCode("0204004");
		rwsMaster.setCodeName("MPWS GLBR");
		sources.add(rwsMaster);
		rwsMaster = new RwsMaster();
		rwsMaster.setSourceCode("0304004");
		rwsMaster.setCodeName("CPWS GLBR");
		sources.add(rwsMaster);
		rwsMaster = new RwsMaster();
		rwsMaster.setSourceCode("0104001");
		rwsMaster.setCodeName("PWS OHSR");
		sources.add(rwsMaster);
		rwsMaster = new RwsMaster();
		rwsMaster.setSourceCode("0204001");
		rwsMaster.setCodeName("MPWS OHSR");
		sources.add(rwsMaster);
		rwsMaster = new RwsMaster();
		rwsMaster.setSourceCode("0304001");
		rwsMaster.setCodeName("CPWS OHSR");
		sources.add(rwsMaster);

		return sources;
	}

	public static boolean sourceCodeExists(DataSource dataSource, String sourceCode) throws Exception {
		boolean exists = false;
		RwsMasterData rwsMasterData = new RwsMasterData();
		try {
			// Debug.println("in sourceCodeExists");
			//
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			String query = "select count(*) from rws_source_tbl where source_code='" + sourceCode + "'";
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(query);
			if (rwsMasterData.rs.next()) {
				if (rwsMasterData.rs.getInt(1) > 0)
					exists = true;
			}
		} catch (Exception e) {
			Debug.println("Exception is " + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}

		return exists;

	}

	public static String getSourceSubCompTypeCode(String sourceCode) throws Exception {
		boolean exists = false;
		RwsMasterData rwsMasterData = new RwsMasterData();
		try {
			// Debug.println("in getSourceSubCompTypeCode");
			//
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			String query = "select * from rws_source_tbl where source_code='" + sourceCode + "'";
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(query);
			if (rwsMasterData.rs.next()) {
				if (rwsMasterData.rs.getInt("source_type_code") == 1)
					return "001";
				else if (rwsMasterData.rs.getInt("source_type_code") == 2)
					return "002";
			}
		} catch (Exception e) {
			Debug.println("Exception is " + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}

		return "";

	}

	public static ArrayList getUsers(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String query;
		ArrayList user = new ArrayList();
		try {
			// Debug.println("in getUsers");
			//
			// query = "select distinct to_char(access_date,'DD/MM/yy') from
			// rws_log_tbl order by to_char(access_date,'DD/MM/yy') desc";
			// query = "select distinct user_id from rws_log_tbl where
			// upper(user_id)<>'NULL'";
			// query = "select distinct user_id from rws_log_tbl where (user_id
			// like '1%' and length(user_id)=6) or user_id='admin'";
			// query = "select distinct l.user_id from rws_password_tbl
			// p,rws_log_tbl l where p.user_id=l.user_id";
			query = "select distinct l.user_id,p.office_code from rws_password_tbl p,rws_log_tbl l where p.user_id=l.user_id and (((substr(l.user_id,2,6)='00000' or substr(l.user_id,4,6)='000' or substr(l.user_id,1,1)!='1'))or l.user_id='admin') ";
			// Debug.println("query is " + query);
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.stmt1 = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(query);
			RwsMaster rwsMaster = null;
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				if (rwsMasterData.rs.getString(1).substring(0, 1).equalsIgnoreCase("1")) {
					if (rwsMasterData.rs.getString(1).substring(1, 6).equalsIgnoreCase("00000")) {
						rwsMaster.setUser("HEADOFFICE");
						rwsMaster.setUserid(rwsMasterData.rs.getString(1));
					} else if (rwsMasterData.rs.getString(1).substring(3, 6).equalsIgnoreCase("000")) {
						String query1 = null;
						query1 = "select circle_office_name from rws_circle_office_tbl where head_office_code='1' and circle_office_code='"
								+ rwsMasterData.rs.getString(1).substring(1, 3) + "'";
						rwsMasterData.rs1 = rwsMasterData.stmt1.executeQuery(query1);
						if (rwsMasterData.rs1.next()) {
							rwsMaster.setUser(rwsMasterData.rs1.getString(1));
							rwsMaster.setUserid(rwsMasterData.rs.getString(1));
						}

					}
					/*
					 * else if(rwsMasterData.rs.getString(1).substring(4,6).equalsIgnoreCase("00") )
					 * { String query1=null; query1="select division_office_name from
					 * rws_division_office_tbl where head_office_code='1' and
					 * circle_office_code='"+rwsMasterData.rs.getString(1).substring(1,3)+"' and
					 * division_office_code='"+rwsMasterData.rs.getString(1).substring(3,4)+"'";
					 * rwsMasterData.rs1 = rwsMasterData.stmt1.executeQuery(query1);
					 * if(rwsMasterData.rs1.next()) {
					 * rwsMaster.setUser(rwsMasterData.rs1.getString(1)+"-"+"DIV");
					 * rwsMaster.setUserid(rwsMasterData.rs.getString(1)); } }
					 * 
					 * else if(!rwsMasterData.rs.getString(1).substring(4,6).equalsIgnoreCase("00")
					 * ) { String query1=null; query1="select subdivision_office_name from
					 * rws_subdivision_office_tbl where head_office_code='1' and
					 * circle_office_code='"+rwsMasterData.rs.getString(1).substring(1,3)+"' and
					 * division_office_code='"+rwsMasterData.rs.getString(1).substring(3,4)+"' and
					 * subdivision_office_code='"+rwsMasterData.rs.getString(1).substring(4,6)+"'";
					 * rwsMasterData.rs1 = rwsMasterData.stmt1.executeQuery(query1);
					 * if(rwsMasterData.rs1.next()) {
					 * rwsMaster.setUser(rwsMasterData.rs1.getString(1)+"-"+"SDIV");
					 * rwsMaster.setUserid(rwsMasterData.rs.getString(1)); } }
					 */
				} else {
					rwsMaster.setUser(rwsMasterData.rs.getString(1));
					rwsMaster.setUserid(rwsMasterData.rs.getString(1));
				}

				// Debug.println("RwsMaster User" + rwsMaster.getUserid());
				user.add(rwsMaster);
			}

		} catch (Exception e) {
			Debug.println("Exception in User in RwsMaster :" + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}

		return user;
	}

	// code added for employee details
	public static int insertEmp(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster1 = new RwsMaster();
		int rowCount = 0;
		String desgcode = null;

		try {
			// Debug.println("in insertEmp");
			//
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();

			rwsMaster1 = rwsMasterData.getEmplycode(rwsMaster.getEmpcode(), dataSource);
			if (rwsMaster1 != null && rwsMaster1.getEmpcode().equals(rwsMaster.getEmpcode()))
				return rowCount;
			else {

				// Debug.println("inserting");
				// if(rwsMaster.getDesgnCode()!=null)
				// {
				// desgcode=rwsMaster.getDesgnCode();
				// Debug.println("desgcode"+desgcode);
				// }
				// else if(rwsMaster.getTempdesgCode()!=null)
				// {
				// desgcode=rwsMaster.getTempdesgCode();
				// Debug.println("desgcode"+desgcode);
				// }

				/*
				 * String query="insert into
				 * rws_employee_tbl(SECTOR,EMPLOYEE_CODE,EMPLOYEE_SURNAME,EMPLOYEE_NAME,
				 * DATE_OF_BIRTH," + "APPOINTMENT_DATE,DATE_OF_JOINING,ACCTEST_PASS_DATE," +
				 * "DATE_OF_COMMENCE_PROBATION,DATE_OF_REGULARISATION,CURRENT_POST_HELD_FROM,FATHER_NAME,SOCIAL_CATEGORY,EMPLOYEE_RELIGION,OFFICE_CODE)values("
				 * +rwsMaster.getSector()+",?,?,?,TO_DATE('" + rwsMaster.getDob() +
				 * "','dd/mm/yyyy'),TO_DATE('" + rwsMaster.getAppointdate() +
				 * "','dd/mm/yyyy'),TO_DATE('" + rwsMaster.getDoj() +
				 * "','dd/mm/yyyy'),TO_DATE('" + rwsMaster.getDacctest() +
				 * "','dd/mm/yyyy'),TO_DATE('" + rwsMaster.getDcommprob() +
				 * "','dd/mm/yyyy'),TO_DATE('" + rwsMaster.getDdeclprob() +
				 * "','dd/mm/yyyy'),TO_DATE('" + rwsMaster.getCurrentpostdate() +
				 * "','dd/mm/yyyy'),?,?,?,?)";
				 */
				String query = "insert into rws_employee_tbl(SECTOR,OFFICE_CODE,EMPLOYEE_CODE,EMPLOYEE_SURNAME,EMPLOYEE_NAME,FATHER_NAME,CASTE_CODE,RELG_CODE,"
						+ "DATE_OF_BIRTH,NATIVE_DISTRICT,NATIVE_MANDAL,QUAL_CODE,APPOINTMENT_DATE,DATE_OF_JOINING,TEMP_PERMNENT,MOAP_CODE,ZONE_CODE,"
						+ "RECRUIT_LOCAL_NONLOCAL,APCATEG_CODE,ACCTEST_PASS_DATE,DATE_OF_COMMENCE_PROBATION,DATE_OF_REGULARISATION,CURRENT_POST_HELD_FROM,"
						+ "WORK_SPECIALIZATION,OTHER_DETAILS,ADD_QUAL_1,ADD_QUAL_2,DIST_CLASS_IV,DIST_CLASS_V,DIST_CLASS_VI,DIST_CLASS_VII,DIST_CLASS_VIII,DIST_CLASS_IX,DIST_CLASS_X,LOCAL_DIST_AS_PER_SCH,"
						+ "LOCAL_ZONE,NOOF_YEARS_STUDIED_IN_DIST,NOOF_YEARS_STUDIED_IN_ZONE,PRIVATE_PASSED_DIST,PRIVATE_PASSED_ZONE,SEX,PRESENT_PAY_SCALE,NATIVE_REV_DIVISION,DEPUTATION,PAN_NO,APGLI_NO,ACCTEST_PASSED,INCREMENT_DATE,DESIGNATION_CODE,UPDATE_DATE,GPF_NO)values('"
						+ rwsMaster.getHoc() + "','" + rwsMaster.getRoc() + "','" + rwsMaster.getEmpcode() + "','"
						+ rwsMaster.getSurname().toUpperCase() + "','" + rwsMaster.getEmpname().toUpperCase() + "','"
						+ rwsMaster.getRelation() + "','" + rwsMaster.getCasteCode() + "','" + rwsMaster.getRelgCode()
						+ "',TO_DATE('" + rwsMaster.getDob() + "','dd/mm/yyyy')," + "'" + rwsMaster.getDistrict()
						+ "','" + rwsMaster.getMandal() + "','" + rwsMaster.getQualCode() + "',TO_DATE('"
						+ rwsMaster.getAppointdate() + "','dd/mm/yyyy')," + " TO_DATE('" + rwsMaster.getDoj()
						+ "','dd/mm/yyyy')," + "'" + rwsMaster.getDesig() + "','" + rwsMaster.getMoapCode() + "','"
						+ rwsMaster.getZoneCode() + "','" + rwsMaster.getNarecruit() + "','" + rwsMaster.getCatCode()
						+ "',TO_DATE('" + rwsMaster.getDacctest() + "','dd/mm/yyyy'),TO_DATE('"
						+ rwsMaster.getDcommprob() + "','dd/mm/yyyy'),TO_DATE('" + rwsMaster.getDdeclprob()
						+ "','dd/mm/yyyy'),TO_DATE('" + rwsMaster.getCurrentpostdate() + "','dd/mm/yyyy'),'"
						+ rwsMaster.getWorkSpecCode() + "','" + rwsMaster.getOtherDet() + "','"
						+ rwsMaster.getAddqual1() + "','" + rwsMaster.getAddqual2() + "','"
						+ rwsMaster.getDiststudied4() + "','" + rwsMaster.getDiststudied5() + "','"
						+ rwsMaster.getDiststudied6() + "','" + rwsMaster.getDiststudied7() + "','"
						+ rwsMaster.getDiststudied8() + "','" + rwsMaster.getDiststudied9() + "','"
						+ rwsMaster.getDiststudied10() + "','" + rwsMaster.getLocaldist() + "','"
						+ rwsMaster.getLocalzone() + "','" + rwsMaster.getNoofyrs() + "','" + rwsMaster.getNoofyrs1()
						+ "','" + rwsMaster.getPvtdist() + "','" + rwsMaster.getPvtzone() + "','"
						+ rwsMaster.getGender() + "','" + rwsMaster.getPayscale() + "','" + rwsMaster.getNrevenue()
						+ "','" + rwsMaster.getDeputation() + "','" + rwsMaster.getPanno() + "','"
						+ rwsMaster.getAplgi() + "','" + rwsMaster.getTestpassed() + "',TO_DATE('"
						+ rwsMaster.getIncrementdate() + "','dd/mm/yyyy'),'" + rwsMaster.getDesgnCode() + "',TO_DATE('"
						+ rwsMaster.getUpdatedate() + "','dd/mm/yyyy'),'" + rwsMaster.getGpfno() + "')";

				// Debug.println("query is" + query);
				rowCount = rwsMasterData.stmt.executeUpdate(query);

				/*
				 * ps.setString(1, rwsMaster.getSector()); Debug.println("Sector
				 * is"+rwsMaster.getSurname()); ps.setString(2, rwsMaster.getEmpcode());
				 * Debug.println(" empcode is"+rwsMaster.getEmpcode()); ps.setString(3,
				 * rwsMaster.getSurname().toUpperCase()); Debug.println("Surname
				 * is"+rwsMaster.getSurname()); ps.setString(4,
				 * rwsMaster.getEmpname().toUpperCase()); Debug.println("empname
				 * is"+rwsMaster.getEmpname()); ps.setString(5,
				 * rwsMaster.getRelation().toUpperCase());
				 * Debug.println("relation is"+rwsMaster.getRelation()); ps.setString(6,
				 * rwsMaster.getCasteName());
				 * Debug.println("caste is"+rwsMaster.getCasteName()); ps.setString(7,
				 * rwsMaster.getRelgName());
				 * Debug.println("religion is"+rwsMaster.getRelgName()); ps.setString(8,
				 * rwsMaster.getRoc()); /*ps.setString(8, rwsMaster.getDistrict());
				 * ps.setString(9, rwsMaster.getMandal()); ps.setString(10,
				 * rwsMaster.getMoapCode()); ps.setString(11, rwsMaster.getQualCode());
				 * Debug.println("zone is"+rwsMaster.getZoneCode()); ps.setString(12,
				 * rwsMaster.getZoneCode());
				 * 
				 * ps.setString(13, rwsMaster.getNarecruit());
				 * Debug.println("narewcruit is"+rwsMaster.getNarecruit());
				 */

				// ps.setString(4,rwsMaster.getDob());
				// ps.setString(5,rwsMaster.getAppointdate());
				// ps.setString(6,rwsMaster.getDoj());
				// ps.setString(7,rwsMaster.getCurrentpostdate());
				/*
				 * ps.setString(5, rwsMaster.getPhone()); ps.setString(6,
				 * rwsMaster.getMobile()); ps.setString(7, rwsMaster.getTotalworkscomp());
				 * ps.setString(8, rwsMaster.getQual()); ps.setString(9,
				 * rwsMaster.getAddqual1()); ps.setString(10, rwsMaster.getAddqual2());
				 * ps.setString(11, rwsMaster.getHof()); ps.setString(12,
				 * rwsMaster.getPresentation()); ps.setString(13, rwsMaster.getOtherDet());
				 * ps.setString(14, rwsMaster.getDesgnCode()); ps.setString(15,
				 * rwsMaster.getCheckType()); ps.setInt(16, rwsMaster.getNoOfChecks());
				 * ps.setString(17, rwsMaster.getCheckPeriod()); ps.setString(18,
				 * rwsMaster.getAppOrderRef()); ps.setString(19, rwsMaster.getWorkSpecial());
				 * ps.setString(20, rwsMaster.getPostCode());
				 */
				// ?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
				// added on july 21
				/*
				 * ps.setString(5, rwsMaster.getSurname().toUpperCase());
				 * 
				 * ps.setString(6, rwsMaster.getRelation().toUpperCase()); ps.setString(7,
				 * rwsMaster.getQual()); ps.setString(8, rwsMaster.getDesgnCode());
				 * ps.setString(9, rwsMaster.getCasteName()); ps.setString(10,
				 * rwsMaster.getRelgName()); ps.setString(11, rwsMaster.getDistrict());
				 * ps.setString(12, rwsMaster.getMandal()); ps.setString(13,
				 * rwsMaster.getMoapCode());
				 */

			}

		} catch (Exception e) {
			Debug.println(e.getMessage());
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return rowCount;

	}

	// *************************************************************************************************

	public static ArrayList getEmps(String hoc, String coc, String doc, String sdoc, DataSource dataSource)
			throws Exception {
		String str;
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;// Form bean
		ArrayList emps = new ArrayList();

		try {
			rwsMasterData.conn = RwsOffices.getConn();
			// Debug.println("connection established");
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			// Debug.println("create statement executed");
			String query = "";
			// Debug.println("hoc=" + hoc + "coc=" + coc + "doc=" + doc + "sdoc="+ sdoc);

			// code added
			if (hoc.equals("") && coc.equals("00") && doc.equals("0") && sdoc.equals("00")) {
				query = "select * from rws_employee_tbl order by EMPLOYEE_CODE";
			}
			// headOffice
			else if (coc.equals("00") && doc.equals("0") && sdoc.equals("00"))
				query = "select * from rws_employee_tbl where substr(office_code,1,1)='" + hoc
						+ "' order by EMPLOYEE_CODE";
			// circleOffice
			else if (!coc.equals("00") && doc.equals("0") && sdoc.equals("00"))
				query = "select * from rws_employee_tbl where substr(office_code,1,1)='" + hoc
						+ "' and substr(office_code,2,2)='" + coc + "' order by EMPLOYEE_CODE";
			// divisionOffice
			else if (!coc.equals("00") && !doc.equals("0") && sdoc.equals("00"))
				query = "select * from rws_employee_tbl where substr(office_code,1,1)='" + hoc
						+ "' and substr(office_code,2,2)='" + coc + "' and substr(office_code,4,1)='" + doc
						+ "' order by EMPLOYEE_CODE";
			// subDivisionOffice
			else if (!coc.equals("00") && !doc.equals("0") && !sdoc.equals("00"))
				query = "select * from rws_employee_tbl where substr(office_code,1,1)='" + hoc
						+ "' and substr(office_code,2,2)='" + coc + "' and substr(office_code,4,1)='" + doc
						+ "' and substr(office_code,5,2)='" + sdoc + "'order by EMPLOYEE_CODE";

			// Debug.println("query is " + query);
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(query);
			// end of code added

			// rwsMasterData.rs = rwsMasterData.stmt.executeQuery(query);
			// Debug.println("select statement executed");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				// Debug.println("rws statement executed");

				rwsMaster.setEmpcode(rwsMasterData.rs.getString("EMPLOYEE_CODE"));
				rwsMaster.setSurname(rwsMasterData.rs.getString("EMPLOYEE_SURNAME"));
				rwsMaster.setEmpname(rwsMasterData.rs.getString("EMPLOYEE_NAME"));
				rwsMaster.setRoc(rwsMasterData.rs.getString("OFFICE_CODE"));
				rwsMaster.setHoc(rwsMasterData.rs.getString("SECTOR"));
				// Debug.println("employee details executed");
				if (rwsMasterData.rs.getDate("DATE_OF_BIRTH") != null) {
					rwsMaster.setDob(df.format(rwsMasterData.rs.getDate("DATE_OF_BIRTH")));
				}
				if (rwsMasterData.rs.getDate("APPOINTMENT_DATE") != null) {
					rwsMaster.setAppointdate(df.format(rwsMasterData.rs.getDate("APPOINTMENT_DATE")));
				}
				if (rwsMasterData.rs.getDate("DATE_OF_JOINING") != null) {
					rwsMaster.setDoj(df.format(rwsMasterData.rs.getDate("DATE_OF_JOINING")));
				}
				if (rwsMasterData.rs.getDate("CURRENT_POST_HELD_FROM") != null) {
					rwsMaster.setCurrentpostdate(df.format(rwsMasterData.rs.getDate("CURRENT_POST_HELD_FROM")));
				}
				// Debug.println("date details executed");
				// rwsMaster.setPhone(rwsMasterData.rs.getString("PHONE"));
				// rwsMaster.setMobile(rwsMasterData.rs.getString("MOBILE"));
				// rwsMaster.setTotalworkscomp(rwsMasterData.rs.getString("TOTAL_NO_WORKS_COMPLETED"));

				rwsMaster.setQual(rwsMasterData.rs.getString("QUAL_CODE"));
				try {
					rwsMaster.setQualName(getQualName(rwsMasterData.rs.getString("QUAL_CODE"), rwsMasterData.conn));
				} catch (Exception e) {
					Debug.println("the error in getEmps()= " + e);
				}
				rwsMaster.setAddqual2(rwsMasterData.rs.getString("ADD_QUAL_2"));
				try {
					rwsMaster.setAddqual2(getQualName(rwsMasterData.rs.getString("ADD_QUAL_2"), rwsMasterData.conn));
				} catch (Exception e) {
					Debug.println("the error in getEmps()= " + e);
				}
				Debug.println("Qualification data in getEmps() executed");
				/*
				 * rwsMaster.setQual(rwsMasterData.rs.getString("QUAL_CODE"));
				 * Debug.println("qual code printed"); try {
				 * rwsMaster.setQualName(getQualName(rwsMasterData.rs.getString("QUAL_CODE"),
				 * rwsMasterData.conn)); } catch (Exception e) {
				 * Debug.println("the error in getEmps()= " + e); } try {
				 * rwsMaster.setAddqual2(getQualName(rwsMasterData.rs.getString("ADD_QUAL_2"),
				 * rwsMasterData.conn)); } catch (Exception e) {
				 * Debug.println("the error in getEmps()= " + e); }
				 * 
				 * 
				 * rwsMaster.setAddqual2(rwsMasterData.rs.getString("ADD_QUAL_2"));
				 * Debug.println("add qual code printed");
				 */

				rwsMaster.setHof(rwsMasterData.rs.getString("HEAD_OF_OFFICE"));
				rwsMaster.setPresentation(rwsMasterData.rs.getString("PRESENT_STATION_MANDAL"));
				// Debug.println("mandal details executed");
				// CODE ADDED FOR rws_EmpEntryList_frm.jsp
				rwsMaster.setWorkSpecial(rwsMasterData.rs.getString("WORK_SPECIALIZATION"));
				// Debug.println("1 details executed");
				rwsMaster.setRelation(rwsMasterData.rs.getString("FATHER_NAME"));
				// Debug.println("2t details executed");

				rwsMaster.setSocial(rwsMasterData.rs.getString("CASTE_CODE"));
				/*
				 * try {
				 * rwsMaster.setSocial(getCasteName(rwsMasterData.rs.getString("CASTE_CODE"),
				 * rwsMasterData.conn)); } catch (Exception e) { Debug.println("the error in
				 * Social Category= "+ e); }
				 * Debug.println("Social"+(getCasteName(rwsMasterData.rs.getString("CASTE_CODE")
				 * ,rwsMasterData.conn)));
				 */

				rwsMaster.setNdist(rwsMasterData.rs.getString("NATIVE_DISTRICT"));
				/*
				 * //if(rwsMasterData.rs.getString("NATIVE_DISTRICT")!=null) //try //{ //
				 * rwsMaster.setDistrict(rwsMasterData.rs.getString("NATIVE_DISTRICT"),
				 * rwsMasterData.conn); //} catch(Exception e) { Debug.println(" error in Native
				 * District"+e); }
				 */

				rwsMaster.setNmand(rwsMasterData.rs.getString("NATIVE_MANDAL"));
				// Debug.println("Nmand details executed");
				rwsMaster.setNarecruit(rwsMasterData.rs.getString("RECRUIT_LOCAL_NONLOCAL"));
				if (rwsMasterData.rs.getDate("DATE_OF_COMMENCE_PROBATION") != null) {
					rwsMaster.setDcommprob(df.format(rwsMasterData.rs.getDate("DATE_OF_COMMENCE_PROBATION")));
				}
				// rwsMaster.setDcommprob(rwsMasterData.rs.getString("DATE_OF_COMMENCE_PROBATION"));
				if (rwsMasterData.rs.getDate("DATE_OF_REGULARISATION") != null) {
					rwsMaster.setDdeclprob(df.format(rwsMasterData.rs.getDate("DATE_OF_REGULARISATION")));
				}
				// rwsMaster.setDdeclprob(rwsMasterData.rs.getString("DATE_OF_REGULARISATION"));

				if (rwsMasterData.rs.getDate("ACCTEST_PASS_DATE") != null) {
					rwsMaster.setDacctest(df.format(rwsMasterData.rs.getDate("ACCTEST_PASS_DATE")));
				}
				// Debug.println("Acctest details executed");

				// rwsMaster.setTempdesig(rwsMasterData.rs.getString("TEMP_PERMNENT"));
				rwsMaster.setDesig(rwsMasterData.rs.getString("TEMP_PERMNENT"));
				rwsMaster.setDesgnCode(rwsMasterData.rs.getString("DESIGNATION_CODE"));
				rwsMaster.setTempdesgCode(rwsMasterData.rs.getString("DESIGNATION_CODE"));

				// rwsMaster.setPerdesig(rwsMasterData.rs.getString("TEMP_PERMNENT"));
				if (rwsMasterData.rs.getDate("CURRENT_POST_HELD_FROM") != null) {
					rwsMaster.setCurrentpostdate(df.format(rwsMasterData.rs.getDate("CURRENT_POST_HELD_FROM")));
				}
				rwsMaster.setSurname(rwsMasterData.rs.getString("EMPLOYEE_SURNAME"));
				rwsMaster.setZone(rwsMasterData.rs.getString("ZONE_CODE"));
				// Debug.println("zone details executed");
				rwsMaster.setApcatog(rwsMasterData.rs.getString("APCATEG_CODE"));
				rwsMaster.setMoap(rwsMasterData.rs.getString("MOAP_CODE"));

				// Added on Aug 12
				rwsMaster.setGender(rwsMasterData.rs.getString("SEX"));
				rwsMaster.setNrevenue(rwsMasterData.rs.getString("NATIVE_REV_DIVISION"));
				rwsMaster.setTestpassed(rwsMasterData.rs.getString("ACCTEST_PASSED"));
				// Debug.println("Sex acctest");
				rwsMaster.setDeputation(rwsMasterData.rs.getString("DEPUTATION"));
				rwsMaster.setPanno(rwsMasterData.rs.getString("PAN_NO"));
				rwsMaster.setAplgi(rwsMasterData.rs.getString("APGLI_NO"));
				// Debug.println("in the pan_no");
				rwsMaster.setPayscale(rwsMasterData.rs.getString("PAY_SCALE_PRESENT"));
				if (rwsMasterData.rs.getDate("UPDATE_DATE") != null) {
					rwsMaster.setIncrementdate(df.format(rwsMasterData.rs.getDate("UPDATE_DATE")));
				}
				// Debug.println("payscale increment data");

				// Debug.println("designation details executed");
				rwsMaster.setOtherDet(rwsMasterData.rs.getString("OTHER_DETAILS"));
				rwsMaster.setDesgnCode(rwsMasterData.rs.getString("DESIGNATION_CODE"));
				rwsMaster.setCheckType(rwsMasterData.rs.getString("TYPE_OF_CHECK"));
				rwsMaster.setNoOfChecks(rwsMasterData.rs.getInt("NO_OF_CHECKS"));
				rwsMaster.setCheckPeriod(rwsMasterData.rs.getString("CHECK_PERIOD"));
				rwsMaster.setAppOrderRef(rwsMasterData.rs.getString("APPOINTMENT_ORDER_REF"));
				rwsMaster.setWorkSpecial(rwsMasterData.rs.getString("WORK_SPECIALIZATION"));
				rwsMaster.setPostCode(rwsMasterData.rs.getString("POST_JOINED_DESG_CODE"));

				// Added on Aug 2
				rwsMaster.setReligion(rwsMasterData.rs.getString("RELG_CODE"));

				rwsMaster.setDiststudied4(rwsMasterData.rs.getString("DIST_CLASS_IV"));

				rwsMaster.setDiststudied5(rwsMasterData.rs.getString("DIST_CLASS_V"));

				rwsMaster.setDiststudied6(rwsMasterData.rs.getString("DIST_CLASS_VI"));

				rwsMaster.setDiststudied7(rwsMasterData.rs.getString("DIST_CLASS_VII"));

				rwsMaster.setDiststudied8(rwsMasterData.rs.getString("DIST_CLASS_VIII"));

				rwsMaster.setDiststudied9(rwsMasterData.rs.getString("DIST_CLASS_IX"));

				rwsMaster.setDiststudied10(rwsMasterData.rs.getString("DIST_CLASS_X"));

				/*
				 * rwsMaster.setDiststudied5(rwsMasterData.rs.getString("DIST_CLASS_V"));
				 * rwsMaster.setDiststudied6(rwsMasterData.rs.getString("DIST_CLASS_VI"));
				 * rwsMaster.setDiststudied7(rwsMasterData.rs.getString("DIST_CLASS_VII"));
				 * rwsMaster.setDiststudied8(rwsMasterData.rs.getString("DIST_CLASS_VIII"));
				 * rwsMaster.setDiststudied9(rwsMasterData.rs.getString("DIST_CLASS_IX"));
				 * rwsMaster.setDiststudied10(rwsMasterData.rs.getString("DIST_CLASS_X"));
				 */

				rwsMaster.setLocaldist(rwsMasterData.rs.getString("LOCAL_DIST_AS_PER_SCH"));
				rwsMaster.setNoofyrs(rwsMasterData.rs.getString("NOOF_YEARS_STUDIED_IN_DIST"));
				// Debug.println("the getemps
				// Noofyrs"+rwsMasterData.rs.getString("NOOF_YEARS_STUDIED_IN_DIST"));

				rwsMaster.setLocalzone(rwsMasterData.rs.getString("LOCAL_ZONE"));
				rwsMaster.setNoofyrs1(rwsMasterData.rs.getString("NOOF_YEARS_STUDIED_IN_ZONE"));
				// Debug.println("the getemps
				// Noofyrs1"+rwsMasterData.rs.getString("NOOF_YEARS_STUDIED_IN_ZONE"));

				rwsMaster.setPvtdist(rwsMasterData.rs.getString("PRIVATE_PASSED_DIST"));
				rwsMaster.setPvtzone(rwsMasterData.rs.getString("PRIVATE_PASSED_ZONE"));

				Debug.println("end statement executed");
				emps.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The error in getEmps" + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return emps;
	}

	// *************************************************************************************

	public static RwsMaster getEmplycode(String empcode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;

		try {
			// Debug.println("in getEmp");
			//
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("select * from rws_employee_tbl where employee_code=" + empcode);
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setEmpcode(rwsMasterData.rs.getString("EMPLOYEE_CODE"));
				rwsMaster.setEmpname(rwsMasterData.rs.getString("EMPLOYEE_NAME"));
				rwsMaster.setRoc(rwsMasterData.rs.getString("OFFICE_CODE"));
				rwsMaster.setHoc(rwsMasterData.rs.getString("SECTOR"));
				if (rwsMasterData.rs.getDate("DATE_OF_BIRTH") != null) {
					rwsMaster.setDob(df.format(rwsMasterData.rs.getDate("DATE_OF_BIRTH")));
				}
				if (rwsMasterData.rs.getDate("APPOINTMENT_DATE") != null) {
					rwsMaster.setAppointdate(df.format(rwsMasterData.rs.getDate("APPOINTMENT_DATE")));
				}
				if (rwsMasterData.rs.getDate("DATE_OF_JOINING") != null) {
					rwsMaster.setDoj(df.format(rwsMasterData.rs.getDate("DATE_OF_JOINING")));
				}
				if (rwsMasterData.rs.getDate("CURRENT_POST_HELD_FROM") != null) {
					rwsMaster.setCurrentpostdate(df.format(rwsMasterData.rs.getDate("CURRENT_POST_HELD_FROM")));
				}
				rwsMaster.setPhone(rwsMasterData.rs.getString("PHONE"));
				rwsMaster.setMobile(rwsMasterData.rs.getString("MOBILE"));
				rwsMaster.setTotalworkscomp(rwsMasterData.rs.getString("TOTAL_NO_WORKS_COMPLETED"));
				rwsMaster.setQual(rwsMasterData.rs.getString("QUAL_CODE"));
				rwsMaster.setAddqual1(rwsMasterData.rs.getString("ADD_QUAL_1"));
				rwsMaster.setAddqual2(rwsMasterData.rs.getString("ADD_QUAL_2"));
				rwsMaster.setHof(rwsMasterData.rs.getString("HEAD_OF_OFFICE"));
				rwsMaster.setPresentation(rwsMasterData.rs.getString("PRESENT_STATION_MANDAL"));
				rwsMaster.setOtherDet(rwsMasterData.rs.getString("OTHER_DETAILS"));
				rwsMaster.setDesgnCode(rwsMasterData.rs.getString("DESIGNATION_CODE"));
				rwsMaster.setCheckType(rwsMasterData.rs.getString("TYPE_OF_CHECK"));
				rwsMaster.setNoOfChecks(rwsMasterData.rs.getInt("NO_OF_CHECKS"));
				rwsMaster.setCheckPeriod(rwsMasterData.rs.getString("CHECK_PERIOD"));
				rwsMaster.setAppOrderRef(rwsMasterData.rs.getString("APPOINTMENT_ORDER_REF"));
				rwsMaster.setWorkSpecial(rwsMasterData.rs.getString("WORK_SPECIALIZATION"));
				rwsMaster.setPostCode(rwsMasterData.rs.getString("POST"));

			}
		} catch (Exception e) {
			Debug.println("error in getEmp=" + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return rwsMaster;
	}

	// **************************************************************************************

	public static ArrayList getModeOfAppt(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList modes = new ArrayList();

		try {
			// Debug.println("in getModeOfAppt");
			//
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("SELECT * FROM RWS_MODEOFAPP_MST_TBL order by moap_code");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setMoapCode(rwsMasterData.rs.getString("moap_code"));
				rwsMaster.setMoapName(rwsMasterData.rs.getString("moap_name"));

				String moapCode = rwsMasterData.rs.getString("moap_code");
				String moapName = rwsMasterData.rs.getString("moap_name");

				rwsMaster.setModeNoName(moapCode + " - " + moapName);

				modes.add(rwsMaster);

			}
		}

		catch (Exception e) {
			Debug.println("The error in moapName" + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return modes;
	}

	// **************************************************************************************

	public static ArrayList getCastes(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList castes = new ArrayList();

		try {
			// Debug.println("in getCaste");
			//
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery("SELECT * FROM RWS_CAST_MST_TBL order by caste_code");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setCasteCode(rwsMasterData.rs.getString("caste_code"));
				rwsMaster.setCasteName(rwsMasterData.rs.getString("caste_name"));

				String casteCode = rwsMasterData.rs.getString("caste_code");
				String casteName = rwsMasterData.rs.getString("caste_name");

				rwsMaster.setCasteNoName(casteCode + " - " + casteName);

				castes.add(rwsMaster);

			}
		}

		catch (Exception e) {
			Debug.println("The error in casteName" + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return castes;
	}

	// *********************************************************************

	public static ArrayList getReligions(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList religions = new ArrayList();

		try {
			// Debug.println("in getReligion");
			//
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery("SELECT * FROM RWS_RELEGION_MST_TBL order by relg_code");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setRelgCode(rwsMasterData.rs.getString("relg_code"));
				rwsMaster.setRelgName(rwsMasterData.rs.getString("relg_name"));

				String relgCode = rwsMasterData.rs.getString("relg_code");
				String relgName = rwsMasterData.rs.getString("relg_name");

				rwsMaster.setRelgNoName(relgCode + " - " + relgName);

				religions.add(rwsMaster);

			}
		}

		catch (Exception e) {
			Debug.println("The error in religionName" + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return religions;
	}

	// ***************************************************************************

	public static ArrayList getZones(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList zonecodes = new ArrayList();

		try {
			// Debug.println("in getZones");
			//
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery("SELECT * FROM RWS_ZONE_MST_TBL order by ZONE_CODE");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setZoneCode(rwsMasterData.rs.getString("ZONE_CODE"));
				rwsMaster.setZoneName(rwsMasterData.rs.getString("ZONE_NAME"));

				String zoneCode = rwsMasterData.rs.getString("ZONE_CODE");
				String zoneName = rwsMasterData.rs.getString("ZONE_NAME");

				rwsMaster.setZoneNoName(zoneCode + " - " + zoneName);

				zonecodes.add(rwsMaster);

			}
		}

		catch (Exception e) {
			Debug.println("The error in zoneName" + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return zonecodes;
	}

	// *************************************************************

	public static ArrayList getCatogs(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList catcodes = new ArrayList();

		try {
			// Debug.println("in getCatogs");
			//
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("SELECT * FROM rws_app_category_mst_tbl order by APCATEG_CODE");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setCatCode(rwsMasterData.rs.getString("APCATEG_CODE"));
				rwsMaster.setCatName(rwsMasterData.rs.getString("APCATEG_NAME"));

				String catCode = rwsMasterData.rs.getString("APCATEG_CODE");
				String catName = rwsMasterData.rs.getString("APCATEG_NAME");

				rwsMaster.setCatNoName(catCode + " - " + catName);

				catcodes.add(rwsMaster);

			}
		}

		catch (Exception e) {
			Debug.println("The error in catName" + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return catcodes;
	}

	// **************************************************************

	public static ArrayList getQualNoName(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList qualcodes = new ArrayList();

		try {
			// Debug.println("in getQualNoName");
			//
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("SELECT * FROM RWS_qualification_TBL order by qual_code");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setQualCode(rwsMasterData.rs.getString("qual_code"));
				rwsMaster.setQualName(rwsMasterData.rs.getString("qual_name"));

				String qualCode = rwsMasterData.rs.getString("qual_code");
				String qualName = rwsMasterData.rs.getString("qual_name");

				rwsMaster.setQualNoName(qualCode + " - " + qualName);

				qualcodes.add(rwsMaster);

			}
		}

		catch (Exception e) {
			Debug.println("The error in QualNoName" + e);
		} finally {
			rwsMasterData.closeAll();
			// Debug.println("ConnCount after closing is " + connCount);
		}
		return qualcodes;
	}

	// **********************************************************************

	public static String updateEmp(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String var1;
		try {
			rwsMasterData.conn = RwsOffices.getConn();

			String query = "update rws_employee_tbl set employee_surname=?,employee_name=?,father_name=?,caste_code=?,relg_code=?,native_district=?,"
					+ "native_mandal=?,qual_code=?,office_code=?,sector=?,"
					+ "dist_class_IV=?,dist_class_V=?,dist_class_VI=?,dist_class_VII=?,dist_class_VIII=?,dist_class_IX=?,dist_class_X=?,"
					+ "local_zone=?,LOCAL_DIST_AS_PER_SCH=?,NOOF_YEARS_STUDIED_IN_DIST=?,NOOF_YEARS_STUDIED_IN_ZONE=?,PRIVATE_PASSED_DIST=?,PRIVATE_PASSED_ZONE=?,TEMP_PERMNENT=?,"
					+ "DESIGNATION_CODE=?,MOAP_CODE=?,ZONE_CODE=?,RECRUIT_LOCAL_NONLOCAL=?,APCATEG_CODE=?,"
					+ "ADD_QUAL_2=?,PRESENT_STATION_MANDAL=?,WORK_SPECIALIZATION=?,OTHER_DETAILS=?,date_of_birth=TO_DATE('"
					+ rwsMaster.getDob() + "','dd/mm/yyyy')," + "current_post_held_from=TO_DATE('"
					+ rwsMaster.getCurrentpostdate() + "','dd/mm/yyyy')," + "DATE_OF_COMMENCE_PROBATION=TO_DATE('"
					+ rwsMaster.getDcommprob() + "','dd/mm/yyyy')," + "DATE_OF_REGULARISATION=TO_DATE('"
					+ rwsMaster.getDdeclprob() + "','dd/mm/yyyy')," + "ACCTEST_PASS_DATE=TO_DATE('"
					+ rwsMaster.getDacctest() + "','dd/mm/yyyy')," + "APPOINTMENT_DATE=TO_DATE('"
					+ rwsMaster.getAppointdate() + "','dd/mm/yyyy')," + "DATE_OF_JOINING=TO_DATE('" + rwsMaster.getDoj()
					+ "','dd/mm/yyyy') where employee_code=?";
			// Debug.println("query is " + query);

			ps = rwsMasterData.conn.prepareStatement(query);

			// Debug.println("UdateEmp() inserting values in the table ");
			ps.setString(1, rwsMaster.getSurname());
			// Debug.println("the value of surname" + rwsMaster.getSurname());
			ps.setString(2, rwsMaster.getEmpname().toUpperCase());
			// Debug.println("the value of Empname" + rwsMaster.getEmpname());

			ps.setString(3, rwsMaster.getRelation());
			// Debug.println("the value of Relation" + rwsMaster.getRelation());
			ps.setString(4, rwsMaster.getCasteCode());
			// Debug.println("the value of Social" + rwsMaster.getCasteCode());
			ps.setString(5, rwsMaster.getRelgCode());
			// Debug.println("the value of Religion" + rwsMaster.getRelgCode());
			// ps.setInt(4,(rwsMaster.getSocial()));
			// ps.setString(5,(rwsMaster.getReligion()));

			ps.setString(6, rwsMaster.getDistrict());
			// Debug.println("the value of ndist" + rwsMaster.getDistrict());
			ps.setString(7, rwsMaster.getMandal());
			// Debug.println("the value of Nmand" + rwsMaster.getMandal());
			ps.setString(8, rwsMaster.getQual());
			// Debug.println("the value of Qual" + rwsMaster.getQual());

			ps.setString(9, rwsMaster.getRoc());
			// Debug.println("the value of Roc" + rwsMaster.getRoc());
			ps.setString(10, rwsMaster.getHoc());
			// Debug.println("the value of Hoc" + rwsMaster.getHoc());

			ps.setString(11, rwsMaster.getDiststudied4());
			ps.setString(12, rwsMaster.getDiststudied5());
			ps.setString(13, rwsMaster.getDiststudied6());
			ps.setString(14, rwsMaster.getDiststudied7());
			ps.setString(15, rwsMaster.getDiststudied8());
			ps.setString(16, rwsMaster.getDiststudied9());
			ps.setString(17, rwsMaster.getDiststudied10());
			/*
			 * Debug.println("the value of district studied" + rwsMaster.getDiststudied4() +
			 * rwsMaster.getDiststudied5() + rwsMaster.getDiststudied6() +
			 * rwsMaster.getDiststudied7() + rwsMaster.getDiststudied8());
			 */

			ps.setString(18, (rwsMaster.getLocalzone()));
			// Debug.println("the value of localzone" + rwsMaster.getLocalzone());
			ps.setString(19, rwsMaster.getLocaldist());
			// Debug.println("the value of localdist" + rwsMaster.getLocaldist());
			ps.setString(20, rwsMaster.getNoofyrs());
			// Debug.println("the noofyrs " + rwsMaster.getNoofyrs());
			ps.setString(21, rwsMaster.getNoofyrs1());
			// Debug.println("the noofyrs " + rwsMaster.getNoofyrs1());
			ps.setString(22, rwsMaster.getPvtdist());
			// Debug.println("the value of pvtdist" + rwsMaster.getPvtdist());
			ps.setString(23, rwsMaster.getPvtzone());
			// Debug.println("the value of pvtzone" + rwsMaster.getPvtzone());
			ps.setString(24, rwsMaster.getDesig());
			// Debug.println("the value of Desig" + rwsMaster.getDesig());

			if (rwsMaster.getDesig() != null && rwsMaster.getDesig().equals("P")) {
				ps.setString(25, rwsMaster.getDesgnCode());
				// Debug.println("the value of desgncode"+ rwsMaster.getDesgnCode());
			} else if (rwsMaster.getDesig() != null && rwsMaster.getDesig().equals("T")) {
				ps.setString(25, rwsMaster.getTempdesgCode());
				// Debug.println("the value of Tempdesgncode"+ rwsMaster.getTempdesgCode());
			} else {
				ps.setString(25, rwsMaster.getDesgnCode());
			}

			// Debug.println("the value of desgncode"+rwsMaster.getDesgnCode());
			// Debug.println("the value of
			// Tempdesgncode"+rwsMaster.getTempdesgCode());
			// ps.setString(26,rwsMaster.getAppointdate());
			ps.setString(26, rwsMaster.getMoapCode());
			// Debug.println("the value of moap" + rwsMaster.getMoapCode());
			ps.setString(27, rwsMaster.getZoneCode());
			// Debug.println("the value of zone" + rwsMaster.getZoneCode());

			ps.setString(28, rwsMaster.getNarecruit());
			// Debug.println("the value of narecruit" + rwsMaster.getNarecruit());
			ps.setString(29, rwsMaster.getApcatog());
			// Debug.println("the value of APCatog" + rwsMaster.getApcatog());
			// ps.setString(29,rwsMaster.getDacctest());
			// Debug.println("narecruit apcatog dacctest");
			// ps.setString(30,rwsMaster.getDcommprob());
			// ps.setString(31,rwsMaster.getDdeclprob());
			// ps.setString(33,rwsMaster.getCurrentpostdate());
			ps.setString(30, rwsMaster.getAddqual2());
			// Debug.println("the value of Addqual2" + rwsMaster.getAddqual2());
			ps.setString(31, rwsMaster.getPresentation());
			// Debug.println("the value of presentation" + rwsMaster.getPresentation());
			ps.setString(32, rwsMaster.getWorkSpecial());
			// Debug.println("the value of workspecial"+ rwsMaster.getWorkSpecial());
			ps.setString(33, rwsMaster.getOtherDet());

			/*
			 * Debug.println("the value of dacctest" + rwsMaster.getDacctest());
			 * 
			 * Debug.println("the value of Dob" + rwsMaster.getDob());
			 * Debug.println(rwsMaster.getDcommprob());
			 * Debug.println(rwsMaster.getDdeclprob());
			 * Debug.println(rwsMaster.getCurrentpostdate());
			 * Debug.println(rwsMaster.getDoj()); Debug.println(rwsMaster.getAppointdate());
			 * Debug.println("the value of date" + rwsMaster.getDcommprob() +
			 * rwsMaster.getDdeclprob() + rwsMaster.getCurrentpostdate() +
			 * rwsMaster.getDoj() + rwsMaster.getAppointdate());
			 */
			ps.setString(34, rwsMaster.getEmpcode());
			// Debug.println("the value of empcode" + rwsMaster.getEmpcode());
			// Debug.println("end of Upadation fields");

			int i = ps.executeUpdate();
			if (i > 0) {
				var1 = "record Updated successfully";

			} else
				var1 = "record Not Updated";

		} catch (Exception e) {
			Debug.println("The error in updateEmp" + e);
			var1 = "record Not Updated";
		} finally {
			rwsMasterData.closeAll();
		}
		return var1;
	}

	// **************************************************************************

	public static RwsMaster getEmp(String empcode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;

		try {
			// Debug.println("in getEmp");
			//
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt
					.executeQuery("select * from rws_employee_tbl where employee_code='" + empcode + "'");
			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				// added
				rwsMaster.setHoc((rwsMasterData.rs.getString("OFFICE_CODE")).substring(0, 1));
				/*
				 * Debug.println("hoc" + (rwsMasterData.rs.getString("OFFICE_CODE"))
				 * .substring(0, 1));
				 */
				rwsMaster.setCoc((rwsMasterData.rs.getString("OFFICE_CODE")).substring(1, 3));
				/*
				 * Debug.println("coc" + (rwsMasterData.rs.getString("OFFICE_CODE"))
				 * .substring(1, 3));
				 */
				rwsMaster.setDoc((rwsMasterData.rs.getString("OFFICE_CODE")).substring(3, 4));
				/*
				 * Debug.println("doc" + (rwsMasterData.rs.getString("OFFICE_CODE"))
				 * .substring(3, 4));
				 */
				rwsMaster.setSdoc((rwsMasterData.rs.getString("OFFICE_CODE")).substring(4, 6));
				/*
				 * Debug.println("sdoc" + (rwsMasterData.rs.getString("OFFICE_CODE"))
				 * .substring(4, 6));
				 */

				rwsMaster.setEmpcode(rwsMasterData.rs.getString("EMPLOYEE_CODE"));
				/*
				 * Debug.println("empcode" + rwsMasterData.rs.getString("EMPLOYEE_CODE"));
				 */
				rwsMaster.setSurname(rwsMasterData.rs.getString("EMPLOYEE_SURNAME"));// added
				/*
				 * Debug.println("surname" + rwsMasterData.rs.getString("EMPLOYEE_SURNAME"));
				 */
				rwsMaster.setEmpname(rwsMasterData.rs.getString("EMPLOYEE_NAME"));
				rwsMaster.setRoc(rwsMasterData.rs.getString("OFFICE_CODE"));
				rwsMaster.setHoc(rwsMasterData.rs.getString("SECTOR"));
				if (rwsMasterData.rs.getDate("DATE_OF_BIRTH") != null) {
					rwsMaster.setDob(df.format(rwsMasterData.rs.getDate("DATE_OF_BIRTH")));
				}
				if (rwsMasterData.rs.getDate("APPOINTMENT_DATE") != null) {
					rwsMaster.setAppointdate(df.format(rwsMasterData.rs.getDate("APPOINTMENT_DATE")));
				}
				if (rwsMasterData.rs.getDate("DATE_OF_JOINING") != null) {
					rwsMaster.setDoj(df.format(rwsMasterData.rs.getDate("DATE_OF_JOINING")));
				}
				if (rwsMasterData.rs.getDate("CURRENT_POST_HELD_FROM") != null) {
					rwsMaster.setCurrentpostdate(df.format(rwsMasterData.rs.getDate("CURRENT_POST_HELD_FROM")));
				}
				// added
				try {
					rwsMaster.setQual(rwsMasterData.rs.getString("QUAL_CODE"));
					rwsMaster.setQualName(getQualName(rwsMasterData.rs.getString("QUAL_CODE"), rwsMasterData.conn));
				} catch (Exception e) {
					Debug.println("the error in getEmps()= " + e);
				}

				try {
					rwsMaster.setAddqual2(RwsMasterData.format(rwsMasterData.rs.getString("ADD_QUAL_2")));
					rwsMaster.setQualName(getQualName(rwsMasterData.rs.getString("ADD_QUAL_2"), rwsMasterData.conn));
				} catch (Exception e) {
					Debug.println("the error in getEmps()= " + e);
				}

				rwsMaster.setHof(rwsMasterData.rs.getString("HEAD_OF_OFFICE"));
				rwsMaster.setRelation(rwsMasterData.rs.getString("FATHER_NAME"));
				rwsMaster.setSocial(rwsMasterData.rs.getString("CASTE_CODE"));
				rwsMaster.setNdist(rwsMasterData.rs.getString("NATIVE_DISTRICT"));
				rwsMaster.setNmand(rwsMasterData.rs.getString("NATIVE_MANDAL"));
				rwsMaster.setNarecruit(rwsMasterData.rs.getString("RECRUIT_LOCAL_NONLOCAL"));
				if (rwsMasterData.rs.getDate("DATE_OF_COMMENCE_PROBATION") != null) {
					rwsMaster.setDcommprob(df.format(rwsMasterData.rs.getDate("DATE_OF_COMMENCE_PROBATION")));
				}

				if (rwsMasterData.rs.getDate("DATE_OF_REGULARISATION") != null) {
					rwsMaster.setDdeclprob(df.format(rwsMasterData.rs.getDate("DATE_OF_REGULARISATION")));
				}

				if (rwsMasterData.rs.getDate("ACCTEST_PASS_DATE") != null) {
					rwsMaster.setDacctest(df.format(rwsMasterData.rs.getDate("ACCTEST_PASS_DATE")));
				}
				// Debug.println("Acctest details executed");

				rwsMaster.setDesig(rwsMasterData.rs.getString("TEMP_PERMNENT"));
				/*
				 * Debug.println("     Desig" + rwsMasterData.rs.getString("TEMP_PERMNENT"));
				 */
				rwsMaster.setDesgnCode(rwsMasterData.rs.getString("DESIGNATION_CODE"));
				/*
				 * Debug.println("      Desgncode" +
				 * rwsMasterData.rs.getString("DESIGNATION_CODE"));
				 */
				rwsMaster.setTempdesgCode(rwsMasterData.rs.getString("DESIGNATION_CODE"));
				/*
				 * Debug.println("      TempDesgncode" +
				 * rwsMasterData.rs.getString("DESIGNATION_CODE"));
				 */
				rwsMaster.setPhone(rwsMasterData.rs.getString("PHONE"));
				rwsMaster.setMobile(rwsMasterData.rs.getString("MOBILE"));
				rwsMaster.setTotalworkscomp(rwsMasterData.rs.getString("TOTAL_NO_WORKS_COMPLETED"));
				rwsMaster.setQual(rwsMasterData.rs.getString("QUAL_CODE"));
				rwsMaster.setAddqual1(rwsMasterData.rs.getString("ADD_QUAL_1"));
				rwsMaster.setAddqual2(rwsMasterData.rs.getString("ADD_QUAL_2"));
				rwsMaster.setHof(rwsMasterData.rs.getString("HEAD_OF_OFFICE"));
				rwsMaster.setPresentation(rwsMasterData.rs.getString("PRESENT_STATION_MANDAL"));
				rwsMaster.setOtherDet(rwsMasterData.rs.getString("OTHER_DETAILS"));
				rwsMaster.setDesgnCode(rwsMasterData.rs.getString("DESIGNATION_CODE"));
				rwsMaster.setCheckType(rwsMasterData.rs.getString("TYPE_OF_CHECK"));
				rwsMaster.setNoOfChecks(rwsMasterData.rs.getInt("NO_OF_CHECKS"));
				rwsMaster.setCheckPeriod(rwsMasterData.rs.getString("CHECK_PERIOD"));
				rwsMaster.setAppOrderRef(rwsMasterData.rs.getString("APPOINTMENT_ORDER_REF"));
				rwsMaster.setWorkSpecial(rwsMasterData.rs.getString("WORK_SPECIALIZATION"));
				rwsMaster.setPostCode(rwsMasterData.rs.getString("POST"));
				rwsMaster.setZone(rwsMasterData.rs.getString("ZONE_CODE"));
				// Debug.println("zone details executed");
				rwsMaster.setApcatog(rwsMasterData.rs.getString("APCATEG_CODE"));
				rwsMaster.setMoap(rwsMasterData.rs.getString("MOAP_CODE"));
				rwsMaster.setGender(rwsMasterData.rs.getString("SEX"));
				rwsMaster.setNrevenue(rwsMasterData.rs.getString("NATIVE_REV_DIVISION"));
				rwsMaster.setTestpassed(rwsMasterData.rs.getString("ACCTEST_PASSED"));
				// Debug.println("Sex acctest");
				rwsMaster.setDeputation(rwsMasterData.rs.getString("DEPUTATION"));
				rwsMaster.setPanno(rwsMasterData.rs.getString("PAN_NO"));
				rwsMaster.setApgli(rwsMasterData.rs.getString("APGLI_NO"));
				// Debug.println("in the pan_no");
				rwsMaster.setPayscale(rwsMasterData.rs.getString("PAY_SCALE_PRESENT"));
				rwsMaster.setOtherDet(rwsMasterData.rs.getString("OTHER_DETAILS"));
				rwsMaster.setReligion(rwsMasterData.rs.getString("RELG_CODE"));
				rwsMaster.setDiststudied4(rwsMasterData.rs.getString("DIST_CLASS_IV"));
				rwsMaster.setDiststudied5(rwsMasterData.rs.getString("DIST_CLASS_V"));
				rwsMaster.setDiststudied6(rwsMasterData.rs.getString("DIST_CLASS_VI"));
				rwsMaster.setDiststudied7(rwsMasterData.rs.getString("DIST_CLASS_VII"));
				rwsMaster.setDiststudied8(rwsMasterData.rs.getString("DIST_CLASS_VIII"));
				rwsMaster.setDiststudied9(rwsMasterData.rs.getString("DIST_CLASS_IX"));
				rwsMaster.setDiststudied10(rwsMasterData.rs.getString("DIST_CLASS_X"));

				rwsMaster.setLocaldist(rwsMasterData.rs.getString("LOCAL_DIST_AS_PER_SCH"));
				rwsMaster.setNoofyrs(rwsMasterData.rs.getString("NOOF_YEARS_STUDIED_IN_DIST"));
				/*
				 * Debug.println("the getemps Noofyrs" + rwsMasterData.rs
				 * .getString("NOOF_YEARS_STUDIED_IN_DIST"));
				 */
				rwsMaster.setLocalzone(rwsMasterData.rs.getString("LOCAL_ZONE"));
				rwsMaster.setNoofyrs1(rwsMasterData.rs.getString("NOOF_YEARS_STUDIED_IN_ZONE"));
				/*
				 * Debug.println("the getemps Noofyrs1" + rwsMasterData.rs
				 * .getString("NOOF_YEARS_STUDIED_IN_ZONE"));
				 */

				rwsMaster.setPvtdist(rwsMasterData.rs.getString("PRIVATE_PASSED_DIST"));
				rwsMaster.setPvtzone(rwsMasterData.rs.getString("PRIVATE_PASSED_ZONE"));

				// Debug.println("end statement of getEmp() executed");

			}
		} catch (Exception e) {
			Debug.println("error in getEmp=" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return rwsMaster;
	}

	// *********************************************************************************************

	public static ArrayList getDesgns(String desig, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList desgns = new ArrayList();

		try {
			// Debug.println("in getDesgns");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();

			if (desig.equalsIgnoreCase("P")) {
				rwsMasterData.rs = rwsMasterData.stmt.executeQuery(
						"select * from rws_designation_tbl where temp_permnent='P' order by designation_code");
			} else if (desig.equalsIgnoreCase("T")) {
				rwsMasterData.rs = rwsMasterData.stmt.executeQuery(
						"select * from rws_designation_tbl where temp_permnent='T' order by designation_code");
			} else if (desig.equalsIgnoreCase("W")) {
				rwsMasterData.rs = rwsMasterData.stmt.executeQuery(
						"select * from rws_designation_tbl where temp_permnent='W' order by designation_code");
			}
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setDesgnCode(rwsMasterData.rs.getString(1));
				rwsMaster.setDesgnAcr(rwsMasterData.rs.getString(2));
				rwsMaster.setDesgnName(rwsMasterData.rs.getString(3));

				desgns.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The error in getDesgns=" + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return desgns;
	}

	// end of code added for employee details

	// code for employee checklist
	public static ArrayList getFromDates1(DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String query;
		ArrayList fromDate = new ArrayList();
		try {
			// query = "select distinct to_char(access_date,'DD/MM/yy') from
			// rws_log_tbl order by to_char(access_date,'DD/MM/yy') desc";
			query = "select distinct to_char(UPDATE_DATE,'dd/mm/yyyy') as a1 from rws_employee_tbl order by substr(a1,7,10) desc,substr(a1,4,2) desc,substr(a1,1,2) desc";

			// Debug.println("query is " + query);
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(query);
			RwsMaster rwsMaster = null;
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setFromDate(rwsMasterData.rs.getString(1));
				// Debug.println("RwsMaster fromDate" + rwsMaster.getFromDate());
				fromDate.add(rwsMaster);
			}
			rwsMasterData.conn.close();
		} catch (Exception e) {
			Debug.println("Exception in GetDate in RwsMaster :" + e);
		}

		return fromDate;
	}

	public static ArrayList getToDates1(String fromDate, DataSource dataSource) {
		String query;
		ArrayList toDate = new ArrayList();
		RwsMasterData rwsMasterData = new RwsMasterData();
		// Debug.println("started getToDates in RwsMasterData before try");
		try {

			query = // "select distinct to_char(access_date,'DD/MM/yy') from
					// rws_log_tbl where to_date(ACCESS_DATE,'dd/mm/yy') >=
					// to_Date('"
					// + fromDate + "','dd/mm/yy') order by
					// to_char(access_date,'DD/MM/yy') desc";

					query = "select distinct to_char(UPDATE_DATE,'dd/mm/yyyy') as a1 from rws_employee_tbl where UPDATE_DATE>=to_Date('"
							+ fromDate
							+ "','dd/mm/yyyy') order by substr(a1,7,10) desc,substr(a1,4,2) desc,substr(a1,1,2) desc";

			// Debug.println("query is " + query);
			/*
			 * query="select unique(to_char(access_date,'dd/mm/yyyy')) from rws_log_tbl
			 * where to_date(ACCESS_DATE,'dd/mon/yyyy') >=
			 * to_Date('"+fromDate+"','dd/mm/yyyy')";
			 */

			/*
			 * query="select unique(to_Char(access_date,'dd/mm/yy')) from rws_log_tbl where
			 * to_Date(ACCESS_DATE,'dd/mon/yyyy') >= to_Date('"+fromDate+"','dd/mm/yyyy')";
			 */

			rwsMasterData.conn = RwsOffices.getConn();
			// Debug.println("rwsMasterData.conn" + rwsMasterData.conn);
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(query);
			RwsMaster rwsMaster = null;
			// Debug.println("rwsMasterData.rs.next()
			// :"+rwsMasterData.rs.next());

			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setToDate(rwsMasterData.rs.getString(1));
				// Debug.println("RwsMaster toDate" + rwsMaster.getToDate());
				toDate.add(rwsMaster);
			}
			rwsMasterData.conn.close();
		} catch (Exception e) {
			Debug.println("Exception in getToDates1 in RwsMasterData :" + e);
		}
		return toDate;
	}

	public static ArrayList getEmps1(String hoc, String coc, String doc, String sdoc, String fromdate, String todate,
			DataSource dataSource) throws Exception {
		String str;
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;// Form bean
		ArrayList emps = new ArrayList();

		try {
			rwsMasterData.conn = RwsOffices.getConn();
			// Debug.println("connection established");
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			// Debug.println("create statement executed");
			String query = "";
			// Debug.println("hoc=" + hoc + "coc=" + coc + "doc=" + doc + "sdoc="
			// + sdoc + "fromdate=" + fromdate + "todate=" + todate);

			// code added
			if (!hoc.equals("0") && coc.equals("00") && doc.equals("0") && sdoc.equals("00") && fromdate.equals("")
					&& todate.equals("")) {
				query = "select * from rws_employee_tbl where substr(office_code,1,1)='" + hoc
						+ "' order by EMPLOYEE_CODE";
			} else if (!hoc.equals("0") && coc.equals("00") && doc.equals("0") && sdoc.equals("00")) {
				query = "select * from rws_employee_tbl where substr(office_code,1,1)='" + hoc
						+ "' and UPDATE_DATE>=to_Date('" + fromdate + "','dd/mm/yyyy') and UPDATE_DATE<=to_Date('"
						+ todate + "','dd/mm/yyyy') order by EMPLOYEE_CODE,UPDATE_DATE desc"; // circleOffice
			}

			// headOffice
			/*
			 * else if (coc.equals("00") && doc.equals("0") && sdoc.equals("00"))
			 * query="select * from rws_employee_tbl where substr(office_code,1,1)='"+hoc+"'
			 * and UPDATE_DATE >= to_Date('"+fromdate+"','dd/mm/yy') and UPDATE_DATE
			 * <=to_Date('"+todate+"','dd/mm/yy') order by EMPLOYEE_CODE,UPDATE_DATE desc";
			 * //circleOffice
			 */
			else if (!hoc.equals("0") && !coc.equals("00") && doc.equals("0") && sdoc.equals("00")
					&& fromdate.equals("") && todate.equals("")) {
				query = "select * from rws_employee_tbl where substr(office_code,1,1)='" + hoc
						+ "' and substr(office_code,2,2)='" + coc + "' order by EMPLOYEE_CODE desc";
			}

			else if (!hoc.equals("0") && !coc.equals("00") && doc.equals("0") && sdoc.equals("00")) {
				query = "select * from rws_employee_tbl where substr(office_code,1,1)='" + hoc
						+ "' and substr(office_code,2,2)='" + coc + "' and UPDATE_DATE >= to_Date('" + fromdate
						+ "','dd/mm/yyyy') and UPDATE_DATE<=to_Date('" + todate
						+ "','dd/mm/yyyy') order by EMPLOYEE_CODE,UPDATE_DATE desc";
			}

			// divisionOffice
			else if (!hoc.equals("0") && !coc.equals("00") && !doc.equals("0") && sdoc.equals("00")
					&& fromdate.equals("") && todate.equals("")) {
				query = "select * from rws_employee_tbl where substr(office_code,1,1)='" + hoc
						+ "' and substr(office_code,2,2)='" + coc + "' and substr(office_code,4,1)='" + doc
						+ "' order by EMPLOYEE_CODE desc";
			}

			else if (!hoc.equals("0") && !coc.equals("00") && !doc.equals("0") && sdoc.equals("00")) {
				query = "select * from rws_employee_tbl where substr(office_code,1,1)='" + hoc
						+ "' and substr(office_code,2,2)='" + coc + "' and substr(office_code,4,1)='" + doc
						+ "' and UPDATE_DATE >= to_Date('" + fromdate + "','dd/mm/yyyy') and UPDATE_DATE<=to_Date('"
						+ todate + "','dd/mm/yyyy') order by EMPLOYEE_CODE,UPDATE_DATE desc";
			}

			// subDivisionOffice
			else if (!hoc.equals("0") && !coc.equals("00") && !doc.equals("0") && !sdoc.equals("00")
					&& fromdate.equals("") && todate.equals("")) {
				query = "select * from rws_employee_tbl where substr(office_code,1,1)='" + hoc
						+ "' and substr(office_code,2,2)='" + coc + "' and substr(office_code,4,1)='" + doc
						+ "' and substr(office_code,5,2)='" + sdoc + "' order by EMPLOYEE_CODE desc";
			}

			else if (!hoc.equals("0") && !coc.equals("00") && !doc.equals("0") && !sdoc.equals("00")) {
				query = "select * from rws_employee_tbl where substr(office_code,1,1)='" + hoc
						+ "' and substr(office_code,2,2)='" + coc + "' and substr(office_code,4,1)='" + doc
						+ "' and substr(office_code,5,2)='" + sdoc + "' and UPDATE_DATE >= to_Date('" + fromdate
						+ "','dd/mm/yyyy') and UPDATE_DATE<=to_Date('" + todate
						+ "','dd/mm/yyyy') order by EMPLOYEE_CODE,UPDATE_DATE desc";
			}

			// Debug.println("query is " + query);
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(query);
			// end of code added

			// rwsMasterData.rs = rwsMasterData.stmt.executeQuery(query);
			// Debug.println("select statement executed");
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				// Debug.println("rws statement executed");

				rwsMaster.setEmpcode(rwsMasterData.rs.getString("EMPLOYEE_CODE"));
				rwsMaster.setSurname(rwsMasterData.rs.getString("EMPLOYEE_SURNAME"));
				rwsMaster.setEmpname(rwsMasterData.rs.getString("EMPLOYEE_NAME"));
				if (rwsMasterData.rs.getString("OFFICE_CODE") != null) {
					rwsMaster.setRoc(rwsMasterData.rs.getString("OFFICE_CODE"));
				}
				rwsMaster.setHoc(rwsMasterData.rs.getString("SECTOR"));
				// Debug.println("employee details executed");
				if (rwsMasterData.rs.getDate("DATE_OF_BIRTH") != null) {
					rwsMaster.setDob(df.format(rwsMasterData.rs.getDate("DATE_OF_BIRTH")));
				}
				if (rwsMasterData.rs.getDate("APPOINTMENT_DATE") != null) {
					rwsMaster.setAppointdate(df.format(rwsMasterData.rs.getDate("APPOINTMENT_DATE")));
				}
				if (rwsMasterData.rs.getDate("DATE_OF_JOINING") != null) {
					rwsMaster.setDoj(df.format(rwsMasterData.rs.getDate("DATE_OF_JOINING")));
				}
				if (rwsMasterData.rs.getDate("CURRENT_POST_HELD_FROM") != null) {
					rwsMaster.setCurrentpostdate(df.format(rwsMasterData.rs.getDate("CURRENT_POST_HELD_FROM")));
				}
				// Debug.println("date details executed");
				// rwsMaster.setPhone(rwsMasterData.rs.getString("PHONE"));
				// rwsMaster.setMobile(rwsMasterData.rs.getString("MOBILE"));
				// rwsMaster.setTotalworkscomp(rwsMasterData.rs.getString("TOTAL_NO_WORKS_COMPLETED"));

				rwsMaster.setQual(rwsMasterData.rs.getString("QUAL_CODE"));
				try {
					rwsMaster.setQualName(getQualName(rwsMasterData.rs.getString("QUAL_CODE"), rwsMasterData.conn));
				} catch (Exception e) {
					Debug.println("the error in getEmps()= " + e);
				}
				rwsMaster.setAddqual2(rwsMasterData.rs.getString("ADD_QUAL_2"));
				try {
					rwsMaster.setAddqual2(getQualName(rwsMasterData.rs.getString("ADD_QUAL_2"), rwsMasterData.conn));
				} catch (Exception e) {
					Debug.println("the error in getEmps()= " + e);
				}
				// Debug.println("Qualification data in getEmps() executed");
				/*
				 * rwsMaster.setQual(rwsMasterData.rs.getString("QUAL_CODE"));
				 * Debug.println("qual code printed"); try {
				 * rwsMaster.setQualName(getQualName(rwsMasterData.rs.getString("QUAL_CODE"),
				 * rwsMasterData.conn)); } catch (Exception e) {
				 * Debug.println("the error in getEmps()= " + e); } try {
				 * rwsMaster.setAddqual2(getQualName(rwsMasterData.rs.getString("ADD_QUAL_2"),
				 * rwsMasterData.conn)); } catch (Exception e) {
				 * Debug.println("the error in getEmps()= " + e); }
				 * 
				 * 
				 * rwsMaster.setAddqual2(rwsMasterData.rs.getString("ADD_QUAL_2"));
				 * Debug.println("add qual code printed");
				 */

				rwsMaster.setHof(rwsMasterData.rs.getString("HEAD_OF_OFFICE"));
				rwsMaster.setPresentation(rwsMasterData.rs.getString("PRESENT_STATION_MANDAL"));
				// Debug.println("mandal details executed");
				// CODE ADDED FOR rws_EmpEntryList_frm.jsp
				rwsMaster.setWorkSpecial(rwsMasterData.rs.getString("WORK_SPECIALIZATION"));
				// Debug.println("1 details executed");
				rwsMaster.setRelation(rwsMasterData.rs.getString("FATHER_NAME"));
				// Debug.println("2t details executed");
				/*
				 * rwsMaster.setSocial(rwsMasterData.rs.getString("CASTE_CODE")); try {
				 * rwsMaster.setSocial(getCasteName(rwsMasterData.rs.getString("CASTE_CODE"),
				 * rwsMasterData.conn)); } catch (Exception e) { Debug.println("the error in
				 * Social Category= "+ e); }
				 * Debug.println("Social"+(getCasteName(rwsMasterData.rs.getString("CASTE_CODE")
				 * ,rwsMasterData.conn)));
				 */

				rwsMaster.setNdist(rwsMasterData.rs.getString("NATIVE_DISTRICT"));
				// if(rwsMasterData.rs.getString("NATIVE_DISTRICT")!=null)
				try {
					rwsMaster.setNdist(
							getDistrictName(rwsMasterData.rs.getString("NATIVE_DISTRICT"), rwsMasterData.conn));
				} catch (Exception e) {
					Debug.println(" error in Native District" + e);
				}

				rwsMaster.setNmand(rwsMasterData.rs.getString("NATIVE_MANDAL"));
				// Debug.println("Nmand details executed");
				rwsMaster.setNarecruit(rwsMasterData.rs.getString("RECRUIT_LOCAL_NONLOCAL"));
				if (rwsMasterData.rs.getDate("DATE_OF_COMMENCE_PROBATION") != null) {
					rwsMaster.setDcommprob(df.format(rwsMasterData.rs.getDate("DATE_OF_COMMENCE_PROBATION")));
				}
				// rwsMaster.setDcommprob(rwsMasterData.rs.getString("DATE_OF_COMMENCE_PROBATION"));
				if (rwsMasterData.rs.getDate("DATE_OF_REGULARISATION") != null) {
					rwsMaster.setDdeclprob(df.format(rwsMasterData.rs.getDate("DATE_OF_REGULARISATION")));
				}
				// rwsMaster.setDdeclprob(rwsMasterData.rs.getString("DATE_OF_REGULARISATION"));

				if (rwsMasterData.rs.getDate("ACCTEST_PASS_DATE") != null) {
					rwsMaster.setDacctest(df.format(rwsMasterData.rs.getDate("ACCTEST_PASS_DATE")));
				}
				// Debug.println("Acctest details executed");

				// rwsMaster.setTempdesig(rwsMasterData.rs.getString("TEMP_PERMNENT"));
				rwsMaster.setDesig(rwsMasterData.rs.getString("TEMP_PERMNENT"));
				rwsMaster.setDesgnCode(rwsMasterData.rs.getString("DESIGNATION_CODE"));
				rwsMaster.setTempdesgCode(rwsMasterData.rs.getString("DESIGNATION_CODE"));

				// rwsMaster.setPerdesig(rwsMasterData.rs.getString("TEMP_PERMNENT"));
				if (rwsMasterData.rs.getDate("CURRENT_POST_HELD_FROM") != null) {
					rwsMaster.setCurrentpostdate(df.format(rwsMasterData.rs.getDate("CURRENT_POST_HELD_FROM")));
				}
				rwsMaster.setSurname(rwsMasterData.rs.getString("EMPLOYEE_SURNAME"));
				rwsMaster.setZone(rwsMasterData.rs.getString("ZONE_CODE"));
				// Debug.println("zone details executed");
				rwsMaster.setApcatog(rwsMasterData.rs.getString("APCATEG_CODE"));
				rwsMaster.setMoap(rwsMasterData.rs.getString("MOAP_CODE"));

				// Added on Aug 12
				rwsMaster.setGender(rwsMasterData.rs.getString("SEX"));
				rwsMaster.setNrevenue(rwsMasterData.rs.getString("NATIVE_REV_DIVISION"));
				rwsMaster.setTestpassed(rwsMasterData.rs.getString("ACCTEST_PASSED"));
				// Debug.println("Sex acctest");
				rwsMaster.setDeputation(rwsMasterData.rs.getString("DEPUTATION"));
				rwsMaster.setPanno(rwsMasterData.rs.getString("PAN_NO"));
				rwsMaster.setApgli(rwsMasterData.rs.getString("APGLI_NO"));
				// Debug.println("in the pan_no");
				rwsMaster.setPayscale(rwsMasterData.rs.getString("PAY_SCALE_PRESENT"));
				if (rwsMasterData.rs.getDate("UPDATE_DATE") != null) {
					rwsMaster.setIncrementdate(df.format(rwsMasterData.rs.getDate("UPDATE_DATE")));
				}
				// Debug.println("payscale increment data");

				// Debug.println("designation details executed");
				rwsMaster.setOtherDet(rwsMasterData.rs.getString("OTHER_DETAILS"));
				rwsMaster.setDesgnCode(rwsMasterData.rs.getString("DESIGNATION_CODE"));
				rwsMaster.setCheckType(rwsMasterData.rs.getString("TYPE_OF_CHECK"));
				rwsMaster.setNoOfChecks(rwsMasterData.rs.getInt("NO_OF_CHECKS"));
				rwsMaster.setCheckPeriod(rwsMasterData.rs.getString("CHECK_PERIOD"));
				rwsMaster.setAppOrderRef(rwsMasterData.rs.getString("APPOINTMENT_ORDER_REF"));
				rwsMaster.setWorkSpecial(rwsMasterData.rs.getString("WORK_SPECIALIZATION"));
				rwsMaster.setPostCode(rwsMasterData.rs.getString("POST_JOINED_DESG_CODE"));

				// Added on Aug 2
				rwsMaster.setReligion(rwsMasterData.rs.getString("RELG_CODE"));

				rwsMaster.setDiststudied4(rwsMasterData.rs.getString("DIST_CLASS_IV"));
				try {
					rwsMaster.setDiststudied4(
							getDistrictName(rwsMasterData.rs.getString("DIST_CLASS_IV"), rwsMasterData.conn));
				} catch (Exception e) {
					Debug.println("the error in getEmps()= " + e);
				}
				rwsMaster.setDiststudied5(rwsMasterData.rs.getString("DIST_CLASS_V"));
				try {
					rwsMaster.setDiststudied5(
							getDistrictName(rwsMasterData.rs.getString("DIST_CLASS_V"), rwsMasterData.conn));
				} catch (Exception e) {
					Debug.println("the error in getEmps()= " + e);
				}

				rwsMaster.setDiststudied6(rwsMasterData.rs.getString("DIST_CLASS_VI"));
				try {
					rwsMaster.setDiststudied6(
							getDistrictName(rwsMasterData.rs.getString("DIST_CLASS_VI"), rwsMasterData.conn));
				} catch (Exception e) {
					Debug.println("the error in getEmps()= " + e);
				}
				rwsMaster.setDiststudied7(rwsMasterData.rs.getString("DIST_CLASS_VII"));
				try {
					rwsMaster.setDiststudied7(
							getDistrictName(rwsMasterData.rs.getString("DIST_CLASS_VII"), rwsMasterData.conn));
				} catch (Exception e) {
					Debug.println("the error in getEmps()= " + e);
				}
				rwsMaster.setDiststudied8(rwsMasterData.rs.getString("DIST_CLASS_VIII"));
				try {
					rwsMaster.setDiststudied8(
							getDistrictName(rwsMasterData.rs.getString("DIST_CLASS_VIII"), rwsMasterData.conn));
				} catch (Exception e) {
					Debug.println("the error in getEmps()= " + e);
				}
				rwsMaster.setDiststudied9(rwsMasterData.rs.getString("DIST_CLASS_IX"));
				try {
					rwsMaster.setDiststudied9(
							getDistrictName(rwsMasterData.rs.getString("DIST_CLASS_IX"), rwsMasterData.conn));
				} catch (Exception e) {
					Debug.println("the error in getEmps()= " + e);
				}
				rwsMaster.setDiststudied10(rwsMasterData.rs.getString("DIST_CLASS_X"));
				try {
					rwsMaster.setDiststudied10(
							getDistrictName(rwsMasterData.rs.getString("DIST_CLASS_X"), rwsMasterData.conn));
				} catch (Exception e) {
					Debug.println("the error in getEmps()= " + e);
				}
				/*
				 * rwsMaster.setDiststudied5(rwsMasterData.rs.getString("DIST_CLASS_V"));
				 * rwsMaster.setDiststudied6(rwsMasterData.rs.getString("DIST_CLASS_VI"));
				 * rwsMaster.setDiststudied7(rwsMasterData.rs.getString("DIST_CLASS_VII"));
				 * rwsMaster.setDiststudied8(rwsMasterData.rs.getString("DIST_CLASS_VIII"));
				 * rwsMaster.setDiststudied9(rwsMasterData.rs.getString("DIST_CLASS_IX"));
				 * rwsMaster.setDiststudied10(rwsMasterData.rs.getString("DIST_CLASS_X"));
				 */

				rwsMaster.setLocaldist(rwsMasterData.rs.getString("LOCAL_DIST_AS_PER_SCH"));
				rwsMaster.setNoofyrs(rwsMasterData.rs.getString("NOOF_YEARS_STUDIED_IN_DIST"));
				// Debug.println("the getemps
				// Noofyrs"+rwsMasterData.rs.getString("NOOF_YEARS_STUDIED_IN_DIST"));

				rwsMaster.setLocalzone(rwsMasterData.rs.getString("LOCAL_ZONE"));
				rwsMaster.setNoofyrs1(rwsMasterData.rs.getString("NOOF_YEARS_STUDIED_IN_ZONE"));
				// Debug.println("the getemps
				// Noofyrs1"+rwsMasterData.rs.getString("NOOF_YEARS_STUDIED_IN_ZONE"));

				rwsMaster.setPvtdist(rwsMasterData.rs.getString("PRIVATE_PASSED_DIST"));
				rwsMaster.setPvtzone(rwsMasterData.rs.getString("PRIVATE_PASSED_ZONE"));

				// Debug.println("end statement executed");
				emps.add(rwsMaster);
			}
		} catch (Exception e) {
			Debug.println("The error in getEmps" + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return emps;
	}

	// end of code for employee checklist
	public static String getPayScales(String desgcode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();

		String payscale = null;

		try {
			// Debug.println("in getPayScale");

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();

			// Debug.println("desgsssss" + desgcode);
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(
					"select DISTINCT REVISED_PAY_SCALE  from RWS_PAY_SCALE_TBL P,RWS_DESIGNATION_TBL D WHERE P.DESIGNATION_CODE=D.DESIGNATION_CODE AND P.DESIGNATION_CODE='"
							+ desgcode + "'");

			if (rwsMasterData.rs.next()) {
				if (rwsMasterData.rs.getString(1) != null) {
					payscale = rwsMasterData.rs.getString(1);
					// Debug.println("payyyyyyysacle0" + payscale);
				} else {
					payscale = "-";
					// Debug.println("payyyyyyysacle1" + payscale);
				}
			} else {
				payscale = "-";
				// Debug.println("payyyyyyysacle2" + payscale);
			}

		} catch (Exception e) {
			Debug.println("The error in getPayScales=" + e);
		} finally {
			rwsMasterData.closeAll();

			Debug.println("ConnCount after closing is " + connCount);
		}
		return payscale;
	}

/*	public static boolean validateUserForPanVilHabEntry(RwsOffices rwsOffices, String userId) {
		try {
			String officeType = rwsOffices.getOfficeType(userId);
			if (!officeType.equals("Head Office"))
				return false;
			else
				return true;

		} catch (Exception e) {
			System.out.println("The exception is in RwsMasterData validateUserForPanVilHabEntry = "+e.getMessage());
			return false;
		}
	}*/
	//added by nagendra kankatala 24/04/2020
	
	public static boolean validateUserForPanVilHabEntry(RwsOffices rwsOffices, String userId) {
		try {
			String officeType = rwsOffices.getOfficeType(userId);
			
			
			if (officeType.equals("Head Office")){
				//System.out.println(officeType+"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
				return true;
			}else if(officeType.equals("Circle")){
				//System.out.println(officeType+"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
				return true;
			}else
			{
				//System.out.println(officeType+"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
				return false;}
				

		} catch (Exception e) {
			System.out.println("The exception is in RwsMasterData validateUserForPanVilHabEntry = "+e.getMessage());
			return false;
		}
	}

	
	public ArrayList getWaterTests(DataSource dataSource, RwsMasterData rwsMasterData) throws Exception {
		RwsMaster rwsMaster = null;
		ArrayList watertests = new ArrayList();
		try {
			conn = RwsOffices.getConn();
			String query = "SELECT TEST_CODE,TEST_NAME,DECODE(TEST_PERIODCITY ,'M','MONTHLY','Q','QUARTERLY','H','HALFERLY','Y','YEARLY') FROM RWS_WATER_QUALITY_TEST_TBL where TEST_CODE <>'3'";
			ps = conn.prepareStatement(query);
			rs = ps.executeQuery();
			while (rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setTestCode(rs.getString(1));
				rwsMaster.setTestName(rs.getString(2));
				rwsMaster.setTestPeriod(rs.getString(3));
				rwsMaster.setTestCodeDisplay(rs.getString(1) + "-" + rs.getString(2));
				watertests.add(rwsMaster);				
			}
		} catch (Exception e) {
			System.out.println("The exception is in RwsMasterData getWaterTests = "+e.getMessage());
		} finally {
			rwsMasterData.closeAll();			
		}		
		return watertests;
	}

	public static String getHabName(String habCode, Connection conn) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		connCount--;
		rwsMasterData.conn = conn;
		String name = null;
		try {
			rwsMasterData.pstmt1 = rwsMasterData.conn
					.prepareStatement("SELECT PANCH_NAME FROM rws_panchayat_raj_tbl WHERE panch_code =?");
			rwsMasterData.pstmt1.setString(1, habCode);
			rwsMasterData.rs1 = rwsMasterData.pstmt1.executeQuery();
			while (rwsMasterData.rs1.next()) {
				name = rwsMasterData.rs1.getString(1);
			}
		} catch (Exception e) {
			Debug.println("The Exception at getHabName in  RwsMasterData" + e);
		} finally {
			rwsMasterData.pstmt1.close();
			rwsMasterData.rs1.close();
		}
		return name;
	}

	public static ArrayList getDivSubdiv(DataSource dataSource, String habCode) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		ArrayList mandalsDist = null;
		String query = null;
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			query = "select * from rws_mandal_subdivision_tbl where dcode = ? and mcode =?";
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt.setString(1, habCode.substring(0, 2));
			rwsMasterData.pstmt.setString(2, habCode.substring(5, 7));
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			RwsMaster rwsMaster = null;
			mandalsDist = new ArrayList();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setDivisionOfficeCode(rwsMasterData.rs.getString(2));
				rwsMaster.setSubdivisionOfficeCode(rwsMasterData.rs.getString(3));
				mandalsDist.add(rwsMaster);
			}
		} catch (Exception e) {
			System.out.println("The error in getDivSubdiv()=== RwsMasterData " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return mandalsDist;
	}

	public static String getSourceTypeName(String sourceType) {
		String sourceTypeName = "";

		if (sourceType.equals("0101001"))
			sourceTypeName = "PWS SUBSURFACE SOURCE";

		if (sourceType.equals("0101002"))
			sourceTypeName = "PWS SURFACE SOURCE";

		if (sourceType.equals("0101003"))
			sourceTypeName = "PWS PUMPSETS";

		if (sourceType.equals("0201001"))
			sourceTypeName = "MPWS SUBSURFACE SOURCE";

		if (sourceType.equals("0201002"))
			sourceTypeName = "MPWS SURFACE SOURCE";

		if (sourceType.equals("0201003"))
			sourceTypeName = "MPWS PUMPSETS";

		if (sourceType.equals("0301001"))
			sourceTypeName = "CPWS SUBSURFACE SOURCE";

		if (sourceType.equals("0301002"))
			sourceTypeName = "CPWS SURFACE SOURCE";

		if (sourceType.equals("0301003"))
			sourceTypeName = "CPWS PUMPSETS";

		if (sourceType.equals("0401001"))
			sourceTypeName = "HANDPUMPS BOREWELL";

		if (sourceType.equals("0501001"))
			sourceTypeName = "SHALLOW HANDPUMPS";

		if (sourceType.equals("0601001"))
			sourceTypeName = "OPEN WELLS";

		if (sourceType.equals("0701001"))
			sourceTypeName = "PONDS";
		if (sourceType.equals("0901001"))
			sourceTypeName = "DIRECT PUMPING SOURCES";
		// Added for GLSR"
		if (sourceType.equals("0104003"))
			sourceTypeName = "PWS GLSR";

		if (sourceType.equals("0204003"))
			sourceTypeName = "MPWS GLSR";
		if (sourceType.equals("0304003"))
			sourceTypeName = "CPWS GLSR";
		// Added for glbr
		if (sourceType.equals("0104004"))
			sourceTypeName = "PWS GLBR";
		if (sourceType.equals("0204004"))
			sourceTypeName = "MPWS GLBR";
		if (sourceType.equals("0304004"))
			sourceTypeName = "CPWS GLBR";
		// Added for glbr
		// Added for ohsr
		if (sourceType.equals("0104001"))
			sourceTypeName = "PWS OHSR";
		if (sourceType.equals("0204001"))
			sourceTypeName = "MPWS OHSR";
		if (sourceType.equals("0304001"))
			sourceTypeName = "CPWS OHSR";

		return sourceTypeName;
	}

	public static ArrayList getMandals(DataSource dataSource, String circlecode, String doc, String sdoc) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		rwsMasterData.conn = RwsOffices.getConn();
		ArrayList mandalsDist = null;
		String query = null;
		try {
			query = "select m.dcode,m.mcode,m.mname from rws_mandal_subdivision_tbl r,rws_mandal_tbl m "
				+ "where r.dcode=m.dcode and m.mcode=r.mcode and r.dcode= ? and  r.division_office_code= ? and r.subdivision_office_code = ? ";
			rwsMasterData.ps = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.ps.setString(1, circlecode);
			rwsMasterData.ps.setString(2, doc);
			rwsMasterData.ps.setString(3, sdoc);
			rwsMasterData.rs = rwsMasterData.ps.executeQuery();
			RwsMaster rwsMaster = null;
			mandalsDist = new ArrayList();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setMandalCode(rwsMasterData.rs.getString(2));
				rwsMaster.setMandalName(rwsMasterData.rs.getString(3));
				mandalsDist.add(rwsMaster);			}

		} catch (Exception e) {
			System.out.println("The exception in RwsMasterData getMandals = "+e.getMessage());
		} finally {
			rwsMasterData.conn.close();
		}
		
		return mandalsDist;
	}

	public static String ComponentExistsOrNot(String assetCode, String assetTypeCode) throws Exception {
		String query = null;
		String tabPrifix = "", message = "";
		boolean subComponentsExists = false;
		if (assetTypeCode.equals("01")) {
			tabPrifix = "RWS_AST_";
		} else if (assetTypeCode.equals("02")) {
			tabPrifix = "RWS_AST_";
		} else if (assetTypeCode.equals("03")) {
			tabPrifix = "RWS_AST_";
		} else if (assetTypeCode.equals("09"))
			tabPrifix = "RWS_AST_";

		RwsMasterData rwsMasterData = new RwsMasterData();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
		
			if (assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) {
				query = "select " + "(select count(*) from RWS_SOURCE_TBL WHERE ASSET_CODE=?)source_count," 
						+ "(select count(*) from " + tabPrifix	+ "SUBCOMP_PARAM_TBL WHERE ASSET_CODE=?)comcomp_param_count,"
						+ "(select count(*) from " + tabPrifix + "RW_COLLWELL_PARAM_TBL WHERE ASSET_CODE=?)rwcw_count,"
						+ "(select count(*) from " + tabPrifix + "SS_SC_PARAM_TBL WHERE ASSET_CODE=?)sstank_count," 
						+ "(select count(*) from " + tabPrifix	+ "WTP_SC_PARAM_TBL WHERE ASSET_CODE=?)filters_count,"
						+ "(select count(*) from " + tabPrifix + "SUMP_M_SC_PARAM_TBL WHERE ASSET_CODE=?)sump_count," 
						+ "(select count(*) from " + tabPrifix	+ "FP_BRIDGE_PARAM_TBL WHERE ASSET_CODE=?)fpb_count,"
						+ "(select count(*) from " + tabPrifix + "PUMPHOUSE_PARAM_TBL WHERE ASSET_CODE=?)pumphouse_count," 
						+ "(select count(*) from " + tabPrifix	+ "WATCHMAN_PARAM_TBL WHERE ASSET_CODE=?)watchman_count,"
						+ "(select count(*) from " + tabPrifix	+ "CW_COLLWELL_PARAM_TBL WHERE ASSET_CODE=?)cpws_cwcw_count,"
						+ "(select count(*) from " + tabPrifix + "PUMPINGMAIN_TBL WHERE ASSET_CODE=?)pumpingmain_count," 
						+ "(select count(*) from " + tabPrifix	+ "GRAVITYMAIN_TBL WHERE ASSET_CODE=?)gravitymain_count, "
						+ "(select count(*) from " + tabPrifix + "DISTRI_SC_PARAM_TBL WHERE ASSET_CODE=?)distribution_count,"
						+ "(select count(*) from " + tabPrifix	+ "OHSR_SC_PARAM_TBL WHERE ASSET_CODE=?)ohsr_count, "
						+ "(select count(*) from " + tabPrifix + "OHBR_SC_PARAM_TBL WHERE ASSET_CODE=?)ohbr_count, " 
						+ "(select count(*) from " + tabPrifix	+ "GLSR_SC_PARAM_TBL WHERE ASSET_CODE=?)glsr_count,"
						+ "(select count(*) from " + tabPrifix + "GLBR_SC_PARAM_TBL WHERE ASSET_CODE=?)glbr_count, " 
						+ "(select count(*) from " + tabPrifix + "BPT_PARAM_TBL WHERE ASSET_CODE=?)bpt_count, " 
						+ "(select count(*) from " + tabPrifix	+ "CIS_SC_PARAM_TBL WHERE ASSET_CODE=?)cis_count, "
						+ "(select count(*) from "+ tabPrifix + "OTHERS_PARAM_TBL WHERE ASSET_CODE=?)others_param_count,"
						+ "(select count(*) from " + tabPrifix + "CHLORINATION_TBL WHERE ASSET_CODE=?)chlorination_param_count," 
						+ "(select count(*) from " + tabPrifix + "STANDPOST_TBL WHERE ASSET_CODE=?)standpost_param_count," 
						+ "(select count(*) from " + tabPrifix	+ "OANDM_PARAM_TBL WHERE ASSET_CODE=?)oandm_param_count from dual";
				// Debug.println("query is "+query);
				rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.pstmt.setString(2, assetCode);
				rwsMasterData.pstmt.setString(3, assetCode);
				rwsMasterData.pstmt.setString(4, assetCode);
				rwsMasterData.pstmt.setString(5, assetCode);
				rwsMasterData.pstmt.setString(6, assetCode);
				rwsMasterData.pstmt.setString(7, assetCode);
				rwsMasterData.pstmt.setString(8, assetCode);
				rwsMasterData.pstmt.setString(9, assetCode);
				rwsMasterData.pstmt.setString(10, assetCode);
				rwsMasterData.pstmt.setString(11, assetCode);
				rwsMasterData.pstmt.setString(12, assetCode);
				rwsMasterData.pstmt.setString(13, assetCode);
				rwsMasterData.pstmt.setString(14, assetCode);
				rwsMasterData.pstmt.setString(15, assetCode);
				rwsMasterData.pstmt.setString(16, assetCode);
				rwsMasterData.pstmt.setString(17, assetCode);
				rwsMasterData.pstmt.setString(18, assetCode);
				rwsMasterData.pstmt.setString(19, assetCode);
				rwsMasterData.pstmt.setString(20, assetCode);
				rwsMasterData.pstmt.setString(21, assetCode);
				rwsMasterData.pstmt.setString(22, assetCode);
				rwsMasterData.pstmt.setString(23, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				while (rwsMasterData.rs.next()) {
					for (int i = 1; i < 21; i++) {
						if (rwsMasterData.rs.getInt(i) > 0) {
							subComponentsExists = true;
							message = "true";
						}
					}
				}
			}
		} catch (Exception e) {
			 System.out.println("Exception in ComponentExistsOrNot in RwsMasterData:  "+e);
		} finally {
			rwsMasterData.rs.close();
			rwsMasterData.pstmt.close();
			rwsMasterData.conn.close();
		}
		return message;
	}

	public static int totalHabCoveredForAsset(String assetCode, String assetTypeCode) throws Exception {
		String query = null;
		int habCovered = 0;
		RwsMasterData rwsMasterData = new RwsMasterData();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
		
			if (assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) {
				query = "select count(hab_code) from rws_asset_hab_tbl where asset_code=?";
				rwsMasterData.pstmt=rwsMasterData.conn.prepareStatement(query);
				rwsMasterData.pstmt.setString(1, assetCode);
				rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
				if (rwsMasterData.rs.next()) {
					habCovered = rwsMasterData.rs.getInt(1);
				}
			}
		} catch (Exception e) {
			System.out.println("The Exception at totalHabCoveredForAsset in RwsMasterData:  "+e);
		} finally {
			rwsMasterData.closeAll();
		}
		return habCovered;
	}

	public static ArrayList getSourceCount(String assetCode, String assetTypeCode) throws Exception {
		String query = null;
		String tabPrifix = "", message = "";
		ArrayList sourceNo = new ArrayList();
		boolean subComponentsExists = false;
		if (assetTypeCode.equals("01")) {
			tabPrifix = "RWS_AST_";
		} else if (assetTypeCode.equals("02")) {
			tabPrifix = "RWS_AST_";
		} else if (assetTypeCode.equals("03")) {
			tabPrifix = "RWS_AST_";
		} else if (assetTypeCode.equals("09"))
			tabPrifix = "RWS_AST_";

		RwsMasterData rwsMasterData = new RwsMasterData();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			if (assetTypeCode.equals("01") || assetTypeCode.equals("02") || assetTypeCode.equals("03")
					|| assetTypeCode.equals("09")) {
				/*query = "select " + "(select count(*) from RWS_SOURCE_TBL WHERE ASSET_CODE='" + assetCode
						+ "' and source_type_code='1')surfacesource_count,"
						+ "(select count(*) from RWS_SOURCE_TBL WHERE ASSET_CODE='" + assetCode
						+ "' and source_type_code='2')subsurfacesource_count" + " from dual";*/
				query = "select " + "(select (select count(*) from RWS_SOURCE_TBL WHERE ASSET_CODE='" + assetCode
						+ "' and source_type_code='1') +(select count(*) from RWS_SOURCE_TBL a,rws_asset_source_lnk_tbl b "
						+ " WHERE  a.source_code=b.SOURCE_CODE and b.ASSET_CODE='" + assetCode
					    + "' and source_type_code='1') from dual )    surfacesource_count,"
						+ "(select (select count(*) from RWS_SOURCE_TBL WHERE ASSET_CODE='" + assetCode
						+ "' and source_type_code='2') + (select count(*) from RWS_SOURCE_TBL a,rws_asset_source_lnk_tbl b " 
		         		+ " WHERE  a.source_code=b.SOURCE_CODE and b.ASSET_CODE='" + assetCode
					    + "' and source_type_code='2') from dual )subsurfacesource_count" + " from dual";
				// Debug.println("query is "+query);
				rwsMasterData.rs = rwsMasterData.stmt.executeQuery(query);
				if (rwsMasterData.rs.next()) {
					sourceNo.add(0, "" + rwsMasterData.rs.getInt(1));
					sourceNo.add(1, "" + rwsMasterData.rs.getInt(2));
				}
			}
		} catch (Exception e) {
			// System.out.println("The error in getMandals()=== RwsLocations
			// "+e);
		} finally {
			rwsMasterData.rs.close();
			rwsMasterData.stmt.close();
			rwsMasterData.conn.close();
		}
		return sourceNo;
	}

	public static ArrayList getAssetDists(String assetCode) throws Exception {
		String query = null;
		ArrayList assets = new ArrayList();
		RwsMasterData rwsMasterData = new RwsMasterData();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			query = "select distinct substr(hab_code,1,2) from rws_asset_hab_tbl where asset_code=?";
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt.setString(1, assetCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			int count = 0;
			while (rwsMasterData.rs.next()) {
				assets.add(count, "" + rwsMasterData.rs.getString(1));
			}
		} catch (Exception e) {
			 System.out.println("Exception at getAssetDists in RwsMasterData : "+e);
		} finally {
			rwsMasterData.closeAll();
		}
		return assets;
	}


	public static ArrayList getContractordivisionwise(String circle, String division, String category)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList divisionwise = new ArrayList();

		try {
			String query = "";
			int year = RwsMasterData.getProjectsyear();
			int lastfiveyear = year - 5;
			String five = "" + lastfiveyear;

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			query = "select distinct c.CONTRACTOR_CODE,CONTRACTOR_NAME_COMPANY ,NVL(PAN_NO,'_'),NVL(VOTER_ID,'_') from rws_contractor_selection_tbl cs,rws_contractor_tbl c,rws_work_admn_tbl w where w.work_id=cs.work_id and CS.CONTRACTOR_CODE=C.CONTRACTOR_CODE AND substr(w.office_code,2,2)='"
					+ circle + "' ";
			if (division != null && !division.equals("")) {
				query += "and substr(w.office_code,4,1)='" + division + "'";
			}
			if (category != null && !category.equals("")) {
				query += "and w.category_code='" + category + "'";
			}

			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(query);
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setContractorCode(rwsMasterData.rs.getString(1));
				rwsMaster.setFirstName(rwsMasterData.rs.getString(2));
				rwsMaster.setPanNo(rwsMasterData.rs.getString(3));
				rwsMaster.setVoterId(rwsMasterData.rs.getString(4));
				String count = RwsMasterData.getContractorWorks(rwsMasterData.rs.getString("CONTRACTOR_CODE"), five,
						rwsMasterData.conn, null, circle);
				String[] counts = count.split("/");
				rwsMaster.setProjectsExecuted(counts[0]);
				rwsMaster.setProjectsCompletedInTime(counts[1]);
				rwsMaster.setProjectsCompletedLastYear(counts[2]);
				rwsMaster.setProjectsInhand(counts[3]);
				divisionwise.add(rwsMaster);

			}
		} catch (Exception e) {
			Debug.println("The error in getContractordivisionwise is " + e);
		} finally {
			rwsMasterData.closeAll();

		}
		return divisionwise;
	}

	

	public static ArrayList getContractoramountwise(String amount, String circle) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList divisionwise = new ArrayList();

		int amnt = Integer.parseInt(amount);

		try {
			String query = "";
			int year = RwsMasterData.getProjectsyear();
			int lastfiveyear = year - 5;
			String five = "" + lastfiveyear;

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();

			query = "select distinct c.CONTRACTOR_CODE,CONTRACTOR_NAME_COMPANY ,NVL(PAN_NO,'_'),NVL(VOTER_ID,'_') "
					+ "from rws_contractor_selection_tbl cs,rws_contractor_tbl c,rws_work_admn_tbl w where w.sanction_amount >='"
					+ amount + "'and w.work_id=cs.work_id and CS.CONTRACTOR_CODE=C.CONTRACTOR_CODE";

			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(query);
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				rwsMaster.setContractorCode(rwsMasterData.rs.getString(1));
				rwsMaster.setFirstName(rwsMasterData.rs.getString(2));
				rwsMaster.setPanNo(rwsMasterData.rs.getString(3));
				rwsMaster.setVoterId(rwsMasterData.rs.getString(4));

				String count = RwsMasterData.getContractorWorks(rwsMasterData.rs.getString("CONTRACTOR_CODE"), five,
						rwsMasterData.conn, amount, circle);
				String[] counts = count.split("/");
				rwsMaster.setProjectsExecuted(counts[0]);
				rwsMaster.setProjectsCompletedInTime(counts[1]);
				rwsMaster.setProjectsCompletedLastYear(counts[2]);
				rwsMaster.setProjectsInhand(counts[3]);
				divisionwise.add(rwsMaster);

			}
		} catch (Exception e) {
			Debug.println("The error in getContractoramountwise is " + e);
		} finally {
			rwsMasterData.closeAll();
		}
		return divisionwise;
	}

	

	public static ArrayList getProjectscompletedintime(String contractorCode, String amount, String circle)
			throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;

		ArrayList projectsexecuted = new ArrayList();

		try {
			String query1 = "";

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();

			if (amount == null) {
				query1 = "select e.work_id,e.work_name,e.admin_no,to_char(e.admin_date,'dd/mm/yyyy'),e.sanction_amount,to_char(p.grounding_date,'dd/mm/yyyy'),to_char(a.date_of_completion,'dd/mm/yyyy'),to_char(wc.date_of_completion,'dd/mm/yyyy'),a.contractor_code,c.CONTRACTOR_NAME_COMPANY,a.agreement_value,t.dname from rws_district_tbl t,rws_contractor_selection_tbl a,rws_contractor_tbl c,rws_work_admn_tbl e,rws_work_completion_tbl wc,rws_work_commencement_tbl p where p.work_id=a.work_id and  wc.work_id=a.work_id and c.contractor_code=a.contractor_code and substr(a.work_id,5,2)=t.dcode and  a.contractor_code='"
						+ contractorCode + "' and a.work_id=e.work_id and wc.date_of_completion<=a.date_of_completion";
				if (circle != null) {
					query1 += "  and substr(a.work_id,5,2)='" + circle + "'";
				}
			} else {
				query1 = "select e.work_id,e.work_name,e.admin_no,to_char(e.admin_date,'dd/mm/yyyy'),e.sanction_amount,to_char(p.grounding_date,'dd/mm/yyyy'),to_char(a.date_of_completion,'dd/mm/yyyy'),to_char(wc.date_of_completion,'dd/mm/yyyy'),a.contractor_code,c.CONTRACTOR_NAME_COMPANY,a.agreement_value,t.dname  from rws_district_tbl t,rws_contractor_selection_tbl a,rws_contractor_tbl c,rws_work_admn_tbl e,rws_work_completion_tbl wc,rws_work_commencement_tbl p where e.sanction_amount>='"
						+ amount
						+ "' and substr(a.work_id,5,2)=t.dcode and p.work_id=a.work_id and  wc.work_id=a.work_id and c.contractor_code=a.contractor_code and a.contractor_code='"
						+ contractorCode + "' and a.work_id=e.work_id and wc.date_of_completion<=a.date_of_completion";
			}
			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(query1);
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setWorkId(rwsMasterData.rs.getString(1));
				rwsMaster.setWorkName(rwsMasterData.rs.getString(2));
				rwsMaster.setAdminNo(rwsMasterData.rs.getString(3));
				rwsMaster.setAdminDate(rwsMasterData.rs.getString(4));
				rwsMaster.setSancAmount(rwsMasterData.rs.getString(5));
				rwsMaster.setDateofCommencement(rwsMasterData.rs.getString(6));
				rwsMaster.setStipulateddateofCompletion(rwsMasterData.rs.getString(7));
				rwsMaster.setDateofCompletion(rwsMasterData.rs.getString(8));
				rwsMaster.setContCode(rwsMasterData.rs.getString(9));
				rwsMaster.setName(rwsMasterData.rs.getString(10));
				rwsMaster.setAgreeValue(rwsMasterData.rs.getString(11));
				rwsMaster.setDname(rwsMasterData.rs.getString(12));

				projectsexecuted.add(rwsMaster);

			}
		} catch (Exception e) {
			Debug.println("The error in getProjectscompletedintime is " + e);
		} finally {
			rwsMasterData.closeAll();

		}
		return projectsexecuted;
	}

	public static String getProjectscompletedintimelastcount(String contractorCode, String fiveyear) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		String count1 = " ";

		try {
			// Debug.println("in getContractor");
			String query = "";

			rwsMasterData.conn = RwsOffices.getConn();
			rwsMasterData.stmt = rwsMasterData.conn.createStatement();
			// rwsMasterData.rs = rwsMasterData.stmt.executeQuery("select * from
			// RWS_CONTRACTOR_TBL where CONTRACTOR_CODE='"+ contractorCode +
			// "'");
			query = "select count(*) from rws_contractor_selection_tbl cs,rws_contractor_tbl c,rws_work_admn_tbl e,rws_work_completion_tbl wc where e.work_id=wc.work_id and cs.work_id=e.work_id and cs.contractor_code=c.contractor_code and  c.contractor_code='"
					+ contractorCode + "' and   to_char(wc.date_of_completion,'yyyy')>'" + fiveyear + "' ";

			rwsMasterData.rs = rwsMasterData.stmt.executeQuery(query);
			// Debug.println("query" + query);
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();

				count1 = rwsMasterData.rs.getString(1);

			}
		} catch (Exception e) {
			Debug.println("The error in getContractor is " + e);
		} finally {
			rwsMasterData.closeAll();
			Debug.println("ConnCount after closing is " + connCount);
		}
		return count1;
	}

	public static String getProjectscompletedintimecount(String contractorCode) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String count1 = " ";

		try {
			// Debug.println("in getContractor");
			String query = "";

			rwsMasterData.conn = RwsOffices.getConn();

			// rwsMasterData.rs = rwsMasterData.stmt.executeQuery("select * from
			// RWS_CONTRACTOR_TBL where CONTRACTOR_CODE='"+ contractorCode +
			// "'");
			query = "select count(*) from rws_contractor_selection_tbl a,rws_contractor_tbl c,rws_work_admn_tbl e,rws_work_completion_tbl wc where wc.work_id=a.work_id and c.contractor_code=a.contractor_code and a.contractor_code=? and a.work_id=e.work_id and wc.date_of_completion<=a.date_of_completion";
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt.setString(1, contractorCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			// Debug.println("query" + query);
			while (rwsMasterData.rs.next()) {
				count1 = rwsMasterData.rs.getString(1);

			}
		} catch (Exception e) {
			System.out.println("Exception at getProjectscompletedintimecount " + e);// e.printStackTrace();
		} finally {
			try {
				rwsMasterData.closeAll();
			} catch (Exception e) {
				System.out.println(
						"Exception at finally block of getProjectscompletedintimecount " + e);// e.printStackTrace();
			}
		}
		return count1;
	}

	public static ArrayList getProjectscompletedintimelastfive(String contractorCode, String fiveyear, String amount,
			String circle) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList projectlastfive = new ArrayList();
		try {
			String query = "";
			rwsMasterData.conn = RwsOffices.getConn();

			if (amount == null) {
				query = "select e.work_id,e.work_name,e.admin_no,to_char(e.admin_date,'dd/mm/yyyy'),e.sanction_amount,to_char(p.grounding_date,'dd/mm/yyyy'),to_char(cs.date_of_completion,'dd/mm/yyyy'),to_char(wc.date_of_completion,'dd/mm/yyyy'),cs.contractor_code,c.CONTRACTOR_NAME_COMPANY,cs.agreement_value,to_char(cs.date_of_completion,'dd/mm/yyyy'),to_char(wc.date_of_completion,'dd/mm/yyyy'),t.dname from rws_district_tbl t,rws_contractor_selection_tbl cs,rws_contractor_tbl c,rws_work_admn_tbl e,rws_work_completion_tbl wc,rws_work_commencement_tbl p where p.work_id=e.work_id and  e.work_id=wc.work_id and cs.work_id=e.work_id and substr(cs.work_id,5,2)=t.dcode and cs.contractor_code=c.contractor_code and  c.contractor_code='"
						+ contractorCode + "' and   to_char(wc.date_of_completion,'yyyy')>='" + fiveyear + "' ";
				if (circle != null) {
					query += "  and substr(cs.work_id,5,2)='" + circle + "'";
				}
			} else {
				query = "select e.work_id,e.work_name,e.admin_no,to_char(e.admin_date,'dd/mm/yyyy'),e.sanction_amount,to_char(p.grounding_date,'dd/mm/yyyy'),to_char(cs.date_of_completion,'dd/mm/yyyy'),to_char(wc.date_of_completion,'dd/mm/yyyy'),cs.contractor_code,c.CONTRACTOR_NAME_COMPANY,cs.agreement_value,to_char(cs.date_of_completion,'dd/mm/yyyy'),to_char(wc.date_of_completion,'dd/mm/yyyy'),t.dname from rws_district_tbl t,rws_contractor_selection_tbl cs,rws_contractor_tbl c,rws_work_admn_tbl e,rws_work_completion_tbl wc,rws_work_commencement_tbl p where e.sanction_amount>='"
						+ amount
						+ "' and p.work_id=e.work_id and  substr(cs.work_id,5,2)=t.dcode and e.work_id=wc.work_id and cs.work_id=e.work_id and cs.contractor_code=c.contractor_code and  c.contractor_code='"
						+ contractorCode + "' and   to_char(wc.date_of_completion,'yyyy')>='" + fiveyear + "' ";
			}
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setWorkId(rwsMasterData.rs.getString(1));
				rwsMaster.setWorkName(rwsMasterData.rs.getString(2));
				rwsMaster.setAdminNo(rwsMasterData.rs.getString(3));
				rwsMaster.setAdminDate(rwsMasterData.rs.getString(4));
				rwsMaster.setSancAmount(rwsMasterData.rs.getString(5));
				rwsMaster.setDateofCommencement(rwsMasterData.rs.getString(6));
				rwsMaster.setStipulateddateofCompletion(rwsMasterData.rs.getString(7));
				rwsMaster.setDateofCompletion(rwsMasterData.rs.getString(8));
				rwsMaster.setContCode(rwsMasterData.rs.getString(9));
				rwsMaster.setName(rwsMasterData.rs.getString(10));
				rwsMaster.setAgreeValue(rwsMasterData.rs.getString(11));
				rwsMaster.setStipulateddateofCompletion(rwsMasterData.rs.getString(12));
				rwsMaster.setDateofCompletion(rwsMasterData.rs.getString(13));
				rwsMaster.setDname(rwsMasterData.rs.getString(14));
				projectlastfive.add(rwsMaster);
			}
		} catch (Exception e) {
			System.out.println("Exception at getProjectscompletedintimelastfive method In RwsMasterData" + e);// e.printStackTrace();
		} finally {
			try {
				rwsMasterData.closeAll();
			} catch (Exception e) {
				System.out.println(
						"Exception at finally block of getProjectscompletedintimelastfive method In RwsMasterData" + e);// e.printStackTrace();
			}
		}
		return projectlastfive;
	}

	public static String getProjectsexecutedcount(String contractorCode) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String count1 = " ";
		try {
			// Debug.println("in getContractor");
			String query = "";
			rwsMasterData.conn = RwsOffices.getConn();
			// rwsMasterData.rs = rwsMasterData.stmt.executeQuery("select * from
			// RWS_CONTRACTOR_TBL where CONTRACTOR_CODE='"+ contractorCode +
			// "'");
			query = "select count(*) from rws_contractor_selection_tbl a,rws_contractor_tbl c,rws_work_admn_tbl e,rws_work_commencement_tbl wc,rws_work_completion_tbl p where p.work_id=a.work_id and wc.work_id=a.work_id and c.contractor_code=a.contractor_code and a.contractor_code=? and a.work_id=e.work_id and p.date_of_completion is not null";
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt.setString(1, contractorCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			// Debug.println("query1" + query);
			while (rwsMasterData.rs.next()) {
				count1 = rwsMasterData.rs.getString(1);
			}
		} catch (Exception e) {
			System.out.println("Exception at getProjectsexecutedcount " + e);// e.printStackTrace();
		} finally {
			try {
				rwsMasterData.closeAll();
			} catch (Exception e) {
				System.out
						.println("Exception at finally block of getProjectsexecutedcount " + e);// e.printStackTrace();
			}
		}
		return count1;
	}

	//
	public static String getProjectsinhandcount(String contractorCode) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		String count1 = " ";
		int count = 0;
		try {
			// Debug.println("in getContractor");
			String query = "";
			rwsMasterData.conn = RwsOffices.getConn();
			// rwsMasterData.rs = rwsMasterData.stmt.executeQuery("select * from
			// RWS_CONTRACTOR_TBL where CONTRACTOR_CODE='"+ contractorCode +
			// "'");
			// query="select count(*) from rws_contractor_selection_tbl
			// a,rws_contractor_tbl c,rws_work_admn_tbl
			// e,rws_work_completion_tbl wc,rws_work_commencement_tbl p where
			// p.work_id=a.work_id and wc.work_id=a.work_id and
			// c.contractor_code=a.contractor_code and
			// a.contractor_code='"+contractorCode+"' and a.work_id=e.work_id
			// and wc.date_of_completion is null" ;
			query = "select e.work_id,e.work_name,e.admin_no,to_char(e.admin_date,'dd/mm/yyyy'),e.sanction_amount ,to_char(p.grounding_date,'dd/mm/yyyy'),d.contractor_code,d.contractor_name_company,c.agreement_value,nvl(to_char(c.date_of_completion,'dd/mm/yyyy'),'-') from rws_work_commencement_tbl p,rws_work_admn_tbl e ,rws_contractor_selection_tbl c,rws_contractor_tbl d where e.work_id not in ( select work_id from  rws_work_completion_tbl )  and work_cancel_dt is  null and e.work_id in (select work_id from rws_contractor_selection_tbl a, rws_contractor_tbl b where a.contractor_code=? and a.contractor_code =b.contractor_code ) and e.work_id=c.work_id and c.contractor_code=d.contractor_code and p.work_id=c.work_id";
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt.setString(1, contractorCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			while (rwsMasterData.rs.next()) {
				count++;
			}
		} catch (Exception e) {
			System.out.println("Exception at getProjectsinhandcount " + e);// e.printStackTrace();
		} finally {
			try {
				rwsMasterData.closeAll();
			} catch (Exception e) {
				System.out.println("Exception at finally block of getProjectsinhandcount " + e);// e.printStackTrace();
			}
		}
		return String.valueOf(count);
	}

	public static String getContractorWorks(String contractorCode, String fiveyear, Connection con1, String amount,
			String circle) throws Exception {
		String count1 = " ";
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			String query = "";
			if (amount == null) {

				if (circle != null && !circle.equalsIgnoreCase("")) {
					query = "select(select count(*) from rws_contractor_selection_tbl a,rws_contractor_tbl c,rws_work_admn_tbl e,rws_work_commencement_tbl wc,rws_work_completion_tbl p where substr(a.work_id,5,2)='"
							+ circle
							+ "' and p.work_id=a.work_id and wc.work_id=a.work_id and c.contractor_code=a.contractor_code and a.contractor_code='"
							+ contractorCode
							+ "' and a.work_id=e.work_id and p.date_of_completion is not null)a,(select count(*) from rws_contractor_selection_tbl a,rws_contractor_tbl c,rws_work_admn_tbl e,rws_work_completion_tbl wc where substr(a.work_id,5,2)='"
							+ circle
							+ "' and  wc.work_id=a.work_id and c.contractor_code=a.contractor_code and a.contractor_code='"
							+ contractorCode
							+ "' and a.work_id=e.work_id and wc.date_of_completion<=a.date_of_completion)b,(select count(*) from rws_contractor_selection_tbl cs,rws_contractor_tbl c,rws_work_admn_tbl e,rws_work_completion_tbl wc where substr(cs.work_id,5,2)='"
							+ circle
							+ "' and e.work_id=wc.work_id and cs.work_id=e.work_id and cs.contractor_code=c.contractor_code and  c.contractor_code='"
							+ contractorCode + "' and   to_char(wc.date_of_completion,'yyyy')>='" + fiveyear
							+ "')c,(select count(*) from rws_work_admn_tbl where work_id not in ( select work_id from  rws_work_completion_tbl )  and work_cancel_dt is  null and work_id in (select work_id from rws_contractor_selection_tbl a, rws_contractor_tbl b where substr(a.work_id,5,2)='"
							+ circle + "' and a.contractor_code='" + contractorCode
							+ "' and a.contractor_code =b.contractor_code )) from dual";
				} else {
					query = "select(select count(*) from rws_contractor_selection_tbl a,rws_contractor_tbl c,rws_work_admn_tbl e,rws_work_commencement_tbl wc,rws_work_completion_tbl p where  p.work_id=a.work_id and wc.work_id=a.work_id and c.contractor_code=a.contractor_code and a.contractor_code='"
							+ contractorCode
							+ "' and a.work_id=e.work_id and p.date_of_completion is not null)a,(select count(*) from rws_contractor_selection_tbl a,rws_contractor_tbl c,rws_work_admn_tbl e,rws_work_completion_tbl wc where wc.work_id=a.work_id and c.contractor_code=a.contractor_code and a.contractor_code='"
							+ contractorCode
							+ "' and a.work_id=e.work_id and wc.date_of_completion<=a.date_of_completion)b,(select count(*) from rws_contractor_selection_tbl cs,rws_contractor_tbl c,rws_work_admn_tbl e,rws_work_completion_tbl wc where  e.work_id=wc.work_id and cs.work_id=e.work_id and cs.contractor_code=c.contractor_code and  c.contractor_code='"
							+ contractorCode + "' and   to_char(wc.date_of_completion,'yyyy')>='" + fiveyear
							+ "')c,(select count(*) from rws_work_admn_tbl where work_id not in ( select work_id from  rws_work_completion_tbl )  and work_cancel_dt is  null and work_id in (select work_id from rws_contractor_selection_tbl a, rws_contractor_tbl b where  a.contractor_code='"
							+ contractorCode + "' and a.contractor_code =b.contractor_code )) from dual";
				}

			} else {
				query = "select(select count(*) from rws_contractor_selection_tbl a,rws_contractor_tbl c,rws_work_admn_tbl e,rws_work_completion_tbl p where  e.sanction_amount>='"
						+ amount
						+ "' and p.work_id=a.work_id  and c.contractor_code=a.contractor_code and a.contractor_code='"
						+ contractorCode
						+ "' and a.work_id=e.work_id and p.date_of_completion is not null)a,(select count(*) from rws_contractor_selection_tbl a,rws_contractor_tbl c,rws_work_admn_tbl e,rws_work_completion_tbl wc where e.sanction_amount>='"
						+ amount
						+ "' and wc.work_id=a.work_id and c.contractor_code=a.contractor_code and a.contractor_code='"
						+ contractorCode
						+ "' and a.work_id=e.work_id and wc.date_of_completion<=a.date_of_completion)b,(select count(*) from rws_contractor_selection_tbl cs,rws_contractor_tbl c,rws_work_admn_tbl e,rws_work_completion_tbl wc where e.sanction_amount >='"
						+ amount
						+ "' and e.work_id=wc.work_id and cs.work_id=e.work_id and cs.contractor_code=c.contractor_code and  c.contractor_code='"
						+ contractorCode + "' and   to_char(wc.date_of_completion,'yyyy')>='" + fiveyear
						+ "')c,(select count(*) from rws_work_admn_tbl w,rws_contractor_selection_tbl c where contractor_code='"
						+ contractorCode + "' and w.sanction_amount >='" + amount
						+ "' and work_cancel_dt is null and c.work_id=w.work_id and (c.work_id not in(select work_id from rws_work_completion_tbl) or (c.work_id in(select work_id from rws_work_completion_tbl where date_of_completion is null))))d  from dual";
			}
			stmt = con1.prepareStatement(query);
			rs = stmt.executeQuery();

			if (rs.next()) {
				count1 = rs.getString(1) + "/" + rs.getString(2) + "/" + rs.getString(3) + "/" + rs.getString(4);
			}
		} catch (Exception e) {
			Debug.println("The exception at getContractorWorks method in  RwsMasterData is " + e);
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (Exception e) {
					Debug.println("The error in finally block of getContractorWorks in rwsMasterData" + e);
				}
			}
			if (stmt != null) {
				try {
					stmt.close();
				} catch (Exception e) {
					Debug.println("The error in finally block of getContractorWorks inrwsMasterData" + e);
				}
			}
		}
		return count1;
	}

	

	public static ArrayList getProjectsexecuted(String contractorCode, String amount, String circle) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList projectsexecuted = new ArrayList();

		try {
			String query1 = "";
			rwsMasterData.conn = RwsOffices.getConn();

			if (amount == null) {
				query1 = "select e.work_id,e.work_name,e.admin_no,to_char(e.admin_date,'dd/mm/yyyy'),e.sanction_amount,to_char(c.grounding_date,'dd/mm/yyyy'),a.contractor_code,c.CONTRACTOR_NAME_COMPANY,nvl(a.agreement_value,'0'),to_char(a.date_of_completion,'dd/mm/yyyy'),to_char(wc.date_of_completion,'dd/mm/yyyy'),decode(a.tender_nomination,'N','NOMINATION','T','TENDER')result,t.dname from rws_district_tbl t,rws_contractor_selection_tbl a,rws_contractor_tbl c,rws_work_admn_tbl e,rws_work_commencement_tbl c,rws_work_completion_tbl wc where wc.work_id=a.work_id and c.work_id=e.work_id and c.contractor_code=a.contractor_code and a.contractor_code='"
						+ contractorCode
						+ "' and substr(a.work_id,5,2)=t.dcode and a.work_id=e.work_id and wc.date_of_completion is not null";
				if (circle != null) {
					query1 += "  and substr(a.work_id,5,2)='" + circle + "'";
				}
			} else {
				query1 = "select e.work_id,e.work_name,e.admin_no,to_char(e.admin_date,'dd/mm/yyyy'),e.sanction_amount,to_char(c.grounding_date,'dd/mm/yyyy'),a.contractor_code,c.CONTRACTOR_NAME_COMPANY,nvl(a.agreement_value,'0'),to_char(a.date_of_completion,'dd/mm/yyyy'),to_char(wc.date_of_completion,'dd/mm/yyyy'),decode(a.tender_nomination,'N','NOMINATION','T','TENDER')result ,t.dname from rws_district_tbl t,rws_contractor_selection_tbl a,rws_contractor_tbl c,rws_work_admn_tbl e,rws_work_commencement_tbl c,rws_work_completion_tbl wc where wc.work_id=a.work_id and c.work_id=e.work_id and e.sanction_amount>='"
						+ amount
						+ "' and substr(a.work_id,5,2)=t.dcode and c.contractor_code=a.contractor_code and a.contractor_code='"
						+ contractorCode + "' and a.work_id=e.work_id and wc.date_of_completion is not null";
			}
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query1);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();

			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setWorkId(rwsMasterData.rs.getString(1));
				rwsMaster.setWorkName(rwsMasterData.rs.getString(2));
				rwsMaster.setAdminNo(rwsMasterData.rs.getString(3));
				rwsMaster.setAdminDate(rwsMasterData.rs.getString(4));
				rwsMaster.setSancAmount(rwsMasterData.rs.getString(5));
				rwsMaster.setDateofCommencement(rwsMasterData.rs.getString(6));
				rwsMaster.setContCode(rwsMasterData.rs.getString(7));
				rwsMaster.setName(rwsMasterData.rs.getString(8));
				rwsMaster.setAgreeValue(rwsMasterData.rs.getString(9));
				rwsMaster.setStipulateddateofCompletion(rwsMasterData.rs.getString(10));
				rwsMaster.setDateofCompletion(rwsMasterData.rs.getString(11));
				rwsMaster.setTenderNomination(rwsMasterData.rs.getString(12));
				rwsMaster.setDname(rwsMasterData.rs.getString(13));

				projectsexecuted.add(rwsMaster);

			}
		} catch (Exception e) {
			System.out.println("Exception at getProjectsyear method In RwsMasterData" + e);// e.printStackTrace();
		} finally {
			try {
				rwsMasterData.closeAll();
			} catch (Exception e) {
				System.out.println("Exception at finally block of getProjectsyear method In RwsMasterData" + e);// e.printStackTrace();
			}
		}
		return projectsexecuted;
	}

	
	public static int getProjectsyear() throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		int count = 0;
		String count1 = "";
		try {
			String query = "";
			rwsMasterData.conn = RwsOffices.getConn();
			query = "select to_char(sysdate,'yyyy') from dual";

			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery(query);
			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				count1 = rwsMasterData.rs.getString(1);
			}
			count = Integer.parseInt(count1);

		} catch (Exception e) {
			System.out.println("Exception at getProjectsyear method In RwsMasterData" + e);// e.printStackTrace();
		} finally {
			try {
				rwsMasterData.closeAll();

			} catch (Exception e) {
				System.out.println("Exception at finally block of getProjectsyear method In RwsMasterData" + e);// e.printStackTrace();
			}
		}
		return count;
	}

	

	public static ArrayList getProjectsinhand(String contractorCode, String amount, String circle) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList projectsinhand = new ArrayList();

		try {
			String query = "";
			rwsMasterData.conn = RwsOffices.getConn();

			if (amount == null) {
				query = "select e.work_id,e.work_name,e.admin_no,to_char(e.admin_date,'dd/mm/yyyy'),e.sanction_amount ,to_char(p.grounding_date,'dd/mm/yyyy'),d.contractor_code,d.contractor_name_company,c.agreement_value,nvl(to_char(c.date_of_completion,'dd/mm/yyyy'),'-'),t.dname from rws_district_tbl t, rws_work_commencement_tbl p,rws_work_admn_tbl e ,rws_contractor_selection_tbl c,rws_contractor_tbl d where e.work_id not in ( select work_id from  rws_work_completion_tbl )  and substr(c.work_id,5,2)=t.dcode and work_cancel_dt is  null and e.work_id in (select work_id from rws_contractor_selection_tbl a, rws_contractor_tbl b where a.contractor_code='"
						+ contractorCode
						+ "' and a.contractor_code =b.contractor_code ) and e.work_id=c.work_id and c.contractor_code=d.contractor_code and p.work_id=c.work_id";
				if (circle != null) {
					query += "  and substr(c.work_id,5,2)='" + circle + "'";
				}
			} else {

				query = "select w.work_id,w.work_name,w.admin_no,to_char(w.admin_date,'dd/mm/yyyy'),w.sanction_amount ,to_char(p.grounding_date,'dd/mm/yyyy'),d.contractor_code,d.contractor_name_company,c.agreement_value,nvl(to_char(c.date_of_completion,'dd/mm/yyyy'),'-'),t.dname from rws_district_tbl t,rws_work_commencement_tbl p,rws_work_admn_tbl w,rws_contractor_selection_tbl c,rws_contractor_tbl d where c.contractor_code='"
						+ contractorCode
						+ "' and substr(c.work_id,5,2)=t.dcode and  c.contractor_code=d.contractor_code and w.sanction_amount >='"
						+ amount
						+ "'and work_cancel_dt is null and c.work_id=w.work_id and (c.work_id not in(select work_id from rws_work_completion_tbl) or (c.work_id in(select work_id from rws_work_completion_tbl where date_of_completion is null))) and c.work_id=p.work_id";
			}

			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();

			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setWorkId(rwsMasterData.rs.getString(1));
				rwsMaster.setWorkName(rwsMasterData.rs.getString(2));
				rwsMaster.setAdminNo(rwsMasterData.rs.getString(3));
				rwsMaster.setAdminDate(rwsMasterData.rs.getString(4));
				rwsMaster.setSancAmount(rwsMasterData.rs.getString(5));
				rwsMaster.setDateofCommencement(rwsMasterData.rs.getString(6));
				rwsMaster.setContCode(rwsMasterData.rs.getString(7));
				rwsMaster.setName(rwsMasterData.rs.getString(8));
				rwsMaster.setAgreeValue(rwsMasterData.rs.getString(9));
				rwsMaster.setStipulateddateofCompletion(rwsMasterData.rs.getString(10));
				rwsMaster.setDname(rwsMasterData.rs.getString(11));
				projectsinhand.add(rwsMaster);
			}
		} catch (Exception e) {
			System.out.println("Exception at getProjectsinhand method In RwsMasterData" + e);// e.printStackTrace();
		} finally {
			try {
				rwsMasterData.closeAll();
			} catch (Exception e) {
				System.out.println("Exception at finally block of getProjectsinhand method In RwsMasterData" + e);// e.printStackTrace();
			}
		}
		return projectsinhand;
	}

	

	public static RwsMaster getContractor(String contractorCode, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;

		try {
			rwsMasterData.conn = RwsOffices.getConn();
			String query = null;
			query = "select * from RWS_CONTRACTOR_TBL where CONTRACTOR_CODE=?";

			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt.setString(1, contractorCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();

			if (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setContractorCode(rwsMasterData.rs.getString("CONTRACTOR_CODE"));
				if (rwsMasterData.rs.getString("CONTRACTOR_NAME_COMPANY") != null) {
					rwsMaster.setFirstName(rwsMasterData.rs.getString("CONTRACTOR_NAME_COMPANY").toUpperCase());
				}
				if (rwsMasterData.rs.getString("CONTRACTOR_COMPANY_NAME1") != null) {
					rwsMaster.setMiddleName(rwsMasterData.rs.getString("CONTRACTOR_COMPANY_NAME1").toUpperCase());
				}
				if (rwsMasterData.rs.getString("CONTRACTOR_COMPANY_NAME2") != null) {
					rwsMaster.setLastName(rwsMasterData.rs.getString("CONTRACTOR_COMPANY_NAME2").toUpperCase());
				}
				rwsMaster.setContractorClass(rwsMasterData.rs.getString("CONTRACTOR_CLASS"));
				rwsMaster.setContractorRating(rwsMasterData.rs.getString("CONTRACTOR_RATING"));
				rwsMaster.setContractorRegno(rwsMasterData.rs.getString("CONTRACTOR_REG_NO"));
				rwsMaster.setRegisterAt(rwsMasterData.rs.getString("REGISTERED_AT"));

				if (rwsMasterData.rs.getDate("REGISTRATION_DATE") != null) {
					rwsMaster.setRegistrationDate(df.format(rwsMasterData.rs.getDate("REGISTRATION_DATE")));
				}
				if (rwsMasterData.rs.getString("CONTRACTOR_ADDRESS1") != null) {
					rwsMaster.setStreet(rwsMasterData.rs.getString("CONTRACTOR_ADDRESS1").toUpperCase());
				}
				if (rwsMasterData.rs.getString("CONTRACTOR_ADDRESS2") != null) {
					rwsMaster.setArea(rwsMasterData.rs.getString("CONTRACTOR_ADDRESS2").toUpperCase());
				}
				if (rwsMasterData.rs.getString("CONTRACTOR_ADDRESS3") != null) {
					rwsMaster.setCity(rwsMasterData.rs.getString("CONTRACTOR_ADDRESS3").toUpperCase());
				}
				rwsMaster.setPin(rwsMasterData.rs.getString("CONTRACTOR_ADDRESS4"));
				rwsMaster.setPhone(rwsMasterData.rs.getString("CONTRACTOR_PHONE"));
				rwsMaster.setMobile(rwsMasterData.rs.getString("CONTRACTOR_MOBILE"));
				rwsMaster.setFax(rwsMasterData.rs.getString("CONTRACTOR_FAX"));
				rwsMaster.setEmail(rwsMasterData.rs.getString("CONTRACTOR_EMAIL"));
				rwsMaster.setPanNo(rwsMasterData.rs.getString("PAN_NO"));
				rwsMaster.setVoterId(rwsMasterData.rs.getString("VOTER_ID"));
				rwsMaster.setTinNo(rwsMasterData.rs.getString("TIN_NO"));
				if (rwsMasterData.rs.getDate("VALIDITY_FROM") != null) {
					rwsMaster.setValidFrom(df.format(rwsMasterData.rs.getDate("VALIDITY_FROM")));
				}
				if (rwsMasterData.rs.getDate("VALIDITY_TO") != null) {
					rwsMaster.setValidTo(df.format(rwsMasterData.rs.getDate("VALIDITY_TO")));
				}

				rwsMaster.setNoofEoat(rwsMasterData.rs.getString("NO_OF_EOAT"));
				rwsMaster.setNoofSupplentary(rwsMasterData.rs.getString("NO_OF_SUPPLEMENTARY"));
				rwsMaster.setNoofPenalised(rwsMasterData.rs.getString("NO_OF_PENALISED"));
				rwsMaster.setRemarks(rwsMasterData.rs.getString("REMARKS"));
				rwsMaster.setVatNo(rwsMasterData.rs.getString("VATNO"));

				if (rwsMasterData.rs.getString("CONTRACTOR_RATING") != null) {
					rwsMaster.setContractorRating(rwsMasterData.rs.getString("CONTRACTOR_RATING"));
				}
				if (rwsMasterData.rs.getString("CONTRACTOR_CLASS") != null) {
					rwsMaster.setContractorClass(rwsMasterData.rs.getString("CONTRACTOR_CLASS"));
				}
				if (rwsMasterData.rs.getString("SPECIALIZE") != null) {
					rwsMaster.setSpecialize(rwsMasterData.rs.getString("SPECIALIZE").toUpperCase());
				}
				rwsMaster.setAdharNo(rwsMasterData.rs.getString("ADHAARNO"));
				RwsMasterData.getContractorBankDet(contractorCode, rwsMaster);

			}
		} catch (Exception e) {
			System.out.println("Exception at getContractor method In RwsMasterData" + e);// e.printStackTrace();
		} finally {
			try {
				rwsMasterData.closeAll();
			} catch (Exception e) {
				System.out.println("Exception at finally block of getContractor method In RwsMasterData" + e);// e.printStackTrace();
			}
		}
		return rwsMaster;
	}

	

	public static void getContractorBankDet(String contractorCode, RwsMaster rwsMaster2) throws Exception {

		RwsMasterData rwsMasterData = new RwsMasterData();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			String query = "";
			query = "select b.bank,b.branch_name,b.address,a.ifsc_code,a.account_no from RWS_CONTRACTOR_BANK_LNK_TBL a,RWS_BANK_IFSC_CODE_TBL b where a.ifsc_code=b.ifsc_code and a.contractor_code=?";
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(query);
			rwsMasterData.pstmt.setString(1, contractorCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			if (rwsMasterData.rs.next()) {
				rwsMaster2.setBankName(rwsMasterData.rs.getString(1));
				rwsMaster2.setBranchName(rwsMasterData.rs.getString(2));
				rwsMaster2.setBranchAddress(rwsMasterData.rs.getString(3));
				rwsMaster2.setIfscCode(rwsMasterData.rs.getString(4));
				rwsMaster2.setAccountNo(rwsMasterData.rs.getString(5));
			}
		} catch (Exception e) {
			System.out.println("Exception at getContractorBankDet method In RwsMasterData" + e);// e.printStackTrace();
		} finally {
			try {
				rwsMasterData.closeAll();
			} catch (Exception e) {
				System.out.println("Exception at finally block of getContractorBankDet method In RwsMasterData" + e);// e.printStackTrace();
			}
		}
	}

	

	public static ArrayList getContractors(DataSource dataSource, String fname, String circle) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		RwsMaster rwsMaster = null;
		ArrayList contrators = new ArrayList();
		try {
			String query = "";
			int year = RwsMasterData.getProjectsyear();
			int lastfiveyear = year - 5;
			String five = "" + lastfiveyear;
			rwsMasterData.conn = RwsOffices.getConn();

			rwsMasterData.pstmt = rwsMasterData.conn
					.prepareStatement("select * from RWS_CONTRACTOR_TBL where upper(CONTRACTOR_NAME_COMPANY) LIKE '"
							+ fname.toUpperCase() + "%'");

			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();

			while (rwsMasterData.rs.next()) {
				rwsMaster = new RwsMaster();
				rwsMaster.setContractorCode(rwsMasterData.rs.getString("CONTRACTOR_CODE"));
				if (rwsMasterData.rs.getString("CONTRACTOR_NAME_COMPANY") != null) {
					rwsMaster.setFirstName(rwsMasterData.rs.getString("CONTRACTOR_NAME_COMPANY").toUpperCase());
				}
				if (rwsMasterData.rs.getString("CONTRACTOR_COMPANY_NAME1") != null) {
					rwsMaster.setMiddleName(rwsMasterData.rs.getString("CONTRACTOR_COMPANY_NAME1").toUpperCase());
				}
				if (rwsMasterData.rs.getString("CONTRACTOR_COMPANY_NAME2") != null) {
					rwsMaster.setLastName(rwsMasterData.rs.getString("CONTRACTOR_COMPANY_NAME2").toUpperCase());
				}
				rwsMaster.setContractorClass(rwsMasterData.rs.getString("CONTRACTOR_CLASS"));
				rwsMaster.setContractorRating(rwsMasterData.rs.getString("CONTRACTOR_RATING"));
				rwsMaster.setContractorRegno(rwsMasterData.rs.getString("CONTRACTOR_REG_NO"));
				rwsMaster.setRegisterAt(rwsMasterData.rs.getString("REGISTERED_AT"));
				if (rwsMasterData.rs.getDate("REGISTRATION_DATE") != null) {
					rwsMaster.setRegistrationDate(df.format(rwsMasterData.rs.getDate("REGISTRATION_DATE")));
				}
				if (rwsMasterData.rs.getString("CONTRACTOR_ADDRESS1") != null) {
					rwsMaster.setStreet(rwsMasterData.rs.getString("CONTRACTOR_ADDRESS1").toUpperCase());
				}
				if (rwsMasterData.rs.getString("CONTRACTOR_ADDRESS2") != null) {
					rwsMaster.setArea(rwsMasterData.rs.getString("CONTRACTOR_ADDRESS2").toUpperCase());
				}
				if (rwsMasterData.rs.getString("CONTRACTOR_ADDRESS3") != null) {
					rwsMaster.setCity(rwsMasterData.rs.getString("CONTRACTOR_ADDRESS3").toUpperCase());
				}
				rwsMaster.setPin(rwsMasterData.rs.getString("CONTRACTOR_ADDRESS4"));
				rwsMaster.setPhone(rwsMasterData.rs.getString("CONTRACTOR_PHONE"));
				rwsMaster.setMobile(rwsMasterData.rs.getString("CONTRACTOR_MOBILE"));
				rwsMaster.setFax(rwsMasterData.rs.getString("CONTRACTOR_FAX"));
				rwsMaster.setEmail(rwsMasterData.rs.getString("CONTRACTOR_EMAIL"));
				String s = rwsMasterData.rs.getString("PAN_NO");

				if (rwsMasterData.rs.getString("PAN_NO") != null && !rwsMasterData.rs.getString("PAN_NO").equals("")) {
					rwsMaster.setPanNo(rwsMasterData.rs.getString("PAN_NO"));
				} else {
					rwsMaster.setPanNo("-");
				}

				if (rwsMasterData.rs.getString("VOTER_ID") != null
						&& !rwsMasterData.rs.getString("VOTER_ID").equals("")) {
					rwsMaster.setVoterId(rwsMasterData.rs.getString("VOTER_ID"));
				} else {
					rwsMaster.setVoterId("-");
				}
				if (rwsMasterData.rs.getString("AdhaarNo") != null
						&& !rwsMasterData.rs.getString("AdhaarNo").equals("")) {
					rwsMaster.setAdharNo(rwsMasterData.rs.getString("AdhaarNo"));
				} else {
					rwsMaster.setAdharNo("-");
				}

				rwsMaster.setTinNo(rwsMasterData.rs.getString("TIN_NO"));
				if (rwsMasterData.rs.getDate("VALIDITY_FROM") != null) {
					rwsMaster.setValidFrom(df.format(rwsMasterData.rs.getDate("VALIDITY_FROM")));
				}
				if (rwsMasterData.rs.getDate("VALIDITY_TO") != null) {
					rwsMaster.setValidTo(df.format(rwsMasterData.rs.getDate("VALIDITY_TO")));
				}

				String count = RwsMasterData.getContractorWorks(rwsMasterData.rs.getString("CONTRACTOR_CODE"), five,
						rwsMasterData.conn, null, circle);
				String[] counts = count.split("/");
				rwsMaster.setProjectsExecuted(counts[0]);
				rwsMaster.setProjectsCompletedInTime(counts[1]);
				rwsMaster.setProjectsCompletedLastYear(counts[2]);
				rwsMaster.setProjectsInhand(counts[3]);
				rwsMaster.setNoofEoat(rwsMasterData.rs.getString("NO_OF_EOAT"));
				rwsMaster.setNoofSupplentary(rwsMasterData.rs.getString("NO_OF_SUPPLEMENTARY"));
				rwsMaster.setNoofPenalised(rwsMasterData.rs.getString("NO_OF_PENALISED"));
				rwsMaster.setRemarks(rwsMasterData.rs.getString("REMARKS"));
				rwsMaster.setVatNo(rwsMasterData.rs.getString("VATNO"));
				if (rwsMasterData.rs.getString("SPECIALIZE") != null) {
					rwsMaster.setSpecialize(rwsMasterData.rs.getString("SPECIALIZE").toUpperCase());
				}
				contrators.add(rwsMaster);
			}
		} catch (Exception e) {
			System.out.println("Exception at getContractors method In RwsMasterData" + e);// e.printStackTrace();
		} finally {
			try {
				rwsMasterData.closeAll();
			} catch (Exception e) {
				System.out.println("Exception at finally block of getContractors method In RwsMasterData" + e);// e.printStackTrace();
			}
		}
		return contrators;
	}

	

	public static int insertContractor(RwsMaster rwsMaster, DataSource dataSource) throws Exception {

		RwsMasterData rwsMasterData = new RwsMasterData();
		int rowCount = 0, rowCount1 = 0;
		try {
			rwsMasterData.conn = RwsOffices.getConn();

			Statement check1 = rwsMasterData.conn.createStatement();

			String checkqry = "";
			checkqry = "select * from RWS_CONTRACTOR_TBL a where (";
			boolean orFlag = false;

			if (rwsMaster.getVoterId() != null && !rwsMaster.getVoterId().equals("")) {
				if (!orFlag)
					checkqry += " VOTER_ID='" + rwsMaster.getVoterId() + "'";
				else
					checkqry += " OR VOTER_ID='" + rwsMaster.getVoterId() + "'";
				orFlag = true;
			}
			if (rwsMaster.getPanNo() != null && !rwsMaster.getPanNo().equals("")) {
				if (!orFlag)
					checkqry += "PAN_NO='" + rwsMaster.getPanNo() + "'";
				else
					checkqry += " OR PAN_NO='" + rwsMaster.getPanNo() + "'";

				orFlag = true;
			}

			checkqry += ")";
			System.out.println(checkqry);
			ResultSet checkrs1 = check1.executeQuery(checkqry);
			boolean flagg = false;
			if (checkrs1.next()) {
				flagg = true;
			}
			if (!flagg) {
				Statement check = rwsMasterData.conn.createStatement();
				ResultSet checkrs = check
						.executeQuery("SELECT MAX(to_number(CONTRACTOR_CODE))+1 FROM RWS_CONTRACTOR_TBL");
				int conCode = 0;
				if (checkrs.next()) {
					conCode = checkrs.getInt(1);
				}
				String code = "" + conCode;
				if (code == null)
					code = "1";
				else if (code.length() == 1)
					code = "000" + code;
				else if (code.length() == 2)
					code = "00" + code;
				else if (code.length() == 3)
					code = "0" + code;
				String qry = "insert into RWS_CONTRACTOR_TBL(CONTRACTOR_CODE,CONTRACTOR_NAME_COMPANY,CONTRACTOR_CLASS,CONTRACTOR_RATING,"
						+ "CONTRACTOR_REG_NO,REGISTERED_AT,REGISTRATION_DATE,CONTRACTOR_ADDRESS1,CONTRACTOR_ADDRESS2,"
						+ "CONTRACTOR_ADDRESS3,CONTRACTOR_ADDRESS4,CONTRACTOR_PHONE,CONTRACTOR_MOBILE,CONTRACTOR_FAX,CONTRACTOR_EMAIL,PAN_NO,TIN_NO,VALIDITY_FROM,"
						+ "VALIDITY_TO,PROJECTS_EXECUTED,PROJECTS_INHAND,PROJECTS_COMPLETED_INLAST_5YRS,"
						+ "PROJECTS_COMPLETED_INTIME,PROJECTS_ABANDONED,NO_OF_EOAT,NO_OF_SUPPLEMENTARY,NO_OF_PENALISED,REMARKS,"
						+ "VATNO,SPECIALIZE,CONTRACTOR_COMPANY_NAME1,CONTRACTOR_COMPANY_NAME2,VOTER_ID,AdhaarNo) "
						+ "values(?,?,?,?,?,?,TO_DATE('" + rwsMaster.getRegistrationDate()
						+ "','dd/mm/YYYY'),?,?,?,?,?,?,?,?,?,?,TO_DATE('" + rwsMaster.getValidFrom()
						+ "','dd/mm/YYYY'),TO_DATE('" + rwsMaster.getValidTo()
						+ "','dd/mm/YYYY'),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
			//	System.out.println(qry);
				rwsMasterData.ps = rwsMasterData.conn.prepareStatement(qry);
				rwsMasterData.ps.setString(1, code);
				rwsMasterData.ps.setString(2, rwsMaster.getFirstName());
				rwsMasterData.ps.setString(3, rwsMaster.getContractorClass());
				rwsMasterData.ps.setString(4, rwsMaster.getContractorRating());
				rwsMasterData.ps.setString(5, rwsMaster.getContractorRegno());
				rwsMasterData.ps.setString(6, rwsMaster.getRegisterAt());
				rwsMasterData.ps.setString(7, rwsMaster.getStreet());
				rwsMasterData.ps.setString(8, rwsMaster.getArea());
				rwsMasterData.ps.setString(9, rwsMaster.getCity());
				rwsMasterData.ps.setString(10, rwsMaster.getPin());
				rwsMasterData.ps.setString(11, rwsMaster.getPhone());
				rwsMasterData.ps.setString(12, rwsMaster.getMobile());
				rwsMasterData.ps.setString(13, rwsMaster.getFax());
				rwsMasterData.ps.setString(14, rwsMaster.getEmail());
				rwsMasterData.ps.setString(15, rwsMaster.getPanNo());
				rwsMasterData.ps.setString(16, rwsMaster.getTinNo());
				rwsMasterData.ps.setString(18, rwsMaster.getValidFrom());
				rwsMasterData.ps.setString(19, rwsMaster.getValidTo());
				rwsMasterData.ps.setString(17, rwsMaster.getProjectsExecuted());
				rwsMasterData.ps.setString(18, rwsMaster.getProjectsInhand());
				rwsMasterData.ps.setString(19, rwsMaster.getProjectsCompletedLastYear());
				rwsMasterData.ps.setString(20, rwsMaster.getProjectsCompletedInTime());
				rwsMasterData.ps.setString(21, rwsMaster.getProjectsAbandoned());
				rwsMasterData.ps.setString(22, rwsMaster.getNoofEoat());
				rwsMasterData.ps.setString(23, rwsMaster.getNoofSupplentary());
				rwsMasterData.ps.setString(24, rwsMaster.getNoofPenalised());
				rwsMasterData.ps.setString(25, rwsMaster.getRemarks());
				rwsMasterData.ps.setString(26, rwsMaster.getVatNo());
				rwsMasterData.ps.setString(27, rwsMaster.getSpecialize().toUpperCase());
				rwsMasterData.ps.setString(28, rwsMaster.getMiddleName());
				rwsMasterData.ps.setString(29, rwsMaster.getLastName());
				rwsMasterData.ps.setString(30, rwsMaster.getVoterId());
				rwsMasterData.ps.setString(31, rwsMaster.getAdharNo());
				rowCount = rwsMasterData.ps.executeUpdate();

				String qry1 = "insert into RWS_CONTRACTOR_BANK_LNK_TBL (CONTRACTOR_CODE,ifsc_code,account_no)"
						+ "values(?,?,?)";
				rwsMasterData.ps1 = rwsMasterData.conn.prepareStatement(qry1);
				rwsMasterData.ps1.setString(1, code);
				rwsMasterData.ps1.setString(2, rwsMaster.getIfscCode());
				rwsMasterData.ps1.setString(3, rwsMaster.getAccountNo());
				rowCount1 = rwsMasterData.ps1.executeUpdate();

			} else {
				rowCount = -1;
			}

		} catch (Exception e) {
			//e.printStackTrace();
			System.out.println("Exception at insertContractor method In RwsMasterData" + e);
		} finally {
			try {
				rwsMasterData.closeAll();
				if (ps != null) {
					ps.close();
				}
				if (ps1 != null) {
					ps1.close();
				}
			} catch (Exception e) {
				System.out.println("Exception at finally block of insertContractor method In RwsMasterData" + e);// e.printStackTrace();
			}
		}
		return rowCount;
	}

	
	
	public static int updateContractor(RwsMaster rwsMaster, DataSource dataSource) throws Exception {
		RwsMasterData rwsMasterData = new RwsMasterData();
		int count = 0, count1 = 0;
		try {

			rwsMasterData.conn = RwsOffices.getConn();
			String checkqry = "";
			checkqry = "select * from RWS_CONTRACTOR_TBL a where a.contractor_code=a.contractor_code and a.contractor_code<>? and (";
			boolean orFlag = false;
		
			if (rwsMaster.getVoterId() != null && !rwsMaster.getVoterId().equals("")) {
				if (!orFlag)
					checkqry += " VOTER_ID='" + rwsMaster.getVoterId() + "'";
				else
					checkqry += " OR VOTER_ID='" + rwsMaster.getVoterId() + "'";
				orFlag = true;
			}
			if (rwsMaster.getPanNo() != null && !rwsMaster.getPanNo().equals("")) {
				if (!orFlag)
					checkqry += "PAN_NO='" + rwsMaster.getPanNo() + "'";
				else
					checkqry += " OR PAN_NO='" + rwsMaster.getPanNo() + "'";

				orFlag = true;
			}
			if (rwsMaster.getContractorRegno() != null && !rwsMaster.getContractorRegno().equals("")) {
				if (!orFlag)
					checkqry += "CONTRACTOR_REG_NO ='" + rwsMaster.getContractorRegno() + "'";
				else
					checkqry += " OR CONTRACTOR_REG_NO ='" + rwsMaster.getContractorRegno() + "'";

				orFlag = true;
			}

			if (rwsMaster.getAdharNo() != null && !rwsMaster.getAdharNo().equals("")) {
				if (!orFlag)
					checkqry += "AdhaarNo ='" + rwsMaster.getAdharNo() + "'";
				else
					checkqry += " OR AdhaarNo ='" + rwsMaster.getAdharNo() + "'";

				orFlag = true;
			}
			checkqry += ")";
			PreparedStatement check1 = rwsMasterData.conn.prepareStatement(checkqry);
			check1.setString(1, rwsMaster.getContractorCode());
			ResultSet checkrs1 = check1.executeQuery();
			boolean flagg = false;
			if (checkrs1.next()) {
				flagg = true;
			}

			if (!flagg) {

				String qrry = "update  RWS_CONTRACTOR_TBL set CONTRACTOR_NAME_COMPANY=?,CONTRACTOR_CLASS=?,"
						+ "CONTRACTOR_RATING=?,CONTRACTOR_REG_NO=?,REGISTERED_AT=?,REGISTRATION_DATE=to_date('"
						+ rwsMaster.getRegistrationDate()
						+ "','dd/mm/yyyy'),CONTRACTOR_ADDRESS1=?,CONTRACTOR_ADDRESS2=?,CONTRACTOR_ADDRESS3=?,"
						+ "CONTRACTOR_ADDRESS4=?,CONTRACTOR_PHONE=?,CONTRACTOR_MOBILE=?,CONTRACTOR_FAX=?,CONTRACTOR_EMAIL=?,"
						+ "PAN_NO=?,TIN_NO=?,VALIDITY_FROM=to_date('" + rwsMaster.getValidFrom()
						+ "','dd/mm/yyyy'),VALIDITY_TO=to_date('" + rwsMaster.getValidTo()
						+ "','dd/mm/yyyy'),PROJECTS_EXECUTED=?,PROJECTS_INHAND=?,PROJECTS_COMPLETED_INLAST_5YRS=?,"
						+ "PROJECTS_COMPLETED_INTIME=?,PROJECTS_ABANDONED=?,NO_OF_EOAT=?,NO_OF_SUPPLEMENTARY=?,NO_OF_PENALISED=?,"
						+ "REMARKS=?,VATNO=?,SPECIALIZE=?,CONTRACTOR_COMPANY_NAME1=?,CONTRACTOR_COMPANY_NAME2=?,VOTER_ID=?,"
						+ "AdhaarNo=? where CONTRACTOR_CODE=?";
				rwsMasterData.ps = rwsMasterData.conn.prepareStatement(qrry);
				rwsMasterData.ps.setString(1, rwsMaster.getFirstName().toUpperCase());
				rwsMasterData.ps.setString(2, rwsMaster.getContractorClass());
				rwsMasterData.ps.setString(3, rwsMaster.getContractorRating());
				rwsMasterData.ps.setString(4, rwsMaster.getContractorRegno());
				rwsMasterData.ps.setString(5, rwsMaster.getRegisterAt());
				rwsMasterData.ps.setString(6, rwsMaster.getStreet().toUpperCase());
				rwsMasterData.ps.setString(7, rwsMaster.getArea().toUpperCase());
				rwsMasterData.ps.setString(8, rwsMaster.getCity().toUpperCase());
				rwsMasterData.ps.setString(9, rwsMaster.getPin());
				rwsMasterData.ps.setString(10, rwsMaster.getPhone());
				rwsMasterData.ps.setString(11, rwsMaster.getMobile());
				rwsMasterData.ps.setString(12, rwsMaster.getFax());
				rwsMasterData.ps.setString(13, rwsMaster.getEmail());
				rwsMasterData.ps.setString(14, rwsMaster.getPanNo());
				rwsMasterData.ps.setString(15, rwsMaster.getTinNo());
				rwsMasterData.ps.setString(16, rwsMaster.getProjectsExecuted());
				rwsMasterData.ps.setString(17, rwsMaster.getProjectsInhand());
				rwsMasterData.ps.setString(18, rwsMaster.getProjectsCompletedLastYear());
				rwsMasterData.ps.setString(19, rwsMaster.getProjectsCompletedInTime());
				rwsMasterData.ps.setString(20, rwsMaster.getProjectsAbandoned());
				rwsMasterData.ps.setString(21, rwsMaster.getNoofEoat());
				rwsMasterData.ps.setString(22, rwsMaster.getNoofSupplentary());
				rwsMasterData.ps.setString(23, rwsMaster.getNoofPenalised());
				rwsMasterData.ps.setString(24, rwsMaster.getRemarks());
				rwsMasterData.ps.setString(25, rwsMaster.getVatNo());
				rwsMasterData.ps.setString(26, rwsMaster.getSpecialize());
				rwsMasterData.ps.setString(27, rwsMaster.getMiddleName().toUpperCase());
				rwsMasterData.ps.setString(28, rwsMaster.getLastName());
				rwsMasterData.ps.setString(29, rwsMaster.getVoterId());
				rwsMasterData.ps.setString(30, rwsMaster.getAdharNo());
				rwsMasterData.ps.setString(31, rwsMaster.getContractorCode());

				count = rwsMasterData.ps.executeUpdate();

				if (isContractorExists(rwsMaster.getContractorCode())) {
					
					String qrry1 = "update RWS_CONTRACTOR_BANK_LNK_TBL set ifsc_code=?,account_no=? where CONTRACTOR_CODE=?";
					rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(qrry1);
					rwsMasterData.pstmt.setString(1, rwsMaster.getIfscCode());
					rwsMasterData.pstmt.setString(2, rwsMaster.getAccountNo());
					rwsMasterData.pstmt.setString(3, rwsMaster.getContractorCode());
					count1 = rwsMasterData.pstmt.executeUpdate();
				} else {
					String qry1 = "insert into RWS_CONTRACTOR_BANK_LNK_TBL (CONTRACTOR_CODE,ifsc_code,account_no)"
							+ "values(?,?,?)";
					rwsMasterData.ps1 = rwsMasterData.conn.prepareStatement(qry1);
					rwsMasterData.ps1.setString(1, rwsMaster.getContractorCode());
					rwsMasterData.ps1.setString(2, rwsMaster.getIfscCode());
					rwsMasterData.ps1.setString(3, rwsMaster.getAccountNo());
					int rowCount1 = rwsMasterData.ps1.executeUpdate();
				}
				checkrs1.close();
				check1.close();
			}
		} catch (Exception e) {
			System.out.println("Exception at updateContractor method In RwsMasterData" + e);// e.printStackTrace();
		} finally {
			try {
				rwsMasterData.closeAll();
			} catch (Exception e) {
				System.out.println("Exception at finally block of updateContractor method In RwsMasterData" + e);// e.printStackTrace();
			}
		}
		return count;
	}

	private static boolean isContractorExists(String contracterCode) {
		RwsMasterData rwsMasterData = new RwsMasterData();
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			String q1 = "select * from RWS_CONTRACTOR_BANK_LNK_TBL where contractor_code=?";
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(q1);
			rwsMasterData.pstmt.setString(1, contracterCode);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			if (rwsMasterData.rs.next()) {
				return true;
			} else {
				return false;
			}
		} catch (Exception e) {
			System.out.println("Exception at isContractorExists " + e);// e.printStackTrace();
		} finally {
			try {
				rwsMasterData.closeAll();
			} catch (Exception e) {
				System.out.println("Exception at finally block of isContractorExists " + e);// e.printStackTrace();
			}
		}
		return false;
	}

	public byte[] getSourceIdScannedCopy(String sourceid, String astCode) {
		RwsMasterData rwsMasterData = new RwsMasterData();
		InputStream iStream = null;
		byte data[] = null;
		String getQuery = "";
		try {
			rwsMasterData.conn = RwsOffices.getConn();
			getQuery = "select COMPO_IMAGE from  RWS_ASSET_COMPONENT_IMAGE_TBL where ASSET_CODE=? and ASSET_COMPONENT=?";
			rwsMasterData.pstmt = rwsMasterData.conn.prepareStatement(getQuery);
			rwsMasterData.pstmt.setString(1, astCode);
			rwsMasterData.pstmt.setString(2, sourceid);
			rwsMasterData.rs = rwsMasterData.pstmt.executeQuery();
			if (rwsMasterData.rs.next()) {
				java.sql.Blob b = rwsMasterData.rs.getBlob(1);
				iStream = b.getBinaryStream();
				data = new byte[(int) b.length()];
				long i;
				long index = 0;
				while ((i = iStream.read()) != -1) {
					data[(int) index++] = (byte) i;
				}
			}
		} catch (Exception e) {
			System.out.println("Exception at getSourceIdScannedCopy " + e);// e.printStackTrace();
		} finally {
			try {
				rwsMasterData.closeAll();
			} catch (Exception e) {
				System.out.println("Exception at finally block of getSourceIdScannedCopy " + e);// e.printStackTrace();
			}
		}

		return data;
	}

	public byte[] getPhoto(Connection conn, String id) {
		String req = "";
		Blob img;
		byte[] imgData = null;
		PreparedStatement stmt = null;
		InputStream iStream = null;
		try {
			stmt = conn.prepareStatement("Select IMAGE From rws_head_office_tbl  Where HEAD_OFFICE_CODE =?");
			stmt.setString(1, id);
			ResultSet rset = stmt.executeQuery();
			while (rset.next()) {
				java.sql.Blob b = rset.getBlob(1);
				iStream = b.getBinaryStream();
				imgData = new byte[(int) b.length()];
				long i;
				long index = 0;
				while ((i = iStream.read()) != -1) {
					imgData[(int) index++] = (byte) i;
				}
			}
			rset.close();
			stmt.close();
		} catch (Exception e) {
			System.out.println("Exception at getPhoto " + e);// e.printStackTrace();
		} finally {
			/*
			 * try {
			 * 
			 * } catch (SQLException e) { System.out.
			 * println("Exception at finally block of getPhoto "+e);/
			 * /e.printStackTrace(); }
			 */
		}
		return imgData;
	}

	public byte[] getCompPhoto(Connection conn, String id) {
		String req = "";
		Blob img;
		byte[] imgData = null;
		PreparedStatement stmt = null;
		InputStream iStream = null;
		ResultSet rset=null;
		try {
			req = "Select COMPO_IMAGE From RWS_ASSET_COMPONENT_IMAGE_TBL  Where ASSET_COMPONENT =?";
			stmt = conn.prepareStatement(req);
			stmt.setString(1, id);
			rset = stmt.executeQuery();
			while (rset.next()) {
				java.sql.Blob b = rset.getBlob(1);
				iStream = b.getBinaryStream();
				imgData = new byte[(int) b.length()];
				long i;
				long index = 0;
				while ((i = iStream.read()) != -1) {
					imgData[(int) index++] = (byte) i;
				}
			}
		} catch (Exception e) {
			System.out.println("Exception at getCompPhoto " + e);// e.printStackTrace();
		} finally {
			try {
				if (rset != null)
					rset.close();
				if (stmt != null)
					stmt.close();
			} catch (SQLException e) {
				System.out.println("Exception at finally block of getCompPhoto " + e);// e.printStackTrace();
			}
		}
		return imgData;
	}

	public byte[] getWorkPhoto(Connection conn, String id, String mode) {
		String req = "";
		Blob img;
		byte[] imgData = null;
		PreparedStatement stmt = null;
		InputStream iStream = null;
		try {
			if (mode.equals("image1")) {
				req = "select WORK_IMAGE from rws_work_image_tbl where WORK_ID=?";
			} else if (mode.equals("image2")) {
				req = "select WORK_IMAGE1 from rws_work_image_tbl where WORK_ID=?";
			}
			stmt = conn.prepareStatement(req);
			stmt.setString(1, id);
			ResultSet rset = stmt.executeQuery();
			while (rset.next()) {
				java.sql.Blob b = rset.getBlob(1);
				iStream = b.getBinaryStream();
				imgData = new byte[(int) b.length()];
				long i;
				long index = 0;
				while ((i = iStream.read()) != -1) {
					imgData[(int) index++] = (byte) i;
				}
			}
			rset.close();
			stmt.close();
		} catch (Exception e) {
			System.out.println("Exception at getWorkPhoto " + e);// e.printStackTrace();
		}
		return imgData;
	}

	public byte[] getAssetImage(Connection conn, String id) {
		String req = "";
		Blob img;
		byte[] imgData = null;
		PreparedStatement stmt = null;
		InputStream iStream = null;
		ResultSet rset=null;
		try {
			req = "Select Asset_Image From Rws_Asset_Image_Tbl  Where ASSET_CODE =?";
			stmt = conn.prepareStatement(req);
			stmt.setString(1, id);
			rset = stmt.executeQuery();
			while (rset.next()) {
				java.sql.Blob b = rset.getBlob(1);
				iStream = b.getBinaryStream();
				imgData = new byte[(int) b.length()];
				long i;
				long index = 0;
				while ((i = iStream.read()) != -1) {
					imgData[(int) index++] = (byte) i;
				}
			}
		} catch (Exception e) {
			System.out.println("Exception at getAssetImage " + e);
		} finally {
			try {
				if (rset != null)
					rset.close();
				if (stmt != null)
					stmt.close();
			} catch (SQLException e) {
				System.out.println("Exception at getAssetImage " + e);// e.printStackTrace();
				// e.printStackTrace();
			}
		}
		return imgData;
	}

	public byte[] getAssetPublicTapImage(Connection conn, String id) {
		String req = "";
		Blob img;
		byte[] imgData = null;
		PreparedStatement stmt = null;
		InputStream iStream = null;
		ResultSet rset=null;
		try {
			req = "Select PUBLIC_TAP_IMAGE From RWS_ASSET_PUBLIC_TAP_IMAGE_TBL  Where ASSET_CODE =?";
			stmt = conn.prepareStatement(req);
			stmt.setString(1, id);
			rset = stmt.executeQuery();
			while (rset.next()) {
				java.sql.Blob b = rset.getBlob(1);
				iStream = b.getBinaryStream();
				imgData = new byte[(int) b.length()];
				long i;
				long index = 0;
				while ((i = iStream.read()) != -1) {
					imgData[(int) index++] = (byte) i;
				}
			}
		} catch (Exception e) {
			System.out.println("Exception at getAssetPublicTapImage " + e);
		} finally {
			try {
				if (rset != null)
					rset.close();
				if (stmt != null)
					stmt.close();
			} catch (SQLException e) {
				System.out.println("Exception at getAssetPublicTapImage " + e);// e.printStackTrace();
			}
		}
		return imgData;
	}
}
