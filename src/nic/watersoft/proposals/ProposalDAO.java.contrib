package nic.watersoft.proposals;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.StringTokenizer;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.sql.DataSource;

import nic.watersoft.commons.Debug;
import nic.watersoft.commons.LabelValueBean;
import nic.watersoft.commons.ProgrammeSubProgrammeBean;
import nic.watersoft.commons.RwsLocationBean;
import nic.watersoft.commons.RwsOffices;

public class ProposalDAO
{
	private DataSource dataSource;
	
	private Statement stat1, tempStat;
	private ResultSet rset1, tempRset;
	private String query, query1;
	private String higherOfficeCode;
	private ArrayList consideredProposals;
	private ArrayList representativeProposals;
	private ArrayList forwardedProposals;
	private ArrayList submittedProposals;
	private ArrayList sanctionedProposals;
	private ProposalDTO proposalDTO;
	private RwsOffices rwsOffices; 
	private boolean flag;
	private int ans1 = 0, ans2 = 0;
	
	public int HEAD_OF_OFFICE_COUNT = 1;
	public String errorMessage = "";	
	public ProposalDAO()
	{
		try
		{
				Connection conn = RwsOffices.getConn();	
		}
		catch(Exception e)
		{	
		}
	}

	public ProposalDAO(DataSource dataSource)
	{
		this.dataSource = dataSource;
		flag = false;
	}
		
	/*
	*		
	*
	*/
	public boolean consider(String[] proposalIds, ProposalDTO proposalDTO)
	{
		Connection conn = null;
		Statement stat = null;
		
		String preparedBy = proposalDTO.getUserId();
		if(proposalIds != null || proposalIds.length > 0)
		{
			try
			{
				conn = dataSource.getConnection();
				conn.setAutoCommit(false);
				stat = conn.createStatement();

				for(int i=0; i<proposalIds.length; i++)
				{
					query = " UPDATE rws_rep_proposal_tbl SET flag='C' "
						  + " WHERE proposal_id = '" + proposalIds[i] + "'";
					stat.addBatch(query);

					query = " INSERT INTO rws_work_proposal_tbl(office_code, no_of_habs, "
						  + " proposal_id, proposal_name, programme_code, "
						  + " subprogramme_code, estimate_cost, prepared_by, "
						  + " prepared_on, remarks, priority_code, type_of_asset, flag) ( "
						  + " SELECT office_code, no_of_habs, proposal_id, proposal_name, "
						  + " programme_code, subprogramme_code, estimate_cost, "
						  + " '" + preparedBy +"',SYSDATE, remarks, priority_code, "
						  + " type_of_asset, flag "
						  + " FROM rws_rep_proposal_tbl WHERE proposal_id = '" + proposalIds[i] + "')";
					stat.addBatch(query);

					query = " INSERT INTO rws_work_proposal_mirror_tbl(office_code, no_of_habs, "
						  + " proposal_id, proposal_name, programme_code, "
						  + " subprogramme_code, estimate_cost, prepared_by, prepared_on, remarks,"
						  + " flag, priority_code, type_of_asset, modified_by, modified_on, track_no) "
						  + " ( SELECT office_code, no_of_habs, proposal_id, proposal_name, programme_code,"
						  + " subprogramme_code, estimate_cost, prepared_by, prepared_on, remarks,"
						  + " flag, priority_code, type_of_asset, '" + preparedBy + "', SYSDATE, 0 "  
						  + " FROM rws_rep_proposal_tbl WHERE proposal_id = '" + proposalIds[i] + "')";
					stat.addBatch(query);
				}

				int[] updateCounts = stat.executeBatch();
				flag = true;
				for(int i=0; i<updateCounts.length; i++)
				{
					if(updateCounts[i] != 1)
						flag = false;
				}
				if(flag)
					conn.commit();
				conn.setAutoCommit(true);
				
			}
			catch(Exception e)
			{	Debug.writeln("Exception in consider : \n" + e);				
			}
			finally
			{					
				if(stat != null)
				{	try
					{	stat.close();
					}
					catch(SQLException sqle){ }
				}
				if(conn != null)
				{	try
					{	conn.close();
					}
					catch(SQLException sqle){ }
				}
			}
		}
		return flag;
	}
	
	public boolean submit(String[] proposalIds, ProposalDTO proposalDTO)
	{
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;

		String officeCode = proposalDTO.getOfficeCode();
		String actionFrom = proposalDTO.getOfficeCode();
		String actionTo =  proposalDTO.getSubmitTo();
		String sentBy = proposalDTO.getUserId();;
		String sentTo = null;
		String officeType = null;		
		try
		{
			conn = dataSource.getConnection();
			
			if(!actionTo.substring(4,6).equals("00"))
					officeType = "SUB DIVISION OFFICE";
			else
			if(!actionTo.substring(3,4).equals("0"))
					officeType = "DIVISION OFFICE";
			else
			if(!actionTo.substring(1,3).equals("00"))
				officeType = "CIRCLE OFFICE";
			else
			if(!actionTo.substring(0,1).equals("0"))
				officeType = "HEAD OFFICE";
	
			query = " SELECT user_id FROM rws_password_tbl WHERE designation_code = "
				  + " (SELECT designation_code FROM rws_head_of_office_tbl WHERE office LIKE '" + officeType + "')" 
				  + " AND office_code = '" + actionTo + "'";
			System.out.println("Head Of Office query in submit() \n" + query);
			
			stat = conn.createStatement();
			rset = stat.executeQuery(query);
			int rowCount = 0;
			
			while(rset.next())
			{
				rowCount++;
				sentTo = rset.getString(1);
			}
			if(rowCount != 1)
			{
				HEAD_OF_OFFICE_COUNT = rowCount;
				return false;
			}

			conn.setAutoCommit(false);
		
			for(int i=0; i<proposalIds.length; i++)
			{
				
				int trackNo = getNextTrackNo(proposalIds[i]);
								
				query = " INSERT INTO rws_work_proposal_mirror_tbl(office_code, no_of_habs, "
					  + " proposal_id, proposal_name, programme_code, subprogramme_code, "
					  + " estimate_cost, prepared_by, prepared_on, remarks, flag, priority_code,"
					  + " type_of_asset, modified_by, modified_on, track_no)"
					  + " (SELECT office_code, no_of_habs, proposal_id, proposal_name, "
					  + " programme_code, subprogramme_code, estimate_cost, prepared_by, prepared_on, "
					  + " remarks, flag, priority_code, type_of_asset, "
					  + " '" + sentBy + "', SYSDATE, " + trackNo + " FROM rws_work_proposal_tbl"
					  + " WHERE proposal_id = '" + proposalIds[i] + "')";
				
				stat.addBatch(query);
								
				if(trackNo > 1)
				{
				query = " UPDATE rws_proposal_workflow_tbl SET flag='Y' " 
					  + " WHERE proposal_id = '" + proposalIds[i] + "' AND track_no = " + (trackNo-1);
				stat.addBatch(query);
				}
				
				query = " INSERT INTO rws_proposal_workflow_tbl(proposal_id, track_no," 
					  + " action_from, action_to, action_type, action_date, sent_by,"
					  + " sent_to, memo_no, subject, ref, content, for_sub_date, flag)"
					  + " VALUES('" + proposalIds[i] + "'," + trackNo + ", "
					  + " '" + actionFrom + "', '" + actionTo + "', " 
					  + " 'S', SYSDATE, " 
					  + " '" + sentBy + "', '" + sentTo + "'," 
					  + " '" + proposalDTO.getLetterNo() + "'," 
					  + " '" + proposalDTO.getSubmitSubject() + "',"
					  + " '" + proposalDTO.getSubmitRef() + "'," 
					  + " '" + proposalDTO.getSubmitContent() + "',"
					  + " TO_DATE('"+proposalDTO.getSubmitDate()+"','dd/mm/yyyy'),'N')";
				
				stat.addBatch(query);
			}
				int arr[]=stat.executeBatch();
				flag = true;
								
				conn.commit();
				conn.setAutoCommit(true);
		}
		catch(Exception e)
		{	Debug.writeln("Exception in submit : \n" + e);				
		}
		finally
		{	
			if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){ }
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){ }
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){ }
			}
		}
		return flag;
	}
	
	/*
	*
	*
	*/
	public boolean forward(String[] proposalIds, ProposalDTO proposalDTO)
	{
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;

		String officeCode = proposalDTO.getOfficeCode();
		String actionFrom = proposalDTO.getOfficeCode();
		String forwardTo = proposalDTO.getForwardTo();
		String[] actionTo = null;
		String sentBy = proposalDTO.getUserId();
		String sentTo = null;
		String officeType = null;
		StringTokenizer stringTokenizer = new StringTokenizer(forwardTo,",");
		int noOfForwards = stringTokenizer.countTokens();
		
		actionTo = new String[noOfForwards];
		int k=0;
		while(stringTokenizer.hasMoreElements())
		{
			actionTo[k] = stringTokenizer.nextToken();
			System.out.println("Action["+k+"]: " + actionTo[k]);
			k++;
		}
		
		String employeeCodes[] = new String[actionTo.length]; 
		try
		{
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			
			for(int	i=0; i< actionTo.length; i++)
			{
				if(!actionTo[i].substring(4,6).equals("00"))
					officeType = "SUB DIVISION OFFICE";
				else
				if(!actionTo[i].substring(3,4).equals("0"))
						officeType = "DIVISION OFFICE";
				else
				if(!actionTo[i].substring(1,3).equals("00"))
					officeType = "CIRCLE OFFICE";
				else
				if(!actionTo[i].substring(0,1).equals("0"))
					officeType = "HEAD OFFICE";
	
				query = " SELECT user_id FROM rws_password_tbl WHERE designation_code = "
					  + " (SELECT designation_code FROM rws_head_of_office_tbl WHERE office LIKE '"+officeType+"')" 
					  + " AND office_code = '" + actionTo[i] + "'";
				
				System.out.println("Head Of Office query in submit() \n" + query);
				
				rset = stat.executeQuery(query);
				while(rset.next())
				{
					employeeCodes[i] = rset.getString(1);
				}
			}
			int p = 0;
			for (int i=0; i<employeeCodes.length; i++)
			{
				if(employeeCodes[i] != null)
						p++;
			}
			if(p != employeeCodes.length)
			{
				HEAD_OF_OFFICE_COUNT = p;
				return false;
			}

			conn.setAutoCommit(false);							
			for(int i=0; i<proposalIds.length; i++)
			{
				int trackNo = getNextTrackNo(proposalIds[i]);
				
				query = " INSERT INTO rws_work_proposal_mirror_tbl(office_code, no_of_habs, "
					  + " proposal_id, proposal_name, programme_code, subprogramme_code, "
					  + " estimate_cost, prepared_by, prepared_on, state_central, "
					  + " work_id, remarks, flag, priority_code, type_of_asset, admin_no, admin_date,"
					  + " goms_no, admin_sanc_auth, sanction_amount, modified_by, modified_on, "
					  + " track_no, phased, phase_no ) "
					  + " (SELECT office_code, no_of_habs, "
					  + " proposal_id, proposal_name, programme_code, subprogramme_code, "
					  + " estimate_cost, prepared_by, prepared_on, state_central, "
					  + " work_id, remarks, flag, priority_code, type_of_asset, admin_no, admin_date,"
					  + " goms_no, admin_sanc_auth, sanction_amount, "
					  + " '" + sentBy + "', SYSDATE, " + trackNo + ", phased, phase_no "
					  + " FROM rws_work_proposal_tbl "
					  + " WHERE proposal_id = '" + proposalIds[i] + "')";
				stat.addBatch(query);
								
				for(int j=0; j< noOfForwards; j++)
				{
					
					if(trackNo > 1)
					{
						query = " UPDATE rws_proposal_workflow_tbl SET flag='Y' " 
							  + " WHERE proposal_id = '" + proposalIds[i] + "' AND track_no = " + (trackNo-1);
						stat.addBatch(query);
					}
					
					query = " INSERT INTO rws_proposal_workflow_tbl(proposal_id, track_no, "
						  + " action_from, action_to, action_type, action_date, "
						  + " sent_by, sent_to, memo_no, subject, ref, content, for_sub_date,flag) "
						  + " VALUES('" + proposalIds[i] + "'," + trackNo + ", "
						  + " '" + actionFrom + "', '" + actionTo[j] + "', 'F', SYSDATE, " 
						  + " '" + sentBy + "', "
						  + " '" + employeeCodes[j] + "', " 
						  + " '" + proposalDTO.getMemoNo() + "', " 
						  + " '" + proposalDTO.getForwardSubject() + "', "
						  + " '" + proposalDTO.getForwardRef() + "', " 
						  + " '" + proposalDTO.getForwardContent() + "',"
						  + " TO_DATE('"+proposalDTO.getForwardDate()+"','dd/mm/yyyy'),'N')";
					
					stat.addBatch(query);
				}
			}
			flag = true;
			int[] updateCounts = stat.executeBatch();
			for(int i=0; i<updateCounts.length; i++)
			{
				if(updateCounts[i] != 1)
					flag = false;
			}  
			if(flag)
				conn.commit();
			conn.setAutoCommit(true);
			
		}
		catch(Exception e)
		{	Debug.writeln("Exception in forward : \n" + e);				
		}
		finally
		{	if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){ }
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){ }
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){ }
			}
		}
		return flag;
	}
	
	public boolean others(String[] proposalIds, ProposalDTO proposalDTO)
	{
		Connection conn = null;
		Statement stat = null;
		try
		{
			conn = dataSource.getConnection();
			conn.setAutoCommit(false);
			stat = conn.createStatement();
			String actionType = proposalDTO.getActionType();
			
			for(int i=0; i<proposalIds.length; i++)
			{
				query = " INSERT INTO rws_proposal_workflow_tbl(proposal_id, track_no," 
					  + " action_from, action_to, action_type, action_date, sent_by,"
					  + " sent_to, memo_no, subject, ref, content, for_sub_date, flag)"
					  + " VALUES('" + proposalIds[i] + "', -1,'000000','000000',"
					  + " '" + actionType + "', SYSDATE, "
					  + " '" + proposalDTO.getEmployeeCode() + "',"
					  + " '" + proposalDTO.getEmployeeCode() + "',"
					  + " '000000', '000000','000000',"
					  + " '" + proposalDTO.getRemarks() + "', SYSDATE, 'N')";

				stat.addBatch(query);
				
				query = " UPDATE rws_work_proposal_tbl SET flag='"+actionType+"'"
					  + " WHERE proposal_id='"+proposalIds[i]+"'";
				stat.addBatch(query);
			}
				flag = true;
				int updateCounts[]=stat.executeBatch();
				for(int i=0; i<updateCounts.length; i++)
				{
					if(updateCounts[i] == 0)
						flag = false;
				}
				if(flag)
					conn.commit();
				
				conn.setAutoCommit(true);
		}
		catch(Exception e)
		{	Debug.writeln("Exception in others : \n" + e);				
		}
		finally
		{	
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle)
				{	
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle)
				{	
				}
			}
		}
		return flag;
	}
	
	public boolean considerForSanction(String[] proposalIds, ProposalDTO proposalDTO)
	{
		Connection conn = null;
		Statement stat = null;
						
		try
		{
			conn = dataSource.getConnection();
			conn.setAutoCommit(false);
			stat = conn.createStatement();
			String actionType = proposalDTO.getActionType();
			
			for(int i=0; i<proposalIds.length; i++)
			{
				int trackNo = getNextTrackNo(proposalIds[i]);
				
				query = " INSERT INTO rws_proposal_workflow_tbl(proposal_id, " 
					  + " track_no, action_from, action_to, action_type, "
					  + " action_date, sent_by, sent_to, memo_no, subject, "
					  + " ref, content, for_sub_date, flag)"
					  + " (SELECT proposal_id," + trackNo + ", action_from, "
					  + " action_to, 'P', SYSDATE, sent_by, sent_to, "
					  + " memo_no, subject, ref, content,for_sub_date,'N' "
					  + " FROM rws_proposal_workflow_tbl "
					  + " WHERE proposal_id = '" + proposalIds[i] + "' AND "
					  + " track_no = " + (trackNo-1) + ")";
				stat.addBatch(query);
				
				query = " UPDATE rws_proposal_workflow_tbl SET flag='Y'"
					  + " WHERE proposal_id='"+proposalIds[i]+"' "
					  + " AND track_no = " + (trackNo-1);
				stat.addBatch(query);
				
				query = " UPDATE rws_work_proposal_tbl SET flag='P'"
					  + " WHERE proposal_id='"+proposalIds[i]+"'";
				stat.addBatch(query);
				
				query = " UPDATE rws_rep_proposal_tbl SET flag='P'"
					  + " WHERE proposal_id='"+proposalIds[i]+"'";
				stat.addBatch(query);
			}
				flag = true;
				int updateCounts[]=stat.executeBatch();
				for(int i=0; i<updateCounts.length; i++)
				{
					if(updateCounts[i] == 0)
						flag = false;
				}
				if(flag)
					conn.commit();
				
				conn.setAutoCommit(true);
		}
		catch(Exception e)
		{	Debug.writeln("Exception in considerForSanction : \n" + e);				
		}
		finally
		{	
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle)
				{	
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle)
				{	
				}
			}
		}
		return flag;
	}
	
	/*
	*
	*
	*/
	public boolean sanction(String[] proposalIds, String[] sanctionAmounts, ProposalDTO proposalDTO)
	{
		Connection conn = null;
		Statement stat = null;
		
		String officeCode = proposalDTO.getOfficeCode();
		String preparedBy = proposalDTO.getUserId();
		String adminNo = proposalDTO.getAdminNo();
		String adminDate = proposalDTO.getAdminDate();
		String goNo = proposalDTO.getGoNo();
		String sancAuthority = proposalDTO.getSanctioningAuthority();
		String sancAt = proposalDTO.getSanctionedAt();
		String sanctionedAmount = proposalDTO.getSanctionedAmount();
		
		if(proposalIds != null || proposalIds.length > 0)
		{
			try
			{	
				conn = dataSource.getConnection();
				conn.setAutoCommit(false);
				stat = conn.createStatement();
				for(int i=0; i<proposalIds.length; i++)
				{
					query = " UPDATE rws_rep_proposal_tbl SET flag='A' "
						  + " WHERE proposal_id = '" + proposalIds[i] + "'";
					
					stat.addBatch(query);
					int trackNo = getNextTrackNo(proposalIds[i]);

					if(trackNo > 1)
					{
						query = " UPDATE rws_proposal_workflow_tbl SET flag='Y' "
							  + " WHERE proposal_id = '" + proposalIds[i] + "' "
							  + " AND track_no = " + (trackNo -1) ;
						
						stat.addBatch(query);
					}
					
					String newWorkId = getNextWorkId(proposalIds[i]);

					if(newWorkId != null && newWorkId.equals("false"))
						return false;

					query = " UPDATE rws_work_proposal_tbl "
						  + " SET flag = 'A', admin_no='" + adminNo+ "',"
						  + " admin_date = TO_DATE('" + adminDate + "', 'dd/mm/yyyy'), "
						  + " goms_no = '" + goNo + "', "
						  + " admin_sanc_auth='"+ sancAuthority + "', "
						  + " state_central = '" + sancAt + "', "
						  + " work_id = '" + newWorkId + "', "
						  + " sanction_amount = '" + sanctionAmounts[i] + "' "
						  + " WHERE proposal_id = '" + proposalIds[i] + "'";
						  				
					stat.addBatch(query);

					query = " INSERT INTO rws_work_proposal_mirror_tbl(office_code, no_of_habs, "
						  + " proposal_id, proposal_name, programme_code, subprogramme_code, "
						  + " estimate_cost, prepared_by, prepared_on, state_central, "
						  + " work_id, remarks, flag, priority_code, type_of_asset, admin_no, admin_date,"
						  + " goms_no, admin_sanc_auth, sanction_amount, modified_by, modified_on, "
						  + " track_no,phased, phase_no ) "
						  + " (SELECT office_code, no_of_habs, "
						  + " proposal_id, proposal_name, programme_code, subprogramme_code, "
						  + " estimate_cost, prepared_by, prepared_on, state_central, "
						  + " work_id, remarks, flag, priority_code, type_of_asset, admin_no, admin_date,"
						  + " goms_no, admin_sanc_auth, sanction_amount, "
						  + " '" + preparedBy + "', SYSDATE, 999, phased, phase_no "   
						  + " FROM rws_work_proposal_tbl "
						  + " WHERE proposal_id = '" + proposalIds[i] + "')";

					stat.addBatch(query);
					
					int[] updateCounts = stat.executeBatch();
					for(int j=0; j<updateCounts.length; j++)
					{
						if(updateCounts[j] != 0)
							conn.commit();
					}
				}
				
		
				conn.setAutoCommit(true);
				
			}
			catch(Exception e)
			{	Debug.writeln("Exception in sanction : \n" + e);				
			}
			finally
			{				
				if(stat != null)
				{	try
					{	stat.close();
					}
					catch(SQLException sqle){ }
				}
				if(conn != null)
				{	try
					{	conn.close();
					}
					catch(SQLException sqle){ }
				}
			}
		}
		return true;
	}
	
	/**
	*
	*
	*/
	public String getNextProposalId(String headOfficeCode, String circleOfficeCode) 
		
	{
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;

		java.util.Date date = new java.util.Date();
		SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy");
		String currentYear = dateFormatter.format(date);
		String headOfficeName = "RW";
		if(headOfficeCode != null && headOfficeCode.equals("1"))
			headOfficeName = "RW";
		else
		if(headOfficeCode != null && headOfficeCode.equals("2"))
			headOfficeName = "PR";
		
		if(circleOfficeCode != null && circleOfficeCode.equals(""))
				circleOfficeCode = "00";
				
		String proposalId = headOfficeName + currentYear + circleOfficeCode;
		System.out.println("Actual proposalId: " + proposalId);
		try
		{	
			query = " SELECT MAX(SUBSTR(proposal_id,3,10)) as proposal_id FROM rws_rep_proposal_tbl "
				  + " WHERE proposal_id LIKE '" + proposalId + "%'"; 

			conn = dataSource.getConnection();
			
			stat = conn.createStatement();
			rset = stat.executeQuery(query);
			if(rset.next())
			{
				int temp = rset.getInt(1);
				System.out.println("temp: " + temp);
				if(temp == 0)
					proposalId = proposalId + "0001";
				else
				{
					System.out.println("String.valueOf(temp).substring(6,10)" + String.valueOf(temp).substring(6,10));
					int sno = Integer.parseInt(String.valueOf(temp).substring(6,10));
					System.out.println("SNO is " + sno);
					String tempSNo ="";
					if(sno < 9)
						tempSNo =  "000"+(++sno);
					else
					if(sno < 99)
						tempSNo =  "00"+(++sno);
					else
					if(sno < 999)
						tempSNo =  "0"+(++sno);
					else
					if(sno < 9999)
						tempSNo = String.valueOf(++sno);
						
					proposalId = proposalId + tempSNo;
				}
			}
			System.out.println("The Proposal ID Query is: " + query);
			System.out.println("The Proposal ID is: " + proposalId);
		}
		catch(Exception e)
		{	Debug.writeln("Exception in getNextProposalId : \n" + e);			
		}
		finally
		{	if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){ }
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){	
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){
				}
			}
		}
		return proposalId;
	}	
	
	/**
	*
	*
	*/
	public int getNextTrackNo(String proposalId)
	{
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;
		int nextTrackNo = 1;
		try
		{
			String query = " SELECT MAX(track_no)+1 from rws_proposal_workflow_tbl "
						 + " WHERE proposal_id = '" + proposalId + "'";

			conn = dataSource.getConnection();
			stat = conn.createStatement();
			rset = stat.executeQuery(query);
			if(rset.next())
			{
				nextTrackNo = rset.getInt(1);

				if(nextTrackNo == 0)
					nextTrackNo = 1;
			}
		}
		catch(Exception e)
		{	Debug.writeln("Exception in getNextTrackNo : \n" + e);			
		}
		finally
		{	if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){
				}
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){
				}
			}
		}
		return nextTrackNo;
	}
	
	/**
	*
	*
	*/
	public String getNextWorkId(String proposalId)
	{
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;

		java.util.Date date = new java.util.Date();
		SimpleDateFormat dateFormatter = new SimpleDateFormat("yy");
		String currentYear = dateFormatter.format(date);
		
		String workId = null;
		String programmeCode = null;
		String subprogrammeCode = null;
		String districtCode = null;
		String typeOfAsset = null;
				
		try
		{	
			query = " SELECT programme_code, subprogramme_code, "
				  + " SUBSTR(OFFICE_CODE,2,2) AS districtCode, type_of_asset "
				  + " FROM rws_work_proposal_tbl WHERE proposal_id='" + proposalId + "'";

			conn = dataSource.getConnection();
			stat = conn.createStatement();
			rset = stat.executeQuery(query);

			if(rset.next())
			{
				programmeCode = rset.getString(1);
				subprogrammeCode = rset.getString(2);
				districtCode = rset.getString(3);
				typeOfAsset = rset.getString(4); 
			}
			if(subprogrammeCode == null)
				subprogrammeCode = "00";

			if(programmeCode == null || districtCode == null ||	typeOfAsset == null)
				return new String("false");

			workId = programmeCode + subprogrammeCode + districtCode 
				   + typeOfAsset + currentYear;

			query = " SELECT MAX(SUBSTR(work_id,11,4)) as work_id FROM rws_work_proposal_tbl "
				  + " WHERE work_id LIKE '" + workId + "%'"; 
			rset = stat.executeQuery(query);
			if(rset.next())
			{
				int sno = rset.getInt(1);
				if(sno == 0)
					workId = workId + "0001";
				else
				{
					if(sno >= 9999)
						throw new Exception("No more WORK ID left.");
					else
					{
						String tempSno = null;
						if(sno<9)
							tempSno = "000"+(sno+1);
						else
						if(sno<99)
							tempSno = "00"+(sno+1);
						else
						if(sno<999)
							tempSno = "0"+(sno+1);
						else
							tempSno = String.valueOf(sno+1);
						
						workId =  workId + String.valueOf(tempSno);
					}
				}
			}
			System.out.println("Work Id for " + proposalId + " is : " + workId);
		}
		catch(Exception e)
		{	Debug.writeln("Exception in getWorkId : \n" + e);			
		}
		finally
		{	if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){
				}
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){
				}
			}
		}
		return workId;
	}

	/*
	*
	*
	*/
	protected ArrayList getRepresentativeProposals(String officeCode)
	{
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;
		try
		{
			query = " SELECT RP.proposal_name, RP.proposal_id, " 
				  + " TO_CHAR(RP.rep_date,'dd/mm/yyyy') as proposal_date,"
				  + " RP.no_of_habs, NVL(P.programme_name,''), NVL(S.subprogramme_name,''),"
				  + " estimate_cost, NVL(RP.remarks, ''), NVL(AT.type_of_asset_name,'') "
				  + " FROM "
				  + " rws_rep_proposal_tbl RP, rws_programme_tbl P, "
				  + " rws_subprogramme_tbl S, rws_asset_type_tbl AT "
				  + " WHERE "
				  + " RP.programme_code = P.programme_code (+) AND "
				  + " (RP.subprogramme_code = S.subprogramme_code(+) AND "
				  + " RP.programme_code = S.programme_code(+) ) AND "
				  + " RP.type_of_asset = AT.type_of_asset_code(+) AND "
				  + " RP.flag = 'N' AND RP.office_code = '" + officeCode + "' " 
				  + " ORDER BY rep_date ";
			
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			rset = stat.executeQuery(query);
			representativeProposals = new ArrayList();
			
			while(rset.next())
			{
				proposalDTO = new ProposalDTO();
				proposalDTO.setProposalName(rset.getString(1));
				proposalDTO.setProposalId(rset.getString(2));
				proposalDTO.setProposalDate(rset.getString(3));
				proposalDTO.setNoOfHabs(rset.getString(4));
				proposalDTO.setProgrammeName(rset.getString(5));
				proposalDTO.setSubprogrammeName(rset.getString(6));
				proposalDTO.setEstimateCost(rset.getString(7));
				proposalDTO.setRemarks(rset.getString(8));
				proposalDTO.setAssetName(rset.getString(9));
				representativeProposals.add(proposalDTO);
			}
		}
		catch(Exception e)
		{	Debug.writeln("Exception in getRepresentativeProposals : \n" + e);			
		}
		finally
		{	
			if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){ }
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){ }
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){ }
			}
		}
		System.out.println("representativeProposals.size() in ProposalDAO(): " + 
							representativeProposals.size());
		return representativeProposals;
	}
	
	/*
	*
	*
	*/
	public ArrayList getConsideredProposals(String officeCode) 
	{	
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;

		try
		{
			query = " SELECT WP.proposal_id, WP.proposal_name, " 
				  + " TO_CHAR(WP.prepared_on,'dd/mm/yyyy'),"
				  + " WP.no_of_habs, NVL(P.programme_name,''), NVL(S.subprogramme_name,''), "
				  + " NVL(AT.type_of_asset_name, ''), WP.estimate_cost, NVL(WP.remarks, '') "
				  + " FROM "
				  + " rws_work_proposal_tbl WP, rws_programme_tbl P,"
				  + " rws_subprogramme_tbl S, rws_asset_type_tbl AT "
				  + " WHERE "
				  + " WP.programme_code = P.programme_code (+) AND "
				  + " (WP.subprogramme_code = S.subprogramme_code(+) AND "
				  + " WP.programme_code = S.programme_code(+) ) AND "
				  + " WP.type_of_asset = AT.type_of_asset_code(+) AND "
				  + " WP.flag = 'C' AND WP.office_code ='" + officeCode + "' AND "
				  + " WP.proposal_id NOT IN (SELECT proposal_id FROM rws_proposal_workflow_tbl) "
				  + " ORDER BY WP.prepared_on ";

			conn = dataSource.getConnection();			
			stat = conn.createStatement();
			rset = stat.executeQuery(query);
			consideredProposals = new ArrayList();
			ProposalDTO proposalDTO = null;
			while(rset.next())
			{
				proposalDTO = new ProposalDTO();
				proposalDTO.setProposalId(rset.getString(1));
				proposalDTO.setProposalName(rset.getString(2));
				proposalDTO.setProposalDate(rset.getString(3));
				proposalDTO.setNoOfHabs(rset.getString(4));
				proposalDTO.setProgrammeName(rset.getString(5));
				proposalDTO.setSubprogrammeName(rset.getString(6));
				proposalDTO.setAssetName(rset.getString(7));
				proposalDTO.setEstimateCost(rset.getString(8));
				proposalDTO.setRemarks(rset.getString(9));
				consideredProposals.add(proposalDTO);
			}
		}
		catch(Exception e)
		{	Debug.writeln("Exception in getConsideredProposals : \n" + e);			
		}
		finally
		{	if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){ 	}
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){ }
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){ }
			}
		}
		System.out.println("consideredProposals.size() in ProposalDAO: " + 
							consideredProposals.size());
		return consideredProposals;
	}
	
	/*
	*
	*
	*/
	public ArrayList getSubmittedProposals(String officeCode, String proposalType)
	{
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;
		
		try
		{
			query = " SELECT PWT.action_from, WP.proposal_name, WP.proposal_id, "
				  + " TO_CHAR(WP.prepared_on,'dd/mm/yyyy'), WP.no_of_habs, "
				  + " NVL(P.programme_name,''), "
				  + " NVL(SP.subprogramme_name,''), "
				  + " NVL(WP.estimate_cost,0), "
				  + " NVL(WP.sanction_amount,0), "
				  + " NVL(WP.remarks,''), NVL(PWT.memo_no,''),"
				  + " NVL(PWT.subject,''), NVL(PWT.ref,''),"
				  + " NVL(PWT.content,''), "
				  + " TO_CHAR(PWT.for_sub_date,'dd/mm/yyyy'),"
				  + " NVL(AT.type_of_asset_name, ''), "
				  + " NVL(WP.programme_code,'00'), NVL(WP.subprogramme_code,'00'), "
				  + " NVL(WP.type_of_asset,'00') "
				  + " FROM rws_work_proposal_tbl WP,rws_programme_tbl P, "
				  + " rws_subprogramme_tbl SP, rws_proposal_workflow_tbl PWT, "
				  + " rws_asset_type_tbl AT "
				  + " WHERE  "
				  + " (WP.proposal_id = PWT.proposal_id) AND "
				  + " (WP.programme_code = P.programme_code (+)) "
				  + " AND "
				  + " (WP.programme_code = SP.programme_code(+) AND "
				  + " WP.subprogramme_code = SP.subprogramme_code (+) ) "
				  + " AND WP.type_of_asset = AT.type_of_asset_code(+) "
				  + " AND WP.flag = '" + proposalType + "' AND "
				  + " (PWT.action_type='S' AND PWT.flag='N' AND PWT.action_to='" + officeCode + "') ";
			
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			rset = stat.executeQuery(query);
			submittedProposals = new ArrayList();
			ProposalDTO proposalDTO = null;
			rwsOffices = new RwsOffices(dataSource);
			String content = null;
			while(rset.next())
			{
				proposalDTO = new ProposalDTO();
						
				String actionFrom = rset.getString(1);
				proposalDTO.setOfficeCode(actionFrom);
				proposalDTO.setOfficeName(rwsOffices.getOfficeName(actionFrom, true));
				proposalDTO.setProposalName(rset.getString(2));
				proposalDTO.setProposalId(rset.getString(3));
				proposalDTO.setProposalDate(rset.getString(4));
				proposalDTO.setNoOfHabs(rset.getString(5));
				proposalDTO.setProgrammeName(rset.getString(6));
				proposalDTO.setSubprogrammeName(rset.getString(7));
				String estimateCost = rset.getString(8);
				String sanctionedAmount = rset.getString(9);
				proposalDTO.setEstimateCost(estimateCost);
				if(sanctionedAmount.equals("0"))
					proposalDTO.setSanctionedAmount(estimateCost);
				else
					proposalDTO.setSanctionedAmount(sanctionedAmount);
				proposalDTO.setRemarks(rset.getString(10));
				proposalDTO.setMemoNo(rset.getString(11));
				proposalDTO.setSubmitSubject(rset.getString(12));
				proposalDTO.setSubmitRef(rset.getString(13));
				content = rset.getString(14);
				content = content.replaceAll("\\n", "");
				content = content.replaceAll("\\r", "<br>");
							 
				proposalDTO.setSubmitContent(content);
				
				proposalDTO.setSubmitDate(rset.getString(15));
				proposalDTO.setAssetName(rset.getString(16));
				proposalDTO.setProgrammeCode(rset.getString(17));
				proposalDTO.setSubprogrammeCode(rset.getString(18));
				proposalDTO.setAssetCode(rset.getString(19));

				submittedProposals.add(proposalDTO);
			}
		}
		catch(Exception e)
		{	Debug.writeln("Exception in getSubmittedProposals : \n" + e);			
		}
		finally
		{	if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){ }
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){ }
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){ }
			}
		}
		
		System.out.println("submittedProposals.size() in ProposalDAO: " + 
							submittedProposals.size());
		return submittedProposals;
	}
	
	/**
	*
	*
	*/
	public ArrayList getForwardedProposals(String actionTo, String proposalType)
	{	
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;
		rwsOffices = new RwsOffices(dataSource);
		try
		{
			query = " SELECT PWT.action_from, UPPER(WP.proposal_name), "
				  + " WP.proposal_id, WP.work_id, WP.admin_no, "
				  + " TO_CHAR(WP.admin_date, 'dd/mm/yyyy'), "
				  + " WP.goms_no, TO_CHAR(WP.prepared_on,'dd/mm/yyyy'), "
				  + " WP.no_of_habs, "
				  + " NVL(AT.type_of_asset_name, ''), NVL(P.programme_name,''), "
				  + " NVL(SP.subprogramme_name,''), "
				  + " WP.estimate_cost, WP.sanction_amount, PWT.action_type, "
				  + " PWT.memo_no,PWT.subject,TO_CHAR(PWT.for_sub_date,'dd/mm/yyyy'), "
				  + " NVL(PWT.ref,''), PWT.content "
				  + " FROM rws_work_proposal_tbl WP,rws_programme_tbl P, "
				  + " rws_subprogramme_tbl SP,rws_proposal_workflow_tbl PWT, "
				  + " rws_asset_type_tbl AT "
				  + " WHERE  "
				  + " (WP.proposal_id = PWT.proposal_id) AND "
				  + " (WP.programme_code = P.programme_code (+)) "
				  + " AND "
				  + " (WP.programme_code = SP.programme_code(+) AND "
				  + " WP.subprogramme_code = SP.subprogramme_code (+) ) "
				  + " AND WP.type_of_asset = AT.type_of_asset_code(+) "
				  + " AND WP.flag = '" + proposalType + "' AND "
				  + " (PWT.action_type='F' AND PWT.flag='N' AND PWT.action_to='" + actionTo + "') ";
			
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			rset = stat.executeQuery(query);
			forwardedProposals = new ArrayList();
			ProposalDTO proposalDTO = null;
			String content = null;
			while(rset.next())
			{
				proposalDTO = new ProposalDTO();
				String officeCode = rset.getString(1);
				proposalDTO.setOfficeCode(officeCode);
				proposalDTO.setOfficeName(rwsOffices.getOfficeName(officeCode,true));
				proposalDTO.setProposalName(rset.getString(2));
				proposalDTO.setProposalId(rset.getString(3));
				proposalDTO.setWorkId(rset.getString(4));
				proposalDTO.setAdminNo(rset.getString(5));
				proposalDTO.setAdminDate(rset.getString(6));
				proposalDTO.setGoNo(rset.getString(7));
				proposalDTO.setProposalDate(rset.getString(8));
				proposalDTO.setNoOfHabs(rset.getString(9));
				proposalDTO.setAssetName(rset.getString(10));
				proposalDTO.setProgrammeName(rset.getString(11));
				proposalDTO.setSubprogrammeName(rset.getString(12));
				proposalDTO.setEstimateCost(rset.getString(13));
				proposalDTO.setSanctionedAmount(rset.getString(14));
				proposalDTO.setFlag(rset.getString(15));
				proposalDTO.setMemoNo(rset.getString(16));
				proposalDTO.setForwardSubject(rset.getString(17));
				proposalDTO.setForwardDate(rset.getString(18));
				proposalDTO.setForwardRef(rset.getString(19));
				content = rset.getString(20);
				content = content.replaceAll("\\n","");
				content = content.replaceAll("\\r","<br>");
				proposalDTO.setForwardContent(content);
												
				forwardedProposals.add(proposalDTO);
			}
		}
		catch(Exception e)
		{	Debug.writeln("Exception in getForwardedProposals : \n" + e);			
		}
		finally
		{	if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){
				}
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){
				}
			}
		}
				
		System.out.println("forwardedProposals.size() in ProposalDAO: " + 
							forwardedProposals.size());
		return forwardedProposals;
	}
	
	/*
	*
	*
	*/
	public ArrayList getSubmittedProposals(String actionFrom, String actionTo, String proposalType)
	{
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;
		
		try
		{
			query = " SELECT PWT.action_from, WP.proposal_name, WP.proposal_id, "
				  + " TO_CHAR(WP.prepared_on,'dd/mm/yyyy'), WP.no_of_habs, "
				  + " NVL(P.programme_name,''), "
				  + " NVL(SP.subprogramme_name,''), "
				  + " NVL(WP.estimate_cost,0), "
				  + " NVL(WP.sanction_amount,0), "
				  + " NVL(WP.remarks,''), NVL(PWT.memo_no,''),"
				  + " NVL(PWT.subject,''), NVL(PWT.ref,''),"
				  + " NVL(PWT.content,''), "
				  + " TO_CHAR(PWT.for_sub_date,'dd/mm/yyyy'),"
				  + " NVL(AT.type_of_asset_name, ''), "
				  + " NVL(WP.programme_code,'00'), NVL(WP.subprogramme_code,'00'), "
				  + " NVL(WP.type_of_asset,'00') "
				  + " FROM rws_work_proposal_tbl WP,rws_programme_tbl P, "
				  + " rws_subprogramme_tbl SP, rws_proposal_workflow_tbl PWT, "
				  + " rws_asset_type_tbl AT "
				  + " WHERE  "
				  + " (WP.proposal_id = PWT.proposal_id) AND "
				  + " (WP.programme_code = P.programme_code (+)) "
				  + " AND "
				  + " (WP.programme_code = SP.programme_code(+) AND "
				  + " WP.subprogramme_code = SP.subprogramme_code (+) ) "
				  + " AND WP.type_of_asset = AT.type_of_asset_code(+) "
				  + " AND WP.flag = '" + proposalType + "' AND "
				  + " PWT.action_type='S' AND PWT.flag='N' "
				  +	" AND PWT.action_to='" + actionTo + "' ";
				  if(!actionFrom.equals(""))
				  query += " AND PWT.action_from LIKE '" + actionFrom + "%'";
				  
			System.out.println("New Submitted Query is " + query);
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			rset = stat.executeQuery(query);
			submittedProposals = new ArrayList();
			ProposalDTO proposalDTO = null;
			rwsOffices = new RwsOffices(dataSource);
			String content = null;
			while(rset.next())
			{
				proposalDTO = new ProposalDTO();
						
				String officeCode = rset.getString(1);
				proposalDTO.setOfficeCode(officeCode);
				proposalDTO.setOfficeName(rwsOffices.getOfficeName(officeCode, true));
				proposalDTO.setProposalName(rset.getString(2));
				proposalDTO.setProposalId(rset.getString(3));
				proposalDTO.setProposalDate(rset.getString(4));
				proposalDTO.setNoOfHabs(rset.getString(5));
				proposalDTO.setProgrammeName(rset.getString(6));
				proposalDTO.setSubprogrammeName(rset.getString(7));
				String estimateCost = rset.getString(8);
				String sanctionedAmount = rset.getString(9);
				proposalDTO.setEstimateCost(estimateCost);
				if(sanctionedAmount.equals("0"))
					proposalDTO.setSanctionedAmount(estimateCost);
				else
					proposalDTO.setSanctionedAmount(sanctionedAmount);
				proposalDTO.setRemarks(rset.getString(10));
				proposalDTO.setMemoNo(rset.getString(11));
				proposalDTO.setSubmitSubject(rset.getString(12));
				proposalDTO.setSubmitRef(rset.getString(13));
				content = rset.getString(14);
				content = content.replaceAll("\\n", "");
				content = content.replaceAll("\\r", "<br>");
				
				proposalDTO.setSubmitContent(content);
				proposalDTO.setSubmitDate(rset.getString(15));
				proposalDTO.setAssetName(rset.getString(16));
				proposalDTO.setProgrammeCode(rset.getString(17));
				proposalDTO.setSubprogrammeCode(rset.getString(18));
				proposalDTO.setAssetCode(rset.getString(19));

				submittedProposals.add(proposalDTO);
			}
		}
		catch(Exception e)
		{	Debug.writeln("Exception in getSubmittedProposals : \n" + e);			
		}
		finally
		{	if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){
				}
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){
				}
			}
		}
		
		System.out.println("submittedProposals.size() in ProposalDAO: " + 
							submittedProposals.size());
		return submittedProposals;
	}
	
	/*
	* Returns a list of New Proposals which are considered for administrative sanction
	* @param actionFrom - The Office from which the proposal is submitted
	* @param actionTo - The Office to which the proposal is submitted
	*/
	/* public ArrayList getPendingProposals(String actionFrom, String actionTo)
	{
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;
		ArrayList pendingProposals = new ArrayList();
		System.out.println("action form="+actionFrom+"actionTo="+actionTo);
		try
		{
			query = " SELECT PWT.action_from, WP.proposal_name, WP.proposal_id, "
				  + " TO_CHAR(WP.prepared_on,'dd/mm/yyyy'), WP.no_of_habs, "
				  + " NVL(WP.type_of_asset,'00'), NVL(AT.type_of_asset_name, ''), "
				  + " NVL(WP.programme_code,'00'), NVL(P.programme_name,''), " 
				  +	" NVL(WP.subprogramme_code,'00'), NVL(SP.subprogramme_name,''),"
				  + " WP.estimate_cost, NVL(WP.sanction_amount,0), "
				  + " PWT.action_type, PWT.memo_no, "
				  + " TO_CHAR(PWT.for_sub_date,'dd/mm/yyyy'), "
				  + " PWT.subject, NVL(PWT.ref,''), PWT.content"
				  + " FROM rws_work_proposal_tbl WP, rws_proposal_workflow_tbl PWT, "
				  + " rws_programme_tbl P, rws_subprogramme_tbl SP, "
				  + " rws_asset_type_tbl AT "
				  + " WHERE (WP.proposal_id = PWT.proposal_id) AND "
				  + " (WP.programme_code = P.programme_code (+)) "
				  + " AND "
				  + " (WP.programme_code = SP.programme_code(+) AND "
				  + " WP.subprogramme_code = SP.subprogramme_code (+) ) "
				  + " AND WP.type_of_asset = AT.type_of_asset_code(+) "
				  + " AND WP.flag = 'P' AND "
				  + " PWT.action_type='P' AND PWT.flag='N' AND " 
				  +	" PWT.action_to='" + actionTo + "' ";
				 
			if(!actionFrom.equals(""))
			   query += " AND PWT.action_from LIKE '" + actionFrom + "%'";
			
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			rset = stat.executeQuery(query);
			submittedProposals = new ArrayList();
			ProposalDTO proposalDTO = null;
			rwsOffices = new RwsOffices(dataSource);
			String content = null;
			while(rset.next())
			{
				proposalDTO = new ProposalDTO();
				System.out.println("test values");
				String officeCode = rset.getString(1);
				System.out.println(rset.getString(1));
				proposalDTO.setOfficeCode(officeCode);
				proposalDTO.setOfficeName(rwsOffices.getOfficeName(officeCode, true));
				proposalDTO.setProposalName(rset.getString(2));
				System.out.println(rset.getString(2));
				proposalDTO.setProposalId(rset.getString(3));
				System.out.println(rset.getString(3));
				proposalDTO.setProposalDate(rset.getString(4));
				System.out.println(rset.getString(4));
				proposalDTO.setNoOfHabs(rset.getString(5));
				System.out.println(rset.getString(5));
				proposalDTO.setAssetCode(rset.getString(6));
				System.out.println(rset.getString(6));
				proposalDTO.setAssetName(rset.getString(7));
				System.out.println(rset.getString(7));
				proposalDTO.setProgrammeCode(rset.getString(8));
				System.out.println(rset.getString(8));
				proposalDTO.setProgrammeName(rset.getString(9));
				System.out.println(rset.getString(9));
				proposalDTO.setSubprogrammeCode(rset.getString(10));
				System.out.println(rset.getString(10));
				proposalDTO.setSubprogrammeName(rset.getString(11));
				System.out.println(rset.getString(11));
				double estimateCost = rset.getDouble(12);
				System.out.println(rset.getDouble(12));
				double sanctionedAmount = rset.getDouble(13);
				System.out.println(rset.getDouble(13));
				proposalDTO.setEstimateCost(String.valueOf(estimateCost));
							
				if(sanctionedAmount == 0)
					sanctionedAmount = estimateCost;
					
				DecimalFormat df = new DecimalFormat("##0.00");
				System.out.println("sanction Amount="+sanctionedAmount);
				
				String tempSanctionAmount = df.format(sanctionedAmount);
				proposalDTO.setSanctionedAmount(tempSanctionAmount);
				System.out.println("tempSanctionAmount="+tempSanctionAmount);										
				proposalDTO.setFlag(rset.getString(14));
				System.out.println(rset.getString(14));
				proposalDTO.setMemoNo(rset.getString(15));
				System.out.println(rset.getString(15));
				proposalDTO.setSubmitSubject(rset.getString(16));
				System.out.println(rset.getString(16));
				proposalDTO.setSubmitRef(rset.getString(17));
				System.out.println(rset.getString(17));
				content = rset.getString(18);
				System.out.println(rset.getString(18));
				content = content.replaceAll("\\n", "");
				content = content.replaceAll("\\r", "<br>");
				proposalDTO.setSubmitContent(content);
				proposalDTO.setSubmitDate(rset.getString(19));
				System.out.println(rset.getString(19));
				pendingProposals.add(proposalDTO);
			}
		}
		catch(Exception e)
		{	Debug.writeln("Exception in getPendingProposals : \n" + e);			
		}
		finally
		{	if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle)
				{
				}
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle)
				{
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle)
				{
				}
			}
		}
		
		System.out.println("pendingProposals.size() in ProposalDAO: " + 
							pendingProposals.size());
		return pendingProposals;
	}*/
	
	public ArrayList getPendingProposals(String actionFrom, String actionTo)
	{
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;
		ArrayList pendingProposals = new ArrayList();
		try
		{
			query = " SELECT PWT.action_from, WP.proposal_name, WP.proposal_id, "
				  + " TO_CHAR(WP.prepared_on,'dd/mm/yyyy'), WP.no_of_habs, "
				  + " NVL(WP.type_of_asset,'00'), NVL(AT.type_of_asset_name, ''), "
				  + " NVL(WP.programme_code,'00'), NVL(P.programme_name,''), " 
				  +	" NVL(WP.subprogramme_code,'00'), NVL(SP.subprogramme_name,''),"
				  + " WP.estimate_cost, NVL(WP.sanction_amount,0), "
				  + " PWT.action_type, PWT.memo_no, "
				  + " TO_CHAR(PWT.for_sub_date,'dd/mm/yyyy'), "
				  + " PWT.subject, NVL(PWT.ref,''), PWT.content"
				  + " FROM rws_work_proposal_tbl WP, rws_proposal_workflow_tbl PWT, "
				  + " rws_programme_tbl P, rws_subprogramme_tbl SP, "
				  + " rws_asset_type_tbl AT "
				  + " WHERE (WP.proposal_id = PWT.proposal_id) AND "
				  + " (WP.programme_code = P.programme_code (+)) "
				  + " AND "
				  + " (WP.programme_code = SP.programme_code(+) AND "
				  + " WP.subprogramme_code = SP.subprogramme_code (+) ) "
				  + " AND WP.type_of_asset = AT.type_of_asset_code(+) "
				  + " AND WP.flag = 'P' AND "
				  + " PWT.action_type='P' AND PWT.flag='N' AND " 
				  +	" PWT.action_to='" + actionTo + "' ";
				 
			if(!actionFrom.equals(""))
			   query += " AND PWT.action_from LIKE '" + actionFrom + "%'";
			
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			rset = stat.executeQuery(query);
			submittedProposals = new ArrayList();
			ProposalDTO proposalDTO = null;
			rwsOffices = new RwsOffices(dataSource);
			String content = null;
			while(rset.next())
			{
				proposalDTO = new ProposalDTO();
						
				String officeCode = rset.getString(1);
				proposalDTO.setOfficeCode(officeCode);
				proposalDTO.setOfficeName(rwsOffices.getOfficeName(officeCode, true));
				proposalDTO.setProposalName(rset.getString(2));
				proposalDTO.setProposalId(rset.getString(3));
				proposalDTO.setProposalDate(rset.getString(4));
				proposalDTO.setNoOfHabs(rset.getString(5));
				proposalDTO.setAssetCode(rset.getString(6));
				proposalDTO.setAssetName(rset.getString(7));
				proposalDTO.setProgrammeCode(rset.getString(8));
				proposalDTO.setProgrammeName(rset.getString(9));
				proposalDTO.setSubprogrammeCode(rset.getString(10));
				proposalDTO.setSubprogrammeName(rset.getString(11));
				
				double estimateCost = rset.getDouble(12);
				double sanctionedAmount = rset.getDouble(13);
				proposalDTO.setEstimateCost(String.valueOf(estimateCost));
							
				if(sanctionedAmount == 0)
					sanctionedAmount = estimateCost;
					
				DecimalFormat df = new DecimalFormat("##0.00");
				String tempSanctionAmount = df.format(sanctionedAmount);
				proposalDTO.setSanctionedAmount(tempSanctionAmount);
										
				proposalDTO.setFlag(rset.getString(14));
				proposalDTO.setMemoNo(rset.getString(15));
				proposalDTO.setSubmitDate(rset.getString(16));
				proposalDTO.setSubmitSubject(rset.getString(17));
				proposalDTO.setSubmitRef(rset.getString(18));
				content = rset.getString(19);
				content = content.replaceAll("\\n", "");
				content = content.replaceAll("\\r", "<br>");
				proposalDTO.setSubmitContent(content);
				pendingProposals.add(proposalDTO);
			}
		}
		catch(Exception e)
		{	Debug.writeln("Exception in getPendingProposals : \n" + e);			
		}
		finally
		{	if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle)
				{
				}
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle)
				{
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle)
				{
				}
			}
		}
		
		System.out.println("pendingProposals.size() in ProposalDAO: " + 
							pendingProposals.size());
		return pendingProposals;
	}


	/*
	*
	*
	*/
	protected ArrayList getSanctionedProposals(String officeCode)
	{
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;

		try
		{
			query = " SELECT UPPER(WP.proposal_name), WP.proposal_id, WP.work_id, " 
				  + " TO_CHAR(WP.admin_date,'dd/mm/yyyy') as proposal_date,"
				  + " WP.no_of_habs, "
				  + " NVL(P.programme_name,''), "
				  + " NVL(S.subprogramme_name,''), "
				  + " WP.estimate_cost, WP.sanction_amount,  "
				  + " WP.admin_no, WP.goms_no, "
				  + " UPPER(NVL(WP.remarks, '')), "
				  + " UPPER(NVL(AT.type_of_asset_name, '')) "
				  + " FROM "
				  + " rws_work_proposal_tbl WP, rws_programme_tbl P,"
				  + " rws_subprogramme_tbl S, rws_asset_type_tbl AT "
				  + " WHERE "
				  + " WP.programme_code = P.programme_code (+) AND "
				  + " (WP.subprogramme_code = S.subprogramme_code(+) AND "
				  + " WP.programme_code = S.programme_code(+) ) AND "
				  + " WP.type_of_asset = AT.type_of_asset_code(+) AND " 
				  + " WP.flag = 'A' AND WP.proposal_id NOT IN "
				  + " (SELECT proposal_id FROM rws_proposal_workflow_tbl WHERE flag='N') " 
				  + " ORDER BY proposal_date ";
			
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			rset = stat.executeQuery(query);
			sanctionedProposals = new ArrayList();
			ProposalDTO proposalDTO = null;
			while(rset.next())
			{
				proposalDTO = new ProposalDTO();
				proposalDTO.setProposalName(rset.getString(1));
				proposalDTO.setProposalId(rset.getString(2));
				proposalDTO.setWorkId(rset.getString(3));
				proposalDTO.setAdminDate(rset.getString(4));
				proposalDTO.setNoOfHabs(rset.getString(5));
				proposalDTO.setProgrammeName(rset.getString(6));
				proposalDTO.setSubprogrammeName(rset.getString(7));
				proposalDTO.setEstimateCost(rset.getString(8));
				proposalDTO.setSanctionedAmount(rset.getString(9));
				proposalDTO.setAdminNo(rset.getString(10));
				proposalDTO.setGoNo(rset.getString(11));
				proposalDTO.setRemarks(rset.getString(12));
				proposalDTO.setAssetName(rset.getString(13));
				sanctionedProposals.add(proposalDTO);
			}
		}
		catch(Exception e)
		{	Debug.writeln("Exception in getSanctionedProposals : \n" + e);			
		}
		finally
		{	if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){ }
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){ }
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){ }
			}
		}
		System.out.println("sanctionedProposals.size() in ProposalDAO(): " + 
							sanctionedProposals.size());
		return sanctionedProposals;
	}

	public ArrayList listNewProposals(String officeCode)  
	{
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;
		ArrayList proposalList = new ArrayList(4);
		ArrayList representativeProposals = null;
		ArrayList consideredProposals = null;
		ArrayList sentProposals = null;
		ArrayList receivedProposals = null;
		ProposalDTO proposalDTO = null;
		String actionTo = null;
		String content = null;
		try
		{
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			rwsOffices = new RwsOffices(dataSource);
			
			query = " SELECT RP.proposal_id, RP.proposal_name, RP.no_of_habs, "
				  + " TO_CHAR(RP.rep_date, 'dd/mm/yyyy'), "
				  + " NVL(AT.type_of_asset_name,''), NVL(P.programme_name,''),"
				  + " NVL(SP.subprogramme_name, ''), estimate_cost, "
				  + " DECODE(RP.flag,'N','Not Considered','C','Considered','A','Sanctioned')"
				  + " FROM rws_rep_proposal_tbl RP, rws_asset_type_tbl AT, "
				  + " rws_programme_tbl P, rws_subprogramme_tbl SP "
				  + " WHERE RP.type_of_asset = AT.type_of_asset_code(+) "
				  + " AND RP.programme_code = P.programme_code(+) "
				  + " AND (RP.programme_code = SP.programme_code(+) "
				  + "      AND RP.subprogramme_code = SP.subprogramme_code(+)) "
				  + " AND RP.office_code = '" + officeCode +"' "
				  + " ORDER BY RP.rep_date ";
			
			rset = stat.executeQuery(query);
			representativeProposals = new ArrayList();
			while(rset.next())
			{
				proposalDTO = new ProposalDTO();
				proposalDTO.setProposalId(rset.getString(1));
				proposalDTO.setProposalName(rset.getString(2));
				proposalDTO.setNoOfHabs(rset.getString(3));
				proposalDTO.setProposalDate(rset.getString(4));
				proposalDTO.setAssetName(rset.getString(5));
				proposalDTO.setProgrammeName(rset.getString(6));
				proposalDTO.setSubprogrammeName(rset.getString(7));
				proposalDTO.setEstimateCost(rset.getString(8));
				proposalDTO.setFlag(rset.getString(9));
				representativeProposals.add(proposalDTO);
			}
			System.out.println("Representative Proposals " + query);
			proposalList.add(representativeProposals);
			
			query = " SELECT PWT.action_to, UPPER(WP.proposal_name), WP.proposal_id, "
				  + " TO_CHAR(WP.prepared_on,'dd/mm/yyyy'), WP.no_of_habs, "
				  + " NVL(P.programme_name,''), NVL(SP.subprogramme_name,''), "
				  + " NVL(AT.type_of_asset_name, ''), "
				  + " WP.estimate_cost, WP.sanction_amount, "
				  + " NVL(WP.remarks,''), PWT.memo_no, "
				  + " TO_CHAR(PWT.for_sub_date,'dd/mm/yyyy'), "
				  + " PWT.subject, NVL(PWT.ref,''), PWT.content, "
				  + " DECODE(WP.flag, 'C', 'UNDER PROCESS', 'D','DEFERRED','T','TRANSMITTED TO OTHER DEPARTMENT','A','SANCTIONED'), "
				  + " PWT.action_type "
				  + " FROM rws_work_proposal_tbl WP, rws_programme_tbl P, "
				  + " rws_subprogramme_tbl SP, rws_proposal_workflow_tbl PWT, "
				  + " rws_asset_type_tbl AT "
				  + " WHERE "
				  + " (WP.proposal_id = PWT.proposal_id) AND "
				  + " (WP.programme_code = P.programme_code (+)) "
				  + " AND "
				  + " (WP.programme_code = SP.programme_code(+) AND "
				  + " WP.subprogramme_code = SP.subprogramme_code (+) ) "
				  + " AND WP.type_of_asset = AT.type_of_asset_code(+) "
				  + " AND PWT.action_from = '" + officeCode + "'";
			System.out.println("Sent Proposals " + query);
			rset = stat.executeQuery(query);
			sentProposals = new ArrayList();
			
			while(rset.next())
			{
				proposalDTO = new ProposalDTO();
				
				actionTo = rset.getString(1);
				proposalDTO.setOfficeCode(actionTo);
				proposalDTO.setOfficeName(rwsOffices.getOfficeName(actionTo, true));
				proposalDTO.setProposalName(rset.getString(2));
				proposalDTO.setProposalId(rset.getString(3));
				proposalDTO.setProposalDate(rset.getString(4));
				proposalDTO.setNoOfHabs(rset.getString(5));
				proposalDTO.setProgrammeName(rset.getString(6));
				proposalDTO.setSubprogrammeName(rset.getString(7));
				proposalDTO.setAssetName(rset.getString(8));
				proposalDTO.setEstimateCost(rset.getString(9));
				proposalDTO.setSanctionedAmount(rset.getString(10));
				proposalDTO.setRemarks(rset.getString(11));
				proposalDTO.setMemoNo(rset.getString(12));
				proposalDTO.setForwardDate(rset.getString(13));
				proposalDTO.setForwardSubject(rset.getString(14));
				proposalDTO.setForwardRef(rset.getString(15));
				content = rset.getString(16);
				content = content.replaceAll("\\n","");
				content = content.replaceAll("\\r","<br>");
				System.out.println("Content 1 is \n" + content);
				proposalDTO.setForwardContent(content);
				proposalDTO.setStatus(rset.getString(17));
				proposalDTO.setFlag(rset.getString(18));
				
				sentProposals.add(proposalDTO);
			}
			
			proposalList.add(sentProposals);
			
			query = " SELECT PWT.action_from, UPPER(WP.proposal_name), WP.proposal_id, "
				  + " TO_CHAR(WP.prepared_on,'dd/mm/yyyy'), WP.no_of_habs, "
				  + " NVL(P.programme_name,''), NVL(SP.subprogramme_name,''), "
				  + " NVL(AT.type_of_asset_name, ''), "
				  + " WP.estimate_cost, WP.sanction_amount, "
				  + " NVL(WP.remarks,''), PWT.memo_no, "
				  + " TO_CHAR(PWT.for_sub_date,'dd/mm/yyyy'), "
				  + " PWT.subject, NVL(PWT.ref,''), PWT.content, "
				  + " DECODE(WP.flag, 'C', 'UNDER PROCESS', 'D','DEFERRED','T','TRANSMITTED TO OTHER DEPARTMENT', 'A','SANCTIONED'), "
				  + " PWT.action_type "
				  + " FROM rws_work_proposal_tbl WP, rws_programme_tbl P, "
				  + " rws_subprogramme_tbl SP, rws_proposal_workflow_tbl PWT, "
				  + " rws_asset_type_tbl AT "
				  + " WHERE "
				  + " (WP.proposal_id = PWT.proposal_id) AND "
				  + " (WP.programme_code = P.programme_code (+)) "
				  + " AND "
				  + " (WP.programme_code = SP.programme_code(+) AND "
				  + " WP.subprogramme_code = SP.subprogramme_code (+) ) "
				  + " AND WP.type_of_asset = AT.type_of_asset_code(+) "
				  + " AND PWT.action_to = '" + officeCode + "'";
			
			System.out.println("Received Proposals " + query);
			rset = stat.executeQuery(query);
			receivedProposals = new ArrayList();
			
			while(rset.next())
			{
				proposalDTO = new ProposalDTO();
						
				actionTo = rset.getString(1);
				proposalDTO.setOfficeCode(actionTo);
				proposalDTO.setOfficeName(rwsOffices.getOfficeName(actionTo, true));
				proposalDTO.setProposalName(rset.getString(2));
				proposalDTO.setProposalId(rset.getString(3));
				proposalDTO.setProposalDate(rset.getString(4));
				proposalDTO.setNoOfHabs(rset.getString(5));
				proposalDTO.setProgrammeName(rset.getString(6));
				proposalDTO.setSubprogrammeName(rset.getString(7));
				proposalDTO.setAssetName(rset.getString(8));
				proposalDTO.setEstimateCost(rset.getString(9));
				proposalDTO.setSanctionedAmount(rset.getString(10));
				proposalDTO.setRemarks(rset.getString(11));
				proposalDTO.setMemoNo(rset.getString(12));
				proposalDTO.setForwardDate(rset.getString(13));
				proposalDTO.setForwardSubject(rset.getString(14));
				proposalDTO.setForwardRef(rset.getString(15));
				content = rset.getString(16);
				content = content.replaceAll("\\n","");
				content = content.replaceAll("\\r","<br>");
				System.out.println("Content 2 is \n" + content);
				proposalDTO.setForwardContent(content);
				proposalDTO.setStatus(rset.getString(17));
				proposalDTO.setFlag(rset.getString(18));
				
				receivedProposals.add(proposalDTO);
			}
			
			proposalList.add(receivedProposals);
			
		}
		catch(Exception e)
		{	Debug.writeln("Exception in listNewProposals : \n" + e);			
		}
		finally
		{	if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){
				}
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){
				}
			}
		}
		
		return proposalList;
	}
	
	/**
	*
	*
	*/
	public ArrayList getProposalTracking(String proposalId)
	{
		System.out.println("getProposalTracking() called.");
		Connection conn = null;
		Statement stat = null, stat1 = null;
		ResultSet rset = null, rset1 = null;
		ArrayList proposalTracks = new ArrayList();
		ArrayList consideredTracks = new ArrayList();
		ArrayList actualTracks = new ArrayList();
		ArrayList sanctionedTracks = new ArrayList();
		
		ProposalDTO proposalDTO = null;		
		RwsOffices rwsOffices = new RwsOffices(dataSource);
		
		try
		{
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			stat1 = conn.createStatement();	
			/* Query for selecting proposal track in which it has been considered */
			query = " SELECT M.office_code, M.proposal_name, M.no_of_habs, NVL(PR.programme_name,''), "
				  + " NVL(SP.subprogramme_name,''), M.estimate_cost, P.user_id, D.designation_acr, "
				  + " TO_CHAR(M.prepared_on, 'dd/mm/yyyy'), NVL(PRI.priority_description, ''), "
				  + " NVL(T.type_of_asset_name,''),  NVL(M.remarks,'')  "
				  + " FROM rws_work_proposal_mirror_tbl M, rws_asset_type_tbl T, "
				  + " rws_password_tbl P, rws_designation_tbl D, rws_programme_tbl PR, " 
				  + " rws_subprogramme_tbl SP, rws_priority_tbl PRI "
				  + " WHERE M.type_of_asset = T.type_of_asset_code(+) "
				  + " AND M.programme_code = PR.programme_code(+) "
				  + " AND ( M.subprogramme_code = SP.subprogramme_code(+) "
				  + "     AND M.programme_code = SP.programme_code(+) ) "
				  + " AND M.priority_code = PRI.priority_code(+) "
				  + " AND M.prepared_by = P.user_id " 
				  + " AND P.designation_code = D.designation_code "
				  + " AND M.track_no = 0 "
				  + " AND M.proposal_id = '" + proposalId + "'";
			System.out.println("Track 1 query is \n" + query);
			rset = stat.executeQuery(query);
			if(rset.next())
			{
				proposalDTO = new ProposalDTO();
				
				proposalDTO.setProposalId(proposalId);
				proposalDTO.setOfficeName(rwsOffices.getOfficeName(rset.getString(1), true));
				proposalDTO.setProposalName(rset.getString(2));
				proposalDTO.setNoOfHabs(rset.getString(3));
				proposalDTO.setProgrammeName(rset.getString(4));
				proposalDTO.setSubprogrammeName(rset.getString(5));
				proposalDTO.setEstimateCost(rset.getString(6));
				proposalDTO.setUserId(rset.getString(7) + ", " +rset.getString(8));
				proposalDTO.setProposalDate(rset.getString(9));
				proposalDTO.setPriorityCode(rset.getString(10));
				proposalDTO.setTypeOfAsset(rset.getString(11));
				proposalDTO.setRemarks(rset.getString(12));
				
				consideredTracks.add(proposalDTO);
			}
						
			proposalTracks.add(consideredTracks);

			/* Query for proposal tracks after consideration but before sanction */
			query = " SELECT M.office_code, M.proposal_name, M.no_of_habs, NVL(PR.programme_name, ''),"
				  + " NVL(SP.subprogramme_name,''), M.estimate_cost, M.remarks, "
				  + " NVL(T.type_of_asset_name, ''), NVL(PRI.priority_description, ''), "
				  + " M.sanction_amount, M.flag, M.admin_no, "
				  + " TO_CHAR(M.admin_date, 'dd/mm/yyyy'), M.goms_no, "
				  + " DECODE(M.state_central,'S','STATE','C','CENTRE'), M.admin_sanc_auth, M.work_id, "
				  + " W.track_no, W.memo_no, TO_CHAR(W.for_sub_date, 'dd/mm/yyyy'), "
				  + " W.subject, NVL(W.ref,''), W.content, "
				  + " W.action_from, W.action_to, "
				  + " DECODE(W.action_type, 'S', 'SUBMITTED', 'F','FORWARDED', 'D', 'DEFERRED', 'T','TRANSMITTED TO OTHER DEPARTMENT'), "
				  + " TO_CHAR(W.action_date, 'dd/mm/yyyy'), "
				  + " P1.user_id, D1.designation_acr, "
				  + " P2.user_id, D2.designation_acr "
				  + " FROM rws_proposal_workflow_tbl W, rws_work_proposal_mirror_tbl M, "
				  + " rws_asset_type_tbl T, rws_priority_tbl PRI, rws_programme_tbl PR,"
				  + " rws_subprogramme_tbl SP, rws_password_tbl P1, rws_password_tbl P2, "
				  + " rws_designation_tbl D1, rws_designation_tbl D2 "
				  + " WHERE M.proposal_id = W.proposal_id "
				  + " AND M.type_of_asset = T.type_of_asset_code(+) "
				  + " AND M.programme_code = PR.programme_code(+) "
				  + " AND ( M.subprogramme_code = SP.subprogramme_code(+) "
				  + "     AND M.programme_code = SP.programme_code(+) ) "
				  + " AND M.priority_code = PRI.priority_code(+) "
				  + " AND (W.sent_by = P1.user_id "
				  + "      AND P1.designation_code = D1.designation_code) "
				  + " AND (W.sent_to = P2.user_id "
				  + "      AND P2.designation_code = D2.designation_code) "
				  + " AND M.track_no = W.track_no "
				  + " AND M.proposal_id = '" + proposalId + "'"
				  + " ORDER BY M.track_no ";
			rset = stat.executeQuery(query);
			
			while(rset.next())
			{
				proposalDTO = new ProposalDTO();

				proposalDTO.setProposalId(proposalId);
				proposalDTO.setOfficeName(rwsOffices.getOfficeName(rset.getString(1), true));
				proposalDTO.setProposalName(rset.getString(2));
				proposalDTO.setNoOfHabs(rset.getString(3));
				proposalDTO.setProgrammeName(rset.getString(4));
				proposalDTO.setSubprogrammeName(rset.getString(5));
				proposalDTO.setEstimateCost(rset.getString(6));
				proposalDTO.setRemarks(rset.getString(7));
				proposalDTO.setTypeOfAsset(rset.getString(8));
				proposalDTO.setPriorityCode(rset.getString(9));

				proposalDTO.setSanctionedAmount(rset.getString(10));
				proposalDTO.setFlag(rset.getString(11));
				proposalDTO.setAdminNo(rset.getString(12));
				proposalDTO.setAdminDate(rset.getString(13));
				proposalDTO.setGoNo(rset.getString(14));
				proposalDTO.setSanctionedAt(rset.getString(15));
				proposalDTO.setSanctioningAuthority(rset.getString(16));
				proposalDTO.setWorkId(rset.getString(17));
				proposalDTO.setTrackNo(rset.getString(18));
				proposalDTO.setLetterNo(rset.getString(19));
				proposalDTO.setSubmitDate(rset.getString(20));
				proposalDTO.setSubmitSubject(rset.getString(21));
				proposalDTO.setSubmitRef(rset.getString(22));
				proposalDTO.setSubmitContent(rset.getString(23));
				proposalDTO.setActionFrom(rwsOffices.getOfficeName(rset.getString(24), true));
				proposalDTO.setActionTo(rwsOffices.getOfficeName(rset.getString(25), true));
				proposalDTO.setActionType(rset.getString(26));
				proposalDTO.setActionDate(rset.getString(27));
				proposalDTO.setSentBy(rset.getString(28) + ", " + rset.getString(29));
				proposalDTO.setSentTo(rset.getString(30) + ", " + rset.getString(31));
				
				actualTracks.add(proposalDTO);
			}

			proposalTracks.add(actualTracks);

			/* Query for selecting proposal track in which it has been sanctioned */
			query = " SELECT P.office_code, M.proposal_name, M.no_of_habs, PR.programme_name, "
				  + " SP.subprogramme_name, T.type_of_asset_name, PRI.priority_description, "
				  + " M.remarks, M.estimate_cost, M.sanction_amount, M.admin_no, "
				  + " TO_CHAR(M.admin_date, 'dd/mm/yyyy'), goms_no,"
				  + " NVL(DECODE(state_central, 'S', 'STATE', 'C', 'CENTRE'),' '), "
				  + " NVL(admin_sanc_auth, ' '), M.work_id, P.user_id, D.designation_acr, " 
				  + " DECODE(M.phased, 'Y', 'YES', 'N', 'NO'),  NVL(phase_no, 0) "
				  + " FROM rws_work_proposal_mirror_tbl M, rws_password_tbl P, rws_designation_tbl D, " 
				  + " rws_programme_tbl PR, rws_subprogramme_tbl SP, rws_priority_tbl PRI, "
				  + " rws_asset_type_tbl T "
				  + " WHERE M.modified_by = P.user_id " 
				  + " AND P.designation_code = D.designation_code "
				  + " AND M.type_of_asset = T.type_of_asset_code(+) "
				  + " AND M.programme_code = PR.programme_code(+) "
				  + " AND ( M.subprogramme_code = SP.subprogramme_code(+) "
				  + "     AND M.programme_code = SP.programme_code(+) ) "
				  + " AND M.priority_code = PRI.priority_code(+) "
				  + " AND M.track_no = 999 AND M.proposal_id = '" + proposalId + "'";
			
			rset = stat.executeQuery(query);
			
			while(rset.next())
			{
				proposalDTO = new ProposalDTO();
				
				proposalDTO.setProposalId(proposalId);
				proposalDTO.setOfficeName(rwsOffices.getOfficeName(rset.getString(1), true));
				proposalDTO.setProposalName(rset.getString(2));
				proposalDTO.setNoOfHabs(rset.getString(3));
				proposalDTO.setProgrammeName(rset.getString(4));
				proposalDTO.setSubprogrammeName(rset.getString(5));
				proposalDTO.setTypeOfAsset(rset.getString(6));
				proposalDTO.setPriorityCode(rset.getString(7));
				proposalDTO.setRemarks(rset.getString(8));
				proposalDTO.setEstimateCost(rset.getString(9));
				proposalDTO.setSanctionedAmount(rset.getString(10));
				proposalDTO.setAdminNo(rset.getString(11));
				proposalDTO.setAdminDate(rset.getString(12));
				proposalDTO.setGoNo(rset.getString(13));
				proposalDTO.setSanctionedAt(rset.getString(14));
				proposalDTO.setSanctioningAuthority(rset.getString(15));
				proposalDTO.setWorkId(rset.getString(16));
				proposalDTO.setUserId(rset.getString(17) + ", " + rset.getString(18));
				proposalDTO.setPhased(rset.getString(19));
				proposalDTO.setPhaseNo(rset.getString(20));

				sanctionedTracks.add(proposalDTO);
				
			}
			proposalTracks.add(sanctionedTracks);

		}
		catch(Exception e)
		{	Debug.writeln("Exception in getProposalTracking : \n" + e);
		}
		finally
		{
			if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){
				}
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){
				}
			}
			if(conn != null)
			{	try{
				conn.close();
				}
				catch(SQLException sqle){
				}
			}
		}
		return proposalTracks;
	}
		

	/* -------------------------------------- O&M Proposals --------------------------------------- */

	/**
	*
	*
	*/
	public boolean omConsider(String[] assetCodes, String[] programmeCodes, ProposalDTO proposalDTO) 
	{
		Connection conn = null;
		Statement stat1 = null;
		Statement stat2 = null;
		ResultSet rset = null;
		
		int assetLength = assetCodes.length;
		int programmeLength = 0;
		if(programmeCodes != null)
			programmeLength = programmeCodes.length;
		
		String headOfficeCode = proposalDTO.getHeadOfficeCode();
		String circleOfficeCode = proposalDTO.getCircleOfficeCode();
		String divisionOfficeCode = proposalDTO.getDivisionOfficeCode();
		String subdivisionOfficeCode = proposalDTO.getSubdivisionOfficeCode();
		String officeCode = headOfficeCode + circleOfficeCode + divisionOfficeCode + subdivisionOfficeCode;
		int functionalHabSize = 0;							
		try
		{
			conn = dataSource.getConnection();
			stat1 = conn.createStatement();
			conn.setAutoCommit(false);
			stat2 = conn.createStatement();
						
			for(int i=0; i< assetLength; i++)
			{
				System.out.println("1: conn.getAutoCommit() : " + conn.getAutoCommit());
				
				query = " SELECT COUNT(*) FROM rws_temp_om_proposal_hab_tbl "
					  + " WHERE asset_code ='" + assetCodes[i] + "'";
				rset = stat1.executeQuery(query);
				if(rset.next())
				{	functionalHabSize = rset.getInt(1);
				}
				
				System.out.println("2: conn.getAutoCommit() : " + conn.getAutoCommit());
				
				conn.setAutoCommit(false);
				String proposalId = getNextOMProposalId(assetCodes[i]);
				query = " INSERT INTO rws_om_proposal_tbl(office_code,asset_code, "
					  + " om_proposal_id, financial_year, estimate_cost, "
					  + " prepared_on, prepared_by, remarks, flag) VALUES(" 
					  + " '" + officeCode + "', '" + assetCodes[i] + "', "
					  + " '" + proposalId + "', " 
					  + " '" + proposalDTO.getFinancialYear() + "', " 
					  + proposalDTO.getEstimateCost() + ", SYSDATE , "
					  + " '" + proposalDTO.getUserId() + "', " 
					  + " '" + proposalDTO.getRemarks() + "', 'C')";
				
				stat2.addBatch(query);
							
				String programmeCode = "";
				String subprogrammeCode = null;
				int index = 0;
				for(int j=0; j<programmeLength; j++)
				{
					programmeCode = programmeCodes[j];
					subprogrammeCode = "";
					index = programmeCode.indexOf("_");
					System.out.println("Index is " + index);
					if(index != -1)
					{	
						programmeCode = programmeCode.substring(0,index);
						subprogrammeCode = programmeCodes[j].substring(index+1,programmeCodes[j].length());
					}
					
					query = " INSERT INTO rws_om_proposal_prog_lnk_tbl "
						  + " VALUES('" + proposalId + "', "
						  + " '" + programmeCode + "', '" + subprogrammeCode + "')";
					
					stat2.addBatch(query);
				}
				
				if(functionalHabSize == 0)
				{
					query = " INSERT INTO rws_om_proposal_hab_lnk_tbl(om_proposal_id,hab_code) "
						  + " (SELECT '" + proposalId + "', hab_code FROM rws_asset_hab_tbl "
						  + " WHERE asset_code = '" + assetCodes[i] + "')";
					stat2.addBatch(query);
					
					query = " UPDATE rws_om_proposal_tbl SET no_of_habs = ( SELECT COUNT(hab_code) FROM "
						  + " rws_asset_hab_tbl WHERE asset_code = '" + assetCodes[i] + "') "
						  + " WHERE om_proposal_id = '" + proposalId + "'";
					stat2.addBatch(query);
				}	
				else
				{
					query = " INSERT INTO rws_om_proposal_hab_lnk_tbl(om_proposal_id,hab_code) "
						  + " (SELECT '" + proposalId + "', hab_code FROM rws_temp_om_proposal_hab_tbl "
						  + " WHERE asset_code = '" + assetCodes[i] + "')";
					stat2.addBatch(query);
					
					query = " UPDATE rws_om_proposal_tbl SET no_of_habs = ( SELECT COUNT(hab_code) FROM "
						  + " rws_temp_om_proposal_hab_tbl WHERE asset_code = '" + assetCodes[i] + "') "
						  + " WHERE om_proposal_id = '" + proposalId + "'";
					stat2.addBatch(query);
				}
								
				query = " INSERT INTO rws_om_proposal_mirror_tbl(office_code, "
					  + " asset_code, om_proposal_id, financial_year, estimate_cost, "
					  + " sanctioned_amount, admin_no, admin_date, go_no,"
					  + " state_central, admn_sanc_auth, prepared_on, prepared_by, "
					  + " remarks, flag, modi_office_code, modi_date, track_no, work_id, no_of_habs ) "
					  + " (SELECT office_code, asset_code, "
					  + " om_proposal_id, financial_year, estimate_cost,"
					  + " sanctioned_amount, admin_no, admin_date, go_no,"
					  + " state_central, admn_sanc_auth, prepared_on, prepared_by, remarks, "
					  + " flag, '" + officeCode + "', SYSDATE, 0, work_id, no_of_habs" 
					  + " FROM rws_om_proposal_tbl "
					  + " WHERE om_proposal_id = '" + proposalId + "')";

				stat2.addBatch(query);
			}
			
			flag = true;
			int[] updateCounts = stat2.executeBatch();
			for(int i=0; i<updateCounts.length; i++)
			{
				if(updateCounts[i] == 0)
					flag = false;
			}
			if(flag)
				conn.commit();

			conn.setAutoCommit(true);
		}
		catch(Exception e)
		{	Debug.writeln("Exception in omConsider : \n" + e);
			flag = false;
		}
		finally
		{	
			if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){
				}
			}
			if(stat1 != null)
			{	try
				{	stat1.close();
				}
				catch(SQLException sqle){
				}
			}
			if(stat2 != null)
			{	try
				{	stat1.close();
				}
				catch(SQLException sqle){
				}
			}
			if(conn != null)
			{	try{
				conn.close();
				}
				catch(SQLException sqle){
				}
			}
		}
		return flag;
	}
	
	/**
	*
	*
	*/
	public boolean omSubmit(String[] proposalIds, ProposalDTO proposalDTO)
	{
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;

		int proposalLength = proposalIds.length;
		
		String officeCode = proposalDTO.getOfficeCode(); 
		String letterNo = proposalDTO.getLetterNo();
		String subject = proposalDTO.getSubmitSubject();
		String ref = proposalDTO.getSubmitRef();
		String content = proposalDTO.getSubmitContent();
		String submitDate = proposalDTO.getSubmitDate();
		
		String actionFrom = proposalDTO.getOfficeCode();
		String actionTo = RwsOffices.getHigherOfficeCode(officeCode);
		String sentBy = proposalDTO.getUserId();
		String sentTo = null;
		String officeType = null;
		try
		{
			conn = dataSource.getConnection();
			
			if(!actionTo.substring(4,6).equals("00"))
				officeType = "SUB DIVISION OFFICE";
			else
			if(!actionTo.substring(3,4).equals("0"))
					officeType = "DIVISION OFFICE";
			else
			if(!actionTo.substring(1,3).equals("00"))
				officeType = "CIRCLE OFFICE";
			else
			if(!actionTo.substring(0,1).equals("0"))
				officeType = "HEAD OFFICE";

			query = " SELECT user_id FROM rws_password_tbl WHERE designation_code = "
				  + " (SELECT designation_code FROM rws_head_of_office_tbl WHERE office LIKE '" + officeType + "')" 
				  + " AND office_code = '" + actionTo + "'";
			System.out.println("Head Of Office query in omSubmit() \n" + query);
			
			stat = conn.createStatement();
			rset = stat.executeQuery(query);
			int rowCount = 0;
			while(rset.next())
			{
				rowCount++;
				sentTo = rset.getString(1);
			}
			if(rowCount != 1)
			{
				HEAD_OF_OFFICE_COUNT = rowCount;
				return false;
			}
			
			conn.setAutoCommit(false);
						
			for(int i=0; i<proposalLength ; i++)
			{
				int trackNo = getOMTrackNo(proposalIds[i]);
							
				query = " INSERT INTO rws_om_proposal_mirror_tbl(office_code, "
					  + " asset_code, om_proposal_id, financial_year, estimate_cost, "
					  + " sanctioned_amount, admin_no, admin_date, go_no,"
					  + " state_central, admn_sanc_auth, prepared_on, prepared_by, "
					  + " remarks, flag, modi_office_code, modi_date, track_no, work_id ) "
					  + " (SELECT office_code, asset_code, "
					  + " om_proposal_id, financial_year, estimate_cost,"
					  + " sanctioned_amount, admin_no, admin_date, go_no,"
					  + " state_central, admn_sanc_auth, prepared_on, prepared_by, remarks, "
					  + " flag, '" + officeCode + "', SYSDATE, " + trackNo + ", work_id " 
					  + " FROM rws_om_proposal_tbl "
					  + " WHERE om_proposal_id = '" + proposalIds[i] + "')";

				stat.addBatch(query);
				
				if(trackNo > 1)
				{
					query = " UPDATE rws_om_proposal_workflow_tbl SET flag='Y' " 
						  + " WHERE om_proposal_id = '" + proposalIds[i] + "' AND track_no = " + (trackNo-1);
					stat.addBatch(query);
				}

				query = " INSERT INTO rws_om_proposal_workflow_tbl VALUES ( "
					  + " '" + proposalIds[i] + "', " + trackNo + ", "
					  + "'" + actionFrom + "', '" + actionTo + "', "
					  + " 'S', SYSDATE, '" + sentBy + "', '" + sentTo + "', '" + letterNo + "', "
					  + " '" + subject + "', '" + ref + "', '" + content + "', "
					  + " TO_DATE('" + submitDate + "','dd/mm/yyyy'), 'N') ";

				stat.addBatch(query);
			}
			
			flag = true;
			int[] updateCounts = stat.executeBatch();
			for(int i=0; i<updateCounts.length; i++)
			{
				if(updateCounts[i] == 0)
					flag = false;
			}
			if(flag)
				conn.commit();

			conn.setAutoCommit(true);
	
		}
		catch(Exception e)
		{	Debug.writeln("Exception in omSubmit : \n" + e);
			flag = false;
		}
		finally
		{	if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){
				}
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){
				}
			}
		}
		return flag;
	}

	/**
	*
	*
	*/
	public boolean omForward(String[] proposalIds, ProposalDTO proposalDTO)
	{	
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;

		int proposalLength = proposalIds.length;
		String officeCode = proposalDTO.getOfficeCode(); 
		String actionFrom = proposalDTO.getOfficeCode(); 
		String actionTo[] = null;
		
		String forwardTo = proposalDTO.getForwardTo();

		String sentBy = proposalDTO.getUserId();
		String memoNo = proposalDTO.getMemoNo();
		String subject = proposalDTO.getForwardSubject();
		String ref = proposalDTO.getForwardRef();
		String content = proposalDTO.getForwardContent();
		String forwardDate = proposalDTO.getForwardDate();

		String sentTo = null;
		String officeType = null;
		StringTokenizer stringTokenizer = new StringTokenizer(forwardTo,",");
		int noOfForwards = stringTokenizer.countTokens();
		
		actionTo = new String[noOfForwards];
		int k=0;
		while(stringTokenizer.hasMoreElements())
		{
			actionTo[k] = stringTokenizer.nextToken();
			k++;
		}
		String employeeCodes[] = new String[actionTo.length]; 
		try
		{
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			
			for(int	i=0; i< actionTo.length; i++)
			{
				if(!actionTo[i].substring(4,6).equals("00"))
					officeType = "SUB DIVISION OFFICE";
				else
				if(!actionTo[i].substring(3,4).equals("0"))
						officeType = "DIVISION OFFICE";
				else
				if(!actionTo[i].substring(1,3).equals("00"))
					officeType = "CIRCLE OFFICE";
				else
				if(!actionTo[i].substring(0,1).equals("0"))
					officeType = "HEAD OFFICE";

				query = " SELECT user_id FROM rws_password_tbl WHERE designation_code = "
					  + " (SELECT designation_code FROM rws_head_of_office_tbl WHERE office LIKE '" + officeType + "')" 
					  + " AND office_code = '" + actionTo[i] + "'";
				System.out.println("Head Of Office query in omForward() \n" + query);

				rset = stat.executeQuery(query);
				while(rset.next())
				{
					employeeCodes[i] = rset.getString(1);
				}
			}
			int p = 0;
			for (int i=0; i<employeeCodes.length; i++)
			{
				if(employeeCodes[i] != null)
						p++;
			}
			if(p != employeeCodes.length)
			{
				HEAD_OF_OFFICE_COUNT = p;
				return false;
			}

			conn.setAutoCommit(false);
			for(int i=0; i<proposalIds.length; i++)
			{
				int trackNo = getOMTrackNo(proposalIds[i]);
								
				query = " INSERT INTO rws_om_proposal_mirror_tbl(office_code, "
					  + " asset_code, om_proposal_id, financial_year, estimate_cost,"
					  + " sanctioned_amount, admin_no, admin_date, go_no,"
					  + " state_central, admn_sanc_auth, prepared_on, prepared_by, "
					  + " remarks, flag, modi_office_code, modi_date, track_no, work_id ) "
					  + " (SELECT office_code, asset_code, "
					  + " om_proposal_id, financial_year, estimate_cost,"
					  + " sanctioned_amount, admin_no, admin_date, go_no,"
					  + " state_central, admn_sanc_auth, prepared_on, prepared_by, remarks, "
					  + " flag, '" + officeCode + "', SYSDATE, " + trackNo + ", work_id " 
					  + " FROM rws_om_proposal_tbl "
					  + " WHERE om_proposal_id = '" + proposalIds[i] + "')";
				System.out.println("Query is 1: " + query);
				stat.addBatch(query);

				for(int j=0; j< noOfForwards; j++)
				{
					if(trackNo > 1)
					{
						query = " UPDATE rws_om_proposal_workflow_tbl SET flag='Y' " 
							  + " WHERE om_proposal_id = '" + proposalIds[i] + "' AND track_no = " + (trackNo-1);
						stat.addBatch(query);
						System.out.println("Query is 2: " + query);
					}
					
					query = " INSERT INTO rws_om_proposal_workflow_tbl VALUES( "
						  + "'" + proposalIds[i] + "', " + trackNo + ", " 
						  + " '" + actionFrom + "', '" + actionTo[j] + "', 'F', SYSDATE, " 
						  + " '" + sentBy + "', "
						  + " '" + employeeCodes[j] + "', '" + memoNo + "', '" + subject + "', "
						  + " '" + ref + "', '" + content + "',"
						  + " TO_DATE('" + forwardDate + "','dd/mm/yyyy'), 'N') ";
					stat.addBatch(query);
					System.out.println("Query is 3: " + query);
				}
			}
			
			flag = true;
			int[] updateCounts = stat.executeBatch();
			for(int i=0; i<updateCounts.length; i++)
			{
				if(updateCounts[i] != 1)
					flag = false;
			}
			if(flag)
				conn.commit();

			conn.setAutoCommit(true);
		}
		catch(Exception e)
		{	Debug.writeln("Exception in omForward : \n" + e);
			flag = false;
		}
		finally
		{	if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){
				}
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){	
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){
				}
			}
		}
		return flag;
	}
	
	public boolean omOthers(String[] proposalIds, ProposalDTO proposalDTO)
	{
		Connection conn = null;
		Statement stat = null;
		try
		{
			conn = dataSource.getConnection();
			conn.setAutoCommit(false);
			stat = conn.createStatement();
			String actionType = proposalDTO.getActionType();
			String officeCode = proposalDTO.getOfficeCode();
			String userId = proposalDTO.getUserId();
			
			for(int i=0; i<proposalIds.length; i++)
			{
				int trackNo = getOMTrackNo(proposalIds[i]);
				
				query = " UPDATE rws_om_proposal_tbl SET flag='"+actionType+"'"
					  + " WHERE om_proposal_id='"+proposalIds[i]+"'";
				stat.addBatch(query);
			
				query = " INSERT INTO rws_om_proposal_mirror_tbl(office_code, "
					  + " asset_code, om_proposal_id, financial_year, estimate_cost,"
					  + " sanctioned_amount, admin_no, admin_date, go_no,"
					  + " state_central, admn_sanc_auth, prepared_on, prepared_by, "
					  + " remarks, flag, modi_office_code, modi_date, track_no, work_id ) "
					  + " (SELECT office_code, asset_code, "
					  + " om_proposal_id, financial_year, estimate_cost,"
					  + " sanctioned_amount, admin_no, admin_date, go_no,"
					  + " state_central, admn_sanc_auth, prepared_on, prepared_by, remarks, "
					  + " flag, '" + officeCode + "', SYSDATE, " + trackNo + ", work_id " 
					  + " FROM rws_om_proposal_tbl "
					  + " WHERE om_proposal_id = '" + proposalIds[i] + "')";
				stat.addBatch(query);
				
				if(trackNo > 1)
				{
					query = " UPDATE rws_om_proposal_workflow_tbl SET flag='Y' " 
						  + " WHERE om_proposal_id = '" + proposalIds[i] + "' AND track_no = " + (trackNo-1);
					stat.addBatch(query);
				}
							
				query = " INSERT INTO rws_om_proposal_workflow_tbl(om_proposal_id, track_no," 
					  + " action_from, action_to, action_type, action_date, sent_by,"
					  + " sent_to, memo_no, subject, ref, content, for_sub_date, flag)"
					  + " VALUES('" + proposalIds[i] + "'," + trackNo + ","
					  + " '" + officeCode + "','" + officeCode + "', "
					  + " '" + actionType + "', SYSDATE, "
					  + " '" + userId + "','" +  userId + "',"
					  + " '000000', '000000','000000',"
					  + " '" + proposalDTO.getOtherRemarks() + "', SYSDATE, 'N')";
				System.out.println("Defer Query is " + query);
				stat.addBatch(query);

			}
				flag = true;
				int updateCounts[] = stat.executeBatch();
				for(int i=0; i<updateCounts.length; i++)
				{
					if(updateCounts[i] == 0)
						flag = false;
				}
				if(flag)
					conn.commit();
				
				conn.setAutoCommit(true);
		}
		catch(Exception e)
		{	Debug.writeln("Exception in omOthers : \n" + e);
			flag = false;
		}
		finally
		{	
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){	
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){	
				}
			}
		}
		return flag;
	}
	
	public boolean omDeleteConsidered(String[] proposalIds)
	{
		Connection conn = null;
		Statement stat = null;
		
		try
		{
			conn = dataSource.getConnection();
			conn.setAutoCommit(false);
			stat = conn.createStatement();
			
			for(int i=0; i< proposalIds.length; i++)
			{
				query = " DELETE FROM rws_om_proposal_prog_lnk_tbl "
					  + " WHERE om_proposal_id = '" + proposalIds[i] + "'";
				stat.addBatch(query);
				
				query = " DELETE FROM rws_om_proposal_hab_lnk_tbl "
					  + " WHERE om_proposal_id = '" + proposalIds[i] + "'";
				stat.addBatch(query);
				
				query = " DELETE FROM rws_om_proposal_mirror_tbl "
					  + " WHERE om_proposal_id = '" + proposalIds[i] + "'"
					  + " AND track_no = 0";
				stat.addBatch(query);
				
				query = " DELETE FROM rws_om_proposal_tbl "
					  + " WHERE om_proposal_id = '" + proposalIds[i] + "'";
				stat.addBatch(query);
			}
			int[] updateCounts = stat.executeBatch();
			flag = true;
			conn.commit();
			conn.setAutoCommit(true);
					
		}
		catch(Exception e)
		{
			flag = false;
			Debug.print("Exception in omDeleteConsidered " + e.getMessage());
		}
		finally
		{	
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle)
				{	
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle)
				{	
				}
			}
		}
		return flag;
	}
	
	public boolean omConsiderForSanction(String[] proposalIds, ProposalDTO proposalDTO)
	{
		Connection conn = null;
		Statement stat = null;
						
		try
		{
			conn = dataSource.getConnection();
			conn.setAutoCommit(false);
			stat = conn.createStatement();
			String actionType = proposalDTO.getActionType();
			
			for(int i=0; i<proposalIds.length; i++)
			{
				int trackNo = getOMTrackNo(proposalIds[i]);
				
				query = " INSERT INTO rws_om_proposal_workflow_tbl(om_proposal_id, " 
					  + " track_no, action_from, action_to, action_type, "
					  + " action_date, sent_by, sent_to, memo_no, subject, "
					  + " ref, content, for_sub_date, flag)"
					  + " (SELECT om_proposal_id," + trackNo + ", action_from, "
					  + " action_to, 'P', SYSDATE, sent_by, sent_to, "
					  + " memo_no, subject, ref, content,for_sub_date,'N' "
					  + " FROM rws_om_proposal_workflow_tbl "
					  + " WHERE om_proposal_id = '" + proposalIds[i] + "' AND "
					  + " track_no = " + (trackNo-1) + ")";
				stat.addBatch(query);
				
				query = " UPDATE rws_om_proposal_workflow_tbl SET flag='Y'"
					  + " WHERE om_proposal_id='"+proposalIds[i]+"' "
					  + " AND track_no = " + (trackNo-1);
				stat.addBatch(query);
				
				query = " UPDATE rws_om_proposal_tbl SET flag='P'"
					  + " WHERE om_proposal_id='"+proposalIds[i]+"'";
				stat.addBatch(query);
			}
			flag = true;
			int updateCounts[]=stat.executeBatch();
			for(int i=0; i<updateCounts.length; i++)
			{
				if(updateCounts[i] == 0)
					flag = false;
			}
			if(flag)
				conn.commit();
			
			conn.setAutoCommit(true);
		}
		catch(Exception e)
		{	Debug.writeln("Exception in omConsiderForSanction : \n" + e);
			flag = false;
		}
		finally
		{	
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle)
				{	
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle)
				{	
				}
			}
		}
		return flag;
	}
	
	/*
	*
	*
	*/
	public boolean omSanction(String[] proposalIds, String[] sanctionAmounts, ProposalDTO proposalDTO)
	{
		Connection conn = null;
		Statement stat = null;

		String officeCode = proposalDTO.getOfficeCode();
		String preparedBy = proposalDTO.getUserId();
		String adminNo = proposalDTO.getAdminNo();
		String adminDate = proposalDTO.getAdminDate();
		String goNo = proposalDTO.getGoNo();
		String sancAuthority = proposalDTO.getSanctioningAuthority();
		String sancAt = proposalDTO.getSanctionedAt();
		String sanctionedAmount = proposalDTO.getSanctionedAmount();
			
		if(proposalIds != null || proposalIds.length > 0)
		{
			try
			{	
				conn = dataSource.getConnection();
				conn.setAutoCommit(false);
				stat = conn.createStatement();

				for(int i=0; i<proposalIds.length; i++)
				{
					int trackNo = getOMTrackNo(proposalIds[i]);

					if(trackNo > 1)
					{
						query = " UPDATE rws_om_proposal_workflow_tbl SET flag='Y' "
							  + " WHERE om_proposal_id = '" + proposalIds[i] + "' "
							  + " AND track_no = " + (trackNo-1);
						System.out.println("Query 1: " + query);
						stat.addBatch(query);
					}
					
					query = " UPDATE rws_om_proposal_tbl "
						  + " SET flag = 'A', admin_no='" + adminNo+ "',"
						  + " admin_date = TO_DATE('" + adminDate + "', 'dd/mm/yyyy'), "
						  + " go_no = '" + goNo + "', "
						  + " admn_sanc_auth='"+ sancAuthority + "', "
						  + " state_central = '" + sancAt + "', "
						  + " work_id = '" + proposalIds[i] + "', "
						  + " sanctioned_amount = '" + sanctionAmounts[i] + "'" 
						  + " WHERE om_proposal_id = '" + proposalIds[i] + "'";
					System.out.println("Query 2: " + query);	  				
					stat.addBatch(query);

					query = " INSERT INTO rws_om_proposal_mirror_tbl(office_code, "
						  + " asset_code, om_proposal_id, financial_year, estimate_cost, "
						  + " sanctioned_amount, admin_no, admin_date, go_no,"
						  + " state_central, admn_sanc_auth, prepared_on, prepared_by, "
						  + " remarks, flag, modi_office_code, modi_date, track_no, work_id ) "
						  + " (SELECT office_code, asset_code, "
						  + " om_proposal_id, financial_year, estimate_cost,"
						  + " sanctioned_amount, admin_no, admin_date, go_no,"
						  + " state_central, admn_sanc_auth, prepared_on, prepared_by, remarks, "
						  + " flag, '" + officeCode + "', SYSDATE, 99, work_id " 
						  + " FROM rws_om_proposal_tbl "
						  + " WHERE om_proposal_id = '" + proposalIds[i] + "')";
					System.out.println("Query 3: " + query);		
				stat.addBatch(query);
				}
				
				flag = true;
				int[] updateCounts = stat.executeBatch();
				for(int i=0; i<updateCounts.length; i++)
				{
					if(updateCounts[i] == 0)
						flag = false;
				}
				if(flag)
					conn.commit();

				conn.setAutoCommit(true);
			}
			catch(Exception e)
			{	System.out.println("Exception in omSanction:\n" + e);
				flag = false;
			}
			finally
			{	if(stat != null)
				{	try
					{	stat.close();
					}
					catch(SQLException sqle){
					}
				}
				if(conn != null)
				{	try
					{	conn.close();
					}
					catch(SQLException sqle){
					}
				}
			}
		}
		return flag;
	}
	
	/**
	*
	*
	*/
	public String getNextOMProposalId(String assetCode)
	{
		SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy");
		String currentYear = dateFormatter.format(new java.util.Date());
		String omProposalId = "OM" + currentYear + assetCode;				
		
		return omProposalId;
	}
	
	/*
	*
	*
	*/
	public int getOMTrackNo(String omProposalId)
	{
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;

		int nextTrackNo = 1;
		try
		{
			query = " SELECT MAX(track_no)+1 from rws_om_proposal_workflow_tbl "
				  + " WHERE om_proposal_id = '" + omProposalId + "'";
			
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			rset = stat.executeQuery(query);
			if(rset.next())
			{
				nextTrackNo = rset.getInt(1);
				
				if(nextTrackNo == 0)
					nextTrackNo = 1;
			}
		}
		catch(Exception e)
		{	Debug.writeln("Exception in getOMTrackNo : \n" + e);			
		}
		finally
		{	if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){
				}
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){
				}
			}
		}
		return nextTrackNo;
	}
	
	/*
	* @param <code>String</code>
	* @param <code>String</code>
	* @param <code>String</code>
	*/
	protected ArrayList getAssets(String circleOfficeCode, String divisionOfficeCode,
				String subdivisionOfficeCode)
	{
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;

		ArrayList assets = null;
		try
		{
			query = " SELECT asset_code, UPPER(asset_name), hab_code, UPPER(location), "
				  + " TO_CHAR(date_creation, 'dd/mm/yyyy') as date_creation, "
				  + " DECODE(asset_status,'1', 'WORKING', '2', 'NOT WORKING', '3', 'DRIED')," 
				  + " asset_cost, start_year, end_year "
				  + " FROM rws_asset_mast_tbl AM, rws_asset_type_tbl AT "
				  + " WHERE AM.type_of_asset_code = AT.type_of_asset_code AND "
				  + " UPPER(AT.type_of_asset_name) like 'CPWS' AND "
				  + " AM.circle_office_code = '" + circleOfficeCode + "' AND "
				  + " AM.division_office_code = '" + divisionOfficeCode + "' AND "
				  + " AM.subdivision_office_code = '" + subdivisionOfficeCode + "' AND "
				  + " AM.asset_code NOT IN (SELECT asset_code FROM rws_om_proposal_tbl) ";  
			
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			rset = stat.executeQuery(query);

			assets = new ArrayList();
			Asset asset = null;
			tempStat = conn.createStatement();
			int noOfHabs = 0;
			int noOfFunctionalHabs = 0;
			while(rset.next())
			{
				asset = new Asset();
				String assetCode = rset.getString(1);
				asset.setAssetCode(assetCode);
				asset.setAssetName(rset.getString(2));
				asset.setHabCode(rset.getString(3));
				asset.setLocation(rset.getString(4));
				asset.setCreationDate(rset.getString(5));
				asset.setAssetStatus(rset.getString(6));
				asset.setAssetCost(rset.getString(7));
				asset.setStartYear(rset.getString(8));
				asset.setEndYear(rset.getString(9));
				query = " SELECT COUNT(hab_code) FROM rws_asset_hab_tbl "
					  + " WHERE asset_code='" + assetCode + "'";
				tempRset = tempStat.executeQuery(query);
				tempRset.next();
				noOfHabs = tempRset.getInt(1);
				asset.setNoOfHabs(String.valueOf(noOfHabs));
				
				query = " SELECT COUNT(hab_code) FROM rws_temp_om_proposal_hab_tbl "
					  + " WHERE asset_code='" + assetCode + "'";
				tempRset = tempStat.executeQuery(query);
				tempRset.next();
				noOfFunctionalHabs = tempRset.getInt(1);
				if(noOfFunctionalHabs == 0)
					noOfFunctionalHabs = noOfHabs; 
				asset.setNoOfFunctionalHabs(String.valueOf(noOfFunctionalHabs));
				
				assets.add(asset);
			}
		}
		catch(Exception e)
		{	Debug.writeln("Exception in getAssests : \n" + e);			
		}
		finally
		{	if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){
				}
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){
				}
			}
		}
		return assets;
	}
	
	public ArrayList getAssetHabitations(String assetCode) 
	{
		ArrayList assetHabs = new ArrayList();
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;
		
		try
		{
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			query = " SELECT PR.panch_code, PR.panch_name, "
				  + " (HD.census_plain_popu+HD.census_sc_popu+HD.census_st_popu), "
				  + " HD.coverage_status FROM rws_asset_hab_tbl AH, "
				  + " rws_panchayat_raj_tbl PR, rws_habitation_directory_tbl HD "
				  + " WHERE AH.hab_code = PR.panch_code "
				  + " AND AH.hab_code = HD.hab_code "
				  + " AND AH.asset_code = '" + assetCode + "'";
			System.out.println("Asset Hab Query is " + query);
			rset = stat.executeQuery(query);
			RwsLocationBean rwsLocationBean = null;
			while(rset.next())
			{
				rwsLocationBean = new RwsLocationBean();
				rwsLocationBean.setHabCode(rset.getString(1));
				rwsLocationBean.setHabName(rset.getString(2));
				rwsLocationBean.setPopulation(rset.getString(3));
				rwsLocationBean.setStatus(rset.getString(4));
				assetHabs.add(rwsLocationBean);
			}
		}
		catch(Exception e)
		{	Debug.writeln("Exception in getAssetHabitations : \n" + e);			
		}
		finally
		{
			if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){
				}
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){
				}
			}
		}
		
		return assetHabs;
	}
	
	/**
	*
	*
	*/
	public ArrayList getOMConsideredProposals(String officeCode)
	{	
		System.out.println("getOMConsideredProposals() called.");
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;
		Statement stat1 = null;
		ResultSet rset1 = null;
		
		ProgrammeSubProgrammeBean programmeSubProgrammeBean = null;
		try
		{
			query = " SELECT OMP.om_proposal_id, OMP.asset_code, UPPER(AM.asset_name) ,"
				  + " UPPER(NVL(OMP.estimate_cost,'0')), "
				  + " NVL(OMP.financial_year,''), "
				  + " TO_CHAR(OMP.prepared_on,'dd/mm/yyyy'),  "
				  + " UPPER(NVL(OMP.remarks,'')), no_of_habs "
				  + " FROM rws_om_proposal_tbl OMP, rws_asset_mast_tbl AM"
				  + " WHERE "
				  + " OMP.asset_code = AM.asset_code AND OMP.flag='C'"
				  + " AND OMP.office_code='" + officeCode + "' AND "
				  + " OMP.om_proposal_id NOT IN  "
				  + " (SELECT om_proposal_id FROM rws_om_proposal_workflow_tbl) ";
				  
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			stat1 = conn.createStatement();
			rset = stat.executeQuery(query);
			consideredProposals = new ArrayList();
			String proposalId = null;
			ArrayList programmes = null;
			while(rset.next())
			{
				proposalDTO = new ProposalDTO();
				proposalId = rset.getString(1);
				proposalDTO.setProposalId(proposalId);
				proposalDTO.setAssetCode(rset.getString(2));
				proposalDTO.setAssetName(rset.getString(3));
				proposalDTO.setEstimateCost(rset.getString(4));
				proposalDTO.setFinancialYear(rset.getString(5));
				proposalDTO.setProposalDate(rset.getString(6));
				proposalDTO.setNoOfFunctionalHabs(rset.getString(8));
				query = " SELECT NVL(P.programme_name,''), " 
					  + " NVL(SP.subprogramme_name,'') FROM "
					  + " rws_om_proposal_tbl OMP, rws_om_proposal_prog_lnk_tbl PP,"
					  + " rws_programme_tbl P,  rws_subprogramme_tbl SP "
					  + " WHERE OMP.om_proposal_id = PP.om_proposal_id "
					  + " AND PP.programme_code = P.programme_code "
					  + " AND PP.programme_code = SP.programme_code(+) "
					  + " AND PP.subprogramme_code = SP.subprogramme_code(+) "
					  + " AND OMP.om_proposal_id = '" + proposalId + "'";
				
				rset1 = stat1.executeQuery(query);
				programmes = new ArrayList();
				while(rset1.next())
				{
					programmeSubProgrammeBean = new ProgrammeSubProgrammeBean();
					programmeSubProgrammeBean.setProgrammeName(rset1.getString(1));
					programmeSubProgrammeBean.setSubprogrammeName(rset1.getString(2));
					programmes.add(programmeSubProgrammeBean);
				}
				proposalDTO.setProgrammes(programmes);
				consideredProposals.add(proposalDTO);
			}
		}
		catch(Exception e)
		{	Debug.writeln("Exception in getOMConsideredProposals is :\n" + e);			
		}
		finally
		{	if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){
				}
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){
				}
			}
		}
		return consideredProposals;
	}
	
	/**
	*
	*
	*/
	public ArrayList getOMSubmittedProposals(String actionTo, String proposalType)
	{
		System.out.println("getOMSubmittedProposals() called.");
		Connection conn = null;
		Statement stat = null;
		Statement stat1 = null;
		ResultSet rset = null;
		ResultSet rset1 = null;
		ProgrammeSubProgrammeBean programmeSubProgrammeBean = null; 
		higherOfficeCode = RwsOffices.getHigherOfficeCode(actionTo);
		
		try
		{
			query = " SELECT OMPWT.action_from, OMP.om_proposal_id, "
				  + " OMP.financial_year, OMP.asset_code, AM.asset_name,  "
				  + " OMP.estimate_cost, NVL(OMP.sanctioned_amount, 0),"
				  + " TO_CHAR(OMP.prepared_on,'dd/mm/yyyy'), "
				  + " OMPWT.memo_no, TO_CHAR(OMPWT.for_sub_date,'dd/mm/yyyy'),"
				  + " OMPWT.subject, NVL(OMPWT.ref,''),"
				  + " OMPWT.content, OMPWT.action_type, OMP.no_of_habs "
				  + " FROM rws_om_proposal_tbl OMP, "
				  + " rws_om_proposal_workflow_tbl OMPWT, "
				  + " rws_asset_mast_tbl AM WHERE  "
				  + " (OMP.om_proposal_id = OMPWT.om_proposal_id) "
				  + " AND OMP.asset_code = AM.asset_code "
				  + " AND OMP.flag = '" + proposalType + "' AND OMPWT.action_type='S' "
				  + " AND OMPWT.flag = 'N' AND OMPWT.action_to='" + actionTo + "'";
				  			
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			stat1 = conn.createStatement();
			rset = stat.executeQuery(query);
			submittedProposals = new ArrayList();
			rwsOffices = new RwsOffices(dataSource);
			String officeCode = "", officeName="";
			String proposalId = null;
			ArrayList programmes = null;
			String content = null;
			while(rset.next())
			{
				proposalDTO = new ProposalDTO();

				officeCode = rset.getString(1);
				proposalId = rset.getString(2);
				officeName = rwsOffices.getOfficeName(officeCode, true);
				
				proposalDTO.setOfficeCode(officeCode);
				proposalDTO.setOfficeName(officeName);
				
				proposalDTO.setProposalId(proposalId);
				proposalDTO.setFinancialYear(rset.getString(3));
				proposalDTO.setAssetCode(rset.getString(4));
				proposalDTO.setAssetName(rset.getString(5));
				proposalDTO.setEstimateCost(rset.getString(6));
				proposalDTO.setSanctionedAmount(rset.getString(7));
				proposalDTO.setProposalDate(rset.getString(8));
				proposalDTO.setLetterNo(rset.getString(9));
				proposalDTO.setSubmitDate(rset.getString(10));
				proposalDTO.setSubmitSubject(rset.getString(11));
				proposalDTO.setSubmitRef(rset.getString(12));
				content = rset.getString(13);
				content = content.replaceAll("\\n","");
				content = content.replaceAll("\\r","<br>");
				proposalDTO.setSubmitContent(content);
				proposalDTO.setFlag(rset.getString(14));
				proposalDTO.setNoOfFunctionalHabs(rset.getString(15));
				query = " SELECT NVL(P.programme_name,''), " 
					  + " NVL(SP.subprogramme_name,'') FROM "
					  + " rws_om_proposal_tbl OMP, rws_om_proposal_prog_lnk_tbl PP,"
					  + " rws_programme_tbl P,  rws_subprogramme_tbl SP "
					  + " WHERE OMP.om_proposal_id = PP.om_proposal_id "
					  + " AND PP.programme_code = P.programme_code "
					  + " AND PP.programme_code = SP.programme_code(+) "
					  + " AND PP.subprogramme_code = SP.subprogramme_code(+) "
					  + " AND OMP.om_proposal_id = '" + proposalId + "'";
				rset1 = stat1.executeQuery(query);
				programmes = new ArrayList();
				while(rset1.next())
				{
					programmeSubProgrammeBean = new ProgrammeSubProgrammeBean();
					programmeSubProgrammeBean.setProgrammeName(rset1.getString(1));
					programmeSubProgrammeBean.setSubprogrammeName(rset1.getString(2));
					programmes.add(programmeSubProgrammeBean);
				}
				proposalDTO.setProgrammes(programmes);			
				submittedProposals.add(proposalDTO);
			}
		}
		catch(Exception e)
		{	Debug.writeln("Exception in getOMSubmitedProposals : \n" + e);			
		}
		finally
		{	if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){
				}
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){
				}
			}
		}
		System.out.println("OM submittedProposals.size() in ProposalDAO: " + submittedProposals.size());
		return submittedProposals;
	}
	
	/**
	*
	*
	*/
	public ArrayList getOMForwardedProposals(String actionTo, String proposalType)
	{
		System.out.println("getOMForwardedProposals() called.");
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;
		Statement stat1 = null;
		ResultSet rset1 = null;
		ProgrammeSubProgrammeBean programmeSubProgrammeBean = null;
		try
		{
			query = " SELECT OMPWT.action_from, OMP.om_proposal_id, "
				  + " OMP.financial_year, OMP.asset_code, AM.asset_name, "
				  + " OMP.estimate_cost, NVL(OMP.sanctioned_amount, '0'),"
				  + " TO_CHAR(OMP.prepared_on,'dd/mm/yyyy'), "
				  + " OMPWT.memo_no, TO_CHAR(OMPWT.for_sub_date,'dd/mm/yyyy'),"
				  + " OMPWT.subject, NVL(OMPWT.ref,''), "
				  + " OMPWT.content, OMPWT.action_type, "
				  + " OMP.work_id, OMP.admin_no, "
				  + " TO_CHAR(OMP.admin_date,'dd/mm/yyyy'), OMP.go_no, OMP.no_of_habs "
				  + " FROM rws_om_proposal_tbl OMP,"
				  + " rws_om_proposal_workflow_tbl OMPWT, "
				  + " rws_asset_mast_tbl AM WHERE  "
				  + " (OMP.om_proposal_id = OMPWT.om_proposal_id) "
				  + " AND OMP.asset_code = AM.asset_code " 
				  + " AND OMP.flag = '" + proposalType + "' AND OMPWT.flag = 'N' "
				  + " AND OMPWT.action_type='F' AND OMPWT.action_to='" + actionTo + "'";
		
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			stat1 = conn.createStatement();
			rset = stat.executeQuery(query);
			forwardedProposals = new ArrayList();
			rwsOffices = new RwsOffices(dataSource);
			String officeCode = "", officeName = "";
			ArrayList programmes = null;
			String proposalId = null;
			String content = null;
			while(rset.next())
			{
				proposalDTO = new ProposalDTO();
				
				officeCode = rset.getString(1);
				proposalId = rset.getString(2);
				officeName = rwsOffices.getOfficeName(officeCode, true);
				
				proposalDTO.setOfficeCode(officeCode);
				proposalDTO.setOfficeName(officeName);
				proposalDTO.setProposalId(proposalId);
				proposalDTO.setFinancialYear(rset.getString(3));
				proposalDTO.setAssetCode(rset.getString(4));
				proposalDTO.setAssetName(rset.getString(5));
				proposalDTO.setEstimateCost(rset.getString(6));
				proposalDTO.setSanctionedAmount(rset.getString(7));
				proposalDTO.setProposalDate(rset.getString(8));
				proposalDTO.setMemoNo(rset.getString(9));
				proposalDTO.setForwardDate(rset.getString(10));
				proposalDTO.setForwardSubject(rset.getString(11));
				proposalDTO.setForwardRef(rset.getString(12));
				content = rset.getString(13);
				content = content.replaceAll("\\n","");
				content = content.replaceAll("\\r","<br>");
				proposalDTO.setForwardContent(content);
				proposalDTO.setFlag(rset.getString(14));
				proposalDTO.setWorkId(rset.getString(15));
				proposalDTO.setAdminNo(rset.getString(16));
				proposalDTO.setAdminDate(rset.getString(17));
				proposalDTO.setGoNo(rset.getString(18));
				proposalDTO.setNoOfFunctionalHabs(rset.getString(19));
				query = " SELECT NVL(P.programme_name,''), " 
					  + " NVL(SP.subprogramme_name,'') FROM "
					  + " rws_om_proposal_tbl OMP, rws_om_proposal_prog_lnk_tbl PP,"
					  + " rws_programme_tbl P,  rws_subprogramme_tbl SP "
					  + " WHERE OMP.om_proposal_id = PP.om_proposal_id "
					  + " AND PP.programme_code = P.programme_code "
					  + " AND PP.programme_code = SP.programme_code(+) "
					  + " AND PP.subprogramme_code = SP.subprogramme_code(+) "
					  + " AND OMP.om_proposal_id = '" + proposalId + "'";
				rset1 = stat1.executeQuery(query);
				programmes = new ArrayList();
				while(rset1.next())
				{
					programmeSubProgrammeBean = new ProgrammeSubProgrammeBean();
					programmeSubProgrammeBean.setProgrammeName(rset1.getString(1));
					programmeSubProgrammeBean.setSubprogrammeName(rset1.getString(2));
					programmes.add(programmeSubProgrammeBean);
				}
				proposalDTO.setProgrammes(programmes);
											
				forwardedProposals.add(proposalDTO);
			}
		}
		catch(Exception e)
		{	Debug.writeln("Exception in getOMForwardedProposals : \n" + e);			
		}
		finally
		{	if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){
				}
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){
				}
			}
		}
		
		System.out.println("OM forwardProposals.size() in ProposalDAO: " + forwardedProposals.size());
		return forwardedProposals;
	}
	
	/**
	*
	*
	*/
	public ArrayList getOMPendingProposals(String actionFrom, String actionTo)
	{
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;
		Statement stat1 = null;
		ResultSet rset1 = null;
		ProgrammeSubProgrammeBean programmeSubProgrammeBean = null;
		
		ArrayList pendingProposals = new ArrayList();
		System.out.println("In getOMPendingProposalData.do");
		System.out.println("Action From is " + actionFrom);
		System.out.println("Action To is " + actionTo);
		
		try
		{
			query = " SELECT OMPWT.action_from, OMP.om_proposal_id, "
				  + " OMP.financial_year, OMP.asset_code, AM.asset_name,  "
				  + " OMP.estimate_cost, NVL(OMP.sanctioned_amount, 0),"
				  + " TO_CHAR(OMP.prepared_on,'dd/mm/yyyy'), "
				  + " OMPWT.memo_no, TO_CHAR(OMPWT.for_sub_date,'dd/mm/yyyy'),"
				  + " OMPWT.subject, NVL(OMPWT.ref,''),"
				  + " OMPWT.content, OMPWT.action_type, OMP.no_of_habs "
				  + " FROM rws_om_proposal_tbl OMP, rws_asset_mast_tbl AM, "
				  + " rws_om_proposal_workflow_tbl OMPWT "
				  + " WHERE  "
				  + " (OMP.om_proposal_id = OMPWT.om_proposal_id)"
				  + " AND OMP.asset_code = AM.asset_code "
				  + " AND OMP.flag = 'P' AND OMPWT.action_type='P' "
				  + " AND OMPWT.flag = 'N' AND OMPWT.action_to='" + actionTo + "'";
			if(!actionFrom.equals(""))
			query += " AND OMPWT.action_from LIKE '" + actionFrom + "%'"; 
			
			System.out.println("Pending Query is " + query);
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			stat1 = conn.createStatement();
			rset = stat.executeQuery(query);
			
			rwsOffices = new RwsOffices(dataSource);
			String officeCode = "", officeName="";
			String proposalId = null;
			ArrayList programmes = null;
			
			String content = null;
			while(rset.next())
			{
				proposalDTO = new ProposalDTO();

				officeCode = rset.getString(1);
				proposalId = rset.getString(2);
				officeName = rwsOffices.getOfficeName(officeCode, true);
				
				proposalDTO.setOfficeCode(officeCode);
				proposalDTO.setOfficeName(officeName);
				proposalDTO.setProposalId(proposalId);
				proposalDTO.setFinancialYear(rset.getString(3));
				proposalDTO.setAssetCode(rset.getString(4));
				proposalDTO.setAssetName(rset.getString(5));
				String estimateCost = rset.getString(6);
				double sanctionedAmount = rset.getDouble(7);
				
				proposalDTO.setEstimateCost(estimateCost);
				if(sanctionedAmount == 0)
					proposalDTO.setSanctionedAmount(estimateCost);
				else
					proposalDTO.setSanctionedAmount(String.valueOf(sanctionedAmount));
								
				proposalDTO.setProposalDate(rset.getString(8));
				proposalDTO.setLetterNo(rset.getString(9));
				proposalDTO.setSubmitDate(rset.getString(10));
				proposalDTO.setSubmitSubject(rset.getString(11));
				proposalDTO.setSubmitRef(rset.getString(12));
				content = rset.getString(13);
				content = content.replaceAll("\\n","");
				content = content.replaceAll("\\r","<br>");
				proposalDTO.setSubmitContent(content);
				proposalDTO.setFlag(rset.getString(14));
				proposalDTO.setNoOfFunctionalHabs(rset.getString(15));
				query = " SELECT PP.programme_code, NVL(P.programme_name,''), " 
					  + " NVL(SP.subprogramme_name,'') FROM "
					  + " rws_om_proposal_tbl OMP, rws_om_proposal_prog_lnk_tbl PP,"
					  + " rws_programme_tbl P,  rws_subprogramme_tbl SP "
					  + " WHERE OMP.om_proposal_id = PP.om_proposal_id "
					  + " AND PP.programme_code = P.programme_code "
					  + " AND PP.programme_code = SP.programme_code(+) "
					  + " AND PP.subprogramme_code = SP.subprogramme_code(+) "
					  + " AND OMP.om_proposal_id = '" + proposalId + "'";
				rset1 = stat1.executeQuery(query);
				programmes = new ArrayList();
				while(rset1.next())
				{
					programmeSubProgrammeBean = new ProgrammeSubProgrammeBean();
					programmeSubProgrammeBean.setProgrammeCode(rset1.getString(1));
					programmeSubProgrammeBean.setProgrammeName(rset1.getString(2));
					programmeSubProgrammeBean.setSubprogrammeName(rset1.getString(3));
					programmes.add(programmeSubProgrammeBean);
				}
				proposalDTO.setProgrammes(programmes);
				pendingProposals.add(proposalDTO);
			}
		}
		catch(Exception e)
		{	Debug.writeln("Exception in getOMPendingProposals : \n" + e);			
		}
		finally
		{	if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){
				}
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){
				}
			}
		}
		System.out.println("OM pendingProposals.size() in ProposalDAO: " + 
				pendingProposals.size());
		return pendingProposals;
	}
	
	/**
	*
	*
	*/
	protected ArrayList getOMSanctionedProposals(String officeCode)
	{
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;
		Statement stat1 = null;
		ResultSet rset1 = null;
		ProgrammeSubProgrammeBean programmeSubProgrammeBean = null;

		try
		{
			query = " SELECT OMP.om_proposal_id, OMP.work_id, OMP.asset_code, "
				  + " AM.asset_name, OMP.financial_year, OMP.admin_no, "
				  + " TO_CHAR(admin_date, 'dd/mm/yyyy'), OMP.go_no,"
				  + " OMP.sanctioned_amount, OMP.no_of_habs "
				  + " FROM rws_om_proposal_tbl OMP, rws_asset_mast_tbl AM"
				  + " WHERE "
				  + " OMP.asset_code = AM.asset_code " 
				  + " AND OMP.flag = 'A' AND OMP.om_proposal_id NOT IN "
				  + " (SELECT om_proposal_id FROM rws_om_proposal_workflow_tbl " 
				  + " WHERE flag='N')";

			conn = dataSource.getConnection();
			stat = conn.createStatement();
			stat1 = conn.createStatement();
			rset = stat.executeQuery(query);

			sanctionedProposals = new ArrayList();
			ArrayList programmes = new ArrayList();
			ProposalDTO proposalDTO = null;
			String proposalId = null;
			while(rset.next())
			{
				proposalDTO = new ProposalDTO();
				proposalId = rset.getString(1);
				proposalDTO.setProposalId(proposalId);
				proposalDTO.setWorkId(rset.getString(2));
				proposalDTO.setAssetCode(rset.getString(3));
				proposalDTO.setAssetName(rset.getString(4));
				proposalDTO.setFinancialYear(rset.getString(5));
				proposalDTO.setAdminNo(rset.getString(6));
				proposalDTO.setAdminDate(rset.getString(7));
				proposalDTO.setGoNo(rset.getString(8));
				proposalDTO.setSanctionedAmount(rset.getString(9));
				proposalDTO.setNoOfFunctionalHabs(rset.getString(10));
				query = " SELECT NVL(P.programme_name,''), " 
					  + " NVL(SP.subprogramme_name,'') FROM "
					  + " rws_om_proposal_tbl OMP, rws_om_proposal_prog_lnk_tbl PP,"
					  + " rws_programme_tbl P,  rws_subprogramme_tbl SP "
					  + " WHERE OMP.om_proposal_id = PP.om_proposal_id "
					  + " AND PP.programme_code = P.programme_code "
					  + " AND PP.programme_code = SP.programme_code(+) "
					  + " AND PP.subprogramme_code = SP.subprogramme_code(+) "
					  + " AND OMP.om_proposal_id = '" + proposalId + "'";
				rset1 = stat1.executeQuery(query);
				programmes = new ArrayList();
				while(rset1.next())
				{
					programmeSubProgrammeBean = new ProgrammeSubProgrammeBean();
					programmeSubProgrammeBean.setProgrammeName(rset1.getString(1));
					programmeSubProgrammeBean.setSubprogrammeName(rset1.getString(2));
					programmes.add(programmeSubProgrammeBean);
				}
				proposalDTO.setProgrammes(programmes);
				sanctionedProposals.add(proposalDTO);
			}
		}
		catch(Exception e)
		{	Debug.writeln("Exception in getOMSanctionedProposals : \n" + e);			
		}
		finally
		{	if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){
				}
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){
				}
			}
		}
		System.out.println("sanctionedProposals.size() in ProposalDAO(): " + 
							sanctionedProposals.size());
		return sanctionedProposals;
	}
	
	public ArrayList listOMProposals(String officeCode) 
	{
		Connection conn = null;
		Statement stat = null, stat1 = null;;
		ResultSet rset = null, rset1 = null;
		ArrayList proposalList = new ArrayList(2);
		ArrayList sentProposals = null;
		ArrayList receivedProposals = null;
		ProposalDTO proposalDTO = null;
		ProgrammeSubProgrammeBean programmeSubProgrammeBean = null; 
		String actionTo = null;
		String content = null;
		try
		{
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			stat1 = conn.createStatement();
			rwsOffices = new RwsOffices(dataSource);
						
			query = " SELECT OMPWT.action_to, OMP.om_proposal_id, "
				  + " OMP.financial_year, OMP.asset_code, AM.asset_name, "
				  + " OMP.estimate_cost, NVL(OMP.sanctioned_amount, '0'),"
				  + " TO_CHAR(OMP.prepared_on,'dd/mm/yyyy'), "
				  + " DECODE(OMP.flag, 'C', 'UNDER PROCESS', 'D','DEFERRED','T','TRANSMITTED TO OTHER DEPARTMENT', 'A','SANCTIONED'), "
				  + " OMPWT.memo_no, TO_CHAR(OMPWT.for_sub_date,'dd/mm/yyyy'),"
				  + " OMPWT.subject, NVL(OMPWT.ref,''), "
				  + " OMPWT.content, OMPWT.action_type "
				  + " FROM rws_om_proposal_tbl OMP,"
				  + " rws_om_proposal_workflow_tbl OMPWT, "
				  + " rws_asset_mast_tbl AM WHERE  "
				  + " (OMP.om_proposal_id = OMPWT.om_proposal_id) "
				  + " AND OMP.asset_code = AM.asset_code " 
				  + " AND OMPWT.action_from = '" + officeCode + "'";
			
			System.out.println("Sent Proposals " + query);
			rset = stat.executeQuery(query);
			sentProposals = new ArrayList();
			String proposalId = null;
			ArrayList programmes = null;
			while(rset.next())
			{
				proposalDTO = new ProposalDTO();
				
				actionTo = rset.getString(1);
				proposalId = rset.getString(2);
				proposalDTO.setOfficeCode(actionTo);
				
				proposalDTO.setOfficeName(rwsOffices.getOfficeName(actionTo, true));
				proposalDTO.setProposalId(proposalId);
				proposalDTO.setFinancialYear(rset.getString(3));
				proposalDTO.setAssetCode(rset.getString(4));
				proposalDTO.setAssetName(rset.getString(5));
				proposalDTO.setEstimateCost(rset.getString(6));
				proposalDTO.setSanctionedAmount(rset.getString(7));
				proposalDTO.setProposalDate(rset.getString(8));
				proposalDTO.setStatus(rset.getString(9));
				proposalDTO.setMemoNo(rset.getString(10));
				proposalDTO.setSubmitDate(rset.getString(11));
				proposalDTO.setSubmitSubject(rset.getString(12));
				proposalDTO.setSubmitRef(rset.getString(13));
				content = rset.getString(14);
				content = content.replaceAll("\\n","");
				content = content.replaceAll("\\r","<br>");
				proposalDTO.setSubmitContent(content);
				proposalDTO.setFlag(rset.getString(15));
								
				query = " SELECT NVL(P.programme_name,''), " 
					  + " NVL(SP.subprogramme_name,'') FROM "
					  + " rws_om_proposal_tbl OMP, rws_om_proposal_prog_lnk_tbl PP,"
					  + " rws_programme_tbl P,  rws_subprogramme_tbl SP "
					  + " WHERE OMP.om_proposal_id = PP.om_proposal_id "
					  + " AND PP.programme_code = P.programme_code "
					  + " AND PP.programme_code = SP.programme_code(+) "
					  + " AND PP.subprogramme_code = SP.subprogramme_code(+) "
					  + " AND OMP.om_proposal_id = '" + proposalId + "'";
				rset1 = stat1.executeQuery(query);
				programmes = new ArrayList();
				while(rset1.next())
				{
					programmeSubProgrammeBean = new ProgrammeSubProgrammeBean();
					programmeSubProgrammeBean.setProgrammeName(rset1.getString(1));
					programmeSubProgrammeBean.setSubprogrammeName(rset1.getString(2));
					programmes.add(programmeSubProgrammeBean);
				}
				proposalDTO.setProgrammes(programmes);
				
				sentProposals.add(proposalDTO);
			}
			
			proposalList.add(sentProposals);
			
			query = " SELECT OMPWT.action_to, OMP.om_proposal_id, "
				  + " OMP.financial_year, OMP.asset_code, AM.asset_name, "
				  + " OMP.estimate_cost, NVL(OMP.sanctioned_amount, '0'),"
				  + " TO_CHAR(OMP.prepared_on,'dd/mm/yyyy'), "
				  + " DECODE(OMP.flag, 'C', 'UNDER PROCESS', 'D','DEFERRED','T','TRANSMITTED TO OTHER DEPARTMENT', 'A','SANCTIONED'), "
				  + " OMPWT.memo_no, TO_CHAR(OMPWT.for_sub_date,'dd/mm/yyyy'),"
				  + " OMPWT.subject, NVL(OMPWT.ref,''), "
				  + " OMPWT.content, OMPWT.action_type "
				  + " FROM rws_om_proposal_tbl OMP,"
				  + " rws_om_proposal_workflow_tbl OMPWT, "
				  + " rws_asset_mast_tbl AM WHERE  "
				  + " (OMP.om_proposal_id = OMPWT.om_proposal_id) "
				  + " AND OMP.asset_code = AM.asset_code " 
				  + " AND OMPWT.action_to = '" + officeCode + "'";
			
			System.out.println("Received Proposals " + query);
			rset = stat.executeQuery(query);
			receivedProposals = new ArrayList();
			
			while(rset.next())
			{
				proposalDTO = new ProposalDTO();
				
				actionTo = rset.getString(1);
				proposalId = rset.getString(2);
				proposalDTO.setOfficeCode(actionTo);
				
				proposalDTO.setOfficeName(rwsOffices.getOfficeName(actionTo, true));
				proposalDTO.setProposalId(proposalId);
				proposalDTO.setFinancialYear(rset.getString(3));
				proposalDTO.setAssetCode(rset.getString(4));
				proposalDTO.setAssetName(rset.getString(5));
				proposalDTO.setEstimateCost(rset.getString(6));
				proposalDTO.setSanctionedAmount(rset.getString(7));
				proposalDTO.setProposalDate(rset.getString(8));
				proposalDTO.setStatus(rset.getString(9));
				proposalDTO.setMemoNo(rset.getString(10));
				proposalDTO.setSubmitDate(rset.getString(11));
				proposalDTO.setSubmitSubject(rset.getString(12));
				proposalDTO.setSubmitRef(rset.getString(13));
				content = rset.getString(14);
				content = content.replaceAll("\\n","");
				content = content.replaceAll("\\r","<br>");
				proposalDTO.setSubmitContent(content);
				proposalDTO.setFlag(rset.getString(15));
								
				query = " SELECT NVL(P.programme_name,''), " 
					  + " NVL(SP.subprogramme_name,'') FROM "
					  + " rws_om_proposal_tbl OMP, rws_om_proposal_prog_lnk_tbl PP,"
					  + " rws_programme_tbl P,  rws_subprogramme_tbl SP "
					  + " WHERE OMP.om_proposal_id = PP.om_proposal_id "
					  + " AND PP.programme_code = P.programme_code "
					  + " AND PP.programme_code = SP.programme_code(+) "
					  + " AND PP.subprogramme_code = SP.subprogramme_code(+) "
					  + " AND OMP.om_proposal_id = '" + proposalId + "'";
				rset1 = stat1.executeQuery(query);
				programmes = new ArrayList();
				while(rset1.next())
				{
					programmeSubProgrammeBean = new ProgrammeSubProgrammeBean();
					programmeSubProgrammeBean.setProgrammeName(rset1.getString(1));
					programmeSubProgrammeBean.setSubprogrammeName(rset1.getString(2));
					programmes.add(programmeSubProgrammeBean);
				}
				proposalDTO.setProgrammes(programmes);
				
				receivedProposals.add(proposalDTO);
			}
			
			proposalList.add(receivedProposals);
			
		}
		catch(Exception e)
		{	Debug.writeln("Exception in listOMProposals : \n" + e);			
		}
		finally
		{	if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){
				}
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){
				}
			}
		}
		
		return proposalList;
	}

// --------------------------------------------------------------------------------------------------

	
	public ProposalDTO getOMProposal(String omProposalId)
	{
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;
		
		query = " SELECT OMP.office_code, OMP.om_proposal_id, OMP.asset_code,"
			  + " AM.asset_name, OMP.financial_year, "
			  + " OMP.estimate_cost, OMP.sanctioned_amount,"
			  + " NVL(OMP.remarks,'') "
			  + " FROM rws_om_proposal_tbl OMP, rws_asset_mast_tbl AM "
			  + " WHERE	OMP.asset_code = AM.asset_code "
			  + " AND OMP.om_proposal_id = '" + omProposalId + "'";
		
		try
		{
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			rset = stat.executeQuery(query);
			if(rset.next())
			{
				proposalDTO = new ProposalDTO();
				proposalDTO.setProposalId(rset.getString(2));
				proposalDTO.setAssetCode(rset.getString(3));
				proposalDTO.setAssetName(rset.getString(4));
				proposalDTO.setFinancialYear(rset.getString(5));
				proposalDTO.setEstimateCost(rset.getString(6));
				proposalDTO.setSanctionedAmount(rset.getString(7));
				proposalDTO.setRemarks(rset.getString(8));
			}
		}
		catch(Exception e)
		{	Debug.writeln("Exception in getOMProposal : \n" + e);			
		}
		finally
		{	if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){
				}
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){
				}
			}
		}
		return proposalDTO;
	}
	
	public ArrayList getOMProposalProgrammes(String omProposalId)
	{
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;
		ArrayList programmeSubprogrammes = null;
		try
		{
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			query = " SELECT programme_code, subprogramme_code FROM "
				  + " rws_om_proposal_tbl OMP, rws_om_proposal_prog_lnk_tbl PL "
				  + " WHERE OMP.om_proposal_id = PL.om_proposal_id "
				  + " AND PL.om_proposal_id = '" + omProposalId + "'";
			rset = stat.executeQuery(query);
			ProgrammeSubProgrammeBean programmeSubProgrammeBean = null;
			programmeSubprogrammes = new ArrayList();
			while(rset.next())
			{
				programmeSubProgrammeBean = new ProgrammeSubProgrammeBean();
				programmeSubProgrammeBean.setProgrammeCode(rset.getString(1));
				programmeSubProgrammeBean.setSubprogrammeCode(rset.getString(2));
				programmeSubprogrammes.add(programmeSubProgrammeBean); 
			}
		}
		catch(Exception e)
		{	Debug.writeln("Exception in getOMProposalProgrammes : \n" + e);			
		}
		finally
		{	if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){
				}
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){
				}
			}
		}
		return programmeSubprogrammes;
	}
	
	public boolean editOMProposal(ProposalDTO proposalDTO, String[] programmeCodes)
	{
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;

		String officeCode = proposalDTO.getOfficeCode();
		String omProposalId = proposalDTO.getProposalId();
								
		try
		{
			conn = dataSource.getConnection();
			conn.setAutoCommit(false);
			stat = conn.createStatement();

			query = " UPDATE rws_om_proposal_tbl SET "
				  + " estimate_cost = '" + proposalDTO.getEstimateCost() + "', "
				  + " financial_year = '" + proposalDTO.getFinancialYear() + "', "
				  + " remarks = '" + proposalDTO.getRemarks() + "'"
				  + " WHERE om_proposal_id = '" + omProposalId + "'";
			stat.addBatch(query);
			
			query = " DELETE FROM rws_om_proposal_prog_lnk_tbl "
				  + " WHERE om_proposal_id='" + omProposalId + "'";
			stat.addBatch(query);
			String programmeCode = "";
			String subprogrammeCode = null;
			int index = 0;
			int programmeLength = programmeCodes.length;
			for(int j=0; j<programmeLength; j++)
			{
				programmeCode = programmeCodes[j];
				subprogrammeCode = "";
				index = programmeCode.indexOf("_");
				if(index != -1)
				{	
					programmeCode = programmeCode.substring(0,index);
					subprogrammeCode = programmeCodes[j].substring(index+1,programmeCodes[j].length());
				}
				
				query = " INSERT INTO rws_om_proposal_prog_lnk_tbl "
					  + " VALUES('" + omProposalId + "', "
					  + " '" + programmeCode + "', '" + subprogrammeCode + "')";
				
				stat.addBatch(query);
			}
			
			flag = true;
			int[] updateCounts = stat.executeBatch();
			for(int i=0; i<updateCounts.length; i++)
			{
				if(updateCounts[i] == 0)
					flag = false;
			}
			if(flag)
				conn.commit();

			conn.setAutoCommit(true);
		}
		catch(Exception e)
		{	Debug.writeln("Exception in editOMProposal : \n" + e);			
		}
		finally
		{	if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){
				}
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){
				}
			}
		}
		return flag;
	}
	
	public boolean editOMAdminProposal(ProposalDTO proposalDTO, String[] programmeCodes)
	{
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;

		String officeCode = proposalDTO.getOfficeCode();
		String omProposalId = proposalDTO.getProposalId();
		
		try
		{
			conn = dataSource.getConnection();
			conn.setAutoCommit(false);
			stat = conn.createStatement();
							
			query = " UPDATE rws_om_proposal_tbl SET "
				  + " estimate_cost = '" + proposalDTO.getEstimateCost() + "', "
				  + " sanctioned_amount = '" + proposalDTO.getSanctionedAmount() + "', "
				  + " financial_year = '" + proposalDTO.getFinancialYear() + "', "
				  + " remarks = '" + proposalDTO.getRemarks() + "'"
				  + " WHERE om_proposal_id = '" + omProposalId + "'";
			stat.addBatch(query);
			
			query = " DELETE FROM rws_om_proposal_prog_lnk_tbl "
				  + " WHERE om_proposal_id='" + omProposalId + "'";
			stat.addBatch(query);
			String programmeCode = "";
			String subprogrammeCode = null;
			int index = 0;
			int programmeLength = programmeCodes.length;
			for(int j=0; j<programmeLength; j++)
			{
				programmeCode = programmeCodes[j];
				subprogrammeCode = "";
				index = programmeCode.indexOf("_");
				if(index != -1)
				{	
					programmeCode = programmeCode.substring(0,index);
					subprogrammeCode = programmeCodes[j].substring(index+1,programmeCodes[j].length());
				}
				
				query = " INSERT INTO rws_om_proposal_prog_lnk_tbl "
					  + " VALUES('" + omProposalId + "', "
					  + " '" + programmeCode + "', '" + subprogrammeCode + "')";
				
				stat.addBatch(query);
			}
			
			flag = true;
			int[] updateCounts = stat.executeBatch();
			for(int i=0; i<updateCounts.length; i++)
			{
				if(updateCounts[i] == 0)
					flag = false;
			}
			if(flag)
				conn.commit();

			conn.setAutoCommit(true);
		}
		catch(Exception e)
		{	Debug.writeln("Exception in editOMAdminProposal : \n" + e);			
		}
		finally
		{	if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){ }
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){ }
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){ }
			}
		}

		return flag;
	}
	
	
	public ArrayList getOMProposalTracking(String omProposalId)
	{
		System.out.println("getOMProposalTracking() called.");
		Connection conn = null;
		Statement stat = null, stat1 = null;
		ResultSet rset = null, rset1 = null;
		ArrayList proposalTracks = new ArrayList();
		ArrayList consideredTracks = new ArrayList();
		ArrayList actualTracks = new ArrayList();
		ArrayList sanctionedTracks = new ArrayList();

		ArrayList programmes = null;
		ProposalDTO proposalDTO = null;		
		RwsOffices rwsOffices = new RwsOffices(dataSource);
		ProgrammeSubProgrammeBean programmeSubProgrammeBean = null;
		try
		{
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			stat1 = conn.createStatement();	
			/* Query for selecting proposal track in which it has been considered */
			query = " SELECT M.office_code, M.asset_code, A.asset_name, M.financial_year,"
				  + " M.estimate_cost, P.user_id, D.designation_acr, "
				  + " TO_CHAR(M.prepared_on, 'dd/mm/yyyy'), M.remarks, NVL(M.no_of_habs, 0)  "
				  + " FROM rws_om_proposal_mirror_tbl M, rws_asset_mast_tbl A, "
				  + " rws_password_tbl P, rws_designation_tbl D " 
				  + " WHERE M.asset_code = A.asset_code "
				  + " AND M.prepared_by = P.user_id " 
				  + " AND P.designation_code = D.designation_code "
				  + " AND M.track_no = 0 "
				  + " AND M.om_proposal_id = '" + omProposalId + "'";
			
			rset = stat.executeQuery(query);
			if(rset.next())
			{
				proposalDTO = new ProposalDTO();
				
				proposalDTO.setProposalId(omProposalId);
				proposalDTO.setOfficeName(rwsOffices.getOfficeName(rset.getString(1), true));
				proposalDTO.setAssetCode(rset.getString(2));
				proposalDTO.setAssetName(rset.getString(3));
				proposalDTO.setFinancialYear(rset.getString(4));
				proposalDTO.setEstimateCost(rset.getString(5));
				proposalDTO.setUserId(rset.getString(6) + ", " +rset.getString(7));
				proposalDTO.setProposalDate(rset.getString(8));
				proposalDTO.setRemarks(rset.getString(9));
				proposalDTO.setNoOfHabs(rset.getString(10));
				
				query = " SELECT NVL(P.programme_name,''), " 
					  + " NVL(SP.subprogramme_name,'') FROM "
					  + " rws_om_proposal_tbl OMP, rws_om_proposal_prog_lnk_tbl PP,"
					  + " rws_programme_tbl P,  rws_subprogramme_tbl SP "
					  + " WHERE OMP.om_proposal_id = PP.om_proposal_id "
					  + " AND PP.programme_code = P.programme_code "
					  + " AND PP.programme_code = SP.programme_code(+) "
					  + " AND PP.subprogramme_code = SP.subprogramme_code(+) "
					  + " AND OMP.om_proposal_id = '" + omProposalId + "'";
				rset1 = stat1.executeQuery(query);
				programmes = new ArrayList();
				while(rset1.next())
				{
					programmeSubProgrammeBean = new ProgrammeSubProgrammeBean();
					programmeSubProgrammeBean.setProgrammeName(rset1.getString(1));
					programmeSubProgrammeBean.setSubprogrammeName(rset1.getString(2));
					programmes.add(programmeSubProgrammeBean);
				}
				proposalDTO.setProgrammes(programmes);
				consideredTracks.add(proposalDTO);
			}
						
			proposalTracks.add(consideredTracks);
			/* Query for proposal tracks after consideration but before sanction */
			query = " SELECT M.office_code, M.asset_code, A.asset_name, "
				  + " M.financial_year, M.estimate_cost, M.remarks, M.no_of_habs, "
				  + " M.sanctioned_amount, M.flag, M.admin_no, "
				  + " TO_CHAR(M.admin_date, 'dd/mm/yyyy'), M.go_no, "
				  + " DECODE(M.state_central,'S','STATE','C','CENTRE'), M.admn_sanc_auth, M.work_id, "
				  + " W.track_no, W.memo_no, TO_CHAR(W.for_sub_date, 'dd/mm/yyyy'), "
				  + " W.subject, NVL(W.ref,''), W.content, "
				  + " W.action_from, W.action_to, "
				  + " DECODE(W.action_type, 'S', 'SUBMITTED', 'F','FORWARDED', 'D', 'DEFERRED', 'T','TRANSMITTED TO OTHER DEPARTMENT'), "
				  + " TO_CHAR(W.action_date, 'dd/mm/yyyy'), "
				  + " P1.user_id, D1.designation_acr, "
				  + " P2.user_id, D2.designation_acr "
				  + " FROM rws_om_proposal_workflow_tbl W, rws_om_proposal_mirror_tbl M, "
				  + " rws_asset_mast_tbl A, "
				  + " rws_password_tbl P1, rws_password_tbl P2, "
				  + " rws_designation_tbl D1, rws_designation_tbl D2 "
				  + " WHERE M.om_proposal_id = W.om_proposal_id "
				  + " AND M.asset_code = A.asset_code "
				  + " AND (W.sent_by = P1.user_id "
				  + "      AND P1.designation_code = D1.designation_code) "
				  + " AND (W.sent_to = P2.user_id "
				  + "      AND P2.designation_code = D2.designation_code) "
				  + " AND M.track_no = W.track_no "
				  + " AND M.om_proposal_id = '" + omProposalId + "'"
				  + " ORDER BY M.track_no ";
			rset = stat.executeQuery(query);
			
			while(rset.next())
			{	
				proposalDTO = new ProposalDTO();
				
				proposalDTO.setProposalId(omProposalId);
				proposalDTO.setOfficeName(rwsOffices.getOfficeName(rset.getString(1), true));
				proposalDTO.setAssetCode(rset.getString(2));
				proposalDTO.setAssetName(rset.getString(3));
				proposalDTO.setFinancialYear(rset.getString(4));
				proposalDTO.setEstimateCost(rset.getString(5));
				proposalDTO.setRemarks(rset.getString(6));
				proposalDTO.setNoOfHabs(rset.getString(7));
				proposalDTO.setSanctionedAmount(rset.getString(8));
				proposalDTO.setFlag(rset.getString(9));
				proposalDTO.setAdminNo(rset.getString(10));
				proposalDTO.setAdminDate(rset.getString(11));
				proposalDTO.setGoNo(rset.getString(12));
				proposalDTO.setSanctionedAt(rset.getString(13));
				proposalDTO.setSanctioningAuthority(rset.getString(14));
				proposalDTO.setWorkId(rset.getString(15));
				proposalDTO.setTrackNo(rset.getString(16));
				proposalDTO.setLetterNo(rset.getString(17));
				proposalDTO.setSubmitDate(rset.getString(18));
				proposalDTO.setSubmitSubject(rset.getString(19));
				proposalDTO.setSubmitRef(rset.getString(20));
				proposalDTO.setSubmitContent(rset.getString(21));
				proposalDTO.setActionFrom(rwsOffices.getOfficeName(rset.getString(22), true));
				proposalDTO.setActionTo(rwsOffices.getOfficeName(rset.getString(23), true));
				proposalDTO.setActionType(rset.getString(24));
				proposalDTO.setActionDate(rset.getString(25));
				proposalDTO.setSentBy(rset.getString(26) + ", " + rset.getString(27));
				proposalDTO.setSentTo(rset.getString(28) + ", " + rset.getString(29));
				
				query = " SELECT NVL(P.programme_name,''), " 
					  + " NVL(SP.subprogramme_name,'') FROM "
					  + " rws_om_proposal_tbl OMP, rws_om_proposal_prog_lnk_tbl PP,"
					  + " rws_programme_tbl P,  rws_subprogramme_tbl SP "
					  + " WHERE OMP.om_proposal_id = PP.om_proposal_id "
					  + " AND PP.programme_code = P.programme_code "
					  + " AND PP.programme_code = SP.programme_code(+) "
					  + " AND PP.subprogramme_code = SP.subprogramme_code(+) "
					  + " AND OMP.om_proposal_id = '" + omProposalId + "'";
				rset1 = stat1.executeQuery(query);
				programmes = new ArrayList();
				while(rset1.next())
				{
					programmeSubProgrammeBean = new ProgrammeSubProgrammeBean();
					programmeSubProgrammeBean.setProgrammeName(rset1.getString(1));
					programmeSubProgrammeBean.setSubprogrammeName(rset1.getString(2));
					programmes.add(programmeSubProgrammeBean);
				}
				proposalDTO.setProgrammes(programmes);
				
				actualTracks.add(proposalDTO);
			}
			proposalTracks.add(actualTracks);


			/* Query for selecting proposal track in which it has been sanctioned */
			query = " SELECT M.modi_office_code, M.financial_year, M.estimate_cost,"
				  + " M.sanctioned_amount, M.admin_no, TO_CHAR(M.admin_date, 'dd/mm/yyyy'), "
				  + " go_no, NVL(DECODE(state_central, 'S', 'STATE', 'C', 'CENTRE'),' '), "
				  + " NVL(admn_sanc_auth, ' '), M.work_id, P.user_id, D.designation_acr, " 
				  + " M.remarks, NVL(M.no_of_habs, 0)  "
				  + " FROM rws_om_proposal_mirror_tbl M, rws_password_tbl P, rws_designation_tbl D " 
				  + " WHERE M.prepared_by = P.user_id " 
				  + " AND P.designation_code = D.designation_code "
				  + " AND M.track_no = 99 AND M.om_proposal_id = '" + omProposalId + "'";
			
			rset = stat.executeQuery(query);
			if(rset.next())
			{
				proposalDTO = new ProposalDTO();
				
				proposalDTO.setProposalId(omProposalId);
				proposalDTO.setOfficeName(rwsOffices.getOfficeName(rset.getString(1), true));
				proposalDTO.setFinancialYear(rset.getString(2));
				proposalDTO.setEstimateCost(rset.getString(3));
				proposalDTO.setSanctionedAmount(rset.getString(4));
				proposalDTO.setAdminNo(rset.getString(5));
				proposalDTO.setAdminDate(rset.getString(6));
				proposalDTO.setGoNo(rset.getString(7));
				proposalDTO.setSanctionedAt(rset.getString(8));
				proposalDTO.setSanctioningAuthority(rset.getString(9));
				proposalDTO.setWorkId(rset.getString(10));
				proposalDTO.setUserId(rset.getString(11) + ", " +rset.getString(12));
				proposalDTO.setRemarks(rset.getString(13));
				proposalDTO.setNoOfHabs(rset.getString(14));
				
				query = " SELECT NVL(P.programme_name,''), " 
					  + " NVL(SP.subprogramme_name,'') FROM "
					  + " rws_om_proposal_mirror_tbl OMP, rws_om_proposal_prog_lnk_tbl PP,"
					  + " rws_programme_tbl P,  rws_subprogramme_tbl SP "
					  + " WHERE OMP.om_proposal_id = PP.om_proposal_id "
					  + " AND PP.programme_code = P.programme_code "
					  + " AND PP.programme_code = SP.programme_code(+) "
					  + " AND PP.subprogramme_code = SP.subprogramme_code(+) "
					  + " AND OMP.om_proposal_id = '" + omProposalId + "'";
				rset1 = stat1.executeQuery(query);
				programmes = new ArrayList();
				while(rset1.next())
				{
					programmeSubProgrammeBean = new ProgrammeSubProgrammeBean();
					programmeSubProgrammeBean.setProgrammeName(rset1.getString(1));
					programmeSubProgrammeBean.setSubprogrammeName(rset1.getString(2));
					programmes.add(programmeSubProgrammeBean);
				}
				proposalDTO.setProgrammes(programmes);
				sanctionedTracks.add(proposalDTO);
			}

			proposalTracks.add(sanctionedTracks);
		}
		catch(Exception e)
		{
			System.out.println("O&M Proposal Tracking: \n " + e.getMessage());
		}
		finally
		{	if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){
				}
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){
				}
			}
		}
		return proposalTracks;
	}
	
	public ArrayList getRepView(String officeCode) 
	{
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;

		//System.out.println("In ProposalDAO getRepView() officeCode: " + officeCode);
		try
		{
			conn = dataSource.getConnection();
			
			query = " SELECT UPPER(RP.proposal_name), RP.proposal_id, " 
				  + " TO_CHAR(RP.rep_date,'dd/mm/yyyy') as proposal_date,"
				  + " RP.no_of_habs, A.type_of_asset_name, "
				  + " UPPER(NVL(P.programme_name,'')), "
				  + " UPPER(NVL(S.subprogramme_name,'')), "
				  + " RP.estimate_cost,  "
				  + " UPPER(NVL(RP.remarks, '')) "
				  + " FROM "
				  + " rws_rep_proposal_tbl RP, rws_programme_tbl P, "
				  + " rws_subprogramme_tbl S, rws_asset_type_tbl A "
				  + " WHERE RP.type_of_asset = A.type_of_asset_code(+) AND "
				  + " RP.programme_code = P.programme_code (+) AND "
				  + " (RP.subprogramme_code = S.subprogramme_code(+) AND "
				  + " RP.programme_code = S.programme_code(+) ) "
				  + " AND RP.office_code = '" + officeCode + "' "
				  + " AND RP.flag = 'N' "
				  + " ORDER BY proposal_date ";
				 
			stat = conn.createStatement();
			rset = stat.executeQuery(query);
			representativeProposals = new ArrayList();
			
			while(rset.next())
			{
				proposalDTO = new ProposalDTO();
				proposalDTO.setProposalName(rset.getString(1));
				proposalDTO.setProposalId(rset.getString(2));
				proposalDTO.setProposalDate(rset.getString(3));
				proposalDTO.setNoOfHabs(rset.getString(4));
				proposalDTO.setAssetName(rset.getString(5));
				proposalDTO.setProgrammeName(rset.getString(6));
				proposalDTO.setSubprogrammeName(rset.getString(7));
				proposalDTO.setEstimateCost(rset.getString(8));
				proposalDTO.setRemarks(rset.getString(9));
				representativeProposals.add(proposalDTO);
			}
		}
		catch(Exception e)
		{	Debug.writeln("Exception in getRepView :\n" + e);			
		}
		finally
		{	if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){ }
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){ }
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){ }
			}
		}
		System.out.println("representativeProposals.size() in ProposalDAO(): " + 
							representativeProposals.size());
		return representativeProposals;
	}
	

	public boolean siteIdentification(String[] proposalIds, String officeCode)
	{
		Connection conn = null;
		Statement stat = null;
		
		try
		{
			conn = dataSource.getConnection();
			conn.setAutoCommit(false);
			stat = conn.createStatement();
			
			String circleOfficeCode = officeCode.substring(1,3);
			String divisionOfficeCode = officeCode.substring(3,4);
			String subdivisionOfficeCode = officeCode.substring(4,6);

			for(int i=0; i<proposalIds.length; i++)
			{
				query = " INSERT INTO rws_source_iden_fin_tbl(circle_office_code, division_office_code, "
					  + " subdivision_office_code, work_id) "
					  + " (SELECT '" + circleOfficeCode + "', '" + divisionOfficeCode + "', "
					  + " '" + subdivisionOfficeCode + "', work_id " 
					  + " FROM rws_work_proposal_tbl "
					  + " WHERE proposal_id ='" + proposalIds[i] + "')";

				stat.addBatch(query);
			}
			
			flag = true;
			int[] updateCounts = stat.executeBatch();
			for(int i=0; i<updateCounts.length; i++)
			{
				if(updateCounts[i] == 0)
					flag = false;
			}
			if(flag)
				conn.commit();

			conn.setAutoCommit(true);
		}
		catch(SQLException sqle)
		{
			Debug.writeln("SQL Exception in siteIdentification :\n" + sqle);
			flag = false;
			System.out.println("sqle.getErrorCode() " + sqle.getErrorCode());
			if(sqle.getErrorCode() == 1)
				errorMessage = "Proposal already sent to site identification.";
		}
		catch(Exception e)
		{	Debug.writeln("Exception in siteIdentification :\n" + e);
			flag = false;
		}
		finally
		{	if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){
				}
			}
		}
		
		return flag;
	}

	public boolean updateNewProposal(ProposalDTO proposalDTO, String[] habCodes, String type)
	{
		Connection conn = null;
		Statement stat = null;

		try
		{
			conn = dataSource.getConnection();
			conn.setAutoCommit(false);
			stat = conn.createStatement();
			String proposalId = proposalDTO.getProposalId();
			
			int habCount =0;
			if(habCodes != null && habCodes.length > 0)
			{
				query = " DELETE FROM rws_proposal_hab_lnk_tbl "
					  + " WHERE proposal_id='" + proposalId + "'"; 
				System.out.println("query 2 " + query);
				stat.addBatch(query);
				
				for(int i =0; i<habCodes.length; i++)
				{	habCount++;
					query = " INSERT INTO rws_proposal_hab_lnk_tbl(proposal_id, hab_code) "
						  + " VALUES('" + proposalId + "', '" + habCodes[i] + "')";
					System.out.println("query 3 " + query);
					stat.addBatch(query);
				}
				
			}
			
			if(type.equals("ord"))
			{
				query = " UPDATE rws_work_proposal_tbl "
					  + " SET proposal_name = '" + proposalDTO.getProposalName() + "', "  
					  + " programme_code = '" + proposalDTO.getProgrammeCode() + "', "
					  + " subprogramme_code = '" + proposalDTO.getSubprogrammeCode() + "',"
					  + " no_of_habs =" + habCount + ", "
					  + " estimate_cost =" + proposalDTO.getEstimateCost() + ", "
					  + " type_of_asset ='" + proposalDTO.getTypeOfAsset() + "', "
					  + " priority_code ='" + proposalDTO.getPriorityCode() + "' "
					  + " WHERE proposal_id = '" + proposalId + "'";
				stat.addBatch(query);
			}
			else
			if(type.equals("adm"))
			{
				query = " UPDATE rws_work_proposal_tbl "
					  + " SET proposal_name = '" + proposalDTO.getProposalName() + "', "  
					  + " no_of_habs =" + habCount + ", "
					  + " programme_code = '" + proposalDTO.getProgrammeCode() + "', "
					  + " subprogramme_code = '" + proposalDTO.getSubprogrammeCode() + "',"
					  + " priority_code ='" + proposalDTO.getPriorityCode() + "', "
					  + " estimate_cost =" + proposalDTO.getEstimateCost() + ", "
					  + " sanction_amount =" + proposalDTO.getSanctionedAmount() + ", "
					  + " type_of_asset ='" + proposalDTO.getTypeOfAsset() + "' ";
					if(proposalDTO.getPhased().equals("Y"))
					{
						query += ", phased='" + proposalDTO.getPhased() + "', "
						      +  " phase_no = '" + proposalDTO.getPhaseNo() + "' ";
					}

				query += " WHERE proposal_id = '" + proposalId + "'";
				System.out.println("proposal query is " + query);
				stat.addBatch(query);

				if(proposalDTO.getPhased().equals("Y"))
				{
					query = " INSERT INTO rws_proposal_phase_tbl VALUES(" 
						  + " '" + proposalDTO.getProposalId() + "', "
						  + " '" + proposalDTO.getPhaseNo() + "', "
						  + " '') ";
					System.out.println("phase query is " + query);
					stat.addBatch(query);
				}
				
				String centralShare = proposalDTO.getCentralShare();
				String stateShare = proposalDTO.getStateShare();
				String publicContribution = proposalDTO.getPublicContribution();
				String gpShare = proposalDTO.getGpShare();
				String others = proposalDTO.getOthers();

				if(!centralShare.equals("") || !stateShare.equals("") || !gpShare.equals("") ||
					 !publicContribution.equals("") || !others.equals(""))
				{
					query = " INSERT INTO rws_proposal_share_tbl VALUES(" 
						  + " '" + proposalDTO.getProposalId() + "', "
						  + " '" + proposalDTO.getCentralShare() + "', "
						  + " '" + proposalDTO.getStateShare() + "', "
						  + " '" + proposalDTO.getGpShare() + "', "
						  + " '" + proposalDTO.getPublicContribution() + "', "
						  + " '" + proposalDTO.getOthers() + "') ";
					System.out.println("share query is " + query);
					stat.addBatch(query);
				}

			}
			
			flag = true;
			int[] updateCounts = stat.executeBatch();
			for(int i=0; i<updateCounts.length; i++)
			{
				System.out.println("updateCounts["+i+"] == " + updateCounts[i]);
				if(updateCounts[i] == 0)
					flag = false;
			}
			if(flag)
				conn.commit();

			conn.setAutoCommit(true);
		}
		catch(Exception e)
		{	Debug.writeln("Exception in updateNewProposal :\n" + e);			
		}
		finally
		{			
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){ }
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){ }
			}
		}
		return flag;
	}

	public boolean updateRepProposal(ProposalDTO proposalDTO, String[] habCodes) 
	{
		Connection conn = null;
		Statement stat = null;

		try
		{
			conn = dataSource.getConnection();
			conn.setAutoCommit(false);
			stat = conn.createStatement();
			String proposalId = proposalDTO.getProposalId();
			query = " INSERT INTO rws_work_proposal_mirror_tbl(office_code, no_of_habs, "
				  + " proposal_id, proposal_name, programme_code, subprogramme_code, "
				  + " estimate_cost, prepared_by, prepared_on, state_central, "
				  + " work_id, remarks, flag, priority_code, type_of_asset, admin_no, admin_date,"
				  + " goms_no, admin_sanc_auth, sanction_amount ) "
				  + " (SELECT office_code, no_of_habs, "
				  + " proposal_id, proposal_name, programme_code, subprogramme_code, "
				  + " estimate_cost, prepared_by, prepared_on, state_central, "
				  + " work_id, remarks, flag, priority_code, type_of_asset, admin_no, admin_date,"
				  + " goms_no, admin_sanc_auth, sanction_amount "
				  + " FROM rws_work_proposal_tbl "
				  + " WHERE proposal_id = '" + proposalId + "')";
			
			stat.addBatch(query);

			if(habCodes != null && habCodes.length > 0)
			{
				query = " INSERT INTO rws_proposal_hl_mirror_tbl "
					  + " (SELECT * FROM rws_proposal_hab_lnk_tbl "
					  + " WHERE proposal_id='" + proposalId + "')"; 
				
				stat.addBatch(query);
				
				query = " DELETE FROM rws_proposal_hab_lnk_tbl "
					  + " WHERE proposal_id='" + proposalId + "'"; 
				
				stat.addBatch(query);
				
				for(int i =0; i<habCodes.length; i++)
				{	
					query = " INSERT INTO rws_proposal_hab_lnk_tbl(proposal_id, habcode) "
						  + " VALUES('" + proposalId + "', '" + habCodes[i] + "')"; 
					stat.addBatch(query);
				}
			}
			
			query = " UPDATE rws_work_proposal_tbl "
				  + " SET proposal_name = '" + proposalDTO.getProposalName() + "', "  
				  + " programme_code = '" + proposalDTO.getProgrammeCode() + "', "
				  + " subprogramme_code = '" + proposalDTO.getSubprogrammeCode() + "',"
				  + " no_of_habs =" + proposalDTO.getNoOfHabs() + ", "
				  + " estimate_cost =" + proposalDTO.getEstimateCost() + ", "
				  + " type_of_asset ='" + proposalDTO.getTypeOfAsset() + "', "
				  + " priority_code ='" + proposalDTO.getPriorityCode() + "' "
				  + " WHERE proposal_id = '" + proposalId + "'";
			
			stat.addBatch(query);

			stat.executeBatch();
		}
		catch(Exception e)
		{	Debug.writeln("Exception in updateRepProposal :\n" + e);			
		}
		finally
		{			
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){ }
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){ }
			}
		}
				
		return flag;
	}


	public ArrayList getSelectedHabitations(String proposalId)
	{
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;

		ArrayList habs = new ArrayList();
		try
		{
			query = " SELECT PR.panch_code, PR.panch_name, "
				  + " (HD.census_plain_popu + HD.census_sc_popu + HD.census_st_popu), "
				  + " HD.coverage_status FROM rws_panchayat_raj_tbl PR, "
				  + " rws_habitation_directory_tbl HD, rws_proposal_hab_lnk_tbl HL "
				  + " WHERE PR.panch_code = HL.hab_code "
				  + " AND PR.panch_code = HD.hab_code "
				  + " AND HL.proposal_id ='" +  proposalId + "'";
			
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			rset = stat.executeQuery(query);
			
			RwsLocationBean rwsLocationBean = null;
			while(rset.next())
			{
				rwsLocationBean = new RwsLocationBean();
				rwsLocationBean.setHabCode(rset.getString(1));
				rwsLocationBean.setHabName(rset.getString(2));
				rwsLocationBean.setPopulation(rset.getString(3));
				rwsLocationBean.setStatus(rset.getString(4));
				habs.add(rwsLocationBean);
			}
		}
		catch(Exception e)
		{	Debug.writeln("Exception in getSelectedHabitations :\n" + e);			
		}
		finally
		{	if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){ }
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){ }
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){ }
			}
		}
		return habs;
	}
	
	public ProposalDTO getProposalDetails(String proposalId)
	{
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;

		try
		{
			query = " SELECT office_code, proposal_id, proposal_name, no_of_habs, "
				  + " programme_code, subprogramme_code, type_of_asset, priority_code, "
				  + " estimate_cost, sanction_amount, phased, phase_no "
				  + " FROM rws_work_proposal_tbl WHERE proposal_id = '" + proposalId + "'";
			
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			rset = stat.executeQuery(query);
			proposalDTO = new ProposalDTO();
			
			
			while(rset.next())
			{
				proposalDTO.setOfficeCode(rset.getString(1));
				proposalDTO.setProposalId(rset.getString(2));
				proposalDTO.setProposalName(rset.getString(3));
				proposalDTO.setNoOfHabs(rset.getString(4));
				proposalDTO.setProgrammeCode(rset.getString(5));
				proposalDTO.setSubprogrammeCode(rset.getString(6));
				proposalDTO.setTypeOfAsset(rset.getString(7));
				proposalDTO.setPriorityCode(rset.getString(8));
				proposalDTO.setEstimateCost(rset.getString(9));
				proposalDTO.setSanctionedAmount(rset.getString(10));
				proposalDTO.setPhased(rset.getString(11));
				proposalDTO.setPhaseNo(rset.getString(12));
			}
		}
		catch(Exception e)
		{	Debug.writeln("Exception in getProposalDetails :\n" + e);			
		}
		finally
		{	if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){ }
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){ }
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){ }
			}
		}
				
		return proposalDTO;
	}
	
	public boolean deleteRepProposal(String proposalId)
	{
		Connection conn = null;
		Statement stat = null;

		try
		{
			conn = dataSource.getConnection();
			conn.setAutoCommit(false);
			stat = conn.createStatement();
			
			query = " DELETE FROM rws_proposal_hab_lnk_tbl WHERE proposal_id = '" + proposalId + "'"; 
			stat.addBatch(query);
			
			query = " DELETE FROM rws_rep_proposal_tbl WHERE proposal_id = '" + proposalId + "'"; 
			stat.addBatch(query);

			flag = true;
			int[] updateCounts = stat.executeBatch();
			for(int i=0; i<updateCounts.length; i++)
			{
				if(updateCounts[i] == 0)
					flag = false;
			}
			if(flag)
				conn.commit();

			conn.setAutoCommit(true);
		}
		catch(Exception e)
		{	Debug.writeln("Exception in deleteRepProposal :\n" + e);			
		}
		finally
		{	
			if(stat != null)
			{	try
				{	
					stat.close();
				}
				catch(SQLException sqle){ }
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){ }
			}
		}

		return flag;
	}

	public ProposalDTO getOtherDetails(String proposalId)
	{
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;
		try
		{
			query = " SELECT UPPER(C.constituency_name), UPPER(R.rep_name), UPPER(P.rep_name), "
				  + " UPPER(NVL(P.rep_address,'<span class=notAvailable>NOT MENTIONED</span>')), "
				  + " TO_CHAR(rep_date,'dd/mm/yyyy'), "
				  + " UPPER(NVL(P.endorsed_by,'<span class=notAvailable>NOT MENTIONED</span>')), "
				  + " NVL(P.endorsement_no,'<span class=notAvailable>NOT MENTIONED</span>'), "
				  + " NVL(TO_CHAR(P.endorsement_date,'dd/mm/yyyy'),'"
				  + " <span class=notAvailable>NOT MENTIONED</span>'), "
				  + " NVL(P.recommendations,'<span class=notAvailable>NOT MENTIONED</span>'), "
				  + " NVL(PR.priority_description,'<span class=notAvailable>NOT MENTIONED</span>'), "
				  + " NVL(P.description,'<span class=notAvailable>NOT MENTIONED</span>'), "
				  + " NVL(P.remarks, '<span class=notAvailable>NOT MENTIONED</span>')"
				  + " FROM rws_rep_proposal_tbl P, rws_public_rep_tbl R, rws_priority_tbl PR,"
				  + " rws_constituency_tbl C"
				  + " WHERE P.proposal_id='" + proposalId + "' AND (P.rep_code = R.rep_code) "
				  + " AND P.priority_code = PR.priority_code (+) "
				  + " AND (substr(P.lead_hab_code,3,3) = C.constituency_code AND C.rep_code='01')";
			
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			rset = stat.executeQuery(query);
			proposalDTO = new ProposalDTO();		
			
			if(rset.next())
			{	
				proposalDTO.setConstituencyName(rset.getString(1));
				proposalDTO.setRepCode(rset.getString(2));
				proposalDTO.setRepName(rset.getString(3));
				proposalDTO.setRepAddress(rset.getString(4));
				proposalDTO.setRepDate(rset.getString(5));
				proposalDTO.setEndorsedBy(rset.getString(6));
				proposalDTO.setEndorsementNo(rset.getString(7));
				proposalDTO.setEndorsementDate(rset.getString(8));
				proposalDTO.setRecommendations(rset.getString(9));
				proposalDTO.setPriorityCode(rset.getString(10));
				proposalDTO.setDescription(rset.getString(11));
				proposalDTO.setRemarks(rset.getString(12));
			}
		}
		catch(Exception e)
		{	Debug.writeln("Exception in getOtherDetails :\n" + e);			
		}
		finally
		{	if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){
				}
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){
				}
			}
		}
		
		return proposalDTO;
	}
	
	public ProposalDTO getRepEditData(String proposalId)
	{
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;
		try
		{
			query = " SELECT rep_code, NVL(UPPER(rep_name),''), NVL(UPPER(rep_address),''), "
				  + " TO_CHAR(rep_date,'dd/mm/yyyy'), NVL(UPPER(endorsed_by),''), "
				  + " NVL(UPPER(endorsement_no),''), NVL(TO_CHAR(endorsement_date,'dd/mm/yyyy'),''), "
				  + " recommendations, UPPER(proposal_name), proposal_id, no_of_habs, programme_code, "
				  + " subprogramme_code, priority_code, type_of_asset, estimate_cost, "
				  + " UPPER(remarks), NVL(UPPER(description),''), "
				  + " lead_hab_code, minister_for, others, constituency_code "
				  + " FROM rws_rep_proposal_tbl "
				  + " WHERE UPPER(flag)='N' AND proposal_id = '" + proposalId + "'";
			
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			rset = stat.executeQuery(query);
			proposalDTO = new ProposalDTO();
			if(rset.next())
			{
				proposalDTO.setRepCode(rset.getString(1));
				proposalDTO.setRepName(rset.getString(2));
				proposalDTO.setRepAddress(rset.getString(3));
				proposalDTO.setRepDate(rset.getString(4));
				proposalDTO.setEndorsedBy(rset.getString(5));
				proposalDTO.setEndorsementNo(rset.getString(6));
				proposalDTO.setEndorsementDate(rset.getString(7));
				proposalDTO.setRecommendations(rset.getString(8));
				proposalDTO.setProposalName(rset.getString(9));
				proposalDTO.setProposalId(rset.getString(10));
				proposalDTO.setNoOfHabs(rset.getString(11));
				proposalDTO.setProgrammeCode(rset.getString(12));
				proposalDTO.setSubprogrammeCode(rset.getString(13));
				proposalDTO.setPriorityCode(rset.getString(14));
				proposalDTO.setTypeOfAsset(rset.getString(15));
				proposalDTO.setEstimateCost(rset.getString(16));
				proposalDTO.setRemarks(rset.getString(17));
				proposalDTO.setDescription(rset.getString(18));
				proposalDTO.setLeadHabitation(rset.getString(19));
				proposalDTO.setMinisterFor(rset.getString(20));
				proposalDTO.setOthers(rset.getString(21));
				proposalDTO.setConstituencyCode(rset.getString(22));
				
			}
		}
		catch(Exception e)
		{	Debug.writeln("Exception in getRepEditData :\n" + e);			
		}
		finally
		{	if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){
				}
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){
				}
			}
		}
		return proposalDTO;

	}
	
	public ArrayList getProposalYears() 
	{
		ArrayList years = new ArrayList();
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;
		LabelValueBean labelValueBean = null;
		try
		{
			query = " SELECT DISTINCT SUBSTR(proposal_id, 3, 4) FROM "
				  + " rws_work_proposal_tbl ";
			
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			rset = stat.executeQuery(query);
			String year = null;
			while(rset.next())
			{
				labelValueBean = new LabelValueBean();
				year = rset.getString(1);
				labelValueBean.setValue(year);
				labelValueBean.setLabel(year);
				years.add(labelValueBean);
			}
			
		}
		catch(Exception e)
		{
			System.out.println("Exception in getProposalYears " + e);
		}
		finally
		{
			if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle)
				{	
				}
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle)
				{	
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle)
				{	
				}
			}
		}
		return years;
	}
	
	public ArrayList getOMProposalYears()
	{
		ArrayList years = new ArrayList();
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;
		LabelValueBean labelValueBean = null;
		try
		{
			query = " SELECT DISTINCT SUBSTR(om_proposal_id, 3, 4) FROM "
				  + " rws_om_proposal_tbl ";
			
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			rset = stat.executeQuery(query);
			String year = null;
			while(rset.next())
			{
				labelValueBean = new LabelValueBean();
				year = rset.getString(1);
				labelValueBean.setValue(year);
				labelValueBean.setLabel(year);
				years.add(labelValueBean);
			}
			
		}
		catch(Exception e)
		{
			System.out.println("Exception in getProposalYears " + e);
		}
		finally
		{
			if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle)
				{	
				}
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle)
				{	
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle)
				{	
				}
			}
		}
		return years;
	}
	
	public ProposalDTO getSanctionDetails(String proposalId, String type)
	{
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;
		
		if(type != null && type.equals("new"))
		{
			query = " SELECT WP.proposal_id, WP.no_of_habs, UPPER(C.constituency_name), " 
				  + " UPPER(R.rep_name), UPPER(RP.rep_name),  "
				  + " NVL(RP.rep_address,''), TO_CHAR(RP.rep_date,'dd/mm/yyyy'), "
				  + " NVL(RP.endorsed_by,''), NVL(RP.minister_for,''),"
				  + " NVL(RP.others,''), NVL(RP.endorsement_no,''),"
				  + " NVL(TO_CHAR(RP.endorsement_date,'dd/mm/yyyy'),''),"
				  + " NVL(RP.recommendations,''), NVL(PR.priority_description,''),"
				  + " NVL(RP.description,''), WP.estimate_cost,"
				  + " NVL(WP.admin_sanc_auth, ''), "
				  + " NVL(DECODE(WP.state_central,'S','STATE','C', 'CENTRE'),'') "
				  + " FROM rws_rep_proposal_tbl RP, rws_work_proposal_tbl WP, "
				  + " rws_public_rep_tbl R, rws_priority_tbl PR, "
				  + " rws_constituency_tbl C "
				  + " WHERE RP.proposal_id = WP.proposal_id AND " 
				  +	" WP.proposal_id='" + proposalId + "' AND (RP.rep_code = R.rep_code) "
				  + " AND WP.priority_code = PR.priority_code (+) "
				  + " AND (substr(RP.lead_hab_code,3,3) = C.constituency_code AND C.rep_code='01')";
		}
		else
		if(type != null && type.equals("om"))
		{
			query = " SELECT om_proposal_id, asset_code, financial_year, "
				  + " estimate_cost, admn_sanc_auth,  "
				  + " DECODE(state_central,'S','STATE', 'C', 'CENTRE') "
				  + " FROM rws_om_proposal_tbl WHERE "
				  + " om_proposal_id = '" + proposalId + "'";
		}

		try
		{
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			rset = stat.executeQuery(query);
			
			while(rset.next())
			{
				proposalDTO = new ProposalDTO();
				
				if(type.equals("new"))
				{
					proposalDTO.setProposalId(rset.getString(1));
					proposalDTO.setNoOfHabs(rset.getString(2));
					proposalDTO.setConstituencyName(rset.getString(3));
					proposalDTO.setRepCode(rset.getString(4));
					proposalDTO.setRepName(rset.getString(5));
					proposalDTO.setRepAddress(rset.getString(6));
					proposalDTO.setRepDate(rset.getString(7));
					proposalDTO.setEndorsedBy(rset.getString(8));
					proposalDTO.setMinisterFor(rset.getString(9));
					proposalDTO.setOthers(rset.getString(10));
					proposalDTO.setEndorsementNo(rset.getString(11));
					proposalDTO.setEndorsementDate(rset.getString(12));
					proposalDTO.setRecommendations(rset.getString(13));
					proposalDTO.setPriorityCode(rset.getString(14));
					proposalDTO.setDescription(rset.getString(15));
					proposalDTO.setEstimateCost(rset.getString(16));
					proposalDTO.setSanctioningAuthority(rset.getString(17));
					proposalDTO.setSanctionedAt(rset.getString(18));
				}
				else
				if(type.equals("om"))
				{
					proposalDTO.setProposalId(rset.getString(1));
					proposalDTO.setAssetCode(rset.getString(2));
					proposalDTO.setFinancialYear(rset.getString(3));
					proposalDTO.setEstimateCost(rset.getString(4));
					proposalDTO.setSanctioningAuthority(rset.getString(5));
					proposalDTO.setSanctionedAt(rset.getString(6));
				}
			}
		}
		catch(Exception e)
		{	Debug.writeln("Exception in getSanctionDetails :\n" + e);			
		}
		finally
		{
			if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle)
				{	
				}
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle)
				{	
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle)
				{	
				}
			}
		}
		return proposalDTO;
	}
	
	public String insertProgramme(String others) 
	{
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;
		String programmeCode = "";
		query = " SELECT MAX(programme_code) FROM rws_programme_tbl ";
		try
		{
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			rset = stat.executeQuery(query);
			
			if(rset.next())
			{
				programmeCode = rset.getString(1);
				int sno = Integer.parseInt(programmeCode);
				System.out.println("SNo is " + sno);
				if(sno < 10)
					programmeCode = "0"+(sno+1);
				else
				if(sno < 100)
					programmeCode = String.valueOf(sno++);	
			}
			System.out.println("Programme Code " + programmeCode);
			
			query = " INSERT INTO rws_programme_tbl(programme_code, programme_name, "
				  + " programme_start_year, fresh_ongoing) VALUES("
				  + " '" + programmeCode + "', '" + others + "', '2005-2006','F')";
			int ans = stat.executeUpdate(query);
						
		}
		catch(Exception e)
		{	Debug.writeln("Exception in insertProgramme :\n" + e);			
		}
		finally
		{
			if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle)
				{	
				}
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle)
				{	
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle)
				{	
				}
			}
		}
		return programmeCode;
	}
	
	
	public ArrayList getTempSelectedHabs()
	{
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;
		ArrayList tempSelectedHabs = new ArrayList();
		try
		{
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			String query = " SELECT T.proposal_id, P.panch_code, P.panch_name, D.coverage_status, " 
						 + " (D.census_plain_popu+D.census_sc_popu+D.census_st_popu) "
				         + " FROM rws_temp_proposal_hab_tbl T, rws_panchayat_raj_tbl P, " 
				         + " rws_habitation_directory_tbl D "
						 + " WHERE D.hab_code = T.hab_code AND P.panch_code = D.hab_code "
						 + " ORDER BY T.proposal_id ";
						 
			
			rset = stat.executeQuery(query);
			RwsLocationBean rwsLocationBean = null; 
			while(rset.next())
			{
				rwsLocationBean = new RwsLocationBean();
				rwsLocationBean.setProposalId(rset.getString(1));
				rwsLocationBean.setHabCode(rset.getString(2));
				rwsLocationBean.setHabName(rset.getString(3));
				rwsLocationBean.setStatus(rset.getString(4));
				rwsLocationBean.setPopulation(rset.getString(5));
				tempSelectedHabs.add(rwsLocationBean);
			}
		}
		catch(Exception e)
		{	System.out.println("Exception in getTempSelectedHabs() : " + e);
			
		}
		finally
		{
			if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle)
				{	
				}
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle)
				{	
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle)
				{	
				}
			}
		}
		return tempSelectedHabs;
	}
	
	
	public ArrayList getTempSelectedHabs(String proposalId)
	{
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;
		ArrayList tempSelectedHabs = new ArrayList();
		try
		{
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			String query = " SELECT T.proposal_id, P.panch_code, P.panch_name, D.coverage_status, " 
						 + " (D.census_plain_popu+D.census_sc_popu+D.census_st_popu) "
				         + " FROM rws_temp_proposal_hab_tbl T, rws_panchayat_raj_tbl P, " 
				         + " rws_habitation_directory_tbl D "
						 + " WHERE D.hab_code = T.hab_code AND P.panch_code = D.hab_code "
						 + " AND T.proposal_id = '" + proposalId + "'";
						 						 
			rset = stat.executeQuery(query);
			RwsLocationBean rwsLocationBean = null; 
			while(rset.next())
			{
				rwsLocationBean = new RwsLocationBean();
				rwsLocationBean.setProposalId(rset.getString(1));
				rwsLocationBean.setHabCode(rset.getString(2));
				rwsLocationBean.setHabName(rset.getString(3));
				rwsLocationBean.setStatus(rset.getString(4));
				rwsLocationBean.setPopulation(rset.getString(5));
				tempSelectedHabs.add(rwsLocationBean);
			}
		}
		catch(Exception e)
		{	System.out.println("Exception in getTempSelectedHabs() : " + e);
			
		}
		finally
		{
			if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle)
				{	
				}
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle)
				{	
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle)
				{	
				}
			}
		}
		return tempSelectedHabs;
	}
	
	public int deleteTempSelectedHabs()
	{
		Connection conn = null;
		Statement stat = null;
		int updateCount = 0;		
		try
		{
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			String query = " DELETE FROM rws_temp_proposal_hab_tbl "; 
			updateCount = stat.executeUpdate(query);
			RwsLocationBean rwsLocationBean = null; 
		}
		catch(Exception e)
		{	System.out.println("Exception in deleteTempSelectedHabs() : " + e);
		}
		finally
		{
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle)
				{	
				}
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle)
				{	
				}
			}
		}
		return updateCount;
	}
	
	public boolean insertOMProposalTempHabs(String assetCode, String[] habCodes)
	{
		System.out.println("insertOMProposalTempHabs() called.");
		Connection conn = null;
		Statement stat = null;
		int updateCounts[];
		
		try
		{
			conn = dataSource.getConnection();
			conn.setAutoCommit(false);
			stat = conn.createStatement();
			query = " DELETE FROM rws_temp_om_proposal_hab_tbl WHERE asset_code='" + assetCode + "'";
			stat.addBatch(query);
			for(int i=0; i<habCodes.length; i++)
			{
				query = " INSERT INTO rws_temp_om_proposal_hab_tbl VALUES('"+assetCode + "','"+habCodes[i]+"')";
				stat.addBatch(query);
			}
			updateCounts = stat.executeBatch();
			flag = true;			
			for(int i=0; i<updateCounts.length; i++)
			{
				if(updateCounts[i] < 0)
					flag = false;
			}
			
			if(flag)
				conn.commit();
			conn.setAutoCommit(true);
			
		}
		catch(Exception e)
		{	Debug.writeln("Exception in insertOMProposalTempHabs :\n" + e);
			flag = false;
		}
		finally
		{
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){ }
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){ }
			}
		}

		return flag;
	}
	
	public int deleteOMTempProposalHabs()
	{
		int updateCount = 0;
		Connection conn = null;
		Statement stat = null;
		try
		{
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			query = " DELETE FROM rws_temp_om_proposal_hab_tbl ";
			updateCount = stat.executeUpdate(query);
		}
		catch(Exception e)
		{	Debug.writeln("Exception in insertOMProposalTempHabs :\n" + e);
		}
		finally
		{
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){ }
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){ }
			}
		}
		return updateCount;
	}
	
	
	public ArrayList showFunctionalHabs(String assetCode)
	{
		System.out.println("showFunctionalHabs() called.");
		System.out.println("Asset Code : " + assetCode);
		
		ArrayList functionalHabs = new ArrayList();
		Connection conn = null;
		Statement stat = null;
		ResultSet rset = null;
		try
		{
			conn = dataSource.getConnection();
			stat = conn.createStatement();
			query = " SELECT P.panch_code, P.panch_name,"
				  + " (H.census_plain_popu + H.census_st_popu + H.census_st_popu), H.coverage_status"
				  + " FROM rws_temp_om_proposal_hab_tbl O, rws_panchayat_raj_tbl P, " 
				  + " rws_habitation_directory_tbl H WHERE O.hab_code = P.panch_code " 
				  + " AND O.hab_code = H.hab_code " 
				  + " AND asset_code = '" + assetCode + "'";
			
			rset = 	stat.executeQuery(query);
			RwsLocationBean rwsLocationBean = null;   
			while(rset.next())
			{
				rwsLocationBean = new RwsLocationBean();
				rwsLocationBean.setHabCode(rset.getString(1));
				rwsLocationBean.setHabName(rset.getString(2));
				rwsLocationBean.setPopulation(rset.getString(3));
				rwsLocationBean.setStatus(rset.getString(4));
				functionalHabs.add(rwsLocationBean);
			}
			if(functionalHabs.size() == 0)
			{
				System.out.println("In FFF");
				query = " SELECT PR.panch_code, PR.panch_name, "
					  + " (HD.census_plain_popu+HD.census_sc_popu+HD.census_st_popu), "
					  + " HD.coverage_status FROM rws_om_proposal_hab_lnk_tbl PH, "
					  + " rws_panchayat_raj_tbl PR, rws_habitation_directory_tbl HD "
					  + " WHERE PH.hab_code = PR.panch_code "
					  + " AND PH.hab_code = HD.hab_code "
					  + " AND SUBSTR(PH.om_proposal_id, 7, 20) = '" + assetCode + "'";
				rset = stat.executeQuery(query);
				
				while(rset.next())
				{
					rwsLocationBean = new RwsLocationBean();
					rwsLocationBean.setHabCode(rset.getString(1));
					rwsLocationBean.setHabName(rset.getString(2));
					rwsLocationBean.setPopulation(rset.getString(3));
					rwsLocationBean.setStatus(rset.getString(4));
					functionalHabs.add(rwsLocationBean);
				}
			}
			if(functionalHabs.size() == 0)
			{
				System.out.println("In GGG");
				query = " SELECT PR.panch_code, PR.panch_name, "
					  + " (HD.census_plain_popu+HD.census_sc_popu+HD.census_st_popu), "
					  + " HD.coverage_status FROM rws_asset_hab_tbl AH, "
					  + " rws_panchayat_raj_tbl PR, rws_habitation_directory_tbl HD "
					  + " WHERE AH.hab_code = PR.panch_code "
					  + " AND AH.hab_code = HD.hab_code "
					  + " AND AH.asset_code = '" + assetCode + "'";
				rset = stat.executeQuery(query);
				
				while(rset.next())
				{
					rwsLocationBean = new RwsLocationBean();
					rwsLocationBean.setHabCode(rset.getString(1));
					rwsLocationBean.setHabName(rset.getString(2));
					rwsLocationBean.setPopulation(rset.getString(3));
					rwsLocationBean.setStatus(rset.getString(4));
					functionalHabs.add(rwsLocationBean);
				}
			}
			
		}
		catch(Exception e)
		{	Debug.writeln("Exception in showFunctionalHabs :\n" + e);
		}
		finally
		{
			if(rset != null)
			{	try
				{	rset.close();
				}
				catch(SQLException sqle){ }
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){ }
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){ }
			}
		}
		return functionalHabs;
	}
	
	public boolean insertProposalTempHabs(String proposalId, String[] habCodes)
	{
		System.out.println("insertProposalTempHabs() called.");
		System.out.println("Proposal Id : " + proposalId);
		System.out.println("Hab Codes Length: " + habCodes.length);
		
		Connection conn = null;
		Statement stat = null;
		int[] updateCounts;
		try
		{
			conn = dataSource.getConnection();
			conn.setAutoCommit(false);
			stat = conn.createStatement();
			query = "DELETE FROM rws_temp_proposal_hab_tbl WHERE proposal_id='" + proposalId + "'";
			stat.addBatch(query);
			
			for(int i=0; i<habCodes.length; i++)
			{
				query = " INSERT INTO rws_temp_proposal_hab_tbl VALUES( "
					  + " '" + proposalId + "', '" + habCodes[i] + "')" ; 
				stat.addBatch(query);
			}
			flag = true;

			updateCounts = stat.executeBatch();
			
			for(int i=0; i<updateCounts.length; i++)
			{
				if(updateCounts[i] < 0)
					flag = false;
			}
			
			if(flag)
				conn.commit();
			conn.setAutoCommit(true);
			
		}
		catch(Exception e)
		{	System.out.println("Exception in insertProposalTempHabs : \n" + e);
			flag = false;
		}
		finally
		{
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){ }
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){ }
			}
		}

		return flag;
	}
	// Existing Sources
	
	
	
	public ArrayList getExistingSources(String officeCode)
	{
		System.out.println("getExisting sources is called.");
		System.out.println("office code="+officeCode);
		ArrayList existingSources=new ArrayList();
		Connection conn = null;
		Statement stat = null;
		ResultSet rset1=null;
		String query="";
		try{
	 	   
		  conn = dataSource.getConnection();
		  stat = conn.createStatement();
	 
		  query="select distinct s.source_code,s.source_name,p.panch_code,p.panch_name from rws_source_tbl s,rws_rep_proposal_tbl rp," +
		  		"rws_work_proposal_tbl wp,rws_panchayat_raj_tbl p where	rp.proposal_id=wp.proposal_id and wp.flag='A' and rp.flag='A' and rp.OFFICE_CODE='"+officeCode+"'" +
		  		"and s.hab_code=rp.LEAD_HAB_CODE and p.panch_code=rp.LEAD_HAB_CODE";
		  System.out.println("query="+query);
		  rset1=stat.executeQuery(query);
		  while(rset1.next())
		  {
		  	  ProposalDTO proposaldto=new ProposalDTO();
		  	  proposaldto.setSourceCode(rset1.getString(1));
		  	  proposaldto.setSourceName(rset1.getString(2));
		  	  proposaldto.setLeadHabitation(rset1.getString(3));
		  	  proposaldto.setHabName(rset1.getString(4)); 
		  	  existingSources.add(proposaldto);
		  }
		   
		 }
		 catch(Exception e)
		 {
			System.out.println("Error in getExisting Works:"+e.getMessage());
		 }
		 finally
		 {
			
			if(rset1 != null)
			{	try
				{	rset1.close();
				}
				catch(SQLException sqle){ }
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){ }
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){ }
			}
			
		}
          return existingSources;
   }	
	
	// Existing Work Details 
	public ArrayList getExistingWorks(String officeCode,int id)
	{
		System.out.println("getExisting works is called.");
		System.out.println("office code="+officeCode);
		ArrayList existingWorks=new ArrayList();
		Connection conn = null;
		Statement stat = null;
		ResultSet rset1=null;
		String query="";
		try{
	 	   
		  conn = dataSource.getConnection();
		  stat = conn.createStatement();
		  if(id==1)
		  {	
		  query="select wp.PROPOSAL_ID,wp.PROPOSAL_NAME,a.TYPE_OF_ASSET_NAME,UPPER(NVL(P.programme_name,'')),UPPER(NVL(S.subprogramme_name,'')),wp.WORK_ID,wp.ESTIMATE_COST,rp.REP_NAME,TO_CHAR(rp.PREPARED_ON,'dd/mm/yyyy') from "+
                                  " rws_work_proposal_tbl wp, rws_rep_proposal_tbl rp,rws_programme_tbl P,rws_subprogramme_tbl S, rws_asset_type_tbl A  where "+
                                  " RP.type_of_asset = A.type_of_asset_code(+) AND RP.programme_code = P.programme_code(+) and ( RP.subprogramme_code = S.subprogramme_code (+) AND RP.programme_code = S.programme_code(+)) and"+ 
                                  " wp.proposal_id=rp.proposal_id and wp.office_code=rp.office_code and wp.office_code='"+officeCode+"' and wp.flag=rp.flag and wp.flag!='A'";
		  System.out.println("query="+query);
		  rset1=stat.executeQuery(query);
		  while(rset1.next())
		  {
		  	  ProposalDTO proposaldto=new ProposalDTO();
		  	  proposaldto.setProposalId(rset1.getString(1));
		  	  proposaldto.setProposalName(rset1.getString(2));
		  	  proposaldto.setAssetName(rset1.getString(3));
		  	  proposaldto.setProgrammeName(rset1.getString(4));
		  	  proposaldto.setSubprogrammeName(rset1.getString(5));
		  	  proposaldto.setWorkId(rset1.getString(6));
		  	  proposaldto.setEstimateCost(rset1.getString(7));
		  	  proposaldto.setRepName(rset1.getString(8));
		  	  proposaldto.setProposalDate(rset1.getString(9));
		  	  existingWorks.add(proposaldto);
		  }
		 }
		 else if(id==2)
		  {	
		  query=" select wp.PROPOSAL_ID,wp.PROPOSAL_NAME,a.TYPE_OF_ASSET_NAME,UPPER(NVL(P.programme_name,'')),UPPER(NVL(S.subprogramme_name,'')),wp.WORK_ID,wp.ESTIMATE_COST,TO_CHAR(wp.ADMIN_DATE,'dd/mm/yyyy') ,wp.ADMIN_SANC_AUTH,wp.SANCTION_AMOUNT from"+
                " rws_work_proposal_tbl wp, rws_rep_proposal_tbl rp,rws_programme_tbl P,rws_subprogramme_tbl S, rws_asset_type_tbl A  where "+
                " RP.type_of_asset = A.type_of_asset_code(+) AND RP.programme_code = P.programme_code(+) and ( RP.subprogramme_code = S.subprogramme_code (+) AND RP.programme_code = S.programme_code(+)) and "+ 
                " wp.proposal_id=rp.proposal_id and wp.office_code=rp.office_code and wp.office_code='"+officeCode+"' and wp.flag=rp.flag and wp.flag='A'"; 
		  System.out.println("query="+query);
		  rset1=stat.executeQuery(query);
		  while(rset1.next())
		  {
		  	  ProposalDTO proposaldto=new ProposalDTO();
		  	  proposaldto.setProposalId(rset1.getString(1));
		  	  proposaldto.setProposalName(rset1.getString(2));
		  	  proposaldto.setAssetName(rset1.getString(3));
		  	  proposaldto.setProgrammeName(rset1.getString(4));
		  	  proposaldto.setSubprogrammeName(rset1.getString(5));
		  	  proposaldto.setWorkId(rset1.getString(6));
		  	  proposaldto.setEstimateCost(rset1.getString(7));
		  	  proposaldto.setAdminDate(rset1.getString(8));
		  	  proposaldto.setSanctioningAuthority(rset1.getString(9));
		  	  proposaldto.setSanctionedAmount(rset1.getString(10));
		  	  existingWorks.add(proposaldto);
		  }
		 }
		 else if(id==3)
		  {	
		  query=" select distinct  wp.proposal_id,wp.proposal_name,a.TYPE_OF_ASSET_NAME,UPPER(NVL(P.programme_name,'')),UPPER(NVL(S.subprogramme_name,'')),ts.work_id,ts.ESTIMATE_AMOUNT ,"+
		  	    " ts.TS_AMOUNT,TO_CHAR(ts.TS_DATE,'dd/mm/yyyy')  from  rws_work_proposal_tbl wp,rws_new_est_tbl ts,rws_new_est_workflow_tbl tsw,rws_programme_tbl P,rws_subprogramme_tbl S," +
		  	    " rws_asset_type_tbl A  where wp.type_of_asset = A.type_of_asset_code(+) AND wp.programme_code = P.programme_code(+) and ( wp.subprogramme_code = S.subprogramme_code (+) AND wp.programme_code = S.programme_code(+)) " +
		  	    " and wp.work_id=ts.work_id and wp.work_id=tsw.work_id and tsw.FLAG ='Y' and ts.work_id=tsw.work_id and wp.work_id=tsw.work_id and wp.office_code='"+officeCode+"' and ts.office_code='"+officeCode+"' and wp.office_code=ts.office_code";
 
		  System.out.println("query="+query);
		  rset1=stat.executeQuery(query);
		  while(rset1.next())
		  {
		  	  ProposalDTO proposaldto=new ProposalDTO();
		  	  proposaldto.setProposalId(rset1.getString(1));
		  	  proposaldto.setProposalName(rset1.getString(2));
		  	  proposaldto.setAssetName(rset1.getString(3));
		  	  proposaldto.setProgrammeName(rset1.getString(4));
		  	  proposaldto.setSubprogrammeName(rset1.getString(5));
		  	  proposaldto.setWorkId(rset1.getString(6));
		  	  proposaldto.setEstimateCost(rset1.getString(7));
		  	  proposaldto.setSanctionedAmount(rset1.getString(8));
		  	  proposaldto.setAdminDate(rset1.getString(9));
		  	  existingWorks.add(proposaldto);
		  }
		 }
		 else if(id==4)
		  {	
		   System.out.println("circle="+officeCode.substring(1,3)+"division="+officeCode.substring(3,4)+"subdivi="+officeCode.substring(4,6));
		   query="select  a.asset_code,a.asset_name,pr.panch_name,a.location,a.asset_status,a.asset_cost,a.start_year,a.end_year from " +
		  		"rws_asset_mast_tbl a,rws_rep_proposal_tbl rp, rws_work_proposal_tbl wp,RWS_PANCHAYAT_RAJ_TBL  pr  where  a.asset_code=wp.work_id and" +
		  		" rp.proposal_id=wp.proposal_id and a.hab_code=pr.panch_code and a.circle_office_code='"+officeCode.substring(1,3)+"' and a.division_office_code='"+officeCode.substring(3,4)+"' and a.SUBDIVISION_OFFICE_CODE='"+officeCode.substring(4,6)+"' and wp.office_code='"+officeCode+"'";   

		   System.out.println("query="+query);
		   rset1=stat.executeQuery(query);
		   while(rset1.next())
		   {
		  	  ProposalDTO proposaldto=new ProposalDTO();
		  	  proposaldto.setAssetCode(rset1.getString(1));
		  	  proposaldto.setAssetName(rset1.getString(2));
		  	  proposaldto.setLeadHabitation(rset1.getString(3));
		  	  proposaldto.setLocation(rset1.getString(4));
		  	  proposaldto.setAssetStatus(rset1.getString(rset1.getString(5)));
		  	  proposaldto.setAssetCost(rset1.getString(6));
		  	  proposaldto.setStartYear(rset1.getString(7));
		  	  proposaldto.setEndYear(rset1.getString(8));
		   	  existingWorks.add(proposaldto);
		   }
		  }
		 }
		 catch(Exception e)
		 {
			System.out.println("Error in getExisting Works:"+e.getMessage());
		 }
		 finally
		 {
			
			if(rset1 != null)
			{	try
				{	rset1.close();
				}
				catch(SQLException sqle){ }
			}
			if(stat != null)
			{	try
				{	stat.close();
				}
				catch(SQLException sqle){ }
			}
			if(conn != null)
			{	try
				{	conn.close();
				}
				catch(SQLException sqle){ }
			}
			
		}
          return existingWorks;
   }	
	
//------------------- End Of ProposalDAO class ------------------------
}